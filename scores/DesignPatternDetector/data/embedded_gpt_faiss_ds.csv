Code Example,Language,Design Pattern,Source,Unnamed: 4,embedding
"from __future__ import annotations
from abc import ABC, abstractmethod


class AbstractFactory(ABC):
    """"""
    The Abstract Factory interface declares a set of methods that return
    different abstract products. These products are called a family and are
    related by a high-level theme or concept. Products of one family are usually
    able to collaborate among themselves. A family of products may have several
    variants, but the products of one variant are incompatible with products of
    another.
    """"""
    @abstractmethod
    def create_product_a(self) -> AbstractProductA:
        pass

    @abstractmethod
    def create_product_b(self) -> AbstractProductB:
        pass


class ConcreteFactory1(AbstractFactory):
    """"""
    Concrete Factories produce a family of products that belong to a single
    variant. The factory guarantees that resulting products are compatible. Note
    that signatures of the Concrete Factory's methods return an abstract
    product, while inside the method a concrete product is instantiated.
    """"""

    def create_product_a(self) -> AbstractProductA:
        return ConcreteProductA1()

    def create_product_b(self) -> AbstractProductB:
        return ConcreteProductB1()


class ConcreteFactory2(AbstractFactory):
    """"""
    Each Concrete Factory has a corresponding product variant.
    """"""

    def create_product_a(self) -> AbstractProductA:
        return ConcreteProductA2()

    def create_product_b(self) -> AbstractProductB:
        return ConcreteProductB2()


class AbstractProductA(ABC):
    """"""
    Each distinct product of a product family should have a base interface. All
    variants of the product must implement this interface.
    """"""

    @abstractmethod
    def useful_function_a(self) -> str:
        pass


""""""
Concrete Products are created by corresponding Concrete Factories.
""""""


class ConcreteProductA1(AbstractProductA):
    def useful_function_a(self) -> str:
        return ""The result of the product A1.""


class ConcreteProductA2(AbstractProductA):
    def useful_function_a(self) -> str:
        return ""The result of the product A2.""


class AbstractProductB(ABC):
    """"""
    Here's the the base interface of another product. All products can interact
    with each other, but proper interaction is possible only between products of
    the same concrete variant.
    """"""
    @abstractmethod
    def useful_function_b(self) -> None:
        """"""
        Product B is able to do its own thing...
        """"""
        pass

    @abstractmethod
    def another_useful_function_b(self, collaborator: AbstractProductA) -> None:
        """"""
        ...but it also can collaborate with the ProductA.

        The Abstract Factory makes sure that all products it creates are of the
        same variant and thus, compatible.
        """"""
        pass


""""""
Concrete Products are created by corresponding Concrete Factories.
""""""


class ConcreteProductB1(AbstractProductB):
    def useful_function_b(self) -> str:
        return ""The result of the product B1.""

    """"""
    The variant, Product B1, is only able to work correctly with the variant,
    Product A1. Nevertheless, it accepts any instance of AbstractProductA as an
    argument.
    """"""

    def another_useful_function_b(self, collaborator: AbstractProductA) -> str:
        result = collaborator.useful_function_a()
        return f""The result of the B1 collaborating with the ({result})""


class ConcreteProductB2(AbstractProductB):
    def useful_function_b(self) -> str:
        return ""The result of the product B2.""

    def another_useful_function_b(self, collaborator: AbstractProductA):
        """"""
        The variant, Product B2, is only able to work correctly with the
        variant, Product A2. Nevertheless, it accepts any instance of
        AbstractProductA as an argument.
        """"""
        result = collaborator.useful_function_a()
        return f""The result of the B2 collaborating with the ({result})""


def client_code(factory: AbstractFactory) -> None:
    """"""
    The client code works with factories and products only through abstract
    types: AbstractFactory and AbstractProduct. This lets you pass any factory
    or product subclass to the client code without breaking it.
    """"""
    product_a = factory.create_product_a()
    product_b = factory.create_product_b()

    print(f""{product_b.useful_function_b()}"")
    print(f""{product_b.another_useful_function_b(product_a)}"", end="""")


if __name__ == ""__main__"":
    """"""
    The client code can work with any concrete factory class.
    """"""
    print(""Client: Testing client code with the first factory type:"")
    client_code(ConcreteFactory1())

    print(""\n"")

    print(""Client: Testing the same client code with the second factory type:"")
    client_code(ConcreteFactory2())",Python,Abstract Factory,Refactoring Guru,https://refactoring.guru/design-patterns/abstract-factory/python/example#example-0,"[-8.12086463e-02 -1.19113578e-02 -4.35887137e-03 -6.34090006e-02
 -5.11052497e-02  2.69974060e-02  3.58187258e-02  4.46031578e-02
 -1.13768503e-01 -1.10316202e-01  3.95908654e-02 -4.75820936e-02
  5.21940589e-02  3.22962669e-03  9.40660983e-02  8.12953338e-02
  4.97069098e-02 -6.08754624e-03 -5.71513772e-02  2.66057067e-02
  5.23026362e-02 -1.42918795e-03 -1.08877402e-02  5.64319901e-02
 -8.22893381e-02 -1.87447965e-02 -1.77723654e-02 -1.60387978e-02
  7.00669969e-03 -2.30979510e-02  3.25272828e-02  1.38074785e-01
 -5.69900461e-02  2.83378605e-02  1.39823416e-02  5.85158952e-02
  7.25509552e-03 -2.25565024e-02  2.93083712e-02 -3.29064429e-02
  3.72454943e-03 -7.70689640e-03 -8.05637464e-02 -1.48506593e-02
  2.39983723e-02  2.90123988e-02  2.02166401e-02  2.01377459e-02
  2.16661617e-02 -8.84028822e-02 -6.12749271e-02  6.07528947e-02
 -6.26171902e-02 -8.39849189e-03  1.82880685e-02 -3.36334035e-02
  4.25795726e-02  4.81334142e-02 -2.91234143e-02 -6.59437804e-03
 -7.77766481e-03 -1.28010716e-02  2.63480227e-02 -4.55248803e-02
  1.65490564e-02  1.79789606e-02 -5.10463044e-02 -7.10197259e-03
 -4.26752232e-02  6.54269606e-02 -3.51056606e-02 -2.87285098e-03
 -8.58081728e-02  2.45501511e-02 -1.95412766e-02  4.50157598e-02
  3.52957882e-02  3.35742719e-02 -5.18161468e-02 -1.14307448e-01
 -4.38783169e-02  6.97244480e-02 -2.33754534e-02 -1.13301491e-02
  3.89182940e-02 -5.58699667e-03  2.54963823e-02 -2.78225280e-02
  3.25503685e-02  9.16479751e-02 -7.62464404e-02 -4.67145331e-02
 -4.01380397e-02 -2.57522869e-03 -8.76638852e-03 -1.27977403e-02
  2.45148204e-02 -5.87463602e-02  4.15241048e-02  7.97101930e-02
 -7.83535168e-02  3.17885540e-02  3.86774689e-02 -5.73530570e-02
  2.84505985e-03  8.99013057e-02 -1.11352086e-01 -8.16934481e-02
  5.96915334e-02 -9.38158575e-03 -4.64756563e-02 -5.82619831e-02
 -4.86871675e-02  8.16191174e-03 -4.90941927e-02  2.44644899e-02
  3.51306908e-02 -2.68946886e-02 -5.49755571e-03  3.63030992e-02
  6.48327768e-02  7.18163233e-03  1.01272076e-01  1.88029874e-02
 -2.11706497e-02 -6.35734899e-03 -3.41737233e-02  2.72551406e-33
 -4.69475463e-02 -5.78459427e-02 -7.86092207e-02  9.92086530e-02
  6.93999976e-03  2.39103604e-02  6.98386133e-02  5.84085025e-02
 -6.21549934e-02 -4.51966785e-02 -2.03919616e-02  4.05133627e-02
 -3.41075063e-02  2.81824674e-02  8.93885717e-02  4.22724895e-02
 -1.41507247e-02 -1.06462212e-02  3.56976725e-02 -1.78411491e-02
  3.00826784e-02  9.08468142e-02 -2.68396456e-02  2.99507845e-02
 -1.43191731e-02  2.63517480e-02  6.10451736e-02 -4.56449809e-03
 -4.91934419e-02 -7.30971433e-03 -3.37510370e-02 -1.00560999e-02
  5.74399494e-02  1.60777196e-02 -6.60058632e-02 -2.56464574e-02
 -2.68846732e-02 -5.98805510e-02 -2.54371595e-02 -8.31623748e-02
 -2.15561725e-02  1.34578217e-02  7.58959260e-03  5.88705316e-02
  5.87897971e-02 -8.65311101e-02 -6.88709617e-02  8.34576637e-02
  2.57797204e-02 -3.54690254e-02 -2.26119366e-02  3.27371061e-02
  8.99580047e-02 -4.57197092e-02 -1.97730139e-02 -6.47582784e-02
 -1.22818183e-02  4.89429608e-02  1.74755827e-02  2.87248828e-02
 -7.34482780e-02  1.07440673e-01 -5.35647906e-02  9.90122780e-02
 -1.00675322e-01  7.72564635e-02 -1.21101746e-02 -8.29936471e-04
  9.20575261e-02  3.70292030e-02  2.98009701e-02  4.05361280e-02
 -5.73667102e-02 -1.68338586e-02 -4.56170971e-03 -1.20150391e-02
 -1.38226794e-02 -7.92495087e-02  5.14725503e-03 -2.74825376e-02
 -2.23671496e-02  6.20450266e-02 -2.42318795e-03  5.41490465e-02
 -1.37948260e-01  1.68070139e-03  2.39030533e-02  1.64162852e-02
 -1.30784977e-02 -1.02597857e-02 -6.42670244e-02 -1.95462387e-02
  3.60391987e-03 -3.12164444e-02  8.68031830e-02 -5.16495026e-33
  4.68632877e-02  2.28927936e-02  3.10460646e-02 -5.76021266e-04
  6.09274441e-03 -3.14823873e-02  5.83731453e-04 -7.15834498e-02
 -1.00067429e-01  9.73647088e-02 -7.31734633e-02 -5.79406954e-02
  7.89549649e-02 -3.98868173e-02 -1.06337992e-02 -2.15831101e-02
 -6.76731095e-02 -5.84725440e-02  3.73890367e-03  2.88839806e-02
 -1.68727487e-02  8.57714191e-02  1.74279569e-03 -1.44256894e-02
 -1.62893571e-02  1.21345213e-02 -7.73661658e-02  1.28556564e-01
  7.02126995e-02 -1.90741923e-02 -1.12515199e-03 -3.49735916e-02
 -3.33669856e-02 -1.48462001e-02  5.78307398e-02 -3.98749746e-02
  5.62746171e-03 -1.92349739e-02  1.54423118e-02 -7.28600100e-02
  6.37710467e-02  7.72325182e-03 -7.35741332e-02  4.53417748e-02
 -2.37210235e-03 -4.48623262e-02 -2.74882745e-02 -7.70440623e-02
  3.61590497e-02 -2.96066552e-02  1.61670484e-02  4.46229018e-02
 -3.07869855e-02 -3.85352112e-02 -1.23200133e-01  1.13711981e-02
  9.74458009e-02 -3.70733477e-02 -5.94713502e-02  3.26130278e-02
  7.18812793e-02 -3.76544446e-02  7.47993588e-02  6.22749813e-02
  1.85476970e-02 -6.83252141e-02  8.57017562e-03 -4.62825187e-02
  5.05679995e-02  1.45924697e-02 -4.29340731e-03  8.58924165e-02
  4.91955690e-03 -2.27323882e-02  3.41498666e-02  9.36471745e-02
 -2.41978765e-02  4.58519198e-02  3.17070037e-02 -3.59082073e-02
 -5.79080135e-02 -8.16456974e-02  6.28950223e-02  8.40530172e-02
 -5.09499647e-02 -7.43702576e-02  1.57028753e-02  7.15112388e-02
 -6.55128574e-03 -1.39802396e-02  3.04583274e-02  2.94372067e-02
 -4.72522676e-02  7.06152841e-02 -1.70052028e-03 -5.09397289e-08
 -1.21855168e-02 -5.09675704e-02  2.19330303e-02  6.51652366e-02
 -3.48082036e-02 -4.79395613e-02 -6.10561557e-02 -1.16544380e-03
 -4.21254849e-03 -1.80542618e-02 -7.87522271e-02  4.45772745e-02
 -4.20828983e-02  2.63243373e-02  2.37473249e-02  1.34171499e-03
 -4.87309555e-03 -2.83082575e-02 -6.14253357e-02  1.97742637e-02
  7.68106710e-03 -3.93121988e-02  1.64472256e-02 -1.43923238e-03
 -1.25048101e-01 -7.19350427e-02  1.56568978e-02  6.48526177e-02
 -3.63262789e-03  1.58628728e-02  5.00068106e-02 -2.80836131e-02
 -4.38917615e-02  4.14444357e-02  2.23896690e-02 -4.18449473e-03
  3.78990583e-02  1.99336782e-02 -3.93579975e-02  6.35305494e-02
  5.18958084e-03 -4.75785360e-02 -1.28123313e-01  1.68570485e-02
  1.10601604e-01 -7.23562017e-02 -3.92243601e-02 -1.03385650e-01
  8.60577915e-03  1.50296077e-01 -1.64224077e-02  2.87643671e-02
 -3.03616822e-02 -3.64945382e-02 -6.08540252e-02  4.46574315e-02
 -2.31932895e-03 -7.42797256e-02  1.58205144e-02 -4.44169156e-02
 -1.35738794e-02  5.38029708e-02  1.36287034e-01  5.18418066e-02]"
"from __future__ import annotations
from abc import ABC, abstractmethod
from typing import Any


class Builder(ABC):
    """"""
    The Builder interface specifies methods for creating the different parts of
    the Product objects.
    """"""

    @property
    @abstractmethod
    def product(self) -> None:
        pass

    @abstractmethod
    def produce_part_a(self) -> None:
        pass

    @abstractmethod
    def produce_part_b(self) -> None:
        pass

    @abstractmethod
    def produce_part_c(self) -> None:
        pass


class ConcreteBuilder1(Builder):
    """"""
    The Concrete Builder classes follow the Builder interface and provide
    specific implementations of the building steps. Your program may have
    several variations of Builders, implemented differently.
    """"""

    def __init__(self) -> None:
        """"""
        A fresh builder instance should contain a blank product object, which is
        used in further assembly.
        """"""
        self.reset()

    def reset(self) -> None:
        self._product = Product1()

    @property
    def product(self) -> Product1:
        """"""
        Concrete Builders are supposed to provide their own methods for
        retrieving results. That's because various types of builders may create
        entirely different products that don't follow the same interface.
        Therefore, such methods cannot be declared in the base Builder interface
        (at least in a statically typed programming language).

        Usually, after returning the end result to the client, a builder
        instance is expected to be ready to start producing another product.
        That's why it's a usual practice to call the reset method at the end of
        the `getProduct` method body. However, this behavior is not mandatory,
        and you can make your builders wait for an explicit reset call from the
        client code before disposing of the previous result.
        """"""
        product = self._product
        self.reset()
        return product

    def produce_part_a(self) -> None:
        self._product.add(""PartA1"")

    def produce_part_b(self) -> None:
        self._product.add(""PartB1"")

    def produce_part_c(self) -> None:
        self._product.add(""PartC1"")


class Product1():
    """"""
    It makes sense to use the Builder pattern only when your products are quite
    complex and require extensive configuration.

    Unlike in other creational patterns, different concrete builders can produce
    unrelated products. In other words, results of various builders may not
    always follow the same interface.
    """"""

    def __init__(self) -> None:
        self.parts = []

    def add(self, part: Any) -> None:
        self.parts.append(part)

    def list_parts(self) -> None:
        print(f""Product parts: {', '.join(self.parts)}"", end="""")


class Director:
    """"""
    The Director is only responsible for executing the building steps in a
    particular sequence. It is helpful when producing products according to a
    specific order or configuration. Strictly speaking, the Director class is
    optional, since the client can control builders directly.
    """"""

    def __init__(self) -> None:
        self._builder = None

    @property
    def builder(self) -> Builder:
        return self._builder

    @builder.setter
    def builder(self, builder: Builder) -> None:
        """"""
        The Director works with any builder instance that the client code passes
        to it. This way, the client code may alter the final type of the newly
        assembled product.
        """"""
        self._builder = builder

    """"""
    The Director can construct several product variations using the same
    building steps.
    """"""

    def build_minimal_viable_product(self) -> None:
        self.builder.produce_part_a()

    def build_full_featured_product(self) -> None:
        self.builder.produce_part_a()
        self.builder.produce_part_b()
        self.builder.produce_part_c()


if __name__ == ""__main__"":
    """"""
    The client code creates a builder object, passes it to the director and then
    initiates the construction process. The end result is retrieved from the
    builder object.
    """"""

    director = Director()
    builder = ConcreteBuilder1()
    director.builder = builder

    print(""Standard basic product: "")
    director.build_minimal_viable_product()
    builder.product.list_parts()

    print(""\n"")

    print(""Standard full featured product: "")
    director.build_full_featured_product()
    builder.product.list_parts()

    print(""\n"")

    # Remember, the Builder pattern can be used without a Director class.
    print(""Custom product: "")
    builder.produce_part_a()
    builder.produce_part_b()
    builder.product.list_parts()",Python,Builder,Refactoring Guru,https://refactoring.guru/design-patterns/builder/python/example#example-0,"[-7.04680234e-02  4.22308296e-02  1.89918894e-02  2.44577993e-02
 -5.06421551e-02 -4.99724187e-02  2.32729111e-02  7.11975023e-02
 -1.17214814e-01 -8.44642296e-02  2.55018100e-02 -1.98658910e-02
  7.21240714e-02 -5.64390868e-02  4.28171307e-02  4.23581935e-02
  4.13736962e-02  1.64198447e-02 -4.82022353e-02 -1.51723791e-02
  4.18642759e-02  4.59306911e-02  6.56544864e-02  6.00224696e-02
 -1.85493752e-02 -6.38008565e-02 -1.32969078e-02 -1.82114709e-02
  4.82639149e-02 -3.29402834e-02  3.06456741e-02  1.17046535e-01
 -6.23273477e-03  5.61751351e-02  1.00089602e-01  5.18808030e-02
  6.03328720e-02 -7.89751019e-03 -5.37620783e-02 -2.65040882e-02
  3.00339423e-02 -2.70208120e-02 -1.24841183e-01 -1.05158379e-02
 -6.17478937e-02  5.01895100e-02 -2.86027063e-02 -2.15574950e-02
  5.33985384e-02 -9.58223119e-02 -6.40454069e-02  4.37265933e-02
 -9.70765129e-02 -5.92559129e-02  5.47416275e-03  1.95605624e-02
  7.77704194e-02  5.11144463e-04 -6.66252226e-02 -5.69954105e-02
  6.85035661e-02  2.14841980e-02 -3.89393680e-02 -4.60516065e-02
 -2.23511690e-03 -3.28020789e-02 -3.22315805e-02  4.07478176e-02
 -3.68268490e-02  2.33370550e-02  5.15083000e-02  2.04412062e-02
 -7.38675296e-02  4.08353470e-02  6.39011571e-03 -1.14285424e-02
  9.58944783e-02 -2.13633302e-06 -3.38348858e-02 -2.30953395e-02
 -1.03938907e-01 -1.49347764e-02 -3.39762196e-02  7.68791512e-03
  2.05523577e-02 -5.48570678e-02  5.14993556e-02  1.54738696e-02
  3.82797308e-02  5.28477654e-02 -4.41281311e-02 -4.67362627e-02
  3.31004173e-03  8.08394514e-03  4.39875002e-04  1.03399016e-01
  3.58021222e-02 -3.86675745e-02 -1.99126583e-02  5.22374175e-02
 -7.65232593e-02 -4.74038422e-02  5.04236296e-02 -4.29122113e-02
 -4.32425663e-02  4.72488999e-02 -5.86126260e-02 -5.24036810e-02
  4.67988364e-02 -3.13526839e-02 -4.20557521e-02 -9.66974646e-02
 -4.52876538e-02 -9.58616566e-03 -2.21977923e-02 -3.55834886e-02
 -8.48552864e-03  1.39165148e-02  1.79534778e-02  5.56104816e-02
  1.47726148e-01  2.59978771e-02  1.03040107e-01 -1.69543596e-03
 -5.74962348e-02 -1.61043666e-02 -3.57306451e-02 -7.56987322e-34
  1.70832463e-02 -2.57837959e-02 -2.04868447e-02  4.03013490e-02
 -1.73313580e-02  8.54372680e-02  7.69766122e-02  9.66420174e-02
 -3.18371095e-02 -1.22250905e-02 -2.78356597e-02 -8.16825312e-03
 -6.35447502e-02  6.44019693e-02  3.92978676e-02  1.01922303e-02
 -2.43633166e-02  3.60308364e-02  5.22546796e-03  7.80459680e-03
  2.72720587e-02  6.93857074e-02 -5.07385693e-02  2.70211529e-02
 -5.62853031e-02 -4.32315357e-02  1.03361346e-02  2.06323434e-03
 -1.17742047e-01  2.10847165e-02 -6.90536425e-02 -9.18370951e-03
  8.08882341e-02 -1.25120226e-02 -8.43701810e-02 -4.00618054e-02
 -5.49777970e-03 -2.10874304e-02 -2.79782657e-02 -7.26943985e-02
 -2.28556897e-02 -1.19504668e-02  1.30372616e-02 -5.65169752e-03
 -3.82595435e-02 -4.46205102e-02 -8.32165107e-02  9.78886336e-02
  2.73099262e-03  1.37052946e-02 -1.24506429e-02  2.26859860e-02
  8.57551098e-02 -2.01144479e-02 -7.84697309e-02 -2.76426934e-02
 -9.68534686e-03 -2.61163991e-02 -1.83702540e-03 -7.34570697e-02
 -4.42319885e-02  1.58261001e-01 -1.96228735e-02  7.77658224e-02
 -9.59959775e-02  9.31011960e-02  9.40383300e-02  1.70207508e-02
  6.30695820e-02  2.27234396e-03 -8.69482160e-02  3.53860185e-02
 -4.96600121e-02 -9.30824578e-02  5.13116457e-02 -3.80061828e-02
  2.12798081e-02 -9.80262384e-02 -4.99698445e-02 -2.51471996e-02
  4.79415897e-03  1.13821253e-01 -2.33254563e-02  5.25063388e-02
 -4.04370166e-02  2.02027746e-02  1.73338484e-02  5.15226871e-02
 -2.93310173e-02 -3.66994254e-02 -2.61093732e-02 -9.20671523e-02
 -1.04643591e-02 -4.02447442e-03  2.30146814e-02 -3.05839606e-33
  5.60824573e-02 -4.78040017e-02  4.63471264e-02 -8.89192000e-02
  2.77356897e-02 -6.45690411e-02  1.52917169e-02 -3.69965546e-02
 -2.97134984e-02  2.81955842e-02 -3.07753012e-02 -7.67465010e-02
  5.30229583e-02 -5.31194620e-02  1.47830490e-02  1.44561669e-02
 -4.44436111e-02 -2.55676713e-02  7.73844048e-02  1.04867816e-02
 -4.67901006e-02  3.72095481e-02 -2.91983085e-03 -2.94431392e-02
 -2.45069358e-02 -5.89421690e-02 -8.14854801e-02  6.58659339e-02
  1.03300683e-01 -1.90979708e-02  3.49237211e-02 -3.37855406e-02
 -5.35348691e-02  1.94712691e-02 -7.04887807e-02 -1.01680234e-02
 -3.81274633e-02 -3.10023744e-02  4.47882116e-02 -6.86776564e-02
  1.21497542e-01  1.65919568e-02  1.11355782e-02  7.97039568e-02
  2.78529394e-02 -9.54875797e-02  3.87553759e-02 -4.79511619e-02
 -9.73400078e-04 -1.68906581e-02  3.98866348e-02  1.42262143e-03
 -1.55479703e-02  2.01203898e-02 -5.35789765e-02  2.85888966e-02
  7.95872509e-02 -1.70703065e-02  1.33561119e-02  2.94411872e-02
 -1.68468356e-02  1.35545358e-02  4.01464589e-02  7.86643010e-03
 -9.55264829e-03 -2.06048768e-02 -5.02573773e-02 -1.62694696e-02
  3.02876420e-02 -8.29428956e-02  1.65776743e-04  8.54561776e-02
 -9.19012446e-03 -1.44809941e-02 -1.87945515e-02  1.10852942e-01
 -5.50512932e-02  7.23855197e-02  1.39108999e-02  3.19142491e-02
 -8.47713873e-02 -4.20782529e-02 -3.33344191e-03  3.25632505e-02
 -1.44606791e-02 -8.88407528e-02  2.07880400e-02  1.01843439e-01
  6.01286367e-02 -3.92073132e-02  7.82554690e-03  9.88088250e-02
  1.90692674e-02  1.02629386e-01  3.74393957e-03 -5.03263919e-08
 -2.40165684e-02 -2.60514580e-02  3.44267525e-02  2.58276500e-02
  2.94016656e-02 -3.37465852e-02  6.33099722e-03 -2.65882723e-03
  2.48483885e-02  2.58813216e-03  2.25203056e-02 -1.88357681e-02
 -4.95687723e-02 -5.59626892e-03 -5.87535603e-03  9.25021432e-03
  1.84435619e-03  2.06330009e-02 -5.34744188e-02 -8.39199685e-03
 -1.32668642e-02 -5.08323163e-02  2.20228229e-02  1.88433453e-02
 -1.30831227e-01 -6.34664968e-02  4.93542254e-02 -1.93293970e-02
  7.25896191e-03  1.26022166e-02  5.37760518e-02 -1.61856436e-03
  4.83066868e-03  6.26474321e-02 -3.13642668e-03  1.25732496e-02
  4.43486534e-02  3.38299237e-02 -4.19122465e-02  5.86900972e-02
 -2.86996160e-02 -2.45897472e-02 -8.01867843e-02 -5.66177862e-03
  1.05437376e-01 -6.84607625e-02 -6.39695674e-02 -9.73813385e-02
  2.01253593e-02  6.69119209e-02 -5.64536005e-02  3.11871321e-04
 -7.20646828e-02 -3.58158685e-02 -3.72093916e-02  4.20613475e-02
  3.67106162e-02 -5.24442829e-02  2.63152085e-03 -2.85873897e-02
 -6.57283282e-03  6.57019615e-02  9.75288153e-02  9.40458402e-02]"
"from __future__ import annotations
from abc import ABC, abstractmethod


class Creator(ABC):
    """"""
    The Creator class declares the factory method that is supposed to return an
    object of a Product class. The Creator's subclasses usually provide the
    implementation of this method.
    """"""

    @abstractmethod
    def factory_method(self):
        """"""
        Note that the Creator may also provide some default implementation of
        the factory method.
        """"""
        pass

    def some_operation(self) -> str:
        """"""
        Also note that, despite its name, the Creator's primary responsibility
        is not creating products. Usually, it contains some core business logic
        that relies on Product objects, returned by the factory method.
        Subclasses can indirectly change that business logic by overriding the
        factory method and returning a different type of product from it.
        """"""

        # Call the factory method to create a Product object.
        product = self.factory_method()

        # Now, use the product.
        result = f""Creator: The same creator's code has just worked with {product.operation()}""

        return result


""""""
Concrete Creators override the factory method in order to change the resulting
product's type.
""""""


class ConcreteCreator1(Creator):
    """"""
    Note that the signature of the method still uses the abstract product type,
    even though the concrete product is actually returned from the method. This
    way the Creator can stay independent of concrete product classes.
    """"""

    def factory_method(self) -> Product:
        return ConcreteProduct1()


class ConcreteCreator2(Creator):
    def factory_method(self) -> Product:
        return ConcreteProduct2()


class Product(ABC):
    """"""
    The Product interface declares the operations that all concrete products
    must implement.
    """"""

    @abstractmethod
    def operation(self) -> str:
        pass


""""""
Concrete Products provide various implementations of the Product interface.
""""""


class ConcreteProduct1(Product):
    def operation(self) -> str:
        return ""{Result of the ConcreteProduct1}""


class ConcreteProduct2(Product):
    def operation(self) -> str:
        return ""{Result of the ConcreteProduct2}""


def client_code(creator: Creator) -> None:
    """"""
    The client code works with an instance of a concrete creator, albeit through
    its base interface. As long as the client keeps working with the creator via
    the base interface, you can pass it any creator's subclass.
    """"""

    print(f""Client: I'm not aware of the creator's class, but it still works.\n""
          f""{creator.some_operation()}"", end="""")


if __name__ == ""__main__"":
    print(""App: Launched with the ConcreteCreator1."")
    client_code(ConcreteCreator1())
    print(""\n"")

    print(""App: Launched with the ConcreteCreator2."")
    client_code(ConcreteCreator2())",Python,Factory,Refactoring Guru,https://refactoring.guru/design-patterns/factory-method/python/example#example-0,"[-1.23160221e-01  1.72872152e-02 -2.13626996e-02 -2.59134676e-02
 -7.82040358e-02 -5.04344329e-02  4.77154888e-02  3.79152745e-02
 -7.22316653e-02 -1.02812111e-01  2.96579283e-02 -4.47230637e-02
  6.48064092e-02 -3.73424254e-02  4.62388583e-02  6.07691035e-02
  2.61770245e-02 -8.44594557e-03 -1.48005364e-03 -1.93240568e-02
  9.16647539e-02  9.46174003e-03 -2.04370264e-02  7.18681663e-02
 -5.49244322e-02 -5.78053892e-02 -1.22151822e-02 -4.72125626e-04
  4.39056605e-02 -5.64815430e-03  4.70252261e-02  8.21539238e-02
 -1.87698659e-02  5.89518882e-02  6.87331799e-03  8.46393928e-02
  3.40484045e-02 -2.51603052e-02 -5.70093328e-03  4.66512982e-03
 -8.15935899e-03 -2.16777921e-02 -1.03257626e-01  3.77399451e-03
  1.11181047e-02  3.89371291e-02 -2.41484903e-02  2.75755976e-03
  4.87243012e-03 -1.02904662e-01 -6.00001253e-02  6.46617934e-02
 -4.21277955e-02 -2.81857029e-02  1.99135654e-02 -5.79382945e-03
  8.57903063e-02  5.37551418e-02 -3.74255255e-02 -2.39746384e-02
 -1.45549225e-02  5.12029640e-02  2.02116389e-02 -1.61929317e-02
  1.71781816e-02  2.75865644e-02 -7.76184201e-02  1.85118485e-02
 -1.74925048e-02  1.60274319e-02 -2.05046609e-02 -1.89692602e-02
 -6.41583800e-02  2.19935849e-02 -8.78072903e-03 -2.14683488e-02
  2.27692742e-02  5.41264340e-02 -6.40899912e-02 -8.51026401e-02
 -2.46270671e-02  4.38123755e-02 -3.45774158e-03  2.78891306e-02
  3.20788100e-03 -2.03719339e-03  5.36842085e-02  7.22424127e-03
  6.57168329e-02  1.19875334e-01 -5.01192287e-02 -3.89774404e-02
 -1.22455992e-02 -1.74906999e-02 -1.05760396e-02  3.90285626e-02
  1.32890483e-02 -8.29529464e-02 -9.75050684e-03  8.28150660e-02
 -9.99577641e-02  2.20138095e-02  5.37209101e-02 -5.42085469e-02
  6.33444265e-02  7.63736740e-02 -5.87174483e-02 -1.10258922e-01
  3.73662189e-02 -2.11322866e-02 -1.14449700e-02 -3.03904172e-02
 -5.92280552e-02 -8.62401351e-03  1.51442857e-02  5.83756790e-02
  9.59867705e-03  5.48207611e-02  2.61131600e-02  3.32690850e-02
  7.73535147e-02  4.64475453e-02  6.84578195e-02  1.71494707e-02
 -4.94615696e-02 -8.28217436e-03 -1.51167251e-02  2.24501531e-33
 -2.07186975e-02 -4.95978780e-02 -5.22175431e-02  1.01015560e-01
  3.33339465e-03  3.10936254e-02  7.46955052e-02  5.66565879e-02
 -4.72573079e-02 -3.64194550e-02 -1.28605785e-02  1.91458054e-02
 -9.61249787e-03  5.59413992e-02  6.00743964e-02  2.89825518e-02
 -1.48723954e-02 -7.60734593e-03  4.54682261e-02 -2.41200626e-02
  3.95558663e-02  6.73599094e-02 -1.97881907e-02 -1.04758386e-02
 -2.38481443e-02  5.14676124e-02  2.30112881e-03 -2.38558371e-02
 -6.03513159e-02 -7.95194600e-03 -7.13482946e-02 -3.52100730e-02
  5.01345061e-02  1.99822094e-02 -5.09783439e-02 -4.68407059e-03
 -9.79286432e-03 -4.59154695e-02 -1.60533935e-02 -1.00129925e-01
 -3.37703936e-02 -4.98764729e-03  2.23668404e-02  1.75164696e-02
 -8.32410809e-03 -8.62590224e-02 -8.35272521e-02  9.54139382e-02
  4.25669141e-02  1.09277377e-02  2.29838006e-02  3.55671383e-02
  7.50831142e-02 -2.96767391e-02 -3.92509764e-03 -7.25114867e-02
 -8.69866926e-03  3.61583866e-02  2.60019396e-02 -2.88570020e-02
 -3.36099789e-02  9.22270715e-02 -3.11174355e-02  1.45409510e-01
 -7.28382766e-02  8.27102438e-02  7.18062464e-03 -3.67681645e-02
  1.00726724e-01  4.06625960e-03 -3.12104058e-02  8.11036080e-02
 -8.54921490e-02 -3.74923274e-02  6.06387574e-03 -3.00998781e-02
 -3.85302417e-02 -1.17455259e-01 -1.59633420e-02  9.63465776e-03
 -1.29767610e-02  6.93819076e-02 -1.63473077e-02  5.85356429e-02
 -1.10841185e-01  1.42881954e-02  3.61899734e-02  4.46647368e-02
 -3.21064666e-02  2.88800579e-02 -6.55080825e-02 -1.03021957e-01
  1.52302710e-02 -2.14127377e-02  5.28651252e-02 -4.79151518e-33
  4.09729481e-02  4.01027821e-04 -2.57469807e-03 -4.23391089e-02
 -1.40747409e-02 -5.41953519e-02 -8.46544455e-04 -3.09064966e-02
 -6.79117441e-02  5.09599783e-02 -6.72158822e-02 -3.74246724e-02
  5.20363189e-02 -3.30458395e-02  3.60470265e-02 -2.47651488e-02
 -1.04104258e-01 -2.98487172e-02 -2.12168247e-02  1.63677018e-02
 -5.48744909e-02  8.02904069e-02  5.19291917e-03 -3.55238132e-02
  5.03212586e-03 -3.20175570e-03 -3.80887352e-02  1.56628266e-01
  8.04811046e-02 -4.56810333e-02  7.03788782e-03 -1.16036506e-02
 -2.81717572e-02  2.53671152e-03  1.64380800e-02  2.27666125e-02
 -1.73927541e-03  2.62697926e-03  2.32154261e-02 -5.57224751e-02
  1.23227030e-01 -1.46102654e-02 -6.74980953e-02  5.08841611e-02
 -7.08995794e-04 -1.71778053e-02 -4.62586060e-02 -4.33643870e-02
  3.46485004e-02 -1.30708665e-02 -7.91186839e-03 -1.05328523e-02
 -3.28947976e-02 -3.82253453e-02 -9.23501030e-02  3.70096043e-02
  1.01616293e-01 -3.40497047e-02 -4.13292609e-02  2.29373369e-02
  3.71442400e-02 -5.81386201e-02  4.98623177e-02  8.21942911e-02
 -4.30446900e-02 -5.06581739e-02 -9.27482266e-03 -9.35956184e-03
 -2.34166812e-03 -8.87222961e-03  5.89683689e-02  4.72426675e-02
 -6.13060314e-03 -5.15313968e-02  2.14932300e-03  1.22672223e-01
 -3.85399424e-02  5.62479272e-02 -8.88705999e-03 -7.02545419e-03
 -4.99691255e-02 -6.23961687e-02  5.14610931e-02  1.01907328e-01
 -4.67684008e-02 -1.17448933e-01  3.26794535e-02  5.00821024e-02
  1.43395718e-02 -3.57811227e-02  3.73615250e-02  7.00352862e-02
 -4.81388047e-02  7.69631639e-02  5.46725700e-04 -5.44219745e-08
 -3.80107313e-02 -4.85695526e-02  1.85082406e-02  7.38109499e-02
 -2.71655694e-02  8.40415421e-04 -1.57711189e-02 -7.55433887e-02
 -1.67543888e-02 -1.55682415e-02 -5.53849414e-02  1.89013425e-02
 -5.57765551e-02  1.13517570e-04  4.24301438e-02  1.19844181e-02
  4.00438048e-02 -1.85789336e-02 -5.13740741e-02  1.35156652e-03
 -9.76909604e-03 -6.43268526e-02  3.90273123e-03 -3.14227901e-02
 -1.45392701e-01 -5.94163984e-02  1.99883636e-02  4.30900231e-02
 -4.15742546e-02  3.68302763e-02  6.23057112e-02  1.55143654e-02
 -3.34716588e-02  9.25531462e-02 -9.23061045e-04  2.58286055e-02
  2.27719662e-03  5.42241987e-03 -1.13106938e-02  7.84642473e-02
 -1.02026099e-02 -3.18525881e-02 -1.31354690e-01 -1.47003271e-02
  7.63466656e-02 -3.09286360e-02 -5.15530407e-02 -1.20134659e-01
  3.87254395e-02  1.26575813e-01 -6.02585822e-02  2.45655347e-02
 -3.31184939e-02 -5.94361760e-02 -3.41379531e-02  6.33536875e-02
  2.11398266e-02 -5.41794710e-02 -1.05500445e-02  6.30645372e-04
 -4.74036895e-02  6.56683519e-02  1.59779325e-01  3.29609364e-02]"
"import copy


class SelfReferencingEntity:
    def __init__(self):
        self.parent = None

    def set_parent(self, parent):
        self.parent = parent


class SomeComponent:
    """"""
    Python provides its own interface of Prototype via `copy.copy` and
    `copy.deepcopy` functions. And any class that wants to implement custom
    implementations have to override `__copy__` and `__deepcopy__` member
    functions.
    """"""

    def __init__(self, some_int, some_list_of_objects, some_circular_ref):
        self.some_int = some_int
        self.some_list_of_objects = some_list_of_objects
        self.some_circular_ref = some_circular_ref

    def __copy__(self):
        """"""
        Create a shallow copy. This method will be called whenever someone calls
        `copy.copy` with this object and the returned value is returned as the
        new shallow copy.
        """"""

        # First, let's create copies of the nested objects.
        some_list_of_objects = copy.copy(self.some_list_of_objects)
        some_circular_ref = copy.copy(self.some_circular_ref)

        # Then, let's clone the object itself, using the prepared clones of the
        # nested objects.
        new = self.__class__(
            self.some_int, some_list_of_objects, some_circular_ref
        )
        new.__dict__.update(self.__dict__)

        return new

    def __deepcopy__(self, memo=None):
        """"""
        Create a deep copy. This method will be called whenever someone calls
        `copy.deepcopy` with this object and the returned value is returned as
        the new deep copy.

        What is the use of the argument `memo`? Memo is the dictionary that is
        used by the `deepcopy` library to prevent infinite recursive copies in
        instances of circular references. Pass it to all the `deepcopy` calls
        you make in the `__deepcopy__` implementation to prevent infinite
        recursions.
        """"""
        if memo is None:
            memo = {}

        # First, let's create copies of the nested objects.
        some_list_of_objects = copy.deepcopy(self.some_list_of_objects, memo)
        some_circular_ref = copy.deepcopy(self.some_circular_ref, memo)

        # Then, let's clone the object itself, using the prepared clones of the
        # nested objects.
        new = self.__class__(
            self.some_int, some_list_of_objects, some_circular_ref
        )
        new.__dict__ = copy.deepcopy(self.__dict__, memo)

        return new


if __name__ == ""__main__"":

    list_of_objects = [1, {1, 2, 3}, [1, 2, 3]]
    circular_ref = SelfReferencingEntity()
    component = SomeComponent(23, list_of_objects, circular_ref)
    circular_ref.set_parent(component)

    shallow_copied_component = copy.copy(component)

    # Let's change the list in shallow_copied_component and see if it changes in
    # component.
    shallow_copied_component.some_list_of_objects.append(""another object"")
    if component.some_list_of_objects[-1] == ""another object"":
        print(
            ""Adding elements to `shallow_copied_component`'s ""
            ""some_list_of_objects adds it to `component`'s ""
            ""some_list_of_objects.""
        )
    else:
        print(
            ""Adding elements to `shallow_copied_component`'s ""
            ""some_list_of_objects doesn't add it to `component`'s ""
            ""some_list_of_objects.""
        )

    # Let's change the set in the list of objects.
    component.some_list_of_objects[1].add(4)
    if 4 in shallow_copied_component.some_list_of_objects[1]:
        print(
            ""Changing objects in the `component`'s some_list_of_objects ""
            ""changes that object in `shallow_copied_component`'s ""
            ""some_list_of_objects.""
        )
    else:
        print(
            ""Changing objects in the `component`'s some_list_of_objects ""
            ""doesn't change that object in `shallow_copied_component`'s ""
            ""some_list_of_objects.""
        )

    deep_copied_component = copy.deepcopy(component)

    # Let's change the list in deep_copied_component and see if it changes in
    # component.
    deep_copied_component.some_list_of_objects.append(""one more object"")
    if component.some_list_of_objects[-1] == ""one more object"":
        print(
            ""Adding elements to `deep_copied_component`'s ""
            ""some_list_of_objects adds it to `component`'s ""
            ""some_list_of_objects.""
        )
    else:
        print(
            ""Adding elements to `deep_copied_component`'s ""
            ""some_list_of_objects doesn't add it to `component`'s ""
            ""some_list_of_objects.""
        )

    # Let's change the set in the list of objects.
    component.some_list_of_objects[1].add(10)
    if 10 in deep_copied_component.some_list_of_objects[1]:
        print(
            ""Changing objects in the `component`'s some_list_of_objects ""
            ""changes that object in `deep_copied_component`'s ""
            ""some_list_of_objects.""
        )
    else:
        print(
            ""Changing objects in the `component`'s some_list_of_objects ""
            ""doesn't change that object in `deep_copied_component`'s ""
            ""some_list_of_objects.""
        )

    print(
        f""id(deep_copied_component.some_circular_ref.parent): ""
        f""{id(deep_copied_component.some_circular_ref.parent)}""
    )
    print(
        f""id(deep_copied_component.some_circular_ref.parent.some_circular_ref.parent): ""
        f""{id(deep_copied_component.some_circular_ref.parent.some_circular_ref.parent)}""
    )
    print(
        ""^^ This shows that deepcopied objects contain same reference, they ""
        ""are not cloned repeatedly.""
    )",Python,Prototype,Refactoring Guru,https://refactoring.guru/design-patterns/prototype/python/example#example-0,"[-9.68524292e-02  9.43298358e-03  1.78049020e-02  1.61319766e-02
 -1.89216360e-02 -1.16111934e-01  1.61790159e-02  2.59145834e-02
 -2.63724606e-02 -4.17521819e-02  2.71268245e-02 -2.40853708e-02
  2.24785861e-02 -5.26740178e-02  4.69185486e-02  1.30484514e-02
  5.57872932e-03  5.79525568e-02 -7.90397003e-02 -4.44320813e-02
  6.01442195e-02  2.51620803e-02  4.13385332e-02  3.18277068e-02
  2.67527178e-02  4.54994664e-02  1.14182131e-02 -6.76359534e-02
  8.30375776e-03 -7.11883307e-02 -4.26871665e-02  1.20180883e-01
 -7.89770558e-02  1.20108901e-02  9.15799364e-02  9.81677100e-02
 -1.86888799e-02 -3.03899366e-02  8.45392123e-02 -2.25152280e-02
  4.63412590e-02  1.04586028e-01 -4.39486392e-02 -2.00394429e-02
 -4.11131531e-02  8.95188525e-02 -9.75161344e-02  5.69050163e-02
 -3.73846404e-02 -2.73175333e-02 -3.12937349e-02  2.44509289e-03
 -9.44489986e-02  2.73084268e-02  9.41370949e-02  4.01658192e-02
  9.31146368e-02 -4.15936150e-02 -1.42040541e-02 -4.42570783e-02
  2.97830682e-02  1.39279552e-02  2.92094816e-02 -4.54279445e-02
 -6.84988126e-02 -6.15931153e-02 -4.39220890e-02  6.40671402e-02
  8.20441917e-03  5.43607660e-02 -5.27069205e-04  1.06969513e-01
  4.60565090e-03  3.38136889e-02  4.75894883e-02 -1.31454058e-02
  3.20834853e-02  3.34530622e-02 -9.30159390e-02 -9.29311439e-02
 -6.41328096e-02 -2.45754868e-02  5.23616299e-02 -1.88843161e-02
  1.54290674e-02 -7.18735754e-02  5.94778992e-02 -3.42930369e-02
 -3.47445309e-02  3.02151293e-02 -2.52890233e-02 -9.33636874e-02
  3.04716993e-02 -3.18648815e-02  2.39002984e-02  3.46943364e-02
  2.26184670e-02 -1.49628865e-02 -1.95591189e-02  2.42204461e-02
 -2.03406118e-04  3.51380594e-02  5.33592999e-02 -8.14304047e-04
 -2.67330557e-02  2.43969522e-02 -7.10308552e-03 -9.73147452e-02
  5.28096966e-02 -1.22783426e-02 -2.10158434e-03  6.36245459e-02
  1.78057123e-02 -1.10026207e-02  1.07161710e-02 -7.41317794e-02
  3.31906117e-02 -5.39003126e-03 -3.21425721e-02  5.95621429e-02
  6.03151061e-02 -1.82942767e-02  4.70441021e-02  1.81233753e-02
 -7.47320428e-02 -4.46104221e-02 -5.90075441e-02 -2.41418952e-33
  3.33829634e-02 -4.93228389e-03 -1.58244818e-02  1.44398287e-02
  1.04080038e-02  2.55311821e-02  6.92111254e-02  5.03952503e-02
 -3.79974209e-02 -2.89409012e-02 -6.06456362e-02  9.34213772e-02
 -8.04474652e-02  5.48589565e-02 -7.89166763e-02  2.55317939e-03
  5.56565821e-04  9.32763964e-02 -3.41142267e-02 -1.51567848e-03
  2.11289804e-02  7.80809447e-02 -6.64656237e-02 -1.92824546e-02
 -2.44556591e-02  1.87305827e-02 -4.34266329e-02 -5.05133905e-02
 -5.99195808e-02  3.43662361e-03 -3.52482200e-02 -1.16210291e-03
  5.13323918e-02  2.34493781e-02 -1.68854259e-02  2.48278142e-03
  6.08220398e-02 -5.03567532e-02 -6.29687756e-02 -1.49523377e-01
  1.07972939e-02 -1.80194881e-02 -3.77845019e-02 -2.83562895e-02
 -2.73453835e-02 -9.92388949e-02 -5.01579121e-02  4.88903895e-02
 -8.84579215e-03  2.45494787e-02  2.48907562e-02 -1.27948206e-02
 -7.86676034e-02 -5.39660305e-02 -5.23134619e-02 -4.80366610e-02
  1.99357253e-02  2.45132055e-02  5.68424650e-02  1.97517835e-02
  7.03204498e-02  6.98169172e-02 -7.84541667e-02  1.13253772e-01
  1.76012143e-02  8.72019008e-02  5.47932498e-02  1.30795399e-02
  8.84326175e-02 -2.37396751e-02 -6.80793300e-02  4.35701013e-02
 -1.46519884e-01 -3.88052315e-02 -3.40442881e-02 -6.27369136e-02
 -2.67843436e-02 -1.24464929e-01 -6.90964982e-02 -5.01127206e-02
  1.65040325e-02  1.23403989e-01 -8.30474794e-02 -3.13660502e-02
 -5.12807369e-02 -6.52029598e-03  2.37898733e-02 -2.01099832e-02
 -3.65096591e-02  6.18104711e-02 -3.14297676e-02 -7.97520727e-02
  1.29929362e-02 -3.47994976e-02  1.16567258e-02 -1.24450358e-33
  7.69424215e-02  1.25221545e-02  7.73428828e-02  4.59170192e-02
 -1.23670837e-02 -9.48994011e-02 -1.33954957e-02  3.37983109e-02
 -6.26434833e-02 -6.86313584e-02 -7.62492493e-02 -5.21585308e-02
  1.89307500e-02 -4.28471416e-02  3.44228372e-02  3.10929306e-03
 -3.94571871e-02 -1.53222084e-02 -1.83131639e-02 -1.06751034e-02
 -5.18194633e-04  2.74370629e-02  5.82742207e-02  6.75201863e-02
 -7.86254406e-02 -1.42546250e-02 -5.98777942e-02  2.54435255e-03
  7.86040947e-02 -2.92177089e-02 -2.24154163e-02  1.75700318e-02
 -5.25708031e-03  4.69525754e-02 -1.13753388e-02 -6.20553233e-02
  5.59028015e-02  1.16708707e-02 -5.20629250e-02 -8.16548243e-02
  6.11365736e-02  6.24856986e-02 -5.61687462e-02  2.76312977e-02
  1.41427238e-02 -1.22101061e-01 -1.19699081e-02  5.32353707e-02
  5.32865487e-02  1.27129303e-02  2.94788331e-02 -1.31038368e-01
 -5.26674166e-02  5.50738052e-02 -2.37378478e-02  4.66248840e-02
  2.22556852e-02 -2.57739681e-03  6.31882921e-02  7.56241521e-03
 -6.66960925e-02 -2.55906712e-02 -5.38448021e-02  3.55338641e-02
  2.74422448e-02  1.37932161e-02 -7.73274451e-02 -1.92927271e-02
  3.38159204e-02  1.50203016e-02  2.99478043e-02  6.76257983e-02
  1.11471061e-02 -7.78557435e-02  8.08979664e-03  2.73667946e-02
  4.41775285e-03  4.21818532e-03  1.08932413e-03  3.32834348e-02
 -8.63781497e-02 -2.76589710e-02 -1.52417142e-02  6.53626546e-02
 -6.12644926e-02 -8.98217112e-02  8.76658112e-02  4.72557209e-02
 -2.13061478e-02 -1.09420689e-02 -3.10818274e-02  2.92284321e-02
  2.45030094e-02  3.11957654e-02  3.31484340e-02 -4.51626612e-08
 -4.45711315e-02  4.25636815e-03  1.83564462e-02  6.89357370e-02
  5.60434833e-02 -7.78273046e-02 -1.88069814e-03  6.45979866e-02
 -4.44558635e-02 -4.79963608e-02 -7.26095948e-07  2.36867703e-02
 -1.45039726e-02 -3.02639883e-02  4.63330746e-02  5.08311801e-02
  2.92316154e-02 -4.03451361e-02  1.33858211e-02  6.03939556e-02
  1.07556246e-02 -6.14365228e-02  8.28896090e-02  6.93986118e-02
 -7.26645142e-02 -3.61551940e-02  7.06502348e-02 -6.77477755e-03
  1.58640705e-02 -1.83639359e-02  2.12977100e-02  1.77448988e-02
  3.44458711e-03  1.76136158e-02  1.31779769e-02 -3.88499796e-02
  2.31783427e-02  6.42120838e-02  3.70925781e-03  7.58178458e-02
 -2.88065709e-03  2.86863502e-02 -8.75016153e-02  9.00087506e-03
  4.37492616e-02 -8.80979449e-02 -7.77443498e-02 -2.22263411e-02
  2.94476002e-02  8.96690506e-03 -8.43480229e-02 -1.20122973e-02
  2.82834843e-02 -3.22907269e-02 -5.06686047e-02  5.41546047e-02
  8.08568150e-02  6.16212413e-02  1.14731621e-02  7.41018578e-02
  3.24528515e-02  5.16582206e-02  8.40589553e-02  5.07083051e-02]"
"class Target:
    """"""
    The Target defines the domain-specific interface used by the client code.
    """"""

    def request(self) -> str:
        return ""Target: The default target's behavior.""


class Adaptee:
    """"""
    The Adaptee contains some useful behavior, but its interface is incompatible
    with the existing client code. The Adaptee needs some adaptation before the
    client code can use it.
    """"""

    def specific_request(self) -> str:
        return "".eetpadA eht fo roivaheb laicepS""


class Adapter(Target, Adaptee):
    """"""
    The Adapter makes the Adaptee's interface compatible with the Target's
    interface via multiple inheritance.
    """"""

    def request(self) -> str:
        return f""Adapter: (TRANSLATED) {self.specific_request()[::-1]}""


def client_code(target: ""Target"") -> None:
    """"""
    The client code supports all classes that follow the Target interface.
    """"""

    print(target.request(), end="""")


if __name__ == ""__main__"":
    print(""Client: I can work just fine with the Target objects:"")
    target = Target()
    client_code(target)
    print(""\n"")

    adaptee = Adaptee()
    print(""Client: The Adaptee class has a weird interface. ""
          ""See, I don't understand it:"")
    print(f""Adaptee: {adaptee.specific_request()}"", end=""\n\n"")

    print(""Client: But I can work with it via the Adapter:"")
    adapter = Adapter()
    client_code(adapter)",Python,Adapter,Refactoring Guru,https://refactoring.guru/design-patterns/adapter/python/example#example-0,"[-7.10680485e-02  4.87296134e-02  6.93478622e-03 -2.33417153e-02
  9.40560922e-03 -6.01075105e-02  4.05494645e-02 -3.74852424e-03
 -6.94251880e-02 -7.37552345e-02  6.36122525e-02 -7.37503543e-02
  2.19503362e-02 -2.12152004e-02  1.24052837e-01 -2.62084026e-02
  4.02292497e-02 -1.64960548e-02  4.54602577e-03  5.48657216e-02
  6.72308356e-02  5.78903332e-02 -5.51245874e-03  1.43455714e-02
 -9.70264673e-02 -8.18846822e-02  7.25018606e-02 -9.23552364e-03
 -4.08267267e-02 -3.07448190e-02  7.96665177e-02  5.75907901e-02
 -1.15822099e-01  9.40793678e-02 -1.59676152e-03  4.21703644e-02
 -1.19856298e-02 -9.00443569e-02 -3.18388268e-02  4.48794030e-02
  1.10526457e-02 -8.46135896e-03 -5.95905222e-02 -9.11765248e-02
  1.02782864e-02 -3.77684773e-04 -1.53538454e-02  1.21660392e-04
 -3.83918323e-02 -1.11487374e-01  1.69232674e-02  2.27151457e-02
 -2.70105675e-02 -1.35556627e-02  3.36573794e-02 -2.71734204e-02
  6.99388832e-02  4.15270515e-02 -3.25792469e-02 -4.08493839e-02
 -6.10124171e-02 -1.98606588e-02  3.86425778e-02 -3.15471478e-02
 -6.83412254e-02  4.82438225e-03 -3.87584195e-02  1.25403963e-02
 -7.57230371e-02  3.95355709e-02 -6.67534247e-02 -1.77519936e-02
 -7.20132217e-02  4.36627604e-02  5.92175871e-02 -1.61385629e-02
 -3.34219402e-03  3.10136471e-02  7.08697271e-03 -5.47737814e-02
 -5.78264752e-03  3.81645933e-02 -3.67646180e-02  4.97852005e-02
  3.12999003e-02 -4.78754640e-02 -6.07048674e-03 -2.72695422e-02
  7.27026239e-02  5.85493408e-02 -2.94241272e-02 -4.69716415e-02
 -5.52926995e-02  9.81243979e-03  8.49138573e-02  6.07873350e-02
 -7.53161451e-03 -5.48404269e-02 -2.93259267e-02  5.48140258e-02
 -6.41513243e-02  3.22209336e-02  3.49264964e-02 -1.07464548e-02
 -7.86417723e-03  2.24624351e-02 -3.87907922e-02 -4.49259095e-02
 -1.28527358e-02 -5.54647483e-02 -4.96479496e-02 -6.94441274e-02
 -2.07103491e-02 -4.23288383e-02 -3.12309545e-02  4.07877341e-02
  9.59633198e-03 -1.26447957e-02 -1.50772631e-02  2.99062748e-02
  4.44152951e-02  1.69000719e-02  5.29750921e-02  7.24207833e-02
 -1.19892806e-02 -1.02034770e-02 -1.68415662e-02  2.40710148e-33
 -5.11647612e-02 -6.22810051e-02 -6.90329969e-02 -4.20632586e-02
  1.01713948e-02 -1.04422960e-02  8.13839883e-02  3.32396775e-02
 -5.78340739e-02 -7.19085708e-02 -7.41570294e-02  9.48010013e-02
  1.33293867e-02  5.63457459e-02  4.99374755e-02  6.03788197e-02
 -2.24425085e-03  1.38898358e-01  7.75886700e-02  4.54889871e-02
  1.29098475e-01  3.61691155e-02  1.88311283e-02 -4.82436940e-02
 -3.55860963e-02  5.01045100e-02 -9.58541557e-02 -4.39338125e-02
 -3.41824889e-02 -5.60457772e-03 -4.97229844e-02 -4.43187244e-02
  7.24907294e-02 -3.82536203e-02 -4.01841402e-02 -5.75581789e-02
 -1.88019162e-03 -2.22930796e-02 -1.15070961e-01 -1.27688736e-01
 -1.26598645e-02  3.84392776e-02  1.28406733e-02  5.57318255e-02
  1.60603374e-02 -4.35368530e-02 -2.24119853e-02  3.47154518e-03
  1.54608050e-02  5.78708537e-02 -1.38374344e-02 -4.44178134e-02
  1.19828740e-02 -4.35447358e-02  6.97975978e-02 -4.78377342e-02
 -3.15516479e-02  1.05894357e-01  5.00852764e-02 -8.38268027e-02
 -3.49212550e-02  1.76758058e-02 -2.99308039e-02  3.93653400e-02
  4.86807227e-02  9.82562006e-02  2.88436245e-02  1.04359360e-02
  1.82327665e-02 -6.04736470e-02 -1.07875802e-02  4.13478650e-02
 -9.32184756e-02 -1.97235290e-02  4.34232689e-02 -4.85845096e-02
 -4.49897833e-02 -3.08037493e-02  7.37609481e-03 -3.15652676e-02
 -2.44974419e-02  1.62051730e-02 -3.35967131e-02  4.77026179e-02
 -7.97417611e-02 -1.22189363e-02  8.17419291e-02  3.48674171e-02
 -3.26036587e-02 -2.68663205e-02 -1.44271506e-02 -5.63723966e-02
 -2.35098302e-02 -2.95055453e-02  9.14023146e-02 -5.32020588e-33
  6.60147667e-02 -2.72457935e-02 -4.32483628e-02 -9.14620422e-03
  1.27864750e-02 -2.62178499e-02  5.47343902e-02  6.65151514e-03
 -3.90588008e-02  6.01141597e-04 -6.80736080e-02 -6.25877976e-02
  8.44258666e-02 -9.84413475e-02  1.87840555e-02 -9.37821995e-03
 -1.03944086e-01  3.89508568e-02 -9.89467022e-04  4.45324555e-02
 -2.68467329e-02  2.58395299e-02  2.71776076e-02 -4.92714681e-02
  3.62037607e-02  1.93814375e-02 -4.50527705e-02  5.73542006e-02
  9.68809333e-03 -4.60313968e-02 -1.00695612e-02  1.54758021e-02
 -2.46167015e-02  6.24793917e-02  2.83572841e-02  6.06841817e-02
  2.31693964e-03  7.43690804e-02 -1.79808610e-03  4.06570081e-03
  1.16111189e-01 -2.22582351e-02 -5.57601005e-02  5.02717383e-02
  5.56711014e-03 -4.04649787e-02 -4.98168916e-02  4.33502272e-02
  1.63447689e-02 -3.22505869e-02 -1.22493943e-02 -1.73202064e-02
 -2.83986963e-02  8.13700631e-03 -2.30179597e-02  4.42352407e-02
  1.40469834e-01 -3.47146504e-02 -3.80711630e-02 -4.59165573e-02
  5.19557260e-02 -1.13818899e-01  1.88633800e-02  9.25424546e-02
  1.34502603e-02 -7.97569305e-02 -3.60924192e-02 -4.05930653e-02
  6.46398142e-02 -5.48082357e-03  8.08517113e-02 -3.88418846e-02
 -1.02271335e-02 -4.52171415e-02  4.14568186e-03  8.32387581e-02
  8.50742683e-03  7.13339224e-02  8.42297543e-03  6.59026355e-02
 -1.29156277e-01 -3.23185138e-02  3.69792730e-02  9.26777050e-02
 -2.07803473e-02 -6.50674105e-02 -9.23658069e-03  7.05726817e-02
  3.14992219e-02 -3.26608457e-02  2.58239340e-02  1.08957551e-02
  1.90751273e-02  9.28776413e-02  2.54562590e-02 -5.69284886e-08
 -5.97728640e-02 -1.12728048e-02 -2.59381868e-02  8.79582390e-02
  4.62555327e-03 -1.60427764e-02 -7.13054165e-02 -7.44035095e-02
  2.44129300e-02  5.00105433e-02 -2.18843017e-02  2.25490928e-02
 -3.52425640e-03  3.27868946e-03  8.53530169e-02 -4.03774250e-03
  4.70277369e-02 -1.86316743e-02 -5.03433980e-02  3.10433768e-02
 -2.69708317e-02 -4.81605306e-02 -1.14183815e-03 -4.86257039e-02
 -4.80349325e-02 -1.25394640e-02  1.81900933e-02  1.03749968e-02
 -2.95751691e-02 -6.26010373e-02  4.71267626e-02 -1.65928435e-03
 -4.60573137e-02  6.48987219e-02 -4.54574041e-02  4.64212112e-02
 -2.61306781e-02 -1.14195291e-02 -3.83550934e-02  1.19535834e-01
 -1.78889632e-02 -3.72764580e-02 -1.29029781e-01 -4.21376489e-02
  9.87962186e-02  3.83906253e-02 -1.21773975e-02 -7.51562044e-02
  6.17774725e-02  9.22455266e-02 -8.52789059e-02  6.80968678e-03
 -5.15872762e-02  1.81070212e-02 -5.49136698e-02  6.06949208e-03
 -5.59272133e-02 -3.68382372e-02  2.43068635e-02  3.70183960e-04
  6.32797629e-02  1.04787499e-01  6.05769940e-02  7.52213225e-02]"
"from __future__ import annotations
from abc import ABC, abstractmethod


class Abstraction:
    """"""
    The Abstraction defines the interface for the ""control"" part of the two
    class hierarchies. It maintains a reference to an object of the
    Implementation hierarchy and delegates all of the real work to this object.
    """"""

    def __init__(self, implementation: Implementation) -> None:
        self.implementation = implementation

    def operation(self) -> str:
        return (f""Abstraction: Base operation with:\n""
                f""{self.implementation.operation_implementation()}"")


class ExtendedAbstraction(Abstraction):
    """"""
    You can extend the Abstraction without changing the Implementation classes.
    """"""

    def operation(self) -> str:
        return (f""ExtendedAbstraction: Extended operation with:\n""
                f""{self.implementation.operation_implementation()}"")


class Implementation(ABC):
    """"""
    The Implementation defines the interface for all implementation classes. It
    doesn't have to match the Abstraction's interface. In fact, the two
    interfaces can be entirely different. Typically the Implementation interface
    provides only primitive operations, while the Abstraction defines higher-
    level operations based on those primitives.
    """"""

    @abstractmethod
    def operation_implementation(self) -> str:
        pass


""""""
Each Concrete Implementation corresponds to a specific platform and implements
the Implementation interface using that platform's API.
""""""


class ConcreteImplementationA(Implementation):
    def operation_implementation(self) -> str:
        return ""ConcreteImplementationA: Here's the result on the platform A.""


class ConcreteImplementationB(Implementation):
    def operation_implementation(self) -> str:
        return ""ConcreteImplementationB: Here's the result on the platform B.""


def client_code(abstraction: Abstraction) -> None:
    """"""
    Except for the initialization phase, where an Abstraction object gets linked
    with a specific Implementation object, the client code should only depend on
    the Abstraction class. This way the client code can support any abstraction-
    implementation combination.
    """"""

    # ...

    print(abstraction.operation(), end="""")

    # ...


if __name__ == ""__main__"":
    """"""
    The client code should be able to work with any pre-configured abstraction-
    implementation combination.
    """"""

    implementation = ConcreteImplementationA()
    abstraction = Abstraction(implementation)
    client_code(abstraction)

    print(""\n"")

    implementation = ConcreteImplementationB()
    abstraction = ExtendedAbstraction(implementation)
    client_code(abstraction)",Python,Bridge,Refactoring Guru,https://refactoring.guru/design-patterns/bridge/python/example#example-0,"[-7.79884383e-02  6.30952567e-02 -1.56657323e-02 -1.29601685e-02
 -1.13933451e-01 -5.47129922e-02  2.89121587e-02  4.99875396e-02
 -9.92885008e-02 -1.04055539e-01  4.80604591e-03 -3.70941423e-02
  3.94376516e-02 -2.96666212e-02  8.87621716e-02  3.63543443e-02
  7.25099817e-02 -1.93086043e-02  3.02061941e-02 -8.46453104e-03
  5.81429759e-03  2.53151152e-02 -6.00193702e-02  8.71650428e-02
 -3.84378135e-02 -5.97920269e-02 -4.10073809e-02 -1.60295367e-02
  1.82101931e-02  9.81439203e-02  4.87714149e-02  5.74595630e-02
 -1.39844278e-02  7.69318193e-02  3.32221389e-02  5.55553623e-02
 -1.92458294e-02 -8.10425431e-02 -3.25329527e-02  1.48833357e-02
 -3.48392986e-02  2.45584939e-02 -7.16845021e-02  1.07069099e-02
 -1.14297327e-02 -6.85628690e-03 -3.77031565e-02  7.06220977e-03
 -2.35453267e-02 -7.89914504e-02 -5.94599396e-02  3.44480351e-02
 -2.48889392e-03 -4.09757420e-02  5.07217757e-02 -2.16387198e-04
  2.17960719e-02  8.34763497e-02 -5.03265951e-03 -3.59297544e-02
 -6.30174950e-02  8.87102727e-03  2.23748703e-02 -9.93244816e-03
 -1.19584166e-02  5.22489585e-02 -5.24152257e-02 -2.08197925e-02
  9.11534578e-03 -2.61599496e-02 -5.19820936e-02 -3.27992812e-02
 -6.06296659e-02 -1.11164143e-02 -2.68285349e-02 -3.83177809e-02
  3.11263613e-02  1.09567143e-01 -3.21295671e-02 -1.02262028e-01
 -4.28962372e-02 -2.30046734e-03 -3.30487452e-02  6.05463609e-02
  2.50701327e-02 -5.81383966e-02 -2.78731044e-02  1.40519002e-02
  2.55760960e-02  7.03949630e-02  2.34378153e-03 -6.52588308e-02
 -8.94398168e-02 -3.11220773e-02  9.56135150e-03  4.61083651e-02
 -1.17484881e-02 -8.71097296e-02 -3.76074426e-02  5.92213906e-02
 -8.92624110e-02 -1.98274273e-02  3.51068377e-02 -4.97819558e-02
  5.92328608e-02  8.42810348e-02 -7.04882666e-03 -1.04623578e-01
  2.14781668e-02 -8.73915404e-02 -4.47655991e-02 -4.88411672e-02
  2.66810115e-02 -2.44414210e-02  1.61453355e-02  5.72047047e-02
  5.17652556e-02  1.12328893e-02  2.51417626e-02  1.12084849e-02
  7.51110539e-02 -1.93646681e-02  6.01717420e-02  3.20325121e-02
 -2.42168885e-02 -4.00781818e-02 -1.21550849e-02  2.15181698e-33
 -6.62796795e-02 -9.30295140e-02 -4.36140411e-02  8.03622901e-02
 -2.70937267e-03  7.67672295e-03  7.55820125e-02 -1.34794796e-02
 -7.57873952e-02 -8.09457898e-02  2.36966833e-02  7.10527450e-02
  5.40629681e-03  5.24438098e-02  3.46331447e-02  4.87994635e-03
  4.42974940e-02  6.47248104e-02  7.38673061e-02 -1.64190847e-02
  5.26149943e-02  1.99052002e-02 -3.64941657e-02 -1.72883943e-02
 -6.07822016e-02  2.93333773e-02 -2.25121751e-02 -3.87590192e-02
 -5.50683402e-02 -3.80394072e-03 -6.21906035e-02 -7.83758052e-03
  2.06222795e-02  1.53771846e-03 -5.28922975e-02 -2.71463860e-02
  2.10528038e-02 -4.30404507e-02 -9.66410525e-03 -9.71874595e-02
 -6.88624308e-02  3.85197997e-02  3.70552950e-02  2.44021658e-02
  2.28921603e-02 -8.01088437e-02 -1.13018706e-01  7.57459775e-02
  5.12771644e-02 -3.43926698e-02  5.34627847e-02  2.31912788e-02
  2.49807797e-02  1.04082860e-02  1.20272674e-03 -6.06235899e-02
 -1.43187549e-02  1.19393431e-01  3.24405134e-02  3.29212286e-02
 -1.30271073e-02  3.25429775e-02 -5.42259142e-02  8.56528729e-02
 -3.86158423e-03  3.02290209e-02 -2.11906731e-02  4.02595252e-02
  7.55805820e-02  1.77508779e-02 -1.21355187e-02  6.13074638e-02
 -1.65328048e-02  2.44987439e-02  2.64148638e-02 -4.26580012e-02
 -1.36397639e-02 -1.09912060e-01 -3.28014679e-02 -6.71417871e-03
 -2.97857802e-02  8.81583840e-02  5.61550446e-02  3.48353609e-02
 -2.37824395e-02  9.75993555e-03  8.09530541e-02  2.94700544e-02
 -4.00612354e-02 -4.67717536e-02 -5.77353686e-02 -9.57331285e-02
  2.46833693e-02 -7.77857937e-03  5.27237952e-02 -5.17502388e-33
  8.40754062e-02  4.31385562e-02 -8.19579605e-03 -1.06833279e-01
 -4.14112695e-02 -4.58131023e-02  3.60710919e-02 -8.57891217e-02
 -4.55336645e-02  4.42931578e-02 -3.70906070e-02 -7.89613277e-02
  3.59177403e-02  1.08395685e-02  5.07794321e-02  2.39928868e-02
 -1.13631003e-01 -1.55876009e-02  7.42591731e-03  5.79864299e-03
 -6.19745962e-02 -1.71522163e-02 -3.63817923e-02 -2.04211920e-02
  4.14153077e-02 -3.12908888e-02 -9.47651416e-02  1.06063932e-01
  1.05863862e-01 -2.45258659e-02 -6.77593425e-02  2.55264677e-02
 -6.24224693e-02  1.64018739e-02  1.93829015e-02  1.07924361e-02
 -1.69268704e-03  5.84988203e-03 -5.73881483e-03 -7.30954409e-02
  1.55809060e-01 -1.73600167e-02 -9.63834077e-02  5.21581881e-02
  2.90916376e-02  1.35319978e-02 -5.47679476e-02  3.84413935e-02
 -4.68510017e-02 -2.01941635e-02  3.06167211e-02 -1.55992806e-02
  3.00227152e-03  5.49745783e-02 -4.59958278e-02  5.11265658e-02
  1.10369667e-01 -1.87691990e-02 -6.20051250e-02 -6.21103868e-02
  5.33260740e-02 -8.15162957e-02  4.27461788e-02  4.67621386e-02
 -1.65356789e-02 -1.28389858e-02 -4.89118621e-02 -4.09583040e-02
 -9.91341192e-03 -3.28209549e-02  4.10664342e-02  1.21817933e-02
 -2.81400662e-02 -8.49381089e-03  1.82599500e-02  1.68322548e-01
  2.38083862e-02  3.45817916e-02  2.18986571e-02  6.52424693e-02
 -1.04122572e-01  8.18819832e-03  1.90473162e-02  8.21470171e-02
 -3.08012776e-02 -8.26116726e-02  9.92732402e-03  1.10301800e-01
 -9.55817848e-03 -1.83203183e-02  4.77572046e-02  1.88734643e-02
  7.27933366e-03  6.01554997e-02  3.43093416e-03 -5.07376221e-08
 -3.71104591e-02 -2.51517706e-02 -2.47267075e-02  2.47727763e-02
  1.94161292e-02  4.86831553e-02 -8.06214579e-04 -8.49266052e-02
 -8.10460746e-03 -1.63493846e-02 -5.05144857e-02 -2.76556518e-02
 -2.55219489e-02 -9.76934563e-03 -2.18192767e-02  6.95349872e-02
  5.03906682e-02 -5.98851405e-02 -1.36937583e-02  7.48918727e-02
 -4.61442024e-03 -5.21616638e-02 -8.83500930e-03 -1.24670314e-02
 -1.07174076e-01 -6.65016696e-02 -3.34209763e-02  7.82911032e-02
 -6.56419098e-02  2.11757384e-02  4.31196243e-02 -8.32121819e-03
 -2.78889686e-02  3.60645093e-02  1.00705922e-02  7.19532743e-02
  6.56121895e-02  1.66922121e-03  1.71028096e-02  5.86383976e-02
 -3.90744619e-02 -2.91991699e-02 -8.69026408e-02 -1.84253361e-02
  1.26636565e-01 -1.46272900e-02 -4.90773022e-02 -3.44221927e-02
  3.88751626e-02  5.85175008e-02 -6.87983111e-02  5.55039709e-03
 -1.02701001e-02 -3.20097804e-02 -7.18500838e-02  5.98467514e-02
 -1.13371266e-02 -1.98009182e-02 -1.74833871e-02  1.90105755e-02
 -2.11714078e-02  5.60104363e-02  1.14793561e-01  3.38644497e-02]"
"from __future__ import annotations
from abc import ABC, abstractmethod
from typing import List


class Component(ABC):
    """"""
    The base Component class declares common operations for both simple and
    complex objects of a composition.
    """"""

    @property
    def parent(self) -> Component:
        return self._parent

    @parent.setter
    def parent(self, parent: Component):
        """"""
        Optionally, the base Component can declare an interface for setting and
        accessing a parent of the component in a tree structure. It can also
        provide some default implementation for these methods.
        """"""

        self._parent = parent

    """"""
    In some cases, it would be beneficial to define the child-management
    operations right in the base Component class. This way, you won't need to
    expose any concrete component classes to the client code, even during the
    object tree assembly. The downside is that these methods will be empty for
    the leaf-level components.
    """"""

    def add(self, component: Component) -> None:
        pass

    def remove(self, component: Component) -> None:
        pass

    def is_composite(self) -> bool:
        """"""
        You can provide a method that lets the client code figure out whether a
        component can bear children.
        """"""

        return False

    @abstractmethod
    def operation(self) -> str:
        """"""
        The base Component may implement some default behavior or leave it to
        concrete classes (by declaring the method containing the behavior as
        ""abstract"").
        """"""

        pass


class Leaf(Component):
    """"""
    The Leaf class represents the end objects of a composition. A leaf can't
    have any children.

    Usually, it's the Leaf objects that do the actual work, whereas Composite
    objects only delegate to their sub-components.
    """"""

    def operation(self) -> str:
        return ""Leaf""


class Composite(Component):
    """"""
    The Composite class represents the complex components that may have
    children. Usually, the Composite objects delegate the actual work to their
    children and then ""sum-up"" the result.
    """"""

    def __init__(self) -> None:
        self._children: List[Component] = []

    """"""
    A composite object can add or remove other components (both simple or
    complex) to or from its child list.
    """"""

    def add(self, component: Component) -> None:
        self._children.append(component)
        component.parent = self

    def remove(self, component: Component) -> None:
        self._children.remove(component)
        component.parent = None

    def is_composite(self) -> bool:
        return True

    def operation(self) -> str:
        """"""
        The Composite executes its primary logic in a particular way. It
        traverses recursively through all its children, collecting and summing
        their results. Since the composite's children pass these calls to their
        children and so forth, the whole object tree is traversed as a result.
        """"""

        results = []
        for child in self._children:
            results.append(child.operation())
        return f""Branch({'+'.join(results)})""


def client_code(component: Component) -> None:
    """"""
    The client code works with all of the components via the base interface.
    """"""

    print(f""RESULT: {component.operation()}"", end="""")


def client_code2(component1: Component, component2: Component) -> None:
    """"""
    Thanks to the fact that the child-management operations are declared in the
    base Component class, the client code can work with any component, simple or
    complex, without depending on their concrete classes.
    """"""

    if component1.is_composite():
        component1.add(component2)

    print(f""RESULT: {component1.operation()}"", end="""")


if __name__ == ""__main__"":
    # This way the client code can support the simple leaf components...
    simple = Leaf()
    print(""Client: I've got a simple component:"")
    client_code(simple)
    print(""\n"")

    # ...as well as the complex composites.
    tree = Composite()

    branch1 = Composite()
    branch1.add(Leaf())
    branch1.add(Leaf())

    branch2 = Composite()
    branch2.add(Leaf())

    tree.add(branch1)
    tree.add(branch2)

    print(""Client: Now I've got a composite tree:"")
    client_code(tree)
    print(""\n"")

    print(""Client: I don't need to check the components classes even when managing the tree:"")
    client_code2(tree, simple)",Python,Composite,Refactoring Guru,https://refactoring.guru/design-patterns/composite/python/example#example-0,"[-1.97461154e-02  6.81861490e-02  1.06833791e-02  8.84672776e-02
 -1.34791946e-02 -7.67268240e-02  1.90863330e-02  1.51088554e-02
 -2.33347323e-02 -3.90285230e-03  3.20713930e-02 -5.23337489e-03
  4.76984829e-02 -6.67050295e-03  6.45411164e-02  1.36459693e-02
 -2.34256848e-03  3.22726592e-02  7.91328307e-03 -9.09410939e-02
  2.19880771e-02  2.56031845e-02 -2.18316950e-02  6.23399690e-02
 -7.76237994e-03 -3.12157795e-02 -3.85757014e-02 -2.50572842e-02
  6.47172052e-03  4.86003468e-03  3.12092397e-02  9.31212977e-02
 -1.42763574e-02  1.20426700e-01 -1.37142092e-02  6.44773543e-02
  4.67381813e-02 -3.54608037e-02 -7.31875887e-03  2.69882055e-03
  4.98318672e-02  4.97174561e-02 -8.68602023e-02 -9.29848626e-02
  2.70546880e-02  2.49398258e-02 -9.45228115e-02 -1.94110256e-02
 -1.53533053e-02 -9.86398831e-02 -4.40117307e-02  1.56968404e-02
 -6.04901873e-02  8.70841742e-03  1.09737990e-02  3.60720567e-02
  1.04836755e-01 -3.28321867e-02 -1.12894885e-02 -2.48727221e-02
 -1.30840139e-02 -5.10461861e-03 -9.32465680e-03 -3.41586173e-02
  3.27973953e-03  3.89095470e-02 -4.66465689e-02  5.85919917e-02
 -1.20208121e-03  4.57549840e-02 -1.15698026e-02 -6.48639770e-03
 -6.32900596e-02 -1.26496926e-02  7.27877626e-03 -9.29936767e-03
  3.42610627e-02  3.04095875e-02 -2.86161471e-02 -6.02009185e-02
 -7.31988400e-02  4.96151559e-02 -4.39690165e-02  3.52304913e-02
 -2.07250547e-02  3.35198902e-02  9.78675857e-03  1.65792797e-02
 -3.60695831e-02  6.13673627e-02 -4.05552834e-02 -3.04701403e-02
  5.60247451e-02  1.40967518e-02  1.49606634e-03  8.96654800e-02
  2.78351624e-02 -6.37911558e-02 -1.00307018e-02  3.35882865e-02
 -6.54490441e-02  2.37596761e-02  6.57389686e-02 -9.92981866e-02
 -8.57254863e-02  7.46116862e-02 -6.82628751e-02 -1.11735657e-01
  4.85723428e-02 -5.34793288e-02 -2.82269605e-02 -5.31940488e-03
 -6.61635026e-02 -1.13902669e-02 -2.85633672e-02 -5.19803492e-03
  8.06094334e-02  2.06318386e-02  5.77365384e-02  6.50628656e-02
  1.13175683e-01 -8.60314537e-03  3.72918844e-02  5.08562177e-02
  3.35411094e-02 -7.77399540e-02 -3.89211215e-02  1.90865257e-33
 -1.42690716e-02 -1.13091832e-02 -1.89066231e-02  4.01022024e-02
  6.59923777e-02  5.53701781e-02  7.23845214e-02  1.32094999e-03
 -5.59706204e-02  7.67285610e-03 -7.80706629e-02  3.01532466e-02
 -3.54684964e-02 -1.79965720e-02  4.18189801e-02  5.28667308e-02
 -4.89474135e-03  2.36962307e-02 -1.63795124e-03  1.78858563e-02
  5.80567569e-02  5.82195707e-02 -5.58533445e-02  5.45979142e-02
  4.34358157e-02  5.62660221e-04 -3.14666815e-02 -4.37838994e-02
 -8.17560032e-02 -2.43677087e-02 -1.43535323e-02 -3.28503810e-02
  2.97912564e-02  3.35792080e-02 -4.16325964e-02 -2.85753515e-02
  4.08505760e-02 -4.93071526e-02 -6.84511587e-02 -1.35920882e-01
 -8.73068273e-02 -7.41894543e-03  4.21743207e-02  6.24914169e-02
  4.38358402e-03 -8.31029192e-02 -9.21080485e-02  7.30802566e-02
  2.16204301e-02  5.08515909e-02  6.51861131e-02  8.05166289e-02
  8.36136267e-02 -1.38892867e-02 -4.85535525e-02  4.07221392e-02
  3.93620506e-02  1.08568758e-01  5.74442968e-02 -9.15906485e-03
  2.79673338e-02  1.11869182e-02 -6.56111091e-02  5.29162623e-02
 -5.16155213e-02  1.10425323e-01 -2.68972516e-02  7.77245453e-03
  7.19282702e-02 -5.06032668e-02 -4.78296094e-02  9.03131962e-02
 -8.10437948e-02 -5.21912053e-02  3.43599617e-02 -6.19195774e-02
 -4.81168665e-02 -1.25152647e-01 -5.13542369e-02 -1.45141622e-02
 -5.93421720e-02  7.41752163e-02  1.97439585e-02  1.06516816e-01
  3.84780765e-02 -5.48211522e-02  4.81269881e-02  5.56848347e-02
 -4.18264158e-02  2.54375208e-03 -5.96507862e-02 -1.16545781e-01
  3.04755270e-02 -2.23977808e-02  7.29952678e-02 -5.01054467e-33
  5.25671355e-02  6.12642197e-03  3.31359878e-02 -5.74218147e-02
 -3.46374214e-02 -8.38499218e-02 -5.34517504e-02 -4.82467264e-02
 -8.01841840e-02  1.10156247e-02 -1.46872103e-02 -2.26669908e-02
  3.00745014e-02 -3.11365705e-02  2.21421532e-02  6.13221377e-02
 -8.06439593e-02  2.90023442e-02  3.77880335e-02  3.62358168e-02
 -3.51728615e-03  5.65951504e-02  3.75412554e-02 -2.77827145e-03
 -7.07941223e-03 -6.27525523e-02 -1.05634248e-02  5.49841151e-02
  7.85129443e-02 -1.15449941e-02  2.54564337e-03  2.37075426e-02
  2.81487424e-02 -4.04505357e-02 -1.99696980e-02 -5.33566847e-02
 -1.81923453e-02 -3.09053082e-02  4.35140729e-03 -9.57425311e-03
  6.77518249e-02  3.23865712e-02 -6.08621389e-02  4.74051908e-02
 -1.81398708e-02 -7.36706555e-02 -1.63043458e-02  5.72300889e-02
  2.18695542e-03  2.22586002e-02 -7.65939569e-03 -5.45408316e-02
 -8.96846317e-03  3.89709137e-02 -2.64202468e-02  4.39964123e-02
  7.90999532e-02  1.63005181e-02  2.78693363e-02 -5.42374589e-02
 -1.77194998e-02 -7.20688030e-02 -3.67709510e-02  3.65953855e-02
 -1.57316902e-03 -7.32543766e-02 -1.08211160e-01 -1.99033264e-02
  5.22665621e-04 -5.84698319e-02  4.06203307e-02  4.04003151e-02
 -3.48888859e-02 -1.53725706e-02 -1.24428067e-02  7.90286884e-02
 -2.97327656e-02  7.95804709e-02  2.12968700e-02  7.39093348e-02
 -9.11143348e-02 -4.43861820e-02 -1.47833982e-02  3.89777757e-02
 -4.19140421e-02 -1.45441413e-01  6.00898899e-02  6.28148764e-02
  4.80099441e-03 -3.52171287e-02  1.56979021e-02  6.27940670e-02
  3.40615921e-02  2.77705118e-02 -2.93015875e-03 -5.19925081e-08
 -7.53197968e-02 -4.78829555e-02 -2.86933202e-02 -1.24097820e-02
  5.33153675e-02 -3.92055400e-02 -1.90179446e-03  1.25410343e-02
 -5.67782857e-02  1.25966640e-03 -5.20730391e-03 -2.88835145e-03
 -5.93615174e-02 -5.71451895e-02  7.48687387e-02  4.58058380e-02
  2.98278518e-02 -2.24735830e-02 -4.32660431e-02  8.05983171e-02
 -5.83174918e-03 -3.08697708e-02 -4.95394506e-03  1.15684964e-01
 -1.03862762e-01 -7.38255903e-02  8.94668773e-02  9.45781171e-03
  5.51283173e-03 -2.73068510e-02  6.19833078e-03  1.61785353e-02
 -1.53371617e-02  4.96746711e-02 -8.38894844e-02  2.57575642e-02
 -1.27735874e-03  3.73434685e-02  1.40778041e-02  1.05249099e-01
 -2.10263003e-02 -5.62542193e-02 -1.11662172e-01 -1.97852515e-02
  3.89840156e-02 -5.81248030e-02 -5.74843287e-02 -1.30094625e-02
  6.40228763e-02  4.93932292e-02 -1.09316520e-01 -2.94288564e-02
 -1.03513122e-01 -7.79244676e-02 -7.33606219e-02  5.40312156e-02
  5.33859953e-02 -1.43276369e-02  4.44208458e-02  1.10022426e-02
  3.91691457e-03  3.06621976e-02  9.53551903e-02  9.94503498e-04]"
"class Component():
    """"""
    The base Component interface defines operations that can be altered by
    decorators.
    """"""

    def operation(self) -> str:
        pass


class ConcreteComponent(Component):
    """"""
    Concrete Components provide default implementations of the operations. There
    might be several variations of these classes.
    """"""

    def operation(self) -> str:
        return ""ConcreteComponent""


class Decorator(Component):
    """"""
    The base Decorator class follows the same interface as the other components.
    The primary purpose of this class is to define the wrapping interface for
    all concrete decorators. The default implementation of the wrapping code
    might include a field for storing a wrapped component and the means to
    initialize it.
    """"""

    _component: Component = None

    def __init__(self, component: Component) -> None:
        self._component = component

    @property
    def component(self) -> Component:
        """"""
        The Decorator delegates all work to the wrapped component.
        """"""

        return self._component

    def operation(self) -> str:
        return self._component.operation()


class ConcreteDecoratorA(Decorator):
    """"""
    Concrete Decorators call the wrapped object and alter its result in some
    way.
    """"""

    def operation(self) -> str:
        """"""
        Decorators may call parent implementation of the operation, instead of
        calling the wrapped object directly. This approach simplifies extension
        of decorator classes.
        """"""
        return f""ConcreteDecoratorA({self.component.operation()})""


class ConcreteDecoratorB(Decorator):
    """"""
    Decorators can execute their behavior either before or after the call to a
    wrapped object.
    """"""

    def operation(self) -> str:
        return f""ConcreteDecoratorB({self.component.operation()})""


def client_code(component: Component) -> None:
    """"""
    The client code works with all objects using the Component interface. This
    way it can stay independent of the concrete classes of components it works
    with.
    """"""

    # ...

    print(f""RESULT: {component.operation()}"", end="""")

    # ...


if __name__ == ""__main__"":
    # This way the client code can support both simple components...
    simple = ConcreteComponent()
    print(""Client: I've got a simple component:"")
    client_code(simple)
    print(""\n"")

    # ...as well as decorated ones.
    #
    # Note how decorators can wrap not only simple components but the other
    # decorators as well.
    decorator1 = ConcreteDecoratorA(simple)
    decorator2 = ConcreteDecoratorB(decorator1)
    print(""Client: Now I've got a decorated component:"")
    client_code(decorator2)",Python,Decorator,Refactoring Guru,https://refactoring.guru/design-patterns/decorator/python/example#example-0,"[-4.81170230e-02  6.43841326e-02  2.31430656e-03  8.49288478e-02
 -7.54492879e-02 -6.57270616e-03  1.93132088e-02  4.85755038e-04
 -7.80264363e-02 -7.92734846e-02  1.17688086e-02 -2.20446959e-02
 -1.33688254e-02  2.57063340e-02  8.65003467e-02  9.72543657e-03
  1.58926267e-02  7.68815121e-03 -3.03729810e-02  3.18116359e-02
  3.99364121e-02  4.38292045e-03 -5.77823212e-03  4.46353145e-02
  4.24155127e-03 -4.14283015e-02  1.99231599e-03 -1.30439047e-02
  6.09817393e-02 -7.35606439e-03  1.13214329e-01  4.15543877e-02
 -1.30839959e-01  5.05144075e-02 -3.84446122e-02  7.96410218e-02
 -6.18025952e-04 -1.29668890e-02 -3.90929589e-03 -2.72407085e-02
  3.81698050e-02  3.54318880e-02 -1.28124163e-01 -2.87727150e-03
  9.85044148e-03  3.28292474e-02  5.85165666e-03 -5.23150302e-02
 -2.89285518e-02 -1.54488146e-01  2.24768580e-03  8.56126323e-02
 -1.59444902e-02  4.91622388e-02 -2.35168524e-02 -9.44622420e-03
  7.06270039e-02  6.96601719e-03  7.83511251e-03 -2.79377657e-03
 -9.30128768e-02  2.69640200e-02  5.85007034e-02  6.19801320e-03
 -3.13541107e-02 -7.27789896e-03 -2.52675246e-02  4.74193804e-02
 -3.87396314e-04  3.50479744e-02 -1.98661331e-02 -2.11963877e-02
 -9.23629478e-03 -1.60734747e-02  2.86011472e-02 -9.85918287e-03
 -5.35963997e-02  6.12267032e-02 -2.51766313e-02 -5.05569279e-02
 -1.55654531e-02  3.81654985e-02 -3.87961343e-02  7.08990470e-02
  2.05642339e-02  3.60522605e-02 -1.32142836e-02 -2.53247377e-02
  1.77740734e-02  2.75081173e-02  4.38403338e-02  7.69845035e-04
  3.13042328e-02  1.35640884e-02 -5.41650392e-02  2.57161818e-02
  1.44812465e-02 -2.81784125e-02 -5.54951839e-02  4.96830754e-02
 -5.48562221e-02 -1.63234305e-02  2.84625404e-02 -2.47464031e-02
 -1.69598926e-02  4.40031141e-02 -9.97100919e-02 -6.50481358e-02
  1.83984004e-02 -5.59775606e-02  1.90580375e-02  3.97549868e-02
 -4.99964915e-02 -2.98467390e-02  5.04126512e-02  3.25763188e-02
  4.94459756e-02  1.15529615e-02  1.13160305e-01  6.84877932e-02
  1.29976943e-01 -1.55918794e-02  3.94268595e-02  2.02066526e-02
  1.13471840e-02 -2.87130214e-02 -2.07120795e-02  4.80497826e-33
 -2.73834262e-03 -4.43492904e-02 -8.31759050e-02  1.03329360e-01
  4.60240105e-03  2.81091221e-02  2.15413738e-02  2.46951859e-02
 -3.68924141e-02  4.25654203e-02 -2.12027617e-02  3.38953771e-02
 -4.47661765e-02  1.29387137e-02  1.46883959e-03  1.20161865e-02
 -3.90098207e-02  4.39522006e-02 -2.81050373e-02 -5.65041183e-03
  2.09847577e-02  5.25085852e-02 -2.04898580e-03  1.18575748e-02
 -2.62543596e-02 -1.29072256e-02 -1.94424354e-02 -3.13799791e-02
 -9.14857388e-02 -3.91361825e-02  2.17648894e-02 -3.15351710e-02
  7.72671923e-02  9.19000357e-02 -8.04165378e-02 -6.89796656e-02
 -4.05375194e-03 -5.87843172e-02 -5.46573363e-02 -9.83659774e-02
 -9.13736150e-02  2.70334701e-03  6.72810525e-03  1.80011224e-02
  3.60492170e-02 -3.72217298e-02 -3.50650214e-02  1.07547849e-01
  5.27006723e-02 -3.08861341e-02  7.12193921e-02  1.02369338e-01
  9.62635949e-02  4.95770946e-02  6.17490001e-02  2.56615691e-02
  6.43160492e-02  4.29291055e-02  4.10761163e-02 -7.63483271e-02
 -1.13588646e-02  8.17845762e-02 -6.79636896e-02  2.40489207e-02
 -3.74466144e-02  6.15596287e-02  6.29268214e-02  2.65022106e-02
  1.09622516e-02 -2.55559329e-02 -5.03305830e-02  6.88755363e-02
 -1.16322748e-01 -2.61502564e-02  6.67797029e-02 -3.85765992e-02
 -6.45022467e-02 -8.32736194e-02  1.29766052e-03 -4.63734008e-02
 -5.54552674e-02  7.20558465e-02 -1.25671811e-02  9.41793025e-02
 -1.70968119e-02 -9.44548007e-03  7.44193196e-02  3.34991030e-02
 -4.58157510e-02 -9.20841657e-03 -2.08050590e-02 -1.03543490e-01
  3.22496817e-02 -7.23847300e-02  8.14558007e-03 -6.53558623e-33
  1.63553432e-02  7.64975604e-03  3.44064198e-02 -2.44645979e-02
 -2.34650616e-02 -7.98446089e-02 -3.64137627e-02 -2.22634673e-02
 -4.05323654e-02  3.76607031e-02 -2.53088865e-02 -1.64949913e-02
  1.48337483e-02  3.18935551e-02  3.27730328e-02  9.51522514e-02
 -9.36688706e-02  3.89542207e-02  7.59110600e-02 -3.95318940e-02
 -2.55579185e-02  5.13349250e-02 -4.45868708e-02 -1.56048900e-02
 -5.87119125e-02 -3.40149291e-02 -2.09152866e-02  7.77475163e-02
  1.47992626e-01 -6.80638030e-02 -3.49635235e-03 -4.84962352e-02
 -9.34285298e-03  6.98866905e-04 -3.67863365e-02 -1.33138709e-02
 -3.39839906e-02  3.62775777e-03 -3.45441923e-02 -3.38302404e-02
  4.91976663e-02 -9.13137011e-03 -4.52006143e-03  8.03402662e-02
 -6.99798986e-02 -9.36116725e-02 -1.10446453e-01  5.78980474e-03
  1.11119645e-02  1.98770538e-02 -1.45741552e-02 -2.61045545e-02
 -2.25118417e-02 -1.60370860e-02 -5.47131486e-02  1.41423792e-02
  5.05950898e-02 -3.38560119e-02 -1.81812830e-02  8.39036610e-03
  7.26376399e-02 -7.54069090e-02  2.50745378e-02  1.73014980e-02
  2.95766955e-03 -2.35465132e-02 -4.51193899e-02 -1.02582633e-01
  2.06603203e-03  1.44542268e-04  1.36845455e-01  3.34028453e-02
 -5.90025373e-02 -2.32931264e-02  4.17084657e-02  1.14577807e-01
 -4.65329969e-03 -3.22814123e-03  5.25295548e-02  8.03460181e-03
 -5.61864600e-02 -7.83799440e-02  7.53412768e-03 -9.98397544e-03
 -3.99623439e-02 -1.27500325e-01  3.73960994e-02  5.76462038e-02
  4.71796058e-02 -3.51351388e-02  1.75004546e-02  6.52854294e-02
  3.50897312e-02  3.52576897e-02 -1.90797057e-02 -5.28836992e-08
 -4.72693816e-02 -6.02417998e-02 -4.82341424e-02 -6.46326616e-02
 -3.26387882e-02 -4.82434494e-04  3.05417124e-02 -8.27191994e-02
 -9.20105800e-02 -2.27544140e-02  3.74068134e-02  6.99496781e-03
 -2.72647887e-02 -1.62238143e-02  1.87826604e-02  6.39715269e-02
 -2.39196364e-02 -2.71635335e-02 -6.95906729e-02  3.43367341e-03
 -1.89891681e-02 -9.62152053e-03 -1.29092466e-02  2.00713314e-02
 -6.74998388e-02 -2.88960915e-02  2.53320038e-02  8.78762007e-02
  1.54465847e-02 -1.30527327e-03  1.78645924e-02 -1.48153687e-02
  4.37858924e-02  5.09830751e-02 -5.19157462e-02  1.04298860e-01
 -2.84483600e-02 -4.92468663e-02  7.54302517e-02  1.09570637e-01
 -1.71094462e-02 -8.44816417e-02 -6.96234554e-02  3.11224815e-02
  6.50010556e-02 -9.56345629e-03 -7.92106688e-02 -4.83342484e-02
  4.27390747e-02  8.72926787e-02 -1.98491029e-02 -3.61715145e-02
 -1.03031509e-01 -3.17670740e-02 -1.09007686e-01  2.02682205e-02
  2.92306077e-02  5.50192446e-02  5.52481785e-02 -3.24757188e-03
 -1.09704331e-01  6.31169304e-02  9.57783908e-02  1.12964343e-02]"
"from __future__ import annotations


class Facade:
    """"""
    The Facade class provides a simple interface to the complex logic of one or
    several subsystems. The Facade delegates the client requests to the
    appropriate objects within the subsystem. The Facade is also responsible for
    managing their lifecycle. All of this shields the client from the undesired
    complexity of the subsystem.
    """"""

    def __init__(self, subsystem1: Subsystem1, subsystem2: Subsystem2) -> None:
        """"""
        Depending on your application's needs, you can provide the Facade with
        existing subsystem objects or force the Facade to create them on its
        own.
        """"""

        self._subsystem1 = subsystem1 or Subsystem1()
        self._subsystem2 = subsystem2 or Subsystem2()

    def operation(self) -> str:
        """"""
        The Facade's methods are convenient shortcuts to the sophisticated
        functionality of the subsystems. However, clients get only to a fraction
        of a subsystem's capabilities.
        """"""

        results = []
        results.append(""Facade initializes subsystems:"")
        results.append(self._subsystem1.operation1())
        results.append(self._subsystem2.operation1())
        results.append(""Facade orders subsystems to perform the action:"")
        results.append(self._subsystem1.operation_n())
        results.append(self._subsystem2.operation_z())
        return ""\n"".join(results)


class Subsystem1:
    """"""
    The Subsystem can accept requests either from the facade or client directly.
    In any case, to the Subsystem, the Facade is yet another client, and it's
    not a part of the Subsystem.
    """"""

    def operation1(self) -> str:
        return ""Subsystem1: Ready!""

    # ...

    def operation_n(self) -> str:
        return ""Subsystem1: Go!""


class Subsystem2:
    """"""
    Some facades can work with multiple subsystems at the same time.
    """"""

    def operation1(self) -> str:
        return ""Subsystem2: Get ready!""

    # ...

    def operation_z(self) -> str:
        return ""Subsystem2: Fire!""


def client_code(facade: Facade) -> None:
    """"""
    The client code works with complex subsystems through a simple interface
    provided by the Facade. When a facade manages the lifecycle of the
    subsystem, the client might not even know about the existence of the
    subsystem. This approach lets you keep the complexity under control.
    """"""

    print(facade.operation(), end="""")


if __name__ == ""__main__"":
    # The client code may have some of the subsystem's objects already created.
    # In this case, it might be worthwhile to initialize the Facade with these
    # objects instead of letting the Facade create new instances.
    subsystem1 = Subsystem1()
    subsystem2 = Subsystem2()
    facade = Facade(subsystem1, subsystem2)
    client_code(facade)",Python,Facade,Refactoring Guru,https://refactoring.guru/design-patterns/facade/python/example#example-0,"[-5.38779050e-02  2.41787955e-02 -4.52225059e-02  2.08876450e-02
 -8.33702162e-02 -1.54283002e-01 -7.80894682e-02  3.56631503e-02
 -5.16131110e-02 -2.12367512e-02 -2.61406954e-02 -2.06564553e-02
  7.03658909e-02 -1.32909250e-02  9.55683291e-02 -4.24097404e-02
  5.64107113e-02 -6.63837641e-02  1.89956799e-02  1.01289144e-02
  5.87315299e-02 -4.27772431e-03 -1.75492279e-02  2.11950671e-02
 -6.16927296e-02 -1.08874612e-01 -7.45050535e-02 -8.24155565e-03
 -1.05837034e-02  2.13108193e-02  8.62054676e-02  2.82691028e-02
 -6.66868538e-02  5.52108958e-02  4.51676995e-02  8.17696303e-02
  6.69329092e-02 -1.88279841e-02 -2.04021093e-02  6.73559830e-02
 -9.18692327e-04 -1.61277968e-02 -1.03959821e-01 -3.95083763e-02
 -1.04114693e-02 -3.22525352e-02 -5.11187725e-02 -1.17665455e-02
 -4.41156421e-03 -1.02328971e-01 -8.16007778e-02  3.26895565e-02
 -5.00221215e-02 -7.11142260e-04  4.28986177e-02  3.41863441e-03
  6.66926727e-02  5.18989637e-02 -7.74698630e-02 -8.42661634e-02
 -4.64588068e-02  9.75466240e-03 -2.27577798e-02 -3.24000120e-02
 -3.65341045e-02  7.19445124e-02 -4.82356139e-02  3.16015556e-02
  1.09158084e-03  5.10936938e-02  1.84769519e-02 -5.01011387e-02
 -3.87200937e-02  1.31045310e-02 -2.62991525e-02 -4.14808355e-02
  4.99947928e-02  3.13156322e-02 -7.48994872e-02 -1.15446642e-01
  3.78150456e-02  1.64671168e-02 -1.22360192e-01  6.41149431e-02
  4.10019374e-03 -5.43454252e-02  2.88564968e-03  2.05908157e-03
  6.41315356e-02  2.72669736e-02 -4.39355103e-03 -5.22490293e-02
 -3.17683779e-02 -3.25383171e-02  4.33440022e-02  3.72610502e-02
  1.89357288e-02 -6.20551072e-02  4.94006984e-02  4.05961461e-02
 -5.45369275e-02 -5.41704744e-02  6.66154996e-02 -2.14142818e-02
  2.51237843e-02  7.69099668e-02 -4.19375561e-02 -4.11706343e-02
  6.19809050e-03 -7.36635178e-02 -4.45187390e-02  1.67049542e-02
  1.10644866e-02 -1.67188179e-02  5.58956377e-02  3.88275534e-02
  5.00089489e-02  4.28875946e-02  1.96746774e-02  5.53314313e-02
  1.30282372e-01  3.88373584e-02  1.29999146e-01  2.16763467e-02
  5.12483492e-02 -2.03813240e-02 -4.96403454e-03  3.87971029e-33
 -5.68602867e-02 -4.56252135e-02 -4.18937579e-02  9.40706506e-02
  2.97851991e-02  8.13867599e-02  7.34087452e-02  5.04229032e-02
 -3.22551839e-02  3.75989899e-02 -6.63205385e-02  2.04780083e-02
 -1.29354484e-02 -3.16297337e-02  8.51898193e-02  1.44935446e-02
  4.78788689e-02  4.91339825e-02 -2.54960377e-02  8.63025198e-04
  1.11192718e-01  3.65209021e-02 -2.31886655e-02 -8.12359061e-03
  9.21276584e-03 -1.85112022e-02 -8.35537538e-03  5.86986030e-03
 -8.67002755e-02 -9.78224818e-03 -1.95392189e-04  2.16732100e-02
 -7.00012874e-03  4.86925095e-02 -4.88531925e-02  1.08587537e-02
  2.67605726e-02 -2.76791397e-02  8.45719129e-03 -1.48651928e-01
 -8.54730383e-02  5.85207390e-03  1.25849610e-02  3.47001329e-02
 -3.78858782e-02 -7.84649327e-02 -9.87594351e-02  6.41360357e-02
 -1.34471497e-02 -2.61217002e-02  7.46800378e-02  3.45794111e-02
  3.63742299e-02  2.27442626e-02 -2.77247205e-02  2.13690177e-02
  8.20071995e-03  1.47854239e-02  5.32791987e-02 -7.09649175e-02
 -5.54104708e-03 -4.19724733e-02 -5.92400171e-02  7.28408843e-02
  1.40550826e-02  1.39625743e-02 -6.83432771e-03  4.11176607e-02
  5.17469756e-02 -1.00746320e-03 -5.19729815e-02  5.12288846e-02
 -8.92961696e-02 -9.98087600e-03  3.51759382e-02 -3.45433317e-02
  7.79459924e-02 -1.18843496e-01 -3.69270965e-02  3.59982043e-03
 -2.37510651e-02  5.72370701e-02 -4.76421602e-02  4.38666083e-02
  4.61986214e-02  5.86325563e-02  5.14961630e-02  1.80025026e-02
 -6.16848879e-02  3.86230871e-02 -7.43423775e-02 -1.10699683e-01
  1.35520352e-02 -4.38573696e-02  4.46272902e-02 -6.51810295e-33
  7.38419667e-02 -1.21653574e-02 -6.11441210e-02 -6.34412244e-02
 -2.17881780e-02 -5.79921417e-02 -3.74304838e-02 -5.69257177e-02
 -1.17125139e-01  3.87296118e-02 -8.49616379e-02 -1.26175992e-02
  6.86041638e-02 -4.13050875e-02  2.85628084e-02  3.16504352e-02
 -2.50243749e-02 -3.67175601e-02  4.79889624e-02  1.74600016e-02
 -8.65411013e-02  6.00743815e-02 -2.58871317e-02 -4.82128635e-02
 -3.89546230e-02  2.93367859e-02 -8.09153840e-02  7.54821450e-02
  9.25906152e-02 -4.08915207e-02 -4.23516706e-02  1.61365308e-02
 -1.47428801e-02  3.14752422e-02  6.15738481e-02  9.09124166e-02
 -1.48232607e-02 -1.06513472e-02 -6.71582622e-03 -1.57074053e-02
  1.06938541e-01 -1.44015616e-02 -4.02997769e-02  1.05242636e-02
  3.98333445e-02  2.12759594e-03 -4.73078154e-02  2.53817141e-02
 -5.30275777e-02 -1.38278829e-03 -5.26735932e-02  2.21252747e-04
 -7.53341615e-02  3.39172557e-02 -3.18138339e-02 -9.30593442e-03
  2.88185477e-02  6.68391399e-03 -3.38017847e-03 -2.03702468e-02
  8.38366896e-02 -4.29279357e-02 -2.20226906e-02  5.12771197e-02
 -8.62740632e-03 -3.91336232e-02 -6.78832009e-02 -6.27761111e-02
  3.73784415e-02  1.15896463e-02  1.76625811e-02  3.13077979e-02
 -6.20227903e-02 -3.44339237e-02  4.71336674e-03  8.54170546e-02
 -9.96214077e-02 -1.37984445e-02 -3.37505306e-04  7.06599131e-02
 -1.10630870e-01  1.74396560e-02 -2.81086657e-02  6.14097714e-02
 -1.20939091e-01 -8.25497210e-02  5.41185960e-02  8.42327774e-02
 -2.52361759e-04 -8.82125497e-02  3.73635329e-02  1.30685102e-02
  4.72281240e-02  4.72638495e-02 -2.77528446e-02 -5.61420030e-08
  3.46908905e-02  6.42319536e-03  4.79364358e-02  4.22074534e-02
 -4.10270877e-02 -2.64257230e-02 -4.92928810e-02 -3.44503969e-02
  1.80403292e-02  1.50672728e-02 -4.95101102e-02  1.55283017e-02
  2.37037316e-02  9.80399828e-03 -2.92967376e-03  5.38478717e-02
  2.00254004e-02 -6.34190068e-02 -4.70875651e-02 -7.39544723e-03
  1.79833136e-02 -3.04477531e-02 -2.43618209e-02  4.24359553e-02
 -6.25558272e-02 -3.17729339e-02  9.39143635e-03 -1.29288975e-02
 -3.91631089e-02  1.69275794e-02  2.33909450e-02  9.39420890e-03
 -1.22856488e-03  1.47607520e-01  2.58722026e-02  2.73980498e-02
  5.20959264e-03  4.65597473e-02  6.39115646e-02 -1.75751988e-02
  2.17271075e-02 -4.40434180e-02 -3.71935554e-02  3.60595174e-02
  5.01854979e-02  1.54266460e-02 -4.94494922e-02 -2.98043303e-02
  9.64683965e-02  4.15040627e-02 -9.91556421e-02  4.59957821e-03
 -4.62731905e-02  2.60610301e-02 -3.27229612e-02  4.78148311e-02
  2.69100461e-02 -3.72491591e-02  9.86578465e-02  3.31874564e-02
 -4.74228933e-02  7.03768283e-02  4.32363749e-02 -2.70270593e-02]"
"import json
from typing import Dict


class Flyweight():
    """"""
    The Flyweight stores a common portion of the state (also called intrinsic
    state) that belongs to multiple real business entities. The Flyweight
    accepts the rest of the state (extrinsic state, unique for each entity) via
    its method parameters.
    """"""

    def __init__(self, shared_state: str) -> None:
        self._shared_state = shared_state

    def operation(self, unique_state: str) -> None:
        s = json.dumps(self._shared_state)
        u = json.dumps(unique_state)
        print(f""Flyweight: Displaying shared ({s}) and unique ({u}) state."", end="""")


class FlyweightFactory():
    """"""
    The Flyweight Factory creates and manages the Flyweight objects. It ensures
    that flyweights are shared correctly. When the client requests a flyweight,
    the factory either returns an existing instance or creates a new one, if it
    doesn't exist yet.
    """"""

    _flyweights: Dict[str, Flyweight] = {}

    def __init__(self, initial_flyweights: Dict) -> None:
        for state in initial_flyweights:
            self._flyweights[self.get_key(state)] = Flyweight(state)

    def get_key(self, state: Dict) -> str:
        """"""
        Returns a Flyweight's string hash for a given state.
        """"""

        return ""_"".join(sorted(state))

    def get_flyweight(self, shared_state: Dict) -> Flyweight:
        """"""
        Returns an existing Flyweight with a given state or creates a new one.
        """"""

        key = self.get_key(shared_state)

        if not self._flyweights.get(key):
            print(""FlyweightFactory: Can't find a flyweight, creating new one."")
            self._flyweights[key] = Flyweight(shared_state)
        else:
            print(""FlyweightFactory: Reusing existing flyweight."")

        return self._flyweights[key]

    def list_flyweights(self) -> None:
        count = len(self._flyweights)
        print(f""FlyweightFactory: I have {count} flyweights:"")
        print(""\n"".join(map(str, self._flyweights.keys())), end="""")


def add_car_to_police_database(
    factory: FlyweightFactory, plates: str, owner: str,
    brand: str, model: str, color: str
) -> None:
    print(""\n\nClient: Adding a car to database."")
    flyweight = factory.get_flyweight([brand, model, color])
    # The client code either stores or calculates extrinsic state and passes it
    # to the flyweight's methods.
    flyweight.operation([plates, owner])


if __name__ == ""__main__"":
    """"""
    The client code usually creates a bunch of pre-populated flyweights in the
    initialization stage of the application.
    """"""

    factory = FlyweightFactory([
        [""Chevrolet"", ""Camaro2018"", ""pink""],
        [""Mercedes Benz"", ""C300"", ""black""],
        [""Mercedes Benz"", ""C500"", ""red""],
        [""BMW"", ""M5"", ""red""],
        [""BMW"", ""X6"", ""white""],
    ])

    factory.list_flyweights()

    add_car_to_police_database(
        factory, ""CL234IR"", ""James Doe"", ""BMW"", ""M5"", ""red"")

    add_car_to_police_database(
        factory, ""CL234IR"", ""James Doe"", ""BMW"", ""X1"", ""red"")

    print(""\n"")

    factory.list_flyweights()",Python,Flyweight,Refactoring Guru,https://refactoring.guru/design-patterns/flyweight/python/example#example-0,"[-5.13611883e-02  6.69769719e-02 -2.90613212e-02  6.20681271e-02
 -4.69656549e-02 -2.89165787e-02  9.42899510e-02 -8.14992003e-03
 -7.16480613e-02 -5.56159206e-02  7.82830119e-02 -3.77427861e-02
  6.70477897e-02 -5.05586863e-02  4.49529523e-03  4.33055423e-02
  1.94963012e-02 -3.50347795e-02 -9.45868269e-02 -2.95594018e-02
  6.80593848e-02  4.91021797e-02  1.94449108e-02  5.07178530e-02
 -6.27642050e-02 -7.40534961e-02 -2.92987805e-02  5.81074506e-02
 -6.41818047e-02 -6.48107156e-02 -2.23983806e-02  4.00294475e-02
 -1.70291681e-02  6.88678622e-02  3.39978486e-02 -3.32241179e-05
  2.38634981e-02 -2.97928974e-02 -1.91201959e-02 -6.13228716e-02
 -2.01951582e-02  6.43119449e-03 -4.27517407e-02  7.99572375e-03
 -4.21740673e-02  9.51965377e-02 -2.52481122e-02  9.05650631e-02
  5.34032844e-02 -4.59264405e-02 -8.09132233e-02  7.48508722e-02
 -3.18603143e-02  2.30664201e-02  9.33036506e-02 -2.40212101e-02
  6.32634088e-02 -4.19619530e-02 -1.35034472e-01 -1.56232342e-01
 -4.31380700e-03  4.22830367e-03  3.19899954e-02 -1.29759349e-02
 -1.12335552e-02 -4.03514830e-03 -7.43085891e-02  2.55752821e-02
  2.62805410e-02  1.00678504e-02  4.74954955e-02  1.27552152e-02
 -7.83141032e-02  5.24965972e-02 -4.01744321e-02  3.60071622e-02
  6.53953627e-02 -6.15877397e-02 -8.99152085e-03  2.12130696e-02
 -1.26647323e-01 -1.39724277e-02 -8.42227340e-02  2.62897275e-02
  8.65625888e-02 -1.21371962e-01  1.36573892e-02 -3.47248800e-02
  4.94050607e-02  6.78920299e-02 -6.68730736e-02  4.79622604e-03
  2.72714943e-02 -1.12103410e-02  3.24700922e-02  1.04447268e-01
  6.43173978e-02 -8.72736201e-02 -2.11153720e-02  8.41045454e-02
 -5.71966805e-02 -2.41298452e-02  1.01357922e-01 -1.91150326e-02
 -4.79833856e-02  3.10450345e-02  3.50774825e-02 -4.21704277e-02
  9.16152727e-03 -5.69333732e-02  3.23843546e-02  1.11541040e-02
  1.46571202e-02  1.20244557e-02 -6.22813739e-02  3.84252258e-02
  6.36504218e-03 -3.12963245e-03 -2.32323855e-02  4.05982472e-02
  3.41895968e-02 -2.23677853e-04  2.36030966e-02 -5.43230912e-03
  1.13515360e-02 -1.45598399e-02 -1.03428610e-01  1.20583689e-33
 -9.08151865e-02 -7.85382763e-02  3.63396890e-02 -7.47008249e-03
 -1.43159563e-02 -2.95720156e-02  3.42596807e-02  4.21267711e-02
 -3.11099757e-02 -1.25006447e-03 -8.04987252e-02  9.02405679e-02
  4.38434891e-02  4.51436546e-03  5.42371310e-02  1.19017726e-02
  1.21146534e-02  1.81132592e-02  2.87287459e-02 -1.45777185e-02
  9.06724706e-02 -4.16226909e-02 -6.34636777e-03 -4.61029746e-02
  7.06019811e-03  4.00931127e-02 -7.23948106e-02 -2.36353800e-02
 -8.32135528e-02  3.15482132e-02 -4.61641401e-02  5.66749796e-02
 -1.14536798e-02 -4.17909697e-02 -1.74382925e-02 -2.59682834e-02
  2.92739552e-02 -6.14406690e-02 -2.83185281e-02 -1.02883242e-01
 -9.81192756e-03  5.43410424e-04 -1.93236321e-02 -1.61934197e-02
 -7.05744997e-02 -1.78172160e-02 -8.45230222e-02  3.95556018e-02
 -4.10255678e-02  6.92484528e-02 -4.72498918e-03 -5.71916997e-02
  5.77284694e-02  1.67846249e-03 -9.48734879e-02  2.27765292e-02
  2.80874595e-02  2.46076379e-02  7.89942369e-02 -1.51999050e-03
 -2.28584688e-02  4.65059020e-02 -3.63968648e-02  9.42266956e-02
  9.85602811e-02  6.99847788e-02  4.24376279e-02  5.19417822e-02
  5.08213751e-02 -1.51088154e-02  1.24910763e-02 -1.21633336e-02
 -6.51108623e-02 -4.48844098e-02  8.08693841e-03 -6.16686642e-02
  2.26158984e-02 -1.32141128e-01 -6.96287602e-02 -2.48821825e-02
  7.52204955e-02  7.57107437e-02 -7.25805387e-02  2.86319014e-02
 -2.59592906e-02  1.06293345e-02 -2.59104371e-03 -5.28322114e-03
 -3.34291607e-02  2.20393036e-02 -7.84701481e-02 -4.67979573e-02
  1.00806672e-02 -6.00064285e-02 -2.49115415e-02 -3.54899597e-33
  5.67609631e-03 -5.33858165e-02  4.25618142e-02 -8.29062145e-03
  9.56261456e-02 -6.70116693e-02  1.23045396e-03 -6.90858886e-02
 -2.69106925e-02 -3.69272567e-02 -7.42931589e-02 -7.01589212e-02
  7.27927685e-02  1.62038617e-02  1.25436217e-01  4.38598804e-02
 -6.38688356e-02 -2.16951650e-02 -1.55176269e-02  3.07998862e-02
 -5.35067869e-03  6.24038912e-02 -3.67632061e-02  4.30006012e-02
 -7.64068440e-02  1.40483128e-02 -7.07769692e-02  6.62751645e-02
 -3.69189889e-03 -7.37906247e-02  4.05628176e-04 -3.63316061e-03
  3.80187092e-04  3.11593935e-02 -3.81157696e-02 -6.26802072e-02
  3.77666615e-02  2.54631531e-03 -2.10588090e-02  6.91050142e-02
  8.43358710e-02  1.68188603e-03 -1.11599592e-02 -1.24060633e-02
  2.83654891e-02 -7.76303038e-02 -2.39231102e-02  2.14039944e-02
  5.28709665e-02 -2.13231407e-02  4.54353690e-02 -1.33564901e-02
 -1.32361889e-01  7.07907379e-02 -3.62703092e-02  3.73520330e-02
  6.32594973e-02 -2.27370001e-02  3.63658667e-02 -3.48999724e-02
 -6.55592456e-02 -7.40326717e-02 -3.92471366e-02  8.17493126e-02
 -1.20830014e-02 -8.51283595e-02  6.28000218e-03 -6.45250008e-02
  5.58103099e-02 -3.07918992e-02 -7.94628412e-02  5.40646687e-02
  8.83395150e-02 -3.92899774e-02 -5.47561459e-02  5.04456237e-02
 -1.91785861e-02  1.20280413e-02  4.10675034e-02  3.51189151e-02
 -4.42820825e-02 -1.03243962e-01  1.10397004e-01  1.03614226e-01
 -4.04918008e-02 -3.08970362e-02  2.55782846e-02  3.32975313e-02
 -2.88095009e-02 -6.36375882e-03  1.25407800e-02  2.06899326e-02
 -1.41120674e-02  7.36461207e-02 -3.57448906e-02 -5.18099519e-08
 -6.67050993e-03  2.30728313e-02  1.91974789e-02  1.10077336e-01
  2.32558269e-02  1.24840718e-02  3.78002711e-02 -2.84802727e-02
 -1.49389915e-02 -4.50559007e-03  1.02489725e-01  1.66151719e-03
  3.01637650e-02  1.88261978e-02 -5.74379601e-03  2.71538310e-02
 -6.14678189e-02  2.06063897e-03 -8.39503407e-02  3.40195708e-02
 -1.42035419e-02 -1.32672731e-02 -2.73794215e-02  6.09203689e-02
 -1.68534461e-02 -2.17901152e-02  1.41433878e-02 -6.09478876e-02
  4.51354422e-02  4.46644574e-02 -1.90810580e-03  3.09322979e-02
  4.63854969e-02  3.77589278e-02 -3.23700416e-03 -4.59000207e-02
 -1.81847450e-03  4.28340584e-02 -3.90473311e-03  5.07553965e-02
  1.08011523e-02  7.21169338e-02 -8.94977972e-02 -4.16760042e-04
  1.14790797e-01 -2.20973231e-02 -6.64429814e-02 -1.65139120e-02
  5.38216382e-02  2.38580052e-02 -1.52012361e-02 -2.31171306e-02
 -2.81749405e-02  3.10193319e-02 -3.44210416e-02  6.57179505e-02
  5.89996204e-03  9.87700745e-03  3.10645476e-02 -1.81192774e-02
  8.21266994e-02 -2.48262454e-02  2.72929519e-02  3.32643203e-02]"
"from abc import ABC, abstractmethod


class Subject(ABC):
    """"""
    The Subject interface declares common operations for both RealSubject and
    the Proxy. As long as the client works with RealSubject using this
    interface, you'll be able to pass it a proxy instead of a real subject.
    """"""

    @abstractmethod
    def request(self) -> None:
        pass


class RealSubject(Subject):
    """"""
    The RealSubject contains some core business logic. Usually, RealSubjects are
    capable of doing some useful work which may also be very slow or sensitive -
    e.g. correcting input data. A Proxy can solve these issues without any
    changes to the RealSubject's code.
    """"""

    def request(self) -> None:
        print(""RealSubject: Handling request."")


class Proxy(Subject):
    """"""
    The Proxy has an interface identical to the RealSubject.
    """"""

    def __init__(self, real_subject: RealSubject) -> None:
        self._real_subject = real_subject

    def request(self) -> None:
        """"""
        The most common applications of the Proxy pattern are lazy loading,
        caching, controlling the access, logging, etc. A Proxy can perform one
        of these things and then, depending on the result, pass the execution to
        the same method in a linked RealSubject object.
        """"""

        if self.check_access():
            self._real_subject.request()
            self.log_access()

    def check_access(self) -> bool:
        print(""Proxy: Checking access prior to firing a real request."")
        return True

    def log_access(self) -> None:
        print(""Proxy: Logging the time of request."", end="""")


def client_code(subject: Subject) -> None:
    """"""
    The client code is supposed to work with all objects (both subjects and
    proxies) via the Subject interface in order to support both real subjects
    and proxies. In real life, however, clients mostly work with their real
    subjects directly. In this case, to implement the pattern more easily, you
    can extend your proxy from the real subject's class.
    """"""

    # ...

    subject.request()

    # ...


if __name__ == ""__main__"":
    print(""Client: Executing the client code with a real subject:"")
    real_subject = RealSubject()
    client_code(real_subject)

    print("""")

    print(""Client: Executing the same client code with a proxy:"")
    proxy = Proxy(real_subject)
    client_code(proxy)",Python,Proxy,Refactoring Guru,https://refactoring.guru/design-patterns/proxy/python/example#example-0,"[-8.89563784e-02  3.46141197e-02 -5.75726852e-02  9.81976278e-03
 -7.73907602e-02 -8.95966813e-02  1.33967455e-02 -2.04413198e-02
 -6.53340742e-02 -1.46579724e-02 -3.96752134e-02 -5.83368447e-03
  1.35149071e-02  2.66417675e-02  1.17027104e-01 -1.52391186e-02
  6.43730313e-02 -5.93388267e-03  3.08904499e-02  7.11513124e-03
  4.62817214e-02  2.39642113e-02 -7.51149002e-03  3.87747623e-02
 -5.93971796e-02 -1.21679492e-01 -6.30362984e-03 -4.93525378e-02
 -1.15267234e-03 -6.13393588e-03  6.38418198e-02  8.43117386e-02
 -1.44054189e-01  3.84872183e-02 -2.57207975e-02  5.55868782e-02
 -9.16379329e-04 -7.51799271e-02  2.05083620e-02  1.18232938e-02
  3.06453388e-02 -1.60820149e-02 -4.04663906e-02  3.61509039e-03
 -1.69736445e-02  3.04746144e-02 -1.71941780e-02  7.32374936e-02
  4.43856083e-02 -9.87044126e-02 -1.08641803e-01 -9.34123155e-03
 -5.88851981e-02  9.47293565e-02  1.57364737e-02 -1.81509759e-02
  5.11536784e-02  5.94920740e-02  1.32628530e-02  2.06747055e-02
 -1.23769172e-01  4.75590639e-02  1.39668044e-02  1.54272644e-02
 -8.49569216e-02 -3.99529235e-03 -9.84792486e-02  6.17330819e-02
  5.45794405e-02  7.39519969e-02 -2.71240845e-02 -1.14435591e-02
 -8.95185843e-02 -1.46792317e-02  7.49720559e-02 -7.95772001e-02
 -8.76342785e-03  3.09481681e-03  4.61440301e-04 -5.54475896e-02
 -1.72603820e-02 -6.99463114e-02 -8.08103457e-02  7.65287504e-02
  5.12962863e-02 -5.25138639e-02  1.81974322e-02 -1.82698779e-02
  2.30010673e-02  4.04008403e-02 -6.17865426e-03 -3.50632817e-02
 -3.02424980e-03  2.71318499e-02 -1.15724262e-02  9.65767503e-02
  3.55155990e-02 -5.95407281e-03 -2.78026536e-02  5.08578792e-02
 -3.49713042e-02 -3.45792621e-02 -1.65083259e-02 -1.89005975e-02
  5.72448596e-02  3.54856509e-03  1.26813333e-02 -5.04533499e-02
  5.70405945e-02 -4.38806526e-02 -6.73744529e-02 -1.03693241e-02
 -6.35852516e-02 -4.91539575e-02  1.62540972e-02  6.76803216e-02
  1.45484746e-01  3.96804661e-02  7.77486071e-04 -2.35585850e-02
  5.33362068e-02  2.05547735e-02  7.99953789e-02 -3.12498640e-02
  7.45444149e-02 -7.15029538e-02  1.57413743e-02  1.35280913e-33
  2.98064426e-02 -7.98116475e-02 -2.23515704e-02  3.56398448e-02
 -3.04245427e-02  5.52048087e-02  5.97383827e-02  4.98820655e-02
 -2.45236699e-03  8.24895315e-03 -8.05811677e-03  7.66471401e-02
  1.74333516e-03 -9.56169982e-03 -1.60543562e-03 -1.02065671e-02
 -9.75629240e-02  2.82859839e-02  5.21182157e-02  5.09062894e-02
  4.00304794e-02 -1.13746086e-02 -3.49338166e-02  3.12567432e-03
 -5.28812483e-02  2.71719806e-02 -3.36169451e-02 -1.56778470e-03
 -5.94781525e-02  3.13922800e-02  2.66734250e-02  5.56365680e-03
 -1.33935502e-03  1.23662492e-02 -5.14056608e-02 -3.98391970e-02
  4.35448587e-02 -1.24663971e-02 -7.45102093e-02 -7.21660405e-02
 -3.16868089e-02 -4.95103141e-03  6.20599799e-02 -1.09801618e-02
 -5.12134731e-02 -9.77689102e-02 -5.93287162e-02  8.96166041e-02
  1.02502562e-01  2.65964791e-02  7.28126094e-02  7.35466229e-03
  8.42541456e-02 -2.39975508e-02 -1.39817307e-02 -1.00906752e-02
 -3.33587499e-03  1.27369583e-01  1.22228349e-02 -7.17274323e-02
  4.87799644e-02  1.27112225e-03 -5.17104845e-03  7.17445090e-02
  2.65078880e-02  4.97599542e-02  3.62231992e-02 -5.53821167e-03
  7.69192427e-02 -3.14064659e-02 -5.85098043e-02  3.38405520e-02
 -7.28924200e-02 -4.79070432e-02 -2.93821358e-05 -9.76589881e-03
 -2.96982359e-02 -3.80337089e-02 -2.66860127e-02  3.50689776e-02
  2.05762628e-02  1.34643633e-02 -2.25704610e-02  3.24230976e-02
 -6.44100904e-02  3.49673517e-02  7.40605593e-02 -3.39477733e-02
 -5.42206056e-02 -5.42553179e-02 -4.72297333e-02 -3.68610695e-02
  4.28802986e-03  6.69874530e-03  2.43322495e-02 -4.19406062e-33
 -8.76915082e-03  5.24127856e-04 -5.10935560e-02  8.55274790e-04
 -3.16321552e-02 -7.27218762e-02  1.05000764e-01 -2.98793940e-03
 -7.59484770e-04  7.13615194e-02 -6.81615174e-02 -3.14149484e-02
  2.32658256e-02  3.87385860e-03  4.37267162e-02 -1.73052996e-02
 -9.67490673e-02 -3.23990770e-02 -2.10712273e-02  3.48125026e-02
 -1.08100556e-01  1.00985698e-01 -1.14053236e-02 -3.88138629e-02
 -1.64273493e-02  2.40278358e-04 -2.39097942e-02  8.67176279e-02
  3.09008937e-02  3.22614983e-03 -4.62375209e-02  2.46019885e-02
 -5.73356710e-02  1.73545107e-02 -3.74823622e-02 -1.61994603e-02
  3.74333151e-02  7.60554373e-02  2.92151747e-03 -6.54049739e-02
  1.72451362e-01 -1.41535727e-02 -8.50333944e-02  3.64456214e-02
  6.21232055e-02  1.71021279e-02 -8.33004341e-02  4.96678911e-02
 -3.29834186e-02  3.68828811e-02 -4.11100872e-02  7.33456248e-03
  3.40826400e-02  3.36617753e-02 -8.36018287e-03 -4.88298200e-03
 -4.44229059e-02  1.79170016e-02  2.16692276e-02  2.32098792e-02
  5.69854192e-02 -6.11401051e-02 -4.28896677e-03 -1.86191348e-03
 -1.40329236e-02  5.67099266e-03 -6.80787638e-02 -5.95272332e-02
  2.23224722e-02 -4.93045487e-02  6.01334535e-02 -6.04108442e-03
 -3.88754234e-02 -5.32365106e-02  4.66535799e-03  1.09557688e-01
 -2.42226102e-04  3.64281759e-02 -4.57851030e-02  1.40453473e-01
 -2.06010100e-02 -2.29343399e-03 -5.27025312e-02  3.99759263e-02
 -5.40068299e-02 -6.24207594e-02 -4.70847040e-02  9.65396240e-02
  4.12354479e-04 -5.91362454e-02 -1.07487375e-02  6.91732466e-02
  8.88020359e-03 -2.43234239e-03 -9.50832851e-03 -4.82420752e-08
  1.53542235e-02  3.57021438e-03  7.22418725e-02  7.29331747e-02
 -4.75545898e-02  8.34172592e-02 -1.00604713e-01 -1.34858236e-01
 -3.42439637e-02  5.17890863e-02 -3.06748450e-02 -4.62083891e-02
  1.55221634e-02  2.57257205e-02 -1.19862135e-03  1.16478801e-02
 -1.31505476e-02 -4.18068729e-02 -3.94796431e-02  3.69426645e-02
 -1.64103955e-02 -6.61595240e-02 -6.94300421e-03  2.56157555e-02
 -8.09057876e-02  3.55187505e-02  3.85418981e-02 -4.51089554e-02
 -6.66332617e-02  5.95608086e-04  1.60911623e-02 -2.93190987e-03
 -1.49456961e-02  7.14995191e-02 -1.16883136e-01  9.30118933e-02
 -3.65584269e-02  1.27411773e-03 -4.95971413e-03  7.39178434e-02
 -2.49419943e-03 -5.09994067e-02 -8.27345997e-02 -1.01115257e-02
  6.81498721e-02  5.50132338e-03 -3.88077497e-02 -4.45566066e-02
  1.00628249e-01  6.76060095e-02 -4.91049215e-02 -5.24896011e-02
 -4.94593307e-02 -4.68408503e-02 -7.93415960e-03  1.07653551e-02
 -8.66439380e-03 -4.90598567e-02 -3.45125012e-02  2.59674285e-02
  4.46290001e-02  1.00748360e-01  4.34869435e-03  4.68412749e-02]"
"from __future__ import annotations
from abc import ABC, abstractmethod
from typing import Any, Optional


class Handler(ABC):
    """"""
    The Handler interface declares a method for building the chain of handlers.
    It also declares a method for executing a request.
    """"""

    @abstractmethod
    def set_next(self, handler: Handler) -> Handler:
        pass

    @abstractmethod
    def handle(self, request) -> Optional[str]:
        pass


class AbstractHandler(Handler):
    """"""
    The default chaining behavior can be implemented inside a base handler
    class.
    """"""

    _next_handler: Handler = None

    def set_next(self, handler: Handler) -> Handler:
        self._next_handler = handler
        # Returning a handler from here will let us link handlers in a
        # convenient way like this:
        # monkey.set_next(squirrel).set_next(dog)
        return handler

    @abstractmethod
    def handle(self, request: Any) -> str:
        if self._next_handler:
            return self._next_handler.handle(request)

        return None


""""""
All Concrete Handlers either handle a request or pass it to the next handler in
the chain.
""""""


class MonkeyHandler(AbstractHandler):
    def handle(self, request: Any) -> str:
        if request == ""Banana"":
            return f""Monkey: I'll eat the {request}""
        else:
            return super().handle(request)


class SquirrelHandler(AbstractHandler):
    def handle(self, request: Any) -> str:
        if request == ""Nut"":
            return f""Squirrel: I'll eat the {request}""
        else:
            return super().handle(request)


class DogHandler(AbstractHandler):
    def handle(self, request: Any) -> str:
        if request == ""MeatBall"":
            return f""Dog: I'll eat the {request}""
        else:
            return super().handle(request)


def client_code(handler: Handler) -> None:
    """"""
    The client code is usually suited to work with a single handler. In most
    cases, it is not even aware that the handler is part of a chain.
    """"""

    for food in [""Nut"", ""Banana"", ""Cup of coffee""]:
        print(f""\nClient: Who wants a {food}?"")
        result = handler.handle(food)
        if result:
            print(f""  {result}"", end="""")
        else:
            print(f""  {food} was left untouched."", end="""")


if __name__ == ""__main__"":
    monkey = MonkeyHandler()
    squirrel = SquirrelHandler()
    dog = DogHandler()

    monkey.set_next(squirrel).set_next(dog)

    # The client should be able to send a request to any handler, not just the
    # first one in the chain.
    print(""Chain: Monkey > Squirrel > Dog"")
    client_code(monkey)
    print(""\n"")

    print(""Subchain: Squirrel > Dog"")
    client_code(squirrel)",Python,Chain of Responsibility,Refactoring Guru,https://refactoring.guru/design-patterns/chain-of-responsibility/python/example#example-0,"[-6.91866502e-02  5.55196889e-02  5.12321144e-02  4.79041152e-02
 -7.85219595e-02 -5.86121604e-02  5.18067889e-02  1.39384414e-03
 -2.69138962e-02 -5.29029220e-02  3.02004367e-02 -1.58780217e-02
  3.92266810e-02 -6.96385512e-03  5.91545962e-02 -7.86378141e-03
  7.20199347e-02 -1.18788285e-02  1.51515370e-02 -3.72334160e-02
  1.95389539e-02  5.14138639e-02  4.15025689e-02  1.31259970e-02
 -1.54720873e-01 -1.04055591e-01 -3.99441943e-02 -9.07232463e-02
 -3.03951614e-02  1.35369366e-02  2.81141582e-03  5.29506197e-03
 -8.86457264e-02  7.95601606e-02 -2.25690175e-02  7.38182440e-02
  2.03162562e-02 -1.04196429e-01 -7.27687776e-03  2.50768270e-02
  1.95690081e-03  2.11039055e-02 -5.34148030e-02 -1.92414019e-02
 -4.96821105e-02  2.76198890e-02 -8.04179013e-02  4.76039387e-02
  7.81769166e-04 -7.68057480e-02 -5.22693172e-02  3.51339579e-02
  2.51402576e-02 -2.05513537e-02  5.21398932e-02 -1.92184336e-02
  7.72255287e-02 -9.73306596e-02 -2.41143350e-02 -3.24738324e-02
 -1.74432844e-02 -2.73069646e-02 -2.54537556e-02  2.69518048e-03
 -1.77421924e-02 -2.26272270e-02 -6.74306303e-02  7.58333504e-02
  1.76503081e-02  1.51059981e-02 -1.77140050e-02 -1.74796972e-02
 -7.16147199e-02  2.89555863e-02  6.71697594e-03 -5.16033247e-02
  4.72132154e-02  1.28321582e-02 -3.46667767e-02 -5.83896190e-02
 -9.34707373e-02 -3.83263789e-02 -2.98028649e-03  4.07211967e-02
 -2.74738786e-03 -2.66962349e-02 -1.69072708e-03 -8.40107724e-03
  2.94077471e-02  6.62809461e-02 -4.90792654e-02 -4.02794927e-02
  1.58409635e-03 -1.59218907e-02 -9.64930188e-03  9.20287594e-02
  1.53695336e-02 -5.22529781e-02 -4.08510342e-02  9.51194167e-02
  9.74070933e-03  1.71749908e-02  2.66443063e-02 -1.09510161e-01
  6.29856512e-02  5.57333231e-02 -7.68052191e-02 -5.97894229e-02
  2.12774500e-02 -4.02336717e-02 -5.13665639e-02  1.06053557e-02
 -1.01521416e-02  2.98993662e-03 -2.45185550e-02  4.69177179e-02
  5.21898940e-02  2.75048055e-02  3.29821631e-02  4.16574068e-02
  1.12588920e-01  8.50801915e-03  6.55442290e-03  1.30720362e-02
  2.68155392e-02 -2.61995327e-02  1.98871531e-02  1.95543614e-33
 -4.47546057e-02 -7.98631236e-02 -2.49092244e-02  6.09624246e-03
  5.61496653e-02  6.06934875e-02  4.06320244e-02  7.92782102e-03
 -4.11513671e-02 -1.50629720e-02 -6.50632605e-02  2.48887967e-02
 -1.34143345e-02 -1.21601354e-02 -9.41989757e-03 -2.39377357e-02
  1.18750213e-02  2.12344285e-02  8.11057910e-02  1.27999485e-02
  4.77318540e-02  2.59097535e-02  1.01004150e-02 -4.62360680e-03
 -3.89792733e-02  4.04505208e-02 -7.93513954e-02 -3.74211557e-02
  5.96018136e-03 -6.31286344e-03 -2.20942609e-02 -4.61089648e-02
 -1.81657206e-02 -1.24724377e-02 -4.49826233e-02 -2.24548485e-02
  4.80679274e-02 -3.57393436e-02 -7.81066343e-02 -1.27942815e-01
 -4.58349325e-02 -1.36081409e-02  3.63722630e-02  4.12391126e-02
 -8.19084272e-02 -6.90606162e-02 -7.56446347e-02  8.22230950e-02
 -1.58678591e-02  4.98662516e-02  6.83123246e-02 -2.23244261e-02
  1.55428007e-01 -2.60338709e-02 -3.82178500e-02 -4.73227277e-02
  1.56532079e-02  4.70730662e-02  1.38850035e-02 -2.32702699e-02
  8.87298435e-02  8.53859726e-03  2.83163943e-04  6.46531209e-02
  3.24246883e-02  2.49935929e-02  1.16093699e-02  2.60051545e-02
  7.10695162e-02 -1.42726656e-02 -4.58547957e-02  6.85880855e-02
 -1.91246513e-02 -2.65384130e-02  1.83724593e-02 -2.82318722e-02
 -3.62892374e-02 -9.22268033e-02  9.67862643e-03 -2.02233642e-02
  1.82972252e-02  2.37330273e-02 -6.45291060e-02  1.07479900e-01
 -6.92725033e-02  4.25472185e-02  5.50988875e-02  4.11703158e-03
  1.30924424e-02  2.11359020e-02 -8.21107328e-02 -5.85141219e-02
  4.11383696e-02  1.13114668e-03  3.33262235e-02 -5.12699428e-33
  2.17341855e-02  1.54520208e-02 -1.55344643e-02 -2.89383475e-02
 -3.00750397e-02 -3.53521034e-02  4.79104221e-02 -2.56611593e-02
 -6.16081199e-03 -2.59769391e-02 -9.55819637e-02  6.87039504e-03
  5.85859120e-02 -3.82549455e-03  7.79927149e-02  5.20973876e-02
 -7.42875785e-02  1.99112073e-02 -1.07493531e-02 -4.57458720e-02
 -9.15144905e-02  1.28215086e-02 -3.34022082e-02  4.34250645e-02
  7.60043552e-03  3.43710519e-02  8.46081693e-03  6.03078157e-02
 -2.13846359e-02 -2.95738783e-02 -3.68552865e-05 -3.08559760e-02
  3.00130192e-02  2.33422536e-02  1.35003142e-02 -3.30936126e-02
  4.39197533e-02  6.10318221e-02  1.94429960e-02  4.62036133e-02
  1.73054338e-01  1.40626319e-02 -5.53143248e-02  7.53782839e-02
  1.16080754e-02  2.61191279e-02 -6.78273514e-02 -7.56509369e-03
 -2.06141751e-02  1.32696507e-02 -3.47492024e-02 -7.07439706e-02
 -3.14876065e-02 -5.33944070e-02 -7.87577257e-02  5.98230362e-02
  4.11436968e-02 -3.93831283e-02  2.08070576e-02 -4.48557474e-02
 -2.22798175e-04 -3.72675546e-02 -2.35355515e-02  8.61416906e-02
  2.98003503e-03 -7.59476721e-02 -4.00630571e-02 -1.16238028e-01
  5.80130816e-02 -5.56591563e-02  4.57616476e-03  9.10069570e-02
 -2.20758785e-02 -7.64994547e-02  4.37142290e-02  1.63050145e-01
 -1.69781633e-02 -5.49573861e-02 -2.72389166e-02  6.18763044e-02
 -6.61383420e-02 -4.77951132e-02  3.33707109e-02  9.88803059e-02
 -4.03395519e-02 -7.38916621e-02  3.86465825e-02  1.18217446e-01
  1.95473805e-02 -1.56640764e-02  4.80920672e-02  5.08312210e-02
  5.26403449e-02  8.20474029e-02 -2.50684433e-02 -5.47899042e-08
 -1.17657557e-02 -4.53373529e-02 -1.58414785e-02  9.66596156e-02
  1.99843384e-02  8.80598798e-02 -3.58790718e-02 -1.14569873e-01
 -2.97531970e-02  2.81603467e-02 -2.92706322e-02  5.19908406e-02
 -1.26821212e-02 -1.67008620e-02  4.10076231e-02  2.98735406e-02
  3.77247669e-02 -5.59607670e-02 -6.17685989e-02  8.21273848e-02
 -1.31061785e-02 -2.92123742e-02  9.75540839e-03  2.48827133e-02
 -7.65055120e-02 -6.02972582e-02  3.10960878e-02  8.58921409e-02
 -6.00301623e-02 -4.45556939e-02  2.79367901e-02 -1.69453248e-02
 -5.25348000e-02  8.86811465e-02 -5.57008572e-02  1.80276893e-02
 -7.53121525e-02 -3.84399965e-02  5.00989780e-02  9.16787386e-02
 -4.01922055e-02  4.81480313e-03 -1.36084810e-01 -7.36259576e-03
  2.69428231e-02 -1.87122263e-02 -7.74579868e-02 -4.61084917e-02
  5.40785827e-02  9.74137112e-02 -1.21023215e-01  2.78515071e-02
 -1.11475857e-02 -1.50645953e-02  3.65210650e-03  1.14469929e-02
  2.93722060e-02 -3.94823290e-02 -3.37247364e-03  1.37817673e-02
 -6.08441595e-04  8.96484107e-02  6.65849000e-02  6.39673369e-03]"
"from __future__ import annotations
from collections.abc import Iterable, Iterator
from typing import Any, List


""""""
To create an iterator in Python, there are two abstract classes from the built-
in `collections` module - Iterable,Iterator. We need to implement the
`__iter__()` method in the iterated object (collection), and the `__next__ ()`
method in theiterator.
""""""


class AlphabeticalOrderIterator(Iterator):
    """"""
    Concrete Iterators implement various traversal algorithms. These classes
    store the current traversal position at all times.
    """"""

    """"""
    `_position` attribute stores the current traversal position. An iterator may
    have a lot of other fields for storing iteration state, especially when it
    is supposed to work with a particular kind of collection.
    """"""
    _position: int = None

    """"""
    This attribute indicates the traversal direction.
    """"""
    _reverse: bool = False

    def __init__(self, collection: WordsCollection, reverse: bool = False) -> None:
        self._collection = collection
        self._reverse = reverse
        self._position = -1 if reverse else 0

    def __next__(self):
        """"""
        The __next__() method must return the next item in the sequence. On
        reaching the end, and in subsequent calls, it must raise StopIteration.
        """"""
        try:
            value = self._collection[self._position]
            self._position += -1 if self._reverse else 1
        except IndexError:
            raise StopIteration()

        return value


class WordsCollection(Iterable):
    """"""
    Concrete Collections provide one or several methods for retrieving fresh
    iterator instances, compatible with the collection class.
    """"""

    def __init__(self, collection: List[Any] = []) -> None:
        self._collection = collection

    def __iter__(self) -> AlphabeticalOrderIterator:
        """"""
        The __iter__() method returns the iterator object itself, by default we
        return the iterator in ascending order.
        """"""
        return AlphabeticalOrderIterator(self._collection)

    def get_reverse_iterator(self) -> AlphabeticalOrderIterator:
        return AlphabeticalOrderIterator(self._collection, True)

    def add_item(self, item: Any):
        self._collection.append(item)


if __name__ == ""__main__"":
    # The client code may or may not know about the Concrete Iterator or
    # Collection classes, depending on the level of indirection you want to keep
    # in your program.
    collection = WordsCollection()
    collection.add_item(""First"")
    collection.add_item(""Second"")
    collection.add_item(""Third"")

    print(""Straight traversal:"")
    print(""\n"".join(collection))
    print("""")

    print(""Reverse traversal:"")
    print(""\n"".join(collection.get_reverse_iterator()), end="""")",Python,Iterator,Refactoring Guru,https://refactoring.guru/design-patterns/iterator/python/example#example-0,"[-2.15597600e-02  3.84549750e-03  2.45732311e-02 -2.76228786e-02
 -1.15045249e-01 -4.26567905e-02 -2.41247695e-02 -1.03576318e-03
 -2.05210596e-02 -4.24788147e-03  5.70718236e-02  2.43945681e-02
  3.76724601e-02 -5.49773611e-02 -4.03406955e-02  2.42214873e-02
  2.29911719e-04  4.31981720e-02  2.96365507e-02 -6.84959739e-02
  2.93316022e-02  8.61694589e-02  3.83249745e-02  6.51398003e-02
 -5.53451888e-02  2.06970163e-02 -9.57877189e-02 -1.94681101e-02
 -1.77257620e-02 -4.18851897e-02  1.22929988e-02 -2.37190048e-03
 -4.87017212e-03  5.90841509e-02  8.88208568e-04  9.68336128e-03
 -2.51266081e-02 -1.81595664e-02  3.86267528e-02  2.43819524e-02
 -1.20549556e-02  2.60834284e-02 -6.70986101e-02 -6.73497766e-02
 -3.03821452e-03  2.41108816e-02 -6.79858029e-02  1.62606351e-02
  2.51187440e-02 -2.73523591e-02  8.52269679e-03  6.64214715e-02
 -2.96117403e-02  3.28432247e-02 -3.23035498e-03  8.11289698e-02
  1.28695905e-01 -4.63171825e-02 -8.93175006e-02 -2.71459594e-02
  5.50225638e-02 -3.09522897e-02 -6.74861521e-02 -5.58741316e-02
  5.68364887e-03 -5.47658838e-02  1.64270177e-02  6.58794492e-02
  1.81039982e-02  3.80245894e-02  1.52897104e-04  2.83356179e-02
 -1.17634684e-02  5.11739440e-02  8.18316452e-03  2.68427264e-02
  2.27932036e-02 -4.85514523e-03 -1.78656969e-02 -1.86311658e-02
 -1.06509723e-01 -3.51993069e-02  1.54968128e-02  3.84898931e-02
  3.93855609e-02 -1.17314689e-01 -5.39958142e-02  1.42094062e-03
  3.43493558e-02  8.93997550e-02 -4.24414799e-02 -1.06934190e-01
  1.21601298e-01 -1.58146080e-02  6.69382364e-02  9.39720124e-02
  8.42899382e-02 -3.81857529e-02 -9.91191715e-03 -3.20395716e-02
 -2.07335372e-02 -3.04530747e-02 -2.90486566e-03 -1.22744873e-01
  8.70061293e-03  3.86291905e-03 -3.30935083e-02 -1.28365889e-01
  3.64527330e-02 -9.52784494e-02 -3.97262685e-02 -3.87448482e-02
  2.40197256e-02 -2.10541617e-02 -3.91856544e-02  9.61152185e-03
 -9.35049057e-02  6.95172921e-02  8.66216421e-02 -1.72188636e-02
  1.61245558e-02 -3.75319039e-03  4.83489111e-02  3.03478111e-02
  1.61087681e-02 -2.93105165e-03  2.56058369e-02  7.91090433e-34
  7.34808622e-03 -5.51304454e-03  2.85775363e-02 -5.25197806e-03
 -2.88318172e-02  1.64385326e-02  4.78320494e-02  6.70593455e-02
 -6.32571056e-02 -8.44824407e-03  8.32125451e-03  7.87842646e-02
 -2.80760415e-02  2.78257579e-02 -3.10574993e-02 -5.91616966e-02
  3.99274938e-02 -6.85250666e-03 -8.73059705e-02 -5.03096692e-02
  8.72284994e-02  1.96509697e-02 -3.32535729e-02 -9.42715779e-02
 -1.82708744e-02 -2.54917257e-02 -7.19677061e-02 -2.83821728e-02
 -9.45166200e-02 -1.06536027e-03 -4.17796224e-02 -3.08874547e-02
 -5.83394489e-04 -1.46900760e-02  2.30642036e-02 -1.72621221e-03
  4.44036536e-02 -4.64508682e-02  5.32267895e-03 -7.37587735e-02
 -1.80031192e-02 -1.77578609e-02  1.93770789e-02  1.11729801e-02
  2.88797752e-03  2.07800232e-03 -5.97310886e-02  3.57873775e-02
 -1.98989194e-02  3.73764336e-02  1.26565266e-02 -2.08574440e-02
 -5.48557341e-02  1.96332522e-02 -5.16851619e-02 -4.16674763e-02
  4.52056266e-02  8.96744505e-02  6.97833747e-02  5.42072505e-02
 -3.25175351e-03  9.37331170e-02  2.46374812e-02  1.07649736e-01
  4.44116406e-02 -2.83661168e-02  1.38101662e-02  3.63373733e-03
  3.83532010e-02 -2.21667979e-02 -4.72414978e-02  1.24127315e-02
 -1.47418026e-02 -2.68668160e-02  5.45605682e-02 -3.50745358e-02
 -5.91186881e-02 -1.69322029e-01 -7.86252916e-02 -1.26321003e-01
 -2.94089671e-02  1.30692022e-02 -6.02355367e-03  9.18326061e-03
  1.11191990e-02  1.23301921e-02  8.43664631e-03 -4.39620726e-02
  3.25882211e-02 -3.60228829e-02 -6.53150529e-02 -4.34809439e-02
  6.92668930e-02  6.47729114e-02  4.45632748e-02 -5.08586814e-33
  7.88131133e-02 -5.28309010e-02  4.24786247e-02 -4.75892611e-03
  3.70993614e-02 -6.70439303e-02  5.83119467e-02  7.06351325e-02
 -3.23458249e-03 -9.01732817e-02 -7.14495629e-02  3.00694872e-02
  8.75872970e-02 -1.85548756e-02  1.44746825e-01  6.85098767e-02
 -7.17904326e-03 -1.97495483e-02  3.68189178e-02  5.39829675e-03
 -7.34607577e-02 -2.15675365e-02 -1.59663539e-02 -3.19605619e-02
 -2.05618553e-02 -4.18175496e-02  6.38913810e-02 -7.37779448e-03
  5.09546883e-02 -3.47008416e-03  5.06738164e-02  3.62186767e-02
  7.36495703e-02  5.78772612e-02 -7.03279153e-02 -3.11095156e-02
 -2.33981572e-02 -6.61912709e-02  1.82734441e-03  9.44565535e-02
  1.00669757e-01  2.01492645e-02  5.23234122e-02 -2.04164777e-02
  1.48129584e-02 -5.31896204e-02 -1.08603828e-01  6.40469268e-02
  7.31580891e-03  2.43317112e-02  4.67781015e-02 -6.93734363e-03
 -6.38676062e-02  3.35741490e-02  2.21979003e-02  6.11469224e-02
  3.05415578e-02 -4.68389206e-02  3.89456451e-02  6.05349569e-03
 -2.42280476e-02 -2.72967410e-03  9.41128433e-02 -8.93763732e-03
  6.54603879e-04  1.90613177e-02 -1.27752498e-01 -8.62072483e-02
 -1.32256709e-02 -5.15775383e-02  2.50973497e-02  2.68428754e-02
 -4.77175787e-02 -4.42069508e-02 -4.04051170e-02  1.13612920e-01
 -5.53448405e-03  9.04095732e-03 -1.96303446e-02 -4.34040800e-02
 -1.14896141e-01  1.42707406e-02  2.51020025e-02  4.80777696e-02
 -3.62472236e-02 -1.06382005e-01  4.87548932e-02  6.21756576e-02
 -3.33490632e-02  1.00904601e-02  4.80382927e-02 -3.88622768e-02
  7.69730508e-02  6.09904379e-02  5.56468293e-02 -5.17086036e-08
 -1.22368008e-01 -9.75955501e-02  4.36963439e-02  9.60103720e-02
  5.18419780e-02 -1.26834828e-02  5.12723699e-02  6.80659851e-03
 -5.07949432e-03 -8.84463787e-02  6.22099824e-02  1.55998692e-02
  2.59015802e-03 -1.35221956e-02  3.98385711e-02  3.97206135e-02
  4.77205925e-02 -2.46685147e-02 -4.74846624e-02  2.55661104e-02
 -2.55476870e-03 -8.22231397e-02  2.90476601e-03 -1.72367059e-02
 -6.59415349e-02  4.53785509e-02 -1.64318979e-02 -1.92517582e-02
  2.93252841e-02  1.45132642e-03  6.54723570e-02  4.18199040e-03
 -5.13401115e-03  3.95571031e-02 -1.96791273e-02  5.78795150e-02
 -2.74371058e-02 -1.98975038e-02  4.58637848e-02  4.05218778e-03
 -3.25762331e-02 -1.00540062e-02 -9.14860591e-02  2.23574582e-02
  5.52851856e-02 -7.76140541e-02 -4.92927991e-02 -3.49916928e-02
  5.55621907e-02 -1.01451401e-03 -1.13800101e-01 -3.74065414e-02
  7.96290487e-02 -7.27445558e-02  2.89504882e-02  8.56268629e-02
  2.12042667e-02  3.21660377e-03 -7.21434727e-02  1.17306644e-02
  1.74395479e-02 -2.07269136e-02  3.88960540e-02  6.01384416e-02]"
"from __future__ import annotations
from abc import ABC, abstractmethod
from datetime import datetime
from random import sample
from string import ascii_letters, digits


class Originator():
    """"""
    The Originator holds some important state that may change over time. It also
    defines a method for saving the state inside a memento and another method
    for restoring the state from it.
    """"""

    _state = None
    """"""
    For the sake of simplicity, the originator's state is stored inside a single
    variable.
    """"""

    def __init__(self, state: str) -> None:
        self._state = state
        print(f""Originator: My initial state is: {self._state}"")

    def do_something(self) -> None:
        """"""
        The Originator's business logic may affect its internal state.
        Therefore, the client should backup the state before launching methods
        of the business logic via the save() method.
        """"""

        print(""Originator: I'm doing something important."")
        self._state = self._generate_random_string(30)
        print(f""Originator: and my state has changed to: {self._state}"")

    def _generate_random_string(self, length: int = 10) -> None:
        return """".join(sample(ascii_letters, length))

    def save(self) -> Memento:
        """"""
        Saves the current state inside a memento.
        """"""

        return ConcreteMemento(self._state)

    def restore(self, memento: Memento) -> None:
        """"""
        Restores the Originator's state from a memento object.
        """"""

        self._state = memento.get_state()
        print(f""Originator: My state has changed to: {self._state}"")


class Memento(ABC):
    """"""
    The Memento interface provides a way to retrieve the memento's metadata,
    such as creation date or name. However, it doesn't expose the Originator's
    state.
    """"""

    @abstractmethod
    def get_name(self) -> str:
        pass

    @abstractmethod
    def get_date(self) -> str:
        pass


class ConcreteMemento(Memento):
    def __init__(self, state: str) -> None:
        self._state = state
        self._date = str(datetime.now())[:19]

    def get_state(self) -> str:
        """"""
        The Originator uses this method when restoring its state.
        """"""
        return self._state

    def get_name(self) -> str:
        """"""
        The rest of the methods are used by the Caretaker to display metadata.
        """"""

        return f""{self._date} / ({self._state[0:9]}...)""

    def get_date(self) -> str:
        return self._date


class Caretaker():
    """"""
    The Caretaker doesn't depend on the Concrete Memento class. Therefore, it
    doesn't have access to the originator's state, stored inside the memento. It
    works with all mementos via the base Memento interface.
    """"""

    def __init__(self, originator: Originator) -> None:
        self._mementos = []
        self._originator = originator

    def backup(self) -> None:
        print(""\nCaretaker: Saving Originator's state..."")
        self._mementos.append(self._originator.save())

    def undo(self) -> None:
        if not len(self._mementos):
            return

        memento = self._mementos.pop()
        print(f""Caretaker: Restoring state to: {memento.get_name()}"")
        try:
            self._originator.restore(memento)
        except Exception:
            self.undo()

    def show_history(self) -> None:
        print(""Caretaker: Here's the list of mementos:"")
        for memento in self._mementos:
            print(memento.get_name())


if __name__ == ""__main__"":
    originator = Originator(""Super-duper-super-puper-super."")
    caretaker = Caretaker(originator)

    caretaker.backup()
    originator.do_something()

    caretaker.backup()
    originator.do_something()

    caretaker.backup()
    originator.do_something()

    print()
    caretaker.show_history()

    print(""\nClient: Now, let's rollback!\n"")
    caretaker.undo()

    print(""\nClient: Once more!\n"")
    caretaker.undo()",Python,Memento,Refactoring Guru,https://refactoring.guru/design-patterns/memento/python/example#example-0,"[-9.85507965e-02  7.45706186e-02 -1.63170341e-02  6.11337228e-03
 -4.28129621e-02 -2.88935956e-02 -3.53293978e-02  2.35410482e-02
 -4.19153832e-02 -6.26380667e-02  6.18933886e-02 -1.84073746e-02
  6.15960639e-03 -2.89419722e-02 -2.58207507e-02 -1.98438354e-02
 -5.79351932e-02  2.94821337e-02 -2.68726237e-02 -3.76571938e-02
 -4.77001769e-03  2.61709876e-02  4.54061665e-02  5.91891222e-02
 -1.08527839e-02 -2.18227617e-02 -2.77872453e-03  1.13921044e-02
  2.93639656e-02 -2.14414243e-02  2.87942830e-02  6.10565990e-02
 -2.67830193e-02  1.81090459e-02  3.11296750e-02  1.01131767e-01
 -3.84856425e-02 -7.52026960e-03 -2.14083344e-02 -1.29742986e-02
  1.98830897e-03  1.93791687e-02 -6.78698570e-02 -8.20891559e-02
 -5.73090538e-02  1.78800393e-02 -5.21307625e-02 -1.00756176e-02
  4.71089520e-02 -4.10116129e-02 -2.73107085e-02  8.79720598e-02
 -1.78566687e-02  5.11244580e-04  3.99357677e-02  3.98416594e-02
  1.45580888e-01 -2.33813804e-02 -8.67170691e-02 -5.78118004e-02
 -2.96335910e-02  4.12472486e-02 -2.41206251e-02 -2.52465233e-02
 -1.99104454e-02  1.16530284e-02 -1.82313509e-02  1.88369881e-02
  6.33826554e-02  2.63370457e-03 -3.31089720e-02  3.23176780e-03
 -1.86486859e-02  4.19731364e-02 -3.34069598e-03 -4.85049635e-02
  1.20890252e-02  9.35097132e-03 -7.84034058e-02 -7.69458339e-02
 -2.92213671e-02 -5.79201505e-02  4.55638207e-02  7.08850846e-02
  2.16878168e-02 -7.27285072e-02  1.40404934e-03 -1.36373956e-02
  6.97012246e-02  6.51426390e-02 -1.83605067e-02 -9.17402729e-02
  6.04944378e-02 -2.45296806e-02 -6.38272390e-02  6.70392141e-02
  3.30419950e-02  1.09795993e-02 -1.23078888e-02  6.88762143e-02
 -2.32849866e-02 -9.42692626e-03  2.60107238e-02  3.78885702e-03
  3.49592268e-02  2.55012922e-02 -3.41681167e-02 -1.11350566e-01
  2.83558536e-02 -3.87982558e-03 -3.29220966e-02 -2.02359934e-03
  1.00451615e-02  4.71023098e-02  6.07991219e-02  2.67076376e-03
 -3.31014544e-02  6.55628368e-02  9.63930506e-03  4.44007292e-02
  1.22576162e-01  2.78079771e-02  6.35408312e-02  5.69042237e-03
 -3.69824506e-02 -3.40804197e-02  2.38586031e-02 -1.99493605e-34
  2.08713878e-02 -4.57750447e-02 -3.16040479e-02  1.02734305e-02
 -9.75515507e-03  8.97618681e-02  1.24588562e-02  2.61206534e-02
  8.38938577e-04 -5.90136535e-02  1.58451702e-02  6.50507659e-02
 -4.73171026e-02 -5.26568741e-02 -5.24848839e-03  2.22602859e-03
 -4.58234698e-02  5.50877675e-02  8.91100988e-02  4.07883413e-02
  1.08701900e-01  5.93969636e-02 -3.91445868e-02 -4.97492142e-02
 -1.61497798e-02  2.95344442e-02  7.32214423e-03  3.42867449e-02
 -8.18679780e-02 -1.48339095e-02 -4.31085974e-02 -3.64259258e-02
  1.18918056e-02 -1.61205567e-02  2.11097486e-02  1.64053030e-02
  1.21897263e-02 -6.25255331e-02 -1.05856471e-01 -1.31157547e-01
 -5.51610924e-02 -4.21857387e-02  1.18652964e-02 -1.99172869e-02
 -4.16472517e-02 -1.50067404e-01 -2.98836245e-03  6.94667175e-02
  2.69012898e-02  6.38477728e-02  4.04709801e-02 -6.67442055e-03
 -5.21627348e-03 -9.12462547e-02 -8.95394906e-02  1.00318864e-02
  2.91647390e-02  2.44718362e-02  3.36240120e-02 -4.51319367e-02
  1.15736298e-01  2.00718772e-02 -6.27457350e-03  6.78901151e-02
  1.24702770e-02  4.68647368e-02  4.97966483e-02  2.54774950e-02
  7.59322271e-02  2.25790981e-02 -9.08420831e-02  2.26625521e-02
 -5.40096313e-02 -6.29327223e-02  1.38395121e-02 -2.29361895e-02
  3.30662243e-02 -7.26943091e-02 -6.09715953e-02 -5.35286851e-02
  1.65001322e-02 -2.69527230e-02 -9.27579775e-02  1.44671369e-02
  3.31415460e-02 -2.57592974e-03  6.47025034e-02  9.81226005e-03
 -1.10241305e-02  3.41702178e-02 -6.34273961e-02 -1.09317191e-01
  5.07092774e-02  2.70628873e-02  9.47270193e-04 -4.24122807e-33
  5.48736751e-02 -6.81955293e-02  3.97370346e-02 -2.04740763e-02
 -4.30806074e-03 -6.29513860e-02 -1.53179746e-03  6.22197390e-02
 -6.77261576e-02 -7.50453174e-02 -8.12018588e-02 -5.01261000e-03
  1.14947088e-01  6.15549914e-04  8.44236985e-02  4.65513021e-02
 -4.43028733e-02 -3.16573977e-02 -4.58368994e-02 -7.44645530e-03
 -1.09688908e-01  6.05109185e-02 -4.93543074e-02  3.80608849e-02
 -6.80597201e-02 -3.56019195e-03 -2.65747798e-03  6.13963939e-02
  6.79434985e-02 -4.89564613e-02  2.38084365e-02 -2.16242615e-02
 -5.67151941e-02  3.64275724e-02 -3.86878550e-02 -2.64765900e-02
 -2.74493601e-02 -5.32544591e-02 -4.54902276e-02  6.89002126e-02
  1.25239968e-01  7.91115537e-02 -7.81472474e-02  1.16489455e-02
 -4.66644112e-03  5.34703285e-02 -8.92050862e-02  5.50832376e-02
  4.62208763e-02 -1.38314180e-02  1.34697743e-02 -9.25152674e-02
 -6.06119558e-02 -2.55909804e-02 -4.30026725e-02  4.37033884e-02
  1.14265665e-01 -4.38441932e-02 -4.60711159e-02 -4.46208427e-03
 -4.43542078e-02 -4.03293930e-02 -4.55365255e-02  5.80412745e-02
 -4.27613892e-02 -4.23914343e-02 -4.75240685e-02 -3.34723033e-02
 -1.19536305e-02 -3.96446250e-02  6.93718418e-02  3.35848071e-02
 -2.11954452e-02 -8.79977196e-02  5.91624938e-02  1.27195746e-01
 -8.44599083e-02 -3.66494469e-02  8.86477623e-03 -3.31255458e-02
 -8.89575854e-02 -5.36498241e-02  3.14010605e-02  2.95775291e-02
 -6.99581876e-02 -8.39953274e-02 -2.83172987e-02  1.13887392e-01
  4.85878587e-02 -6.61527663e-02  2.90173870e-02  7.26163015e-02
 -2.73913075e-03  4.80902418e-02 -2.28975266e-02 -5.39955245e-08
 -5.20146787e-02  5.11744106e-03  9.52233374e-02  9.06353146e-02
  4.54150662e-02 -7.36032799e-02  3.40303853e-02 -7.50377178e-02
 -7.67917931e-03 -2.02715453e-02 -5.74454805e-03 -2.75373273e-02
 -4.86036055e-02 -6.82836995e-02  4.12050560e-02  3.48390564e-02
  2.40985788e-02  1.32689858e-02 -3.42723988e-02  3.10529750e-02
 -3.28302607e-02 -9.11108255e-02  1.74587294e-02  2.03801915e-02
 -8.70380104e-02  2.35104989e-02  5.25693316e-03  7.04269707e-02
 -1.69881377e-02  2.67900825e-02  1.09756507e-01  7.81412469e-04
  5.74891828e-02  3.35126370e-02 -4.91010100e-02 -2.17796769e-03
  1.77140329e-02 -3.00438721e-02  4.33149748e-02  9.30420160e-02
  4.47415635e-02 -2.64832415e-02 -1.11440830e-01  3.72862257e-03
  1.19251432e-02 -1.04549397e-02 -1.17315147e-02 -8.40800852e-02
  1.43650603e-02  1.63691733e-02 -9.83239487e-02 -3.74463238e-02
  2.56474275e-04  9.85463616e-03  3.36481594e-02  4.53333631e-02
  7.92059451e-02 -3.41165857e-03 -8.69085779e-04  5.28971180e-02
  1.38290869e-02  4.21716124e-02  8.68900865e-02  2.50767563e-02]"
"from __future__ import annotations
from abc import ABC, abstractmethod


class Context:
    """"""
    The Context defines the interface of interest to clients. It also maintains
    a reference to an instance of a State subclass, which represents the current
    state of the Context.
    """"""

    _state = None
    """"""
    A reference to the current state of the Context.
    """"""

    def __init__(self, state: State) -> None:
        self.transition_to(state)

    def transition_to(self, state: State):
        """"""
        The Context allows changing the State object at runtime.
        """"""

        print(f""Context: Transition to {type(state).__name__}"")
        self._state = state
        self._state.context = self

    """"""
    The Context delegates part of its behavior to the current State object.
    """"""

    def request1(self):
        self._state.handle1()

    def request2(self):
        self._state.handle2()


class State(ABC):
    """"""
    The base State class declares methods that all Concrete State should
    implement and also provides a backreference to the Context object,
    associated with the State. This backreference can be used by States to
    transition the Context to another State.
    """"""

    @property
    def context(self) -> Context:
        return self._context

    @context.setter
    def context(self, context: Context) -> None:
        self._context = context

    @abstractmethod
    def handle1(self) -> None:
        pass

    @abstractmethod
    def handle2(self) -> None:
        pass


""""""
Concrete States implement various behaviors, associated with a state of the
Context.
""""""


class ConcreteStateA(State):
    def handle1(self) -> None:
        print(""ConcreteStateA handles request1."")
        print(""ConcreteStateA wants to change the state of the context."")
        self.context.transition_to(ConcreteStateB())

    def handle2(self) -> None:
        print(""ConcreteStateA handles request2."")


class ConcreteStateB(State):
    def handle1(self) -> None:
        print(""ConcreteStateB handles request1."")

    def handle2(self) -> None:
        print(""ConcreteStateB handles request2."")
        print(""ConcreteStateB wants to change the state of the context."")
        self.context.transition_to(ConcreteStateA())


if __name__ == ""__main__"":
    # The client code.

    context = Context(ConcreteStateA())
    context.request1()
    context.request2()",Python,State,Refactoring Guru,https://refactoring.guru/design-patterns/state/python/example#example-0,"[-6.85907677e-02  2.62527205e-02  5.48582943e-03  1.76414531e-02
 -6.55907765e-02 -7.72672966e-02  5.76082356e-02  1.63621791e-02
 -2.62091327e-02 -1.09055944e-01 -1.74946152e-02 -9.08199102e-02
  3.99346128e-02 -1.34799778e-02  7.46323392e-02  2.06516813e-02
  3.23825739e-02 -5.55709703e-03  5.55650890e-03  5.54772317e-02
  5.72500974e-02  3.18750925e-02 -1.76977273e-02  3.43770534e-02
 -6.51054755e-02 -2.25918274e-02 -6.16776049e-02 -6.56422302e-02
  4.37715128e-02  2.89736595e-03  5.79318479e-02  7.95090199e-02
 -9.50743780e-02  7.93935638e-03  5.75394966e-02  9.43218842e-02
 -1.78215187e-02 -5.14323004e-02 -2.77606864e-02  1.01608839e-02
  3.26568559e-02 -2.90187425e-03 -7.06137270e-02 -3.97811364e-03
 -5.24884164e-02  3.11021917e-02 -4.77454066e-03 -7.93091021e-03
 -1.29912803e-02 -6.78313822e-02 -3.88218835e-02  1.67017411e-02
 -4.82767150e-02 -1.37371393e-02  2.35133450e-02  4.65904027e-02
  1.41998112e-01  1.09604143e-01 -3.88004296e-02 -2.77110916e-02
 -4.99369949e-02  2.24944148e-02 -1.13980444e-02 -1.37474458e-03
  3.91116142e-02  8.36378187e-02 -3.57172787e-02 -2.27486994e-02
  3.31586786e-02 -1.55960377e-02 -1.71674043e-02 -4.18963656e-03
 -2.98203174e-02 -3.38998809e-02  6.89954543e-03 -7.90783986e-02
 -5.89972502e-03  5.53948507e-02 -4.37736474e-02 -9.73256230e-02
 -1.90652683e-02 -1.19961267e-02 -4.03933041e-03  3.61767635e-02
  1.76122393e-02 -5.36049306e-02 -1.91023126e-02 -6.16534799e-02
  5.85013852e-02  9.14185047e-02 -3.76737192e-02 -1.56280063e-02
  4.09740508e-02  5.92497271e-03 -1.38127208e-02  1.11549772e-01
  7.96790142e-03 -6.23789504e-02  2.06194888e-03  1.09559029e-01
 -2.07526125e-02  1.49199851e-02 -1.35534890e-02 -3.07002161e-02
  4.95858043e-02  3.05844601e-02 -7.60227814e-02 -7.80188888e-02
 -5.53892180e-02 -3.72916646e-02 -4.03980317e-04 -3.46261859e-02
  3.10450885e-03  2.37722956e-02 -1.73200609e-03  4.70895916e-02
  8.21975693e-02  6.29660636e-02  5.42842876e-03  4.51864004e-02
  8.43001381e-02 -3.18725184e-02  3.22087444e-02 -5.18426038e-02
 -6.89238682e-02 -7.46223852e-02  5.45100309e-03  2.42415386e-33
  1.92685593e-02 -1.12952508e-01 -7.76451677e-02  4.78413142e-02
 -1.28047299e-02  7.50320181e-02  7.30977058e-02 -3.14601511e-02
 -4.95266318e-02 -7.90359154e-02  6.38942048e-02  1.25669867e-01
 -4.72958060e-03 -1.51124792e-02  1.96342189e-02 -2.64795646e-02
  3.72263929e-03  6.29662350e-02  8.30226839e-02  8.08446947e-03
  4.46519889e-02  6.65274486e-02 -6.34893328e-02 -2.35222951e-02
 -2.04624571e-02  5.10951467e-02 -2.27620248e-02 -1.05718598e-02
 -1.03766046e-01  3.67552188e-04 -6.97798431e-02  1.98614988e-02
 -6.04777969e-02  5.56258969e-02  1.62441973e-02 -2.45120265e-02
  3.80228870e-02 -1.89202242e-02 -8.58203918e-02 -1.82058722e-01
 -3.74891870e-02 -1.44161843e-02  6.00198563e-03  2.41412800e-02
 -1.79668702e-02 -1.28747731e-01 -6.20797984e-02  6.32495508e-02
 -4.64347075e-04 -3.09100877e-02  7.96305090e-02  1.05630662e-02
  5.57413734e-02 -3.55042480e-02 -4.50881831e-02 -6.64823800e-02
 -6.27068132e-02  2.91598812e-02  7.44786672e-03 -5.25124595e-02
  5.79412803e-02  4.00618790e-03 -5.38757183e-02  1.41632006e-01
 -5.76867629e-03  7.35229179e-02 -3.50874588e-02  3.15884501e-03
  7.76146203e-02 -3.01239435e-02 -5.56903854e-02  7.77928233e-02
 -1.36924973e-02 -2.29101665e-02 -9.95867606e-03 -4.33390737e-02
 -3.45733352e-02 -7.57506937e-02 -8.98206457e-02  3.08734295e-03
  6.01666123e-02  1.04784304e-02 -4.84514683e-02  9.71371755e-02
  2.45170598e-03  5.63281178e-02  4.60960828e-02  1.86103489e-03
 -5.43536954e-02 -9.06023663e-03 -1.04024805e-01 -9.29946974e-02
  4.22664694e-02  2.34490521e-02  4.15332951e-02 -4.93278498e-33
  9.64599848e-02 -2.55679637e-02 -9.22065601e-03 -1.95240267e-02
  8.16423912e-03 -5.49344346e-02  7.04271123e-02 -2.45117154e-02
 -1.17018297e-02  1.89484656e-02 -7.16680139e-02 -2.30342671e-02
  7.76163191e-02  8.18691030e-03  4.00539953e-04  2.71146670e-02
 -1.22350808e-02 -1.08002378e-02 -3.27299386e-02  2.06725113e-02
 -6.94165230e-02  2.43929755e-02 -1.27407268e-01  2.26497017e-02
 -5.46130799e-02  4.88589471e-03 -8.85804445e-02  2.31759939e-02
  3.59914750e-02  1.70523971e-02 -6.21148311e-02 -1.65480468e-02
 -1.65180992e-02  5.54455295e-02 -2.32524518e-02  4.27274108e-02
 -1.16938641e-02 -1.32077169e-02 -3.40090021e-02  3.43421660e-02
  1.12089947e-01  6.52657496e-03  2.72713229e-02  3.88180278e-02
  3.95996571e-02  5.44736795e-02 -4.60270606e-02  1.03694359e-02
 -5.96409552e-02 -4.35170978e-02 -8.18599307e-04  4.66565834e-03
 -4.52495776e-02  1.52887451e-02 -5.96210808e-02  4.38806452e-02
  7.41205886e-02 -2.56440509e-02 -6.35650456e-02 -2.27564573e-02
  7.73621723e-02 -2.94056367e-02 -1.91402379e-02  7.44170621e-02
  1.07011627e-02 -5.09585589e-02 -6.88364208e-02 -1.04260214e-01
  4.93306369e-02 -1.75952818e-02  6.83063120e-02  5.33060823e-03
  4.04446721e-02 -5.06302379e-02  7.78198242e-02  6.66795000e-02
 -8.34361929e-03 -4.81718741e-02  7.83210713e-03  4.76924591e-02
 -5.14455996e-02 -2.41461545e-02 -4.03486891e-03  2.76032928e-02
 -3.54748294e-02 -2.68167239e-02 -1.35075171e-02  1.10727847e-01
  1.07549783e-02 -2.32331641e-02  2.53586713e-02  4.73758727e-02
  4.87273512e-03  5.59556074e-02 -1.40716266e-02 -5.37562279e-08
 -1.01621756e-02  4.29822830e-03  3.71888690e-02  9.56455395e-02
  7.37834442e-03  8.11513960e-02  1.10296505e-02 -3.00978292e-02
 -5.44977281e-03 -2.50303689e-02 -3.73385884e-02  2.15215944e-02
 -4.01570415e-03 -2.62966510e-02 -2.58215740e-02  6.22869805e-02
  6.23366535e-02 -3.46774086e-02 -4.08413075e-02 -5.85618336e-03
 -4.41384539e-02 -8.68180096e-02 -3.95556167e-03  8.48982669e-03
 -1.05871342e-01 -5.96288256e-02  8.38172585e-02  5.62370270e-02
 -2.80692410e-02 -8.60032253e-03  4.77109679e-05 -4.62212740e-03
 -3.34600881e-02  5.58796450e-02 -5.92727810e-02  8.02728981e-02
 -9.43787303e-03 -3.90140922e-03  6.78834692e-02  8.34767446e-02
 -1.31367368e-03 -5.91316912e-03 -1.27456158e-01  2.65279748e-02
  1.42401364e-02 -9.41099599e-03 -4.32562046e-02 -5.69957420e-02
  6.09880164e-02  4.15942781e-02 -4.63552102e-02 -2.72451025e-02
 -5.48783019e-02  3.48278768e-02  6.25571888e-03  8.07669237e-02
  3.63338366e-02 -1.67238228e-02 -3.84662114e-02  7.02539533e-02
 -1.57608148e-02  7.02504367e-02  5.50535358e-02  1.33809010e-02]"
"from abc import ABC, abstractmethod


class AbstractClass(ABC):
    """"""
    The Abstract Class defines a template method that contains a skeleton of
    some algorithm, composed of calls to (usually) abstract primitive
    operations.

    Concrete subclasses should implement these operations, but leave the
    template method itself intact.
    """"""

    def template_method(self) -> None:
        """"""
        The template method defines the skeleton of an algorithm.
        """"""

        self.base_operation1()
        self.required_operations1()
        self.base_operation2()
        self.hook1()
        self.required_operations2()
        self.base_operation3()
        self.hook2()

    # These operations already have implementations.

    def base_operation1(self) -> None:
        print(""AbstractClass says: I am doing the bulk of the work"")

    def base_operation2(self) -> None:
        print(""AbstractClass says: But I let subclasses override some operations"")

    def base_operation3(self) -> None:
        print(""AbstractClass says: But I am doing the bulk of the work anyway"")

    # These operations have to be implemented in subclasses.

    @abstractmethod
    def required_operations1(self) -> None:
        pass

    @abstractmethod
    def required_operations2(self) -> None:
        pass

    # These are ""hooks."" Subclasses may override them, but it's not mandatory
    # since the hooks already have default (but empty) implementation. Hooks
    # provide additional extension points in some crucial places of the
    # algorithm.

    def hook1(self) -> None:
        pass

    def hook2(self) -> None:
        pass


class ConcreteClass1(AbstractClass):
    """"""
    Concrete classes have to implement all abstract operations of the base
    class. They can also override some operations with a default implementation.
    """"""

    def required_operations1(self) -> None:
        print(""ConcreteClass1 says: Implemented Operation1"")

    def required_operations2(self) -> None:
        print(""ConcreteClass1 says: Implemented Operation2"")


class ConcreteClass2(AbstractClass):
    """"""
    Usually, concrete classes override only a fraction of base class'
    operations.
    """"""

    def required_operations1(self) -> None:
        print(""ConcreteClass2 says: Implemented Operation1"")

    def required_operations2(self) -> None:
        print(""ConcreteClass2 says: Implemented Operation2"")

    def hook1(self) -> None:
        print(""ConcreteClass2 says: Overridden Hook1"")


def client_code(abstract_class: AbstractClass) -> None:
    """"""
    The client code calls the template method to execute the algorithm. Client
    code does not have to know the concrete class of an object it works with, as
    long as it works with objects through the interface of their base class.
    """"""

    # ...
    abstract_class.template_method()
    # ...


if __name__ == ""__main__"":
    print(""Same client code can work with different subclasses:"")
    client_code(ConcreteClass1())
    print("""")

    print(""Same client code can work with different subclasses:"")
    client_code(ConcreteClass2())",Python,Template Method,Refactoring Guru,https://refactoring.guru/design-patterns/template-method/python/example#example-0,"[-7.10973069e-02  3.90117876e-02  3.35862003e-02 -1.81141812e-02
 -1.03959233e-01 -9.85993668e-02 -1.29092047e-02 -2.32656226e-02
 -7.84397200e-02 -8.79348218e-02  4.23275400e-03 -1.19490437e-02
 -1.02976505e-02 -1.51365455e-02  4.13999148e-02  6.00059815e-02
  3.86034623e-02  2.11099982e-02 -2.96561290e-02  2.67379098e-02
  7.05948845e-02  1.09990565e-02 -2.88727768e-02  9.43641290e-02
 -6.39972985e-02 -3.61294225e-02 -5.60041294e-02 -2.31198389e-02
  1.89810321e-02  2.81948317e-02 -6.53000828e-03  7.27891251e-02
  2.28775740e-02  6.56698793e-02  8.83140229e-03  5.19217514e-02
  3.04431841e-02 -2.90983375e-02 -3.53354365e-02  4.57277894e-02
 -5.60360551e-02 -2.83545419e-03 -9.09295455e-02 -1.37315812e-02
 -6.20533386e-03  5.41785061e-02 -3.24820951e-02 -4.11029756e-02
 -6.26904666e-02 -5.61360046e-02  2.96546705e-03  7.06820711e-02
 -4.59530242e-02 -6.53674686e-03 -1.62261166e-02 -5.69072664e-02
  1.19055390e-01  3.81136425e-02 -2.99262051e-02 -5.85708730e-02
 -5.50014898e-02  1.63148809e-02  1.03593227e-02  3.72977741e-02
 -3.63929272e-02  4.84667495e-02 -3.15328352e-02 -2.01350562e-02
  1.42080262e-02  1.00863710e-01 -3.71300615e-02 -4.49002385e-02
 -4.63180654e-02  2.56805904e-02 -2.40158383e-02 -2.47965590e-03
  6.75913543e-02  6.86872974e-02 -1.05956450e-01 -1.13305025e-01
 -2.74929274e-02  3.05078644e-02 -1.93376783e-02  6.56361878e-03
  3.76995988e-02 -4.50704917e-02 -1.08565791e-02 -2.39361338e-02
  3.57659608e-02  6.93300739e-02 -4.65805782e-03 -6.69540791e-03
 -6.82233572e-02 -7.62792677e-02  9.33326315e-03  2.78614480e-02
  5.27951419e-02 -4.03600931e-02 -1.69589780e-02  6.93668351e-02
 -4.65150699e-02  2.78512035e-02  1.29002463e-02 -7.76055828e-02
  9.73920450e-02  9.46180671e-02 -3.66076268e-02 -1.12180941e-01
 -2.55227252e-03 -4.45707031e-02 -1.60932429e-02 -7.12139606e-02
 -4.43153409e-03 -3.77657749e-02 -5.37279062e-03  7.66304284e-02
  9.25127044e-02  4.51062694e-02 -3.25282626e-02  6.46263361e-02
  3.58889960e-02  1.26273045e-02  1.09189376e-01  3.67679559e-02
 -2.34141424e-02 -2.38212235e-02 -8.05982500e-02  4.22306888e-33
 -3.18509294e-04 -6.81180283e-02 -9.23726484e-02  7.33952373e-02
 -5.11477608e-03  1.60050318e-02  5.36683127e-02 -1.34640734e-03
 -4.56723124e-02  1.17213093e-02  2.47235708e-02  3.90480757e-02
  5.25469147e-02  1.55068412e-02  1.04839392e-01  5.42227626e-02
  1.95067469e-02 -9.12229065e-03  7.42358565e-02  4.59797797e-04
  4.76269014e-02 -3.36655765e-04 -3.21114399e-02  2.01901197e-02
 -4.07890864e-02  9.92660969e-02  1.55741051e-02 -4.50398177e-02
 -1.02424152e-01 -4.33774618e-03 -5.14153279e-02 -1.31361168e-02
  5.03747426e-02  2.64788195e-02 -2.70729512e-02 -1.61417089e-02
  7.03350082e-02 -5.12380339e-02 -4.32609171e-02 -8.04511830e-02
 -2.90973876e-02 -5.08741755e-03 -4.07328364e-03 -6.04893826e-03
  7.24993721e-02 -9.32001546e-02 -9.42609981e-02  5.47438599e-02
  4.91431467e-02 -2.46095397e-02  6.20544292e-02  2.56278552e-02
  9.28804651e-02 -4.38047312e-02 -2.59863492e-02 -5.55781871e-02
 -1.13068288e-02  4.08891328e-02  2.01748535e-02 -3.32093821e-03
 -2.07953155e-02  8.18415731e-03 -7.09202290e-02  9.65293944e-02
 -7.95169845e-02  3.73221524e-02 -1.98202021e-02  1.87311042e-02
  4.87051494e-02 -9.12862085e-03 -2.71862689e-02  5.74476682e-02
 -8.72111842e-02 -4.78390284e-04  1.34108299e-02 -9.49183386e-03
  5.56229390e-02 -1.23651609e-01  2.52089147e-02  8.53257906e-03
 -1.70290261e-03  4.93112132e-02  5.68585955e-02  2.75296271e-02
 -4.25974056e-02  6.86532771e-03  8.52027014e-02  4.39542346e-02
 -3.64274345e-02  1.81486793e-02 -8.86661038e-02 -7.57650062e-02
 -1.46020344e-02 -3.34923677e-02  8.99301544e-02 -7.45541496e-33
  5.99763915e-02  4.49548550e-02 -5.77333532e-02 -1.71533804e-02
 -3.61962505e-02  1.02260318e-02 -1.41374543e-02 -9.10148621e-02
 -3.76927219e-02 -1.47478245e-02 -4.28561345e-02 -6.02086596e-02
 -3.61545011e-03 -1.23114139e-02  6.51470870e-02 -4.12289798e-02
 -1.52520165e-01 -4.93185297e-02 -1.80389564e-02  7.64433742e-02
 -2.72159539e-02  5.46323508e-02  4.74169152e-03  9.54889599e-03
 -4.80250642e-03  1.66264176e-02 -1.28680229e-01  1.25388503e-01
  9.27595422e-02  2.06512082e-02 -2.82630008e-02  2.82784645e-02
 -7.08621601e-03  3.00530512e-02  4.82207723e-02  6.22739270e-02
  1.45331421e-03  6.58928677e-02 -1.78206433e-02  4.82175360e-03
  9.91483852e-02 -2.27602944e-02 -6.09167255e-02  1.27231795e-02
 -1.26570798e-02 -1.66294351e-02 -4.69040908e-02 -5.11747785e-03
 -3.90808508e-02 -6.01631925e-02 -1.93904527e-02 -3.22740749e-02
 -4.03615944e-02  8.73432159e-02 -5.21258228e-02  4.43083756e-02
  3.12127378e-02 -4.71181683e-02 -2.92048920e-02  3.23418006e-02
  9.06237662e-02 -5.07281646e-02  9.83255357e-03  6.50871769e-02
 -3.26535590e-02  1.37617653e-02  1.63731184e-02 -2.43310370e-02
 -2.68530454e-02  2.87010334e-02  3.64429727e-02  1.98999457e-02
  2.28960929e-03 -5.95743209e-02  3.05304006e-02  1.47372395e-01
 -7.27357436e-03  1.36294272e-02 -2.24927031e-02  9.25216079e-03
 -1.83918793e-02 -5.92203140e-02 -1.38602015e-02  5.84431700e-02
 -6.17824495e-02 -9.17705670e-02  1.93638690e-02  5.85346073e-02
 -5.24129942e-02 -6.58090189e-02  2.82602794e-02  4.32977788e-02
 -1.81114823e-02  2.00168677e-02 -2.90257856e-02 -5.60738869e-08
  1.11506479e-02 -1.93263702e-02  5.49461246e-02  3.21200006e-02
  5.49075268e-02  1.61097087e-02  1.66821665e-05 -2.52297241e-02
 -3.15244757e-02 -5.96271455e-02 -4.17615585e-02  1.73533950e-02
 -3.01011540e-02 -1.57123879e-02 -5.13973506e-03  3.86480466e-02
 -3.43961082e-02 -5.73752560e-02 -4.91862819e-02  6.39658328e-03
 -7.32238665e-02 -6.26055673e-02 -2.26731282e-02 -4.33359146e-02
 -1.38159737e-01 -5.96285239e-02  3.11206747e-02  7.72251189e-02
 -8.04307312e-03  3.11485119e-02  2.29271073e-02 -7.24536506e-03
 -3.22203077e-02  1.02273308e-01  1.83473974e-02  3.08157206e-02
  2.83185281e-02 -1.69766974e-02 -4.10379767e-02  3.02933212e-02
 -2.99759395e-02 -5.00315242e-02 -8.15444365e-02 -1.03663485e-02
  5.73879555e-02 -1.63445938e-02 -6.15463331e-02 -6.36499226e-02
  2.79998481e-02  1.24725498e-01 -4.77178395e-02  4.18738462e-02
 -3.29596251e-02  8.79939832e-03 -7.81913549e-02  5.00266626e-02
  4.54396904e-02 -4.57181893e-02 -1.61663555e-02  1.86175015e-02
 -2.63899062e-02  3.54902670e-02  1.42553180e-01 -3.19049582e-02]"
"from __future__ import annotations
from abc import ABC, abstractmethod


class Command(ABC):
    """"""
    The Command interface declares a method for executing a command.
    """"""

    @abstractmethod
    def execute(self) -> None:
        pass


class SimpleCommand(Command):
    """"""
    Some commands can implement simple operations on their own.
    """"""

    def __init__(self, payload: str) -> None:
        self._payload = payload

    def execute(self) -> None:
        print(f""SimpleCommand: See, I can do simple things like printing""
              f""({self._payload})"")


class ComplexCommand(Command):
    """"""
    However, some commands can delegate more complex operations to other
    objects, called ""receivers.""
    """"""

    def __init__(self, receiver: Receiver, a: str, b: str) -> None:
        """"""
        Complex commands can accept one or several receiver objects along with
        any context data via the constructor.
        """"""

        self._receiver = receiver
        self._a = a
        self._b = b

    def execute(self) -> None:
        """"""
        Commands can delegate to any methods of a receiver.
        """"""

        print(""ComplexCommand: Complex stuff should be done by a receiver object"", end="""")
        self._receiver.do_something(self._a)
        self._receiver.do_something_else(self._b)


class Receiver:
    """"""
    The Receiver classes contain some important business logic. They know how to
    perform all kinds of operations, associated with carrying out a request. In
    fact, any class may serve as a Receiver.
    """"""

    def do_something(self, a: str) -> None:
        print(f""\nReceiver: Working on ({a}.)"", end="""")

    def do_something_else(self, b: str) -> None:
        print(f""\nReceiver: Also working on ({b}.)"", end="""")


class Invoker:
    """"""
    The Invoker is associated with one or several commands. It sends a request
    to the command.
    """"""

    _on_start = None
    _on_finish = None

    """"""
    Initialize commands.
    """"""

    def set_on_start(self, command: Command):
        self._on_start = command

    def set_on_finish(self, command: Command):
        self._on_finish = command

    def do_something_important(self) -> None:
        """"""
        The Invoker does not depend on concrete command or receiver classes. The
        Invoker passes a request to a receiver indirectly, by executing a
        command.
        """"""

        print(""Invoker: Does anybody want something done before I begin?"")
        if isinstance(self._on_start, Command):
            self._on_start.execute()

        print(""Invoker: ...doing something really important..."")

        print(""Invoker: Does anybody want something done after I finish?"")
        if isinstance(self._on_finish, Command):
            self._on_finish.execute()


if __name__ == ""__main__"":
    """"""
    The client code can parameterize an invoker with any commands.
    """"""

    invoker = Invoker()
    invoker.set_on_start(SimpleCommand(""Say Hi!""))
    receiver = Receiver()
    invoker.set_on_finish(ComplexCommand(
        receiver, ""Send email"", ""Save report""))

    invoker.do_something_important()",Python,Command,Refactoring Guru,https://refactoring.guru/design-patterns/command/python/example#example-0,"[-8.69585350e-02  3.34798731e-02 -2.38649733e-02  2.06731968e-02
 -6.86629787e-02 -1.17264055e-01  1.87026504e-02  9.99915786e-03
 -5.07413037e-02 -4.07202467e-02 -1.38936900e-02 -2.84514520e-02
  3.27617638e-02  1.49579663e-02  6.71834871e-02  1.03982794e-03
  6.88258931e-02 -1.37701137e-02 -9.04247761e-02  1.95006572e-03
  4.19213250e-02  6.34928569e-02  4.57800291e-02  4.29527499e-02
 -9.95257720e-02 -1.30410910e-01 -4.66211885e-03 -6.20224141e-02
 -2.59588286e-02 -2.24663801e-02 -5.29672834e-04  6.47330061e-02
 -4.53589335e-02  6.97709545e-02 -2.08922997e-02  1.07926726e-01
  4.61594202e-02 -1.64711708e-03 -3.67094390e-02  9.63389874e-03
  1.26595879e-02 -9.34026018e-03 -1.01717375e-01 -3.52397189e-02
 -5.33090122e-02  2.09663599e-03 -6.37420341e-02  1.08810253e-02
 -2.83951424e-02 -9.08788145e-02 -4.62587290e-02  5.89133725e-02
 -2.45518088e-02  3.71896364e-02  1.67734958e-02 -2.28024758e-02
  1.03026859e-01  1.47033883e-02 -1.81828719e-02 -6.03076108e-02
 -8.01590905e-02  2.45241653e-02 -3.33548039e-02 -1.62484287e-03
 -4.48455922e-02  1.13152748e-03 -1.67195443e-02  4.86758575e-02
  2.57954169e-02  3.25643979e-02 -2.44307481e-02 -2.26115491e-02
 -1.01013497e-01  6.67213723e-02  3.43584828e-02 -7.00997412e-02
  9.38373134e-02  4.85414974e-02 -9.09097791e-02 -8.48848373e-02
 -7.63686374e-02 -4.92937490e-02 -3.80181521e-02  4.93020602e-02
  1.39494911e-02 -7.18791708e-02 -6.10278267e-03  1.50303626e-02
  9.48427841e-02  8.66494998e-02 -7.19928890e-02 -3.75661626e-02
 -3.54740955e-02 -3.25526879e-03  5.49505418e-03  7.85498917e-02
  2.36210413e-02 -8.26887712e-02  4.92294086e-03  5.67279980e-02
  3.51032498e-03 -3.06839235e-02  2.62965616e-02 -5.74533157e-02
  6.45384640e-02  1.30849751e-02 -4.98522865e-03 -1.13899663e-01
  3.62667628e-02 -6.52422607e-02  1.91451691e-03 -7.90466070e-02
  2.43024435e-03 -2.61371452e-02  2.69196797e-02  1.10844530e-01
  4.48976755e-02  8.16359669e-02  5.47655746e-02  2.99415831e-02
  9.73651335e-02  2.06970815e-02  3.95776592e-02  2.98355613e-03
  2.28611920e-02 -4.45923433e-02 -1.74171459e-02  1.99501136e-33
  7.93266669e-03 -6.55006021e-02 -6.66573644e-02  6.01296797e-02
 -4.35305666e-03  9.27963927e-02  8.86812955e-02  4.61006463e-02
 -1.34777714e-04 -1.25000253e-02 -3.09649277e-02  7.49969780e-02
 -8.57414864e-03  1.99821964e-02  3.40368226e-02  2.23276298e-02
 -9.41270497e-03  4.37570624e-02  9.72632039e-03  4.09665741e-02
  1.19375668e-01  2.42902786e-02 -7.16275647e-02  3.32925580e-02
  1.12904031e-02  7.00788945e-03 -3.75229567e-02 -2.19712649e-02
 -5.35528585e-02 -6.06974281e-05 -4.91345078e-02  2.23649032e-02
 -4.69699316e-03  9.63510294e-03 -2.77845692e-02 -1.72465909e-02
 -1.78056397e-02 -8.92889872e-03 -8.42118450e-03 -1.68902159e-01
 -7.63955563e-02 -8.76974314e-03 -4.71124053e-02 -2.50269119e-02
 -5.41427284e-02 -1.39091343e-01 -7.64808357e-02  3.14137973e-02
  6.00899309e-02  1.01858927e-02  7.14127272e-02 -3.35904025e-02
  8.98802802e-02 -2.95155887e-02 -4.66834493e-02  3.18482838e-04
  1.76529903e-02  3.85710187e-02  5.65040149e-02 -3.34051587e-02
  5.76526206e-03  3.70043749e-03 -1.24862613e-02  1.14244461e-01
  2.96664815e-02  2.81422492e-02  7.27837766e-03  3.25380750e-02
  8.14105794e-02 -4.07170430e-02 -9.91099998e-02  9.17719379e-02
 -8.53004903e-02 -9.51320902e-02  4.74272482e-02 -2.15404225e-03
  1.34592811e-02 -1.35081246e-01 -2.19847616e-02  3.34354490e-02
  1.62220858e-02  4.51251306e-02 -4.96811680e-02  4.59078178e-02
 -2.90929638e-02  5.88194691e-02  2.44900212e-02  6.85464218e-03
 -4.74429615e-02 -1.80838965e-02 -6.95517287e-02 -2.51831319e-02
 -3.33811305e-02 -2.25599343e-03  2.13099234e-02 -6.04523537e-33
  7.38710314e-02  3.69836167e-02 -2.67025363e-02  3.55625227e-02
  5.90541540e-03 -2.01704465e-02  3.56742665e-02 -3.52937579e-02
 -6.34480491e-02 -5.29539771e-02 -9.70038176e-02 -4.00065370e-02
  2.75487565e-02 -3.02172359e-02  6.80520162e-02 -1.73025951e-03
 -6.96652159e-02  2.50620674e-02  1.20428931e-02  4.61328514e-02
 -5.43165542e-02  2.88653690e-02 -3.79482582e-02 -3.14499401e-02
 -3.46686058e-02 -7.00439326e-03 -6.07469156e-02  7.79189393e-02
  3.07043605e-02  1.52523480e-02  1.83301978e-02  5.67292562e-03
 -7.88850058e-03 -5.53016830e-03 -4.46447991e-02 -1.82058215e-02
  4.88025658e-02  4.00342718e-02  2.14154692e-03  3.44831310e-02
  1.53517962e-01  2.50438415e-02  3.92473396e-03  1.77683420e-02
 -2.42483784e-02 -3.03714275e-02 -3.90080772e-02  4.56959149e-03
 -6.70609102e-02 -7.35218916e-03 -1.42978709e-02 -4.04520929e-02
 -6.16106503e-02  4.19906303e-02 -6.42267168e-02  1.84312891e-02
  8.25238898e-02 -1.60937030e-02 -3.61123122e-02 -1.71585754e-02
  1.55827319e-02 -2.39686742e-02  2.48852391e-02  4.55677211e-02
 -1.29141286e-02  1.90529339e-02 -4.58809175e-03 -3.63057628e-02
  7.35938922e-02 -2.34745983e-02  7.85826743e-02  1.12680322e-03
  1.11226803e-02 -6.13681935e-02  2.56630667e-02  9.64281559e-02
 -2.85427850e-02 -6.13580607e-02 -2.19964255e-02  2.90452968e-02
 -8.19459409e-02 -5.00915535e-02 -3.53040849e-03  9.44818631e-02
 -6.67939186e-02 -3.28064822e-02  2.19580438e-02  1.33320093e-01
  1.61624514e-02 -4.29151282e-02  2.27864999e-02  6.21156320e-02
  1.89588703e-02  5.56005277e-02 -5.45672402e-02 -5.80283270e-08
 -7.39810802e-03 -3.78060900e-02  2.36363988e-02  8.63049030e-02
  8.61302484e-03 -6.28937175e-03 -3.60288401e-03 -7.25748017e-02
 -5.84786199e-03 -2.12375075e-02 -1.84332281e-02  8.18335265e-03
  3.61056416e-03 -5.65617606e-02  4.67427447e-02  3.14992405e-02
  3.26522589e-02 -9.32912827e-02 -6.64848462e-02 -4.68528923e-03
  5.03178407e-03 -9.50811952e-02 -2.98351105e-02  4.28080782e-02
 -7.93255791e-02  1.95490774e-02  3.71427764e-03  7.00019449e-02
 -1.83251742e-02 -7.86891766e-03  4.32044864e-02 -2.01860424e-02
 -1.86185148e-02  6.38227016e-02 -1.70551892e-02  5.75382151e-02
 -3.14277783e-02 -6.26050234e-02  1.81993097e-02  1.81160308e-02
 -1.47476271e-02 -2.27879435e-02 -8.93068388e-02  2.20476314e-02
  5.37932441e-02 -3.99611890e-04 -8.32358226e-02 -1.08305715e-01
  4.05929238e-02  6.67180121e-02 -8.44315588e-02  1.51674701e-02
 -3.24796438e-02  4.67506535e-02 -1.39814923e-02  6.05124757e-02
  4.58687879e-02 -9.08033550e-02  1.17452638e-02  4.42400277e-02
  4.08113040e-02  5.94166555e-02  2.40508113e-02  1.23627875e-02]"
"from __future__ import annotations
from abc import ABC


class Mediator(ABC):
    """"""
    The Mediator interface declares a method used by components to notify the
    mediator about various events. The Mediator may react to these events and
    pass the execution to other components.
    """"""

    def notify(self, sender: object, event: str) -> None:
        pass


class ConcreteMediator(Mediator):
    def __init__(self, component1: Component1, component2: Component2) -> None:
        self._component1 = component1
        self._component1.mediator = self
        self._component2 = component2
        self._component2.mediator = self

    def notify(self, sender: object, event: str) -> None:
        if event == ""A"":
            print(""Mediator reacts on A and triggers following operations:"")
            self._component2.do_c()
        elif event == ""D"":
            print(""Mediator reacts on D and triggers following operations:"")
            self._component1.do_b()
            self._component2.do_c()


class BaseComponent:
    """"""
    The Base Component provides the basic functionality of storing a mediator's
    instance inside component objects.
    """"""

    def __init__(self, mediator: Mediator = None) -> None:
        self._mediator = mediator

    @property
    def mediator(self) -> Mediator:
        return self._mediator

    @mediator.setter
    def mediator(self, mediator: Mediator) -> None:
        self._mediator = mediator


""""""
Concrete Components implement various functionality. They don't depend on other
components. They also don't depend on any concrete mediator classes.
""""""


class Component1(BaseComponent):
    def do_a(self) -> None:
        print(""Component 1 does A."")
        self.mediator.notify(self, ""A"")

    def do_b(self) -> None:
        print(""Component 1 does B."")
        self.mediator.notify(self, ""B"")


class Component2(BaseComponent):
    def do_c(self) -> None:
        print(""Component 2 does C."")
        self.mediator.notify(self, ""C"")

    def do_d(self) -> None:
        print(""Component 2 does D."")
        self.mediator.notify(self, ""D"")


if __name__ == ""__main__"":
    # The client code.
    c1 = Component1()
    c2 = Component2()
    mediator = ConcreteMediator(c1, c2)

    print(""Client triggers operation A."")
    c1.do_a()

    print(""\n"", end="""")

    print(""Client triggers operation D."")
    c2.do_d()",Python,Mediator,Refactoring Guru,https://refactoring.guru/design-patterns/mediator/python/example#example-0,"[-6.38276292e-03 -4.92662154e-02  2.59220712e-02 -1.10161547e-02
 -6.83858525e-03 -1.31587004e-02  1.06989965e-01  2.12272909e-02
  3.34926583e-02 -4.89868820e-02  4.82292138e-02 -1.86948478e-02
  3.89016680e-02 -8.33026320e-03  4.09444012e-02  2.06585880e-02
  1.12832868e-02 -4.78589768e-03 -8.43776986e-02 -1.33411950e-02
  1.08559523e-03 -1.37016652e-02  2.89437897e-03  2.75177360e-02
 -6.22279495e-02 -8.05623755e-02  4.68533486e-02 -4.51628342e-02
  1.67297218e-02 -5.62792756e-02  9.82008874e-02  2.59646345e-02
 -6.28932491e-02  2.12344322e-02  2.54009403e-02  2.51108836e-02
  1.55976303e-02 -1.88661795e-02 -8.53852928e-02  1.48666380e-02
  4.66274992e-02 -3.13897394e-02 -6.29290938e-02 -4.95518520e-02
 -3.16845551e-02  4.62764949e-02 -6.21369705e-02 -1.36832742e-03
 -7.19315633e-02 -1.02293767e-01 -6.32079318e-02  3.95623259e-02
 -3.30796987e-02  9.85810626e-03  2.20393538e-02 -6.77025467e-02
  1.21138312e-01  4.39801663e-02  1.02729844e-02 -6.51231110e-02
 -6.75734729e-02  6.80484949e-03  1.04354657e-02 -2.38943682e-03
  1.20552657e-02  2.85650995e-02 -2.57690232e-02  3.80208604e-02
 -1.86494347e-02  2.91354954e-02 -6.90404028e-02 -4.22830135e-03
  4.98662964e-02  4.69773859e-02  1.48078855e-02 -8.77290964e-02
  1.66580155e-02  5.60347289e-02 -4.92470078e-02 -6.75713494e-02
 -4.31394018e-02 -1.61655843e-02 -1.90032460e-02  3.16760540e-02
  1.72645655e-02 -6.25346676e-02 -3.66089381e-02 -1.46987000e-02
  1.06727369e-02  3.72470692e-02 -4.49462794e-02  1.35254785e-02
  2.06394475e-02  1.47889936e-02  1.20852143e-04  7.42232576e-02
  2.07913574e-02 -4.83611822e-02  2.58998163e-02  7.46794268e-02
 -3.80578302e-02 -1.03473682e-02 -3.25586647e-02 -1.88523103e-02
 -4.14582528e-03 -1.18262768e-02 -1.15053944e-01 -6.14772029e-02
  4.89610285e-02 -8.49825069e-02 -1.73353963e-02 -5.96133731e-02
 -2.08687931e-02 -5.08309295e-03  3.33507508e-02  3.33518200e-02
  4.95533161e-02  6.66431636e-02  6.18232414e-02 -2.84329224e-02
  1.43168569e-01 -7.43994489e-03  4.54112850e-02 -9.36178956e-04
  2.22676113e-04 -3.95028666e-02 -4.28556390e-02  2.65885379e-33
 -5.30683064e-06 -4.79483046e-02 -9.32791531e-02  7.87140504e-02
  1.80951599e-02  5.73207438e-02  6.82505220e-02  1.18827326e-02
 -1.59664359e-02 -3.29253003e-02 -2.11966559e-02  5.35410047e-02
 -5.98600768e-02 -2.46895244e-03  2.94109713e-02 -1.27870496e-02
 -7.63935782e-03  8.36407244e-02  1.26526618e-04 -2.95262001e-02
  8.38748887e-02  3.97857130e-02 -4.21577990e-02  6.65748268e-02
  8.62174202e-03 -5.27959969e-03 -2.58919690e-02 -1.99049041e-02
 -8.33288804e-02 -4.83900942e-02 -5.18955626e-02  4.48690839e-02
  6.68332800e-02  1.53413564e-02 -2.11449005e-02 -6.73140660e-02
 -6.16744086e-02 -1.87454522e-02 -2.22803149e-02 -1.59155548e-01
 -4.11797576e-02 -2.70818491e-02 -1.52822463e-02 -4.11741920e-02
 -2.24015508e-02 -9.08617154e-02 -8.67632031e-02  7.72559643e-02
  5.91227189e-02 -4.51544076e-02  1.30283847e-01  2.02791616e-02
  1.00712165e-01  1.41061507e-02  1.06372116e-02  3.60408835e-02
 -6.72553573e-03  2.78191473e-02  2.73914691e-02 -4.68168557e-02
  7.09707150e-03  5.90721257e-02 -1.65899061e-02  8.31415430e-02
 -6.68705776e-02  6.26386851e-02  4.27283905e-02 -3.52120325e-02
  1.10571943e-01 -2.15627477e-02 -3.29627693e-02  7.85872713e-02
 -5.34087010e-02 -9.51829404e-02  6.41462356e-02 -4.47572730e-02
 -9.07424390e-02 -1.29415482e-01 -6.20571189e-02 -2.33732490e-03
 -2.83089429e-02  5.80374077e-02 -8.16230290e-03  1.10720292e-01
 -2.57061310e-02 -7.11913733e-03  3.86792631e-03  9.78461094e-03
 -8.77412036e-02  5.51877804e-02 -5.04902788e-02 -4.78756092e-02
  8.02213997e-02  7.73045525e-04  5.05033545e-02 -4.98623581e-33
  1.73317958e-02  2.76876036e-02 -7.58339604e-03 -1.07688932e-02
  2.95671495e-03 -3.47655080e-02 -1.16689401e-02 -5.32412082e-02
 -3.83151099e-02 -1.15835331e-02 -2.46759374e-02 -1.79702379e-02
  1.12812286e-02 -4.70277434e-03 -3.94810960e-02  7.76512697e-02
  1.62030421e-02  1.34133594e-02  2.54917797e-03 -1.59758776e-02
 -4.61408645e-02  5.60258962e-02 -4.83073946e-03 -2.37824535e-03
 -3.07857022e-02  5.97312674e-03  2.18102280e-02  1.09589800e-01
  7.68651292e-02 -1.22278379e-02 -5.85477911e-02  3.23885493e-02
  2.02397406e-02 -1.07389959e-02  4.37962711e-02 -1.99292190e-02
  3.26688178e-02 -2.38025300e-02 -4.95575108e-02 -2.12982111e-03
  1.15162849e-01  3.17725129e-02  1.16922741e-03  7.46849403e-02
 -4.92175743e-02 -4.21420597e-02 -2.74808635e-03  2.18962580e-02
  5.90260094e-03 -1.21383583e-02 -3.62769254e-02 -9.40394327e-02
  2.17721201e-02  6.07786514e-03 -4.86651026e-02  8.63495916e-02
  1.01915598e-01 -2.92324238e-02 -4.71057296e-02  7.11230468e-03
  3.79849784e-02 -6.68256730e-02  8.71295203e-03  1.07292756e-01
 -4.38580196e-03  1.11840405e-02 -3.63241844e-02  1.43168587e-02
  5.37059754e-02 -1.54921096e-02  1.34864599e-01  4.46658134e-02
 -5.49166696e-03 -7.91661814e-02  9.62975528e-03  1.19588651e-01
 -4.94802855e-02 -2.88033821e-02  2.29244726e-03 -2.93654241e-02
 -1.02336884e-01 -4.68532667e-02  2.31672451e-02  2.81891297e-03
 -8.12740698e-02 -3.15019488e-02  7.74623156e-02  5.92226721e-02
  4.19359505e-02 -2.47951671e-02 -2.93775136e-03  9.03094485e-02
  8.51248875e-02  3.36419269e-02 -3.48932631e-02 -5.21663139e-08
 -1.88891720e-02 -8.87591541e-02  1.84797663e-02 -8.33817944e-03
  2.45319610e-03 -6.61933422e-02  1.40218670e-02 -5.94502911e-02
 -2.72071864e-02 -1.52137568e-02 -2.26832852e-02 -3.21885496e-02
  2.93762926e-02 -4.91939709e-02  8.11863914e-02  4.36489806e-02
  7.31017161e-03 -3.85795310e-02 -8.92693847e-02 -1.45939309e-02
  1.14647078e-03 -6.12331331e-02  4.04912233e-03  3.11308298e-02
 -1.03547499e-01 -4.47106026e-02  7.81755075e-02  6.28515929e-02
  7.13135451e-02 -7.34956190e-03 -4.54506231e-03 -3.57006043e-02
  1.44115579e-03  3.63214500e-02 -7.78115168e-03  9.01592895e-02
  1.54017061e-02 -8.02240968e-02  4.04884815e-02  8.88565406e-02
 -3.90690826e-02 -4.20797952e-02 -9.63024125e-02  4.22692187e-02
  6.01536781e-02 -1.82035733e-02 -9.56721827e-02 -8.27391297e-02
  3.81036215e-02  1.15467586e-01 -7.21615255e-02  2.31702961e-02
 -7.52154291e-02  6.56238385e-03 -2.68449150e-02  1.59031563e-02
  4.79244404e-02  4.70520109e-02  3.57918292e-02  2.31799278e-02
 -5.59731051e-02  9.41567495e-02  5.01756407e-02 -7.99975637e-03]"
"from __future__ import annotations
from abc import ABC, abstractmethod
from random import randrange
from typing import List


class Subject(ABC):
    """"""
    The Subject interface declares a set of methods for managing subscribers.
    """"""

    @abstractmethod
    def attach(self, observer: Observer) -> None:
        """"""
        Attach an observer to the subject.
        """"""
        pass

    @abstractmethod
    def detach(self, observer: Observer) -> None:
        """"""
        Detach an observer from the subject.
        """"""
        pass

    @abstractmethod
    def notify(self) -> None:
        """"""
        Notify all observers about an event.
        """"""
        pass


class ConcreteSubject(Subject):
    """"""
    The Subject owns some important state and notifies observers when the state
    changes.
    """"""

    _state: int = None
    """"""
    For the sake of simplicity, the Subject's state, essential to all
    subscribers, is stored in this variable.
    """"""

    _observers: List[Observer] = []
    """"""
    List of subscribers. In real life, the list of subscribers can be stored
    more comprehensively (categorized by event type, etc.).
    """"""

    def attach(self, observer: Observer) -> None:
        print(""Subject: Attached an observer."")
        self._observers.append(observer)

    def detach(self, observer: Observer) -> None:
        self._observers.remove(observer)

    """"""
    The subscription management methods.
    """"""

    def notify(self) -> None:
        """"""
        Trigger an update in each subscriber.
        """"""

        print(""Subject: Notifying observers..."")
        for observer in self._observers:
            observer.update(self)

    def some_business_logic(self) -> None:
        """"""
        Usually, the subscription logic is only a fraction of what a Subject can
        really do. Subjects commonly hold some important business logic, that
        triggers a notification method whenever something important is about to
        happen (or after it).
        """"""

        print(""\nSubject: I'm doing something important."")
        self._state = randrange(0, 10)

        print(f""Subject: My state has just changed to: {self._state}"")
        self.notify()


class Observer(ABC):
    """"""
    The Observer interface declares the update method, used by subjects.
    """"""

    @abstractmethod
    def update(self, subject: Subject) -> None:
        """"""
        Receive update from subject.
        """"""
        pass


""""""
Concrete Observers react to the updates issued by the Subject they had been
attached to.
""""""


class ConcreteObserverA(Observer):
    def update(self, subject: Subject) -> None:
        if subject._state < 3:
            print(""ConcreteObserverA: Reacted to the event"")


class ConcreteObserverB(Observer):
    def update(self, subject: Subject) -> None:
        if subject._state == 0 or subject._state >= 2:
            print(""ConcreteObserverB: Reacted to the event"")


if __name__ == ""__main__"":
    # The client code.

    subject = ConcreteSubject()

    observer_a = ConcreteObserverA()
    subject.attach(observer_a)

    observer_b = ConcreteObserverB()
    subject.attach(observer_b)

    subject.some_business_logic()
    subject.some_business_logic()

    subject.detach(observer_a)

    subject.some_business_logic()",Python,Observer,Refactoring Guru,https://refactoring.guru/design-patterns/observer/python/example#example-0,"[-1.84678677e-02 -2.55884491e-02  2.17916016e-02  3.33716087e-02
  2.33943500e-02 -3.72402780e-02  6.70889691e-02 -3.30950692e-02
  2.34431326e-02 -1.14581222e-02  1.82315968e-02 -7.36953244e-02
  1.07676936e-02  7.58172618e-03  7.42511963e-03  4.52179313e-02
  2.10498609e-02 -5.24600148e-02 -8.30272287e-02  1.39720822e-02
 -4.21342179e-02  3.93608771e-02  1.45798391e-02  8.83763060e-02
 -7.83598870e-02 -8.73505026e-02  2.79167052e-02 -4.28603478e-02
 -3.62531282e-03 -1.59841366e-02  4.04213667e-02  4.46002334e-02
 -2.83943899e-02  3.62520255e-02  2.80590057e-02  3.82971279e-02
  6.67196792e-03 -3.43119279e-02 -3.66614349e-02  1.85956359e-02
 -9.39479005e-03 -4.92186248e-02 -3.70695218e-02 -2.54099611e-02
  7.14092702e-03  6.85365349e-02 -2.18659658e-02 -2.18055137e-02
 -1.94763280e-02 -7.34238252e-02 -4.74883094e-02  3.16465683e-02
 -1.75567288e-02  1.87111720e-02  4.82437015e-02  9.72741656e-03
  9.77837965e-02  4.36538309e-02 -3.30510326e-02 -1.01265199e-01
 -5.31402454e-02  4.32288945e-02 -3.68365669e-03  1.31343550e-03
 -2.64920909e-02  5.60266040e-02 -8.67199153e-03  5.71615510e-02
  3.22838500e-02  2.60422807e-02 -4.08519246e-02  6.20388612e-02
 -1.23086516e-02 -7.19901931e-04  3.14147286e-02 -5.84797524e-02
  6.60051331e-02 -1.94994844e-02  9.57994373e-04 -1.56037863e-02
 -1.11187473e-01 -5.74418269e-02 -1.73750166e-02  1.95521675e-02
  3.44569050e-02 -1.22608125e-01  9.73256398e-03 -8.41777306e-03
  2.08564568e-03  7.48134777e-02 -2.94298790e-02 -2.88386904e-02
  6.14990443e-02 -1.77256595e-02  3.68910991e-02  9.72786769e-02
  7.54829682e-03 -2.80449744e-02 -2.86550298e-02  1.03112377e-01
 -2.21475009e-02  3.63589376e-02 -5.99200837e-02  2.66024470e-02
  4.45957370e-02  1.94765087e-02 -7.25636333e-02 -1.32941246e-01
 -7.29451829e-04 -2.51035728e-02  4.95844521e-03 -3.54745202e-02
 -3.31809595e-02 -2.81216297e-02 -4.88220714e-03  8.12808201e-02
  6.88644424e-02  1.44210294e-01  1.58872362e-02  7.14133354e-03
  1.01719737e-01  4.20905510e-03  4.57571484e-02  1.87900532e-02
 -1.30406127e-03 -4.14880440e-02  2.15286557e-02  2.29882338e-33
  1.13548785e-02 -8.31406787e-02 -7.77959079e-02  3.95791270e-02
 -3.10359020e-02  7.16390088e-02  4.49334420e-02 -9.17591900e-03
  2.71914862e-02 -4.40544598e-02 -6.72040787e-03  1.26581028e-01
  3.37086208e-02 -3.71784414e-03  1.76707339e-02 -3.51091623e-02
 -4.49742638e-02  5.00595793e-02 -1.63969714e-02  3.30946371e-02
  5.91910593e-02  3.13162915e-02 -8.24200511e-02 -9.97421984e-03
 -4.68471013e-02  6.71441332e-02  3.07980794e-02  5.43868057e-02
 -5.63299879e-02  3.68159590e-03 -3.59555185e-02  5.93413077e-02
 -1.91302132e-02  1.00958860e-02 -5.60630634e-02 -6.27228394e-02
 -2.97861248e-02 -4.14303169e-02 -3.87802757e-02 -1.33341178e-01
  1.65727958e-02 -9.50206071e-03 -2.18760222e-02 -5.24650700e-02
 -2.46816799e-02 -9.22774374e-02 -2.79639773e-02  6.70137107e-02
  6.27985597e-02 -1.50779532e-02  9.00706351e-02 -3.99206094e-02
  4.29081172e-02 -9.04323235e-02 -4.73842248e-02 -1.35363843e-02
  3.92434336e-02  4.91174795e-02  2.30217483e-02 -2.93656010e-02
 -1.08900322e-02  4.01020609e-02  1.21268518e-02  6.81434274e-02
  2.43036263e-02  1.15177497e-01 -2.43636928e-02 -3.29219885e-02
  9.68014747e-02 -4.38753814e-02 -6.10325448e-02  1.08272463e-01
 -4.86963429e-02 -1.36472192e-02 -3.85513864e-02 -3.62655744e-02
 -3.84371057e-02 -8.68679956e-02 -4.82693724e-02 -6.54393388e-03
  4.65708673e-02  2.77018938e-02 -4.51109223e-02  7.52671212e-02
  1.13614639e-02  2.11061165e-02  1.44286617e-03  2.69760191e-02
 -1.22502312e-01 -5.40956017e-03 -1.80954095e-02 -5.35736494e-02
  8.63642469e-02  3.95562360e-03 -4.89041256e-03 -5.55251773e-33
  1.23529807e-02 -1.25224208e-02 -9.75185111e-02 -4.19409350e-02
 -1.37000214e-02 -6.73333406e-02 -9.00223013e-03 -4.91357408e-03
 -1.56129859e-02 -7.24240392e-02 -1.17428273e-01 -3.20335589e-02
  2.17308179e-02  4.12858315e-02  3.10084540e-02  3.72500531e-02
 -2.55459063e-02 -3.34819406e-02 -1.01406775e-01  2.08679251e-02
 -8.52617472e-02  1.17943086e-01 -2.80945865e-03 -4.43054251e-02
 -2.66018994e-02  1.72079522e-02  1.74958333e-02  9.79637206e-02
  6.14297763e-02 -2.01569740e-02 -7.56119639e-02 -1.96025074e-02
 -5.99577911e-02  3.85025777e-02  1.04656098e-02 -1.30897416e-02
  3.97608615e-02 -3.38666029e-02 -4.93125170e-02 -1.28885489e-02
  5.71129546e-02  2.10493188e-02 -4.54448089e-02  1.31306453e-02
  4.91022319e-03  1.86935700e-02 -6.77065775e-02  4.97045517e-02
 -2.49095801e-02  1.69091870e-03 -7.82727823e-02 -5.43368310e-02
 -2.72161942e-02  2.35123597e-02 -5.65168671e-02  8.06353688e-02
  8.67169071e-03 -5.63915856e-02  1.37259411e-02 -7.90721923e-03
 -5.94413886e-03 -1.24523556e-02  4.32791561e-02  5.22326604e-02
  1.35952020e-02  5.26985228e-02 -5.35470545e-02 -5.45905605e-02
  4.94443327e-02 -1.04290303e-02  9.13150534e-02  5.09720184e-02
 -6.17340989e-02 -1.05144300e-01  5.91013655e-02  1.19941704e-01
 -1.83560550e-02 -1.91919599e-02 -1.12871705e-02  1.64916236e-02
 -9.84787941e-02 -4.54566292e-02  6.40649050e-02  5.16992733e-02
 -6.73182234e-02 -6.42646700e-02  3.38031016e-02  6.46928027e-02
  4.52433228e-02 -2.52819695e-02 -6.85593113e-02  5.72967902e-02
  2.48505268e-02  7.16245398e-02 -7.56426156e-02 -5.86033551e-08
 -1.10331690e-02 -1.08875381e-02 -1.31994681e-02  1.18525036e-01
  3.13332714e-02  3.59533019e-02 -3.12681869e-02 -1.04795143e-01
 -4.96263243e-02 -3.94705832e-02 -5.72076663e-02 -2.49217614e-03
 -3.13808061e-02  4.48087081e-02  5.54630570e-02 -1.42946262e-02
 -2.93029509e-02 -6.56277612e-02 -8.26078951e-02 -1.07679982e-02
  2.51618102e-02 -7.18449056e-02  1.14797894e-02 -2.63402387e-02
 -3.30742337e-02 -3.09615675e-02  4.98195328e-02  4.94681709e-02
  7.76879024e-03  4.36113449e-03  2.56115962e-02 -1.45680793e-02
 -1.71258729e-02  4.57846299e-02 -1.29177710e-02  6.94689900e-02
  6.91233054e-02 -3.74257453e-02  4.37216647e-02  1.09811038e-01
  2.62060687e-02 -2.96015181e-02 -1.25886485e-01  6.60947189e-02
  8.21579173e-02 -3.41246575e-02 -8.88765752e-02 -1.11795269e-01
  9.62506682e-02  9.00892839e-02 -4.89290170e-02 -2.91532092e-02
 -5.22473119e-02  1.67547129e-02  5.63592743e-03  4.50282581e-02
  3.80596854e-02 -4.09166627e-02  2.16092472e-03  6.34040236e-02
 -1.08150905e-02  6.46689609e-02 -8.41859449e-03  4.11094865e-03]"
"from __future__ import annotations
from abc import ABC, abstractmethod
from typing import List


class Context():
    """"""
    The Context defines the interface of interest to clients.
    """"""

    def __init__(self, strategy: Strategy) -> None:
        """"""
        Usually, the Context accepts a strategy through the constructor, but
        also provides a setter to change it at runtime.
        """"""

        self._strategy = strategy

    @property
    def strategy(self) -> Strategy:
        """"""
        The Context maintains a reference to one of the Strategy objects. The
        Context does not know the concrete class of a strategy. It should work
        with all strategies via the Strategy interface.
        """"""

        return self._strategy

    @strategy.setter
    def strategy(self, strategy: Strategy) -> None:
        """"""
        Usually, the Context allows replacing a Strategy object at runtime.
        """"""

        self._strategy = strategy

    def do_some_business_logic(self) -> None:
        """"""
        The Context delegates some work to the Strategy object instead of
        implementing multiple versions of the algorithm on its own.
        """"""

        # ...

        print(""Context: Sorting data using the strategy (not sure how it'll do it)"")
        result = self._strategy.do_algorithm([""a"", ""b"", ""c"", ""d"", ""e""])
        print("","".join(result))

        # ...


class Strategy(ABC):
    """"""
    The Strategy interface declares operations common to all supported versions
    of some algorithm.

    The Context uses this interface to call the algorithm defined by Concrete
    Strategies.
    """"""

    @abstractmethod
    def do_algorithm(self, data: List):
        pass


""""""
Concrete Strategies implement the algorithm while following the base Strategy
interface. The interface makes them interchangeable in the Context.
""""""


class ConcreteStrategyA(Strategy):
    def do_algorithm(self, data: List) -> List:
        return sorted(data)


class ConcreteStrategyB(Strategy):
    def do_algorithm(self, data: List) -> List:
        return reversed(sorted(data))


if __name__ == ""__main__"":
    # The client code picks a concrete strategy and passes it to the context.
    # The client should be aware of the differences between strategies in order
    # to make the right choice.

    context = Context(ConcreteStrategyA())
    print(""Client: Strategy is set to normal sorting."")
    context.do_some_business_logic()
    print()

    print(""Client: Strategy is set to reverse sorting."")
    context.strategy = ConcreteStrategyB()
    context.do_some_business_logic()",Python,Strategy,Refactoring Guru,https://refactoring.guru/design-patterns/strategy/python/example#example-0,"[-1.70157512e-03  4.60197479e-02 -2.04274803e-02 -2.50280127e-02
 -9.06861871e-02 -4.44492958e-02  2.35893726e-02  3.25331576e-02
 -7.25229532e-02 -3.04180142e-02  1.96455307e-02  4.05913554e-02
  6.10617921e-02 -1.45604033e-02  2.80053560e-02  4.62853573e-02
  2.18114499e-02 -5.64970868e-03  6.57357275e-03 -2.63363905e-02
 -8.79811775e-03  2.78701894e-02  1.77300293e-02  2.88484879e-02
 -5.90407476e-02 -4.96489108e-02 -1.07419360e-02  4.01011435e-03
 -8.35085381e-03  1.01304185e-02  2.10682396e-02  1.11457922e-01
 -2.55054794e-02  7.25086555e-02 -1.10037485e-02  7.64970332e-02
 -6.54383376e-02 -1.02985188e-01  2.52153575e-02  5.96901476e-02
 -6.16414510e-02  2.26106197e-02 -8.52735266e-02 -2.94310525e-02
 -3.86283249e-02  2.99458001e-02 -9.37994868e-02  2.95158885e-02
  1.35037992e-02 -8.71116221e-02 -1.08699217e-01  6.81501254e-02
 -7.45097473e-02 -5.63305765e-02 -1.85409859e-02  3.31952795e-02
  8.90363231e-02  5.47508150e-02 -1.42474249e-02 -6.80127665e-02
 -2.97272298e-02 -2.92487666e-02 -4.21483070e-02  1.03785386e-02
  9.65057313e-03  5.75635908e-03 -3.26304659e-02  4.80284877e-02
 -3.29316768e-04 -8.75702244e-04  1.22435885e-02 -2.39506699e-02
 -3.29255126e-02  1.06129721e-02 -3.04094963e-02 -3.31677124e-02
  5.72738126e-02  4.33170833e-02 -6.81304485e-02 -1.01377197e-01
 -6.38698712e-02 -1.47394817e-02 -2.50689331e-02  9.80749950e-02
  6.09483086e-02 -1.20218143e-01 -2.89192908e-02 -1.36429761e-02
  1.28007576e-01  9.30748582e-02 -2.77642123e-02 -2.19839104e-02
 -2.07645050e-03  2.36898428e-03  4.09962200e-02  8.39618072e-02
  2.18554065e-02 -7.42426887e-02 -7.50888437e-02  8.52348134e-02
 -1.61541570e-02  2.67328378e-02 -2.23953314e-02 -2.41990350e-02
  5.78832217e-02  4.18457277e-02 -3.86446677e-02 -7.98540413e-02
  6.90988451e-03 -1.15757272e-01  1.08975200e-02  3.03064026e-02
  1.42464107e-02 -4.30395044e-02 -1.41293472e-02  2.81923413e-02
  4.22207173e-03  4.37940136e-02 -1.00534298e-02  1.78135522e-02
  3.06454971e-02  1.76823903e-02  7.32499920e-03 -5.93977282e-03
 -3.16333584e-02  1.71404574e-02 -1.34422705e-02  6.35328294e-34
 -3.56474407e-02 -1.00223191e-01  2.25252751e-02  4.92675751e-02
  1.61902769e-03  8.55496451e-02  7.40376115e-02 -4.93977070e-02
 -1.25161201e-01 -3.30559537e-02 -7.82863330e-03  1.56884462e-01
 -3.85458879e-02  1.84434988e-02  4.48525026e-02 -8.64626747e-03
  1.85523909e-02  7.58901089e-02 -6.21784199e-03 -3.25765312e-02
  8.07921067e-02  2.50015594e-03 -4.56951484e-02 -6.70878515e-02
 -2.87343878e-02  4.32267860e-02 -2.37180293e-02 -5.01857102e-02
 -6.64061233e-02  1.29276831e-02 -9.22330618e-02 -2.11127307e-02
 -1.61432959e-02  1.62194520e-02  6.47703419e-03  2.49995850e-02
 -1.94546171e-02 -4.84651066e-02 -1.19785648e-02 -9.20803398e-02
 -7.36051202e-02  2.37334557e-02  5.53438347e-03 -2.98258173e-03
 -2.37102825e-02 -6.16216026e-02 -7.94014484e-02  1.40496299e-01
  6.62432015e-02  1.05501646e-02  2.93942541e-02 -3.96464877e-02
  9.01416391e-02 -6.10107929e-03 -3.71851325e-02 -8.67528245e-02
  2.74279080e-02  4.07050587e-02  3.18966396e-02 -4.37359791e-03
  8.71896297e-02  2.44534551e-03 -4.86808531e-02  8.90131742e-02
 -3.24268593e-04  5.41923121e-02 -4.77885641e-02 -2.59797443e-02
  9.40530449e-02 -1.70182658e-03 -3.19556855e-02  9.71080586e-02
 -8.66053998e-03  6.18730895e-02  4.91851680e-02 -2.21462511e-02
 -1.48947798e-02 -7.64555633e-02 -5.70968427e-02 -7.49758184e-02
  6.03684112e-02  7.99413845e-02 -2.64288802e-02  5.03211729e-02
 -5.20103835e-02  3.15566882e-02  7.39511251e-02 -2.29213736e-03
 -3.70030366e-02 -3.20177227e-02 -1.31647781e-01 -7.41631836e-02
  6.51230887e-02  6.15893267e-02  7.07973987e-02 -3.21579622e-33
  1.78550240e-02  2.84378268e-02  1.16303954e-02 -5.00859618e-02
  1.29319038e-02 -9.81805101e-02  4.78020422e-02 -5.08986078e-02
 -2.79176570e-02  1.55536802e-02 -3.26896049e-02 -4.36638221e-02
  2.26757992e-02 -2.84136944e-02  9.90932807e-02 -1.19697060e-02
 -2.09197160e-02 -1.38486605e-02 -3.24922875e-02 -1.46341026e-02
 -8.75060558e-02 -5.49488096e-03 -8.61613601e-02  2.00148374e-02
 -5.34628239e-03 -1.50672684e-04  1.13550387e-02  2.71613169e-02
  3.87948640e-02 -1.86592042e-02  2.60048895e-03  2.30639707e-02
 -2.88243946e-02  5.69359474e-02 -1.06509393e-02  1.41619267e-02
  7.76396180e-03 -4.95991260e-02 -2.98208240e-02  4.67785709e-02
  5.79416789e-02  3.47384550e-02 -4.23785150e-02  3.85078005e-02
  4.19644378e-02  1.87332965e-02 -4.71968353e-02 -3.94156016e-02
  1.43365264e-02 -8.45013484e-02  2.13219039e-02  4.13670838e-02
 -5.44474311e-02 -4.27636243e-02 -8.80011916e-02  5.94189279e-02
  6.64286241e-02 -8.80997907e-03 -2.66457908e-02 -6.38693711e-03
  1.40822874e-02 -6.72423793e-03  8.50485787e-02  4.57834220e-03
 -3.44033241e-02  3.76158766e-02 -9.40650776e-02 -6.87824711e-02
  2.57794205e-02 -5.89055195e-02 -3.34616401e-04  4.86113578e-02
 -2.88511859e-03 -4.89347316e-02 -5.10000344e-03  1.02653489e-01
 -2.56059207e-02  2.36845706e-02  1.74844991e-02  8.30064118e-02
 -2.00333986e-02 -4.86785099e-02  5.15707284e-02  1.11998901e-01
 -8.00509378e-02 -2.62923371e-02  2.25614924e-02  1.13067441e-01
 -5.43934517e-02 -7.89087545e-03  1.64481811e-02 -4.26052064e-02
  6.51899800e-02  9.69677344e-02 -1.04857783e-03 -5.16317691e-08
 -1.04909457e-01 -3.41529511e-02  5.92012480e-02  1.17362052e-01
 -8.54806602e-03  5.25413901e-02  1.87255871e-02 -4.04511578e-02
  8.71242210e-03 -2.41706707e-02 -3.47184241e-02  3.15376334e-02
 -4.64250632e-02  2.35218666e-02  2.42584534e-02  7.06136897e-02
  4.09067236e-02 -8.10435042e-02 -5.17485924e-02  4.18185927e-02
  2.93661207e-02 -4.84887473e-02  4.05067913e-02  4.35130059e-04
 -2.86031794e-02 -5.55760711e-02 -1.29538942e-02  1.01136409e-01
  5.08881770e-02  3.54359113e-02  4.87768874e-02 -2.43698433e-02
 -4.17206669e-04  3.46085615e-02 -8.04218277e-02  3.80408168e-02
  1.06884213e-02 -4.69152443e-03  2.98741926e-02  2.93727592e-02
 -8.79633948e-02 -2.21283603e-02 -8.33659247e-02  1.74628943e-02
  7.75176957e-02 -7.71781057e-03 -1.71751380e-02 -5.23628481e-02
  5.60002737e-02  3.15549113e-02 -5.95268011e-02 -6.82800123e-03
 -1.27615947e-02 -3.64241377e-02  2.45187618e-02  5.40488176e-02
 -2.13769097e-02 -5.22509106e-02 -5.09454161e-02 -1.88218206e-02
 -7.91980550e-02  5.10810725e-02  5.45331948e-02  3.00074909e-02]"
"from __future__ import annotations
from abc import ABC, abstractmethod
from typing import List


class Component(ABC):
    """"""
    The Component interface declares an `accept` method that should take the
    base visitor interface as an argument.
    """"""

    @abstractmethod
    def accept(self, visitor: Visitor) -> None:
        pass


class ConcreteComponentA(Component):
    """"""
    Each Concrete Component must implement the `accept` method in such a way
    that it calls the visitor's method corresponding to the component's class.
    """"""

    def accept(self, visitor: Visitor) -> None:
        """"""
        Note that we're calling `visitConcreteComponentA`, which matches the
        current class name. This way we let the visitor know the class of the
        component it works with.
        """"""

        visitor.visit_concrete_component_a(self)

    def exclusive_method_of_concrete_component_a(self) -> str:
        """"""
        Concrete Components may have special methods that don't exist in their
        base class or interface. The Visitor is still able to use these methods
        since it's aware of the component's concrete class.
        """"""

        return ""A""


class ConcreteComponentB(Component):
    """"""
    Same here: visitConcreteComponentB => ConcreteComponentB
    """"""

    def accept(self, visitor: Visitor):
        visitor.visit_concrete_component_b(self)

    def special_method_of_concrete_component_b(self) -> str:
        return ""B""


class Visitor(ABC):
    """"""
    The Visitor Interface declares a set of visiting methods that correspond to
    component classes. The signature of a visiting method allows the visitor to
    identify the exact class of the component that it's dealing with.
    """"""

    @abstractmethod
    def visit_concrete_component_a(self, element: ConcreteComponentA) -> None:
        pass

    @abstractmethod
    def visit_concrete_component_b(self, element: ConcreteComponentB) -> None:
        pass


""""""
Concrete Visitors implement several versions of the same algorithm, which can
work with all concrete component classes.

You can experience the biggest benefit of the Visitor pattern when using it with
a complex object structure, such as a Composite tree. In this case, it might be
helpful to store some intermediate state of the algorithm while executing
visitor's methods over various objects of the structure.
""""""


class ConcreteVisitor1(Visitor):
    def visit_concrete_component_a(self, element) -> None:
        print(f""{element.exclusive_method_of_concrete_component_a()} + ConcreteVisitor1"")

    def visit_concrete_component_b(self, element) -> None:
        print(f""{element.special_method_of_concrete_component_b()} + ConcreteVisitor1"")


class ConcreteVisitor2(Visitor):
    def visit_concrete_component_a(self, element) -> None:
        print(f""{element.exclusive_method_of_concrete_component_a()} + ConcreteVisitor2"")

    def visit_concrete_component_b(self, element) -> None:
        print(f""{element.special_method_of_concrete_component_b()} + ConcreteVisitor2"")


def client_code(components: List[Component], visitor: Visitor) -> None:
    """"""
    The client code can run visitor operations over any set of elements without
    figuring out their concrete classes. The accept operation directs a call to
    the appropriate operation in the visitor object.
    """"""

    # ...
    for component in components:
        component.accept(visitor)
    # ...


if __name__ == ""__main__"":
    components = [ConcreteComponentA(), ConcreteComponentB()]

    print(""The client code works with all visitors via the base Visitor interface:"")
    visitor1 = ConcreteVisitor1()
    client_code(components, visitor1)

    print(""It allows the same client code to work with different types of visitors:"")
    visitor2 = ConcreteVisitor2()
    client_code(components, visitor2)",Python,Visitor,Refactoring Guru,https://refactoring.guru/design-patterns/visitor/python/example#example-0,"[-2.31540482e-02  2.12884787e-02  3.78288776e-02  6.18848652e-02
 -2.96660904e-02 -5.53106815e-02  7.39122108e-02  1.61859784e-02
 -4.94438745e-02 -6.97395802e-02 -3.61969485e-03 -6.33419380e-02
  2.52693444e-02  9.97998565e-03  7.77462348e-02  1.59456506e-02
  5.31640463e-02  1.09835519e-02 -2.66478192e-02  6.37033954e-02
 -8.73653498e-03  6.14300370e-03 -3.16215977e-02  4.70383987e-02
 -8.70551318e-02 -4.01691534e-02 -3.89159396e-02 -8.23673978e-02
  6.10329248e-02 -2.86307652e-03  6.49891347e-02  1.71836197e-01
 -6.67603910e-02  5.12582138e-02 -5.17326891e-02  7.94436336e-02
 -1.71553753e-02 -6.05443381e-02 -2.44806018e-02  1.16788335e-02
 -1.67263169e-02  8.43365267e-02 -5.36692441e-02 -7.30911717e-02
  2.91770734e-02 -8.54724925e-03 -6.33124355e-03 -4.44640890e-02
  2.12756637e-02 -9.94893685e-02 -2.09621582e-02  4.88629416e-02
 -2.61682291e-02  4.34691785e-03 -2.68652104e-02 -2.59003304e-02
  1.17505953e-01 -1.06150098e-02 -5.32907732e-02 -5.62943667e-02
 -4.04225998e-02 -3.25226858e-02  1.69884879e-02 -3.57953608e-02
 -2.94234194e-02  4.73339073e-02 -7.10290894e-02 -3.83612290e-02
  7.30363950e-02  2.74615102e-02 -1.88686363e-02  1.55286519e-02
 -1.13480464e-02  1.72295875e-03  3.57855968e-02 -1.17355483e-02
 -1.94313470e-03  4.86050881e-02 -3.60216685e-02 -1.45943403e-01
 -7.92053808e-03  1.16462922e-02 -2.36526108e-03 -4.69779922e-03
  7.37881735e-02 -3.19948308e-02 -2.51841582e-02 -4.23652194e-02
  3.11645232e-02  9.18162242e-02  1.43718030e-02  8.95141438e-03
 -9.17704869e-03 -2.77156215e-02  4.46894243e-02  2.16184352e-02
  6.98508509e-03 -2.92150769e-02 -7.24415947e-03  1.11123987e-01
 -2.23674569e-02  7.21560791e-02  1.59127859e-03 -4.08138484e-02
 -5.14897937e-03  4.55992259e-02 -7.34999031e-02 -1.26024574e-01
  3.16745490e-02 -7.33008087e-02  6.29242626e-04 -3.95406634e-02
 -8.64334404e-03  4.09410382e-03 -2.05869842e-02 -1.63187515e-02
  6.71092942e-02 -4.38411720e-03  6.37304559e-02  5.86763769e-02
  9.66881514e-02 -2.80466843e-02  9.16999206e-02 -5.53390710e-03
  4.41391841e-02 -6.04715496e-02 -3.95079069e-02  2.85005750e-33
 -2.00771037e-02 -2.68820859e-03 -9.56411660e-02  1.08487019e-02
  4.96776551e-02  4.52275984e-02  5.98789155e-02 -1.99912619e-02
 -2.24507321e-02 -2.24844720e-02 -5.64159818e-05  7.45903552e-02
  2.14638910e-03 -2.19431636e-03  7.02636018e-02  7.79163167e-02
  4.54339758e-02  4.43191007e-02  4.92576975e-03 -2.42024148e-03
  1.41635343e-01  2.98107304e-02 -3.80221345e-02  5.20109460e-02
  2.34591458e-02  2.31945477e-02  4.24703816e-03 -1.80117283e-02
 -1.06713615e-01 -9.28460993e-03 -3.10772136e-02  2.10751165e-02
  2.60312762e-02  8.09963793e-02  3.30043747e-03 -3.67032215e-02
  2.04574857e-02 -7.26966485e-02 -2.01114379e-02 -1.82368711e-01
 -7.05894753e-02 -6.56286487e-03  1.33040017e-02  5.96771669e-03
  1.46214711e-02 -4.23229374e-02 -6.94685653e-02  9.40588042e-02
  2.84497309e-02  3.23981270e-02  4.28589694e-02  2.06677373e-02
  1.10348724e-02 -1.40836500e-02 -6.89549148e-02 -2.25352094e-04
  3.77785526e-02  1.00692816e-01  5.14445864e-02 -2.22896211e-04
 -2.54952232e-03  5.86332567e-02 -8.94577205e-02  6.22675940e-02
 -7.26531893e-02  4.67504822e-02 -5.45058399e-02 -3.09471171e-02
  5.60259447e-02 -9.13184322e-03 -1.99114438e-02  9.25062373e-02
 -9.54136178e-02 -4.43564132e-02 -9.11321770e-03 -6.98088557e-02
 -5.03113009e-02 -9.92109701e-02  1.99869554e-03 -1.94654334e-02
 -7.50711039e-02  5.90926260e-02  6.18938217e-03  1.01216316e-01
 -4.05330434e-02 -1.23665417e-02  5.91903627e-02  1.95927490e-02
 -5.52693456e-02 -6.83621392e-02 -5.54421581e-02 -6.27702028e-02
  4.15473841e-02 -3.33469287e-02  5.08091412e-02 -5.06029637e-33
  4.74752560e-02  2.15633283e-03  2.63610296e-02 -3.28266025e-02
 -3.96814458e-02 -5.32898940e-02 -4.47447449e-02 -9.44428220e-02
 -4.90173995e-02 -2.08907798e-02 -3.92217934e-02  3.72520573e-02
  8.49755704e-02 -3.91100533e-02  2.92468406e-02  2.96166111e-02
 -2.54986994e-02 -1.83396842e-02 -3.76688410e-03  4.94874530e-02
 -3.81009839e-02  5.20526245e-02 -3.12981494e-02 -2.66444944e-02
 -2.68160347e-02  1.28999427e-02 -1.86384507e-02  2.24709902e-02
  8.97328407e-02  2.16888543e-03 -6.43380806e-02  1.95689499e-03
 -4.56337556e-02 -5.45002706e-02  3.11329644e-02 -3.40495561e-03
 -2.27130949e-02  3.90460738e-03 -3.41825522e-02  3.45041975e-02
  4.99350578e-02  1.27149578e-02  5.20421751e-03 -5.23146475e-03
 -1.31270438e-02 -3.96637954e-02 -8.02026391e-02  6.23721778e-02
  2.86163930e-02 -8.78440309e-03  8.18581507e-03 -2.68341582e-02
 -2.12876499e-02  5.48140854e-02 -6.77573681e-02  5.59513234e-02
  5.89482188e-02 -3.41721997e-02 -4.88748914e-03 -4.17420156e-02
  2.38105301e-02 -2.67418437e-02  1.82027873e-02  8.23712796e-02
 -3.33153014e-03 -3.09359916e-02 -8.13882947e-02 -4.61515039e-02
  4.08999398e-02  8.46883282e-03  3.62208448e-02  6.50621355e-02
  1.51909105e-02 -1.82592086e-02  3.28677483e-02  5.71824536e-02
  4.98729572e-02  1.37290694e-02  6.02242500e-02  1.13552744e-02
 -8.14783871e-02 -3.04436628e-02  5.72012998e-02 -6.80162525e-03
 -1.07643921e-02 -1.43395483e-01 -1.16114356e-02  5.20734861e-02
  3.24811861e-02 -2.72844601e-02  6.10300293e-03  3.25517468e-02
  1.72074065e-02 -2.65017326e-04 -2.12180447e-02 -5.91429199e-08
 -6.13152497e-02 -6.27430752e-02 -3.04886382e-02  4.52730386e-03
  6.52465001e-02 -7.42437765e-02 -4.03888598e-02 -2.12444626e-02
 -5.57504706e-02 -1.98184885e-02 -1.09782731e-02  4.62902524e-02
 -1.82353649e-02 -4.98915054e-02  6.83613792e-02  5.34559451e-02
 -5.90244867e-03 -7.36554489e-02 -1.18622199e-01  2.39728633e-02
 -7.93870464e-02 -9.57863927e-02  1.71160442e-03  2.92306766e-02
 -5.80175519e-02 -1.88448075e-02  8.47298056e-02  1.29391017e-04
  4.84021865e-02  5.05490191e-02 -9.81312431e-03 -1.02072547e-03
 -3.95420752e-02  2.51677837e-02  5.25183836e-03  8.13330859e-02
  1.15234125e-02 -2.66395397e-02  5.05401045e-02  8.08585733e-02
 -2.24320646e-02 -9.98571366e-02 -6.82135820e-02  2.15450712e-02
  6.95633516e-02 -1.71513930e-02 -4.81993258e-02 -5.49254753e-02
  7.09207878e-02  1.29682854e-01 -7.58912340e-02  1.16250922e-04
 -9.89467874e-02  6.76846430e-02 -5.07893860e-02  4.76461910e-02
  1.13533279e-02 -8.60113651e-02  5.54075092e-02  2.44209915e-03
  2.50057736e-03  5.90547435e-02  9.78864282e-02  2.86693964e-03]"
"buttons: First product hierarchy

 buttons/Button.java

package refactoring_guru.abstract_factory.example.buttons;

/**
 * Abstract Factory assumes that you have several families of products,
 * structured into separate class hierarchies (Button/Checkbox). All products of
 * the same family have the common interface.
 *
 * This is the common interface for buttons family.
 */
public interface Button {
    void paint();
}
 buttons/MacOSButton.java

package refactoring_guru.abstract_factory.example.buttons;

/**
 * All products families have the same varieties (MacOS/Windows).
 *
 * This is a MacOS variant of a button.
 */
public class MacOSButton implements Button {

    @Override
    public void paint() {
        System.out.println(""You have created MacOSButton."");
    }
}
 buttons/WindowsButton.java

package refactoring_guru.abstract_factory.example.buttons;

/**
 * All products families have the same varieties (MacOS/Windows).
 *
 * This is another variant of a button.
 */
public class WindowsButton implements Button {

    @Override
    public void paint() {
        System.out.println(""You have created WindowsButton."");
    }
}
 checkboxes: Second product hierarchy

 checkboxes/Checkbox.java

package refactoring_guru.abstract_factory.example.checkboxes;

/**
 * Checkboxes is the second product family. It has the same variants as buttons.
 */
public interface Checkbox {
    void paint();
}
 checkboxes/MacOSCheckbox.java

package refactoring_guru.abstract_factory.example.checkboxes;

/**
 * All products families have the same varieties (MacOS/Windows).
 *
 * This is a variant of a checkbox.
 */
public class MacOSCheckbox implements Checkbox {

    @Override
    public void paint() {
        System.out.println(""You have created MacOSCheckbox."");
    }
}
 checkboxes/WindowsCheckbox.java

package refactoring_guru.abstract_factory.example.checkboxes;

/**
 * All products families have the same varieties (MacOS/Windows).
 *
 * This is another variant of a checkbox.
 */
public class WindowsCheckbox implements Checkbox {

    @Override
    public void paint() {
        System.out.println(""You have created WindowsCheckbox."");
    }
}
 factories

 factories/GUIFactory.java: Abstract factory

package refactoring_guru.abstract_factory.example.factories;

import refactoring_guru.abstract_factory.example.buttons.Button;
import refactoring_guru.abstract_factory.example.checkboxes.Checkbox;

/**
 * Abstract factory knows about all (abstract) product types.
 */
public interface GUIFactory {
    Button createButton();
    Checkbox createCheckbox();
}
 factories/MacOSFactory.java: Concrete factory (macOS)

package refactoring_guru.abstract_factory.example.factories;

import refactoring_guru.abstract_factory.example.buttons.Button;
import refactoring_guru.abstract_factory.example.buttons.MacOSButton;
import refactoring_guru.abstract_factory.example.checkboxes.Checkbox;
import refactoring_guru.abstract_factory.example.checkboxes.MacOSCheckbox;

/**
 * Each concrete factory extends basic factory and responsible for creating
 * products of a single variety.
 */
public class MacOSFactory implements GUIFactory {

    @Override
    public Button createButton() {
        return new MacOSButton();
    }

    @Override
    public Checkbox createCheckbox() {
        return new MacOSCheckbox();
    }
}
 factories/WindowsFactory.java: Concrete factory (Windows)

package refactoring_guru.abstract_factory.example.factories;

import refactoring_guru.abstract_factory.example.buttons.Button;
import refactoring_guru.abstract_factory.example.buttons.WindowsButton;
import refactoring_guru.abstract_factory.example.checkboxes.Checkbox;
import refactoring_guru.abstract_factory.example.checkboxes.WindowsCheckbox;

/**
 * Each concrete factory extends basic factory and responsible for creating
 * products of a single variety.
 */
public class WindowsFactory implements GUIFactory {

    @Override
    public Button createButton() {
        return new WindowsButton();
    }

    @Override
    public Checkbox createCheckbox() {
        return new WindowsCheckbox();
    }
}
 app

 app/Application.java: Client code

package refactoring_guru.abstract_factory.example.app;

import refactoring_guru.abstract_factory.example.buttons.Button;
import refactoring_guru.abstract_factory.example.checkboxes.Checkbox;
import refactoring_guru.abstract_factory.example.factories.GUIFactory;

/**
 * Factory users don't care which concrete factory they use since they work with
 * factories and products through abstract interfaces.
 */
public class Application {
    private Button button;
    private Checkbox checkbox;

    public Application(GUIFactory factory) {
        button = factory.createButton();
        checkbox = factory.createCheckbox();
    }

    public void paint() {
        button.paint();
        checkbox.paint();
    }
}
 Demo.java: App configuration

package refactoring_guru.abstract_factory.example;

import refactoring_guru.abstract_factory.example.app.Application;
import refactoring_guru.abstract_factory.example.factories.GUIFactory;
import refactoring_guru.abstract_factory.example.factories.MacOSFactory;
import refactoring_guru.abstract_factory.example.factories.WindowsFactory;

/**
 * Demo class. Everything comes together here.
 */
public class Demo {

    /**
     * Application picks the factory type and creates it in run time (usually at
     * initialization stage), depending on the configuration or environment
     * variables.
     */
    private static Application configureApplication() {
        Application app;
        GUIFactory factory;
        String osName = System.getProperty(""os.name"").toLowerCase();
        if (osName.contains(""mac"")) {
            factory = new MacOSFactory();
        } else {
            factory = new WindowsFactory();
        }
        app = new Application(factory);
        return app;
    }

    public static void main(String[] args) {
        Application app = configureApplication();
        app.paint();
    }
}",Java,Abstract Factory,Refactoring Guru,https://refactoring.guru/design-patterns/abstract-factory/java/example#example-0,"[ 5.09804534e-03  1.87282842e-02 -6.08043596e-02 -4.05263714e-02
 -1.06537305e-02  3.44810612e-03  9.67750028e-02  4.84885089e-02
 -1.60589084e-01 -1.20804496e-02  3.53682265e-02 -7.80343860e-02
  6.45130128e-02 -3.92894261e-02  3.27456594e-02 -5.27177751e-03
 -2.58530192e-02 -5.86017780e-02 -3.53329033e-02  1.21685332e-02
  9.64065120e-02 -8.21391493e-02  3.11874654e-02 -3.61324698e-02
 -4.24874127e-02  2.48284638e-02  5.60317487e-02 -3.46786492e-02
 -6.42618909e-02  2.56914238e-04 -1.33619951e-02  8.76525939e-02
 -2.41076183e-02  8.85444786e-03  2.28463169e-02  7.37137794e-02
 -1.68774894e-03 -1.15520796e-02 -2.05735322e-02 -1.14865743e-01
 -1.00375220e-01  6.23052195e-02 -3.33883464e-02 -2.06079967e-02
  3.21536623e-02 -5.19621782e-02 -2.82664709e-02  1.13625079e-03
  5.43718413e-02 -1.09842224e-02 -3.16859409e-02 -3.28248716e-03
 -1.80806704e-02 -8.78155306e-02  4.25891764e-02  3.44854370e-02
  9.98696405e-03  3.31275351e-02  1.32222442e-04  2.32515391e-02
  3.94162908e-02  1.17020030e-02 -7.84513205e-02 -3.29207419e-03
  1.80343576e-02  2.21147649e-02 -1.18393330e-02  1.00472849e-03
  3.41096558e-02 -8.90724808e-02 -5.70629574e-02  3.68198007e-02
  5.16410433e-02  8.70106071e-02 -6.62836283e-02 -3.05686537e-02
  2.17309967e-02  3.23157758e-02 -4.63363975e-02 -9.90168229e-02
 -2.80538369e-02  4.74169217e-02 -3.94012220e-02  3.61483917e-02
  7.14246556e-02  6.04097433e-02 -3.19082960e-02 -3.60664427e-02
  2.11343896e-02  1.06038272e-01 -3.72552546e-03 -5.19550964e-02
 -2.47607790e-02 -2.86287181e-02  7.35924244e-02 -2.34150048e-02
 -1.15539525e-02  8.11628625e-03 -7.36749172e-02  7.62978494e-02
 -4.52415831e-02 -7.95803070e-02  7.58429840e-02 -1.06609026e-02
  9.90570486e-02 -8.23784899e-03 -5.91868423e-02 -1.65177509e-02
 -3.73952910e-02  1.02761621e-02 -1.08738303e-01 -5.08455932e-02
  1.44780288e-02 -4.21841480e-02 -4.82566981e-03 -1.66303162e-02
  3.55676822e-02 -3.97994481e-02 -3.78521383e-02  1.63988397e-02
  9.93887186e-02 -2.79510883e-03  8.69975984e-03 -6.73867688e-02
  3.38476175e-03  2.70614475e-02 -5.36169745e-02  2.46700614e-33
  3.62667330e-02 -9.93432254e-02 -9.42002423e-03  1.22168034e-01
  2.52862796e-02 -6.26432244e-04  7.10143298e-02  8.39857385e-02
 -3.64382961e-03 -1.83031778e-03  1.54455304e-02 -2.57870648e-02
 -8.82790163e-02  3.74818072e-02  4.19402607e-02 -3.11497953e-02
  5.06681018e-03  4.49083298e-02 -1.06374389e-02 -4.95527573e-02
 -1.27540855e-02  6.71209022e-02 -4.90266941e-02 -2.09765527e-02
 -3.21864337e-02  9.34536532e-02  5.94473928e-02  3.56868692e-02
 -5.33196963e-02  2.70474870e-02  9.08209682e-02 -2.93208547e-02
 -8.37991852e-03  4.89406325e-02 -9.70598087e-02 -6.06427342e-02
 -1.04209757e-03 -1.11514684e-02  1.86005849e-02 -4.15259674e-02
 -5.77333905e-02 -6.48949519e-02  4.32800427e-02  2.53733974e-02
  1.11634143e-01 -9.25507918e-02 -4.63601388e-02  9.02156159e-02
 -1.59193687e-02 -3.60448757e-04 -4.59433533e-03  8.63162577e-02
  4.77185510e-02 -9.18836799e-03 -6.91027418e-02 -1.53504517e-02
 -1.79854371e-02  5.54789566e-02 -3.58513668e-02  1.88965872e-02
 -1.16115309e-01  6.72636926e-02 -7.99088031e-02  7.63928294e-02
 -5.88465594e-02  8.28267038e-02 -2.65860911e-02 -1.10172093e-01
  4.43140678e-02  9.63372551e-03  7.42707562e-05 -3.68782170e-02
  8.13028030e-03 -1.99437072e-03 -6.43878756e-03  9.06154513e-03
  1.42003624e-02  1.33591855e-03 -9.66761485e-02 -9.06419903e-02
 -5.90784773e-02  6.48426935e-02 -6.55349195e-02  3.44701186e-02
 -3.40575390e-02  2.32246574e-02  8.24621022e-02  2.63028871e-03
  7.07863420e-02  1.21970912e-02 -5.93681745e-02  9.54477862e-03
 -2.99591962e-02 -4.44931388e-02  4.24678810e-02 -5.05632246e-33
  8.64816010e-02  3.68725918e-02 -1.87068414e-02 -3.45883332e-02
  9.59125161e-03  8.63695238e-03 -4.14236970e-02 -2.28702556e-02
 -6.01335876e-02  9.38379951e-03 -5.16553856e-02 -1.39004504e-02
  7.02880397e-02  3.62223247e-03 -9.44512058e-03  3.18507515e-02
 -4.85859637e-04 -7.95577466e-03  2.95764324e-03 -1.34772258e-02
 -2.13602893e-02  1.04500152e-01  8.23308975e-02 -4.75125238e-02
 -6.66923299e-02 -7.13296160e-02 -5.69303185e-02  7.19280615e-02
  6.62113875e-02  5.53357638e-02  7.97642991e-02 -1.08746914e-02
 -2.28198357e-02  1.65504199e-02  6.69090599e-02 -9.61769223e-02
  1.33945411e-02 -2.48941313e-02 -2.39962377e-02  6.01156875e-02
  3.69819105e-02 -8.18119273e-02 -6.03533257e-03  2.24608611e-02
  2.71692574e-02 -4.01044600e-02  2.85780313e-03 -2.22934317e-02
  1.45518268e-02 -5.02814837e-02  1.63864437e-02 -8.44416618e-02
 -3.04950494e-02 -7.44806528e-02 -4.03981796e-03  7.17004240e-02
  1.16107784e-01 -9.77806398e-04  1.52159799e-02  8.70195255e-02
  5.08118793e-02 -1.07354276e-01  2.79117599e-02  1.10061811e-02
  4.65564393e-02 -2.22335476e-02 -7.39428913e-03  1.68775197e-03
 -1.40285306e-03  2.44165156e-02 -1.97515320e-02  6.12374246e-02
 -2.42639091e-02 -3.51114050e-02  6.95858896e-02  2.07601767e-02
  4.57768664e-02  2.84938421e-02  3.34435236e-03 -2.01165695e-02
  9.57042817e-03 -1.47268819e-02  4.88809720e-02 -5.66311926e-02
 -2.66155526e-02 -1.01719111e-01 -3.96640524e-02  1.76886935e-02
 -1.98623743e-02 -1.06743900e-02 -5.35268076e-02  3.29332873e-02
  2.23250724e-02  2.77716815e-02 -4.77268882e-02 -4.76191175e-08
 -7.01358244e-02 -2.99407244e-02  4.79944237e-02  2.41620503e-02
  2.56631747e-02 -5.83750987e-03 -1.03724040e-02  1.08392602e-02
  8.41876306e-03 -1.45653160e-02 -6.28275722e-02  6.75463006e-02
 -2.89001875e-02  5.50751351e-02  6.15828186e-02 -1.05035946e-01
 -3.37783843e-02  2.98047587e-02 -6.37614951e-02  5.20164333e-02
  8.15844014e-02 -5.09690009e-02 -4.34175804e-02  1.15504101e-01
 -1.72421476e-03 -5.28161898e-02  6.24926388e-02  2.04204861e-02
 -4.91978601e-04  1.66494384e-01 -6.98998664e-03  6.27854988e-02
  3.72815579e-02  3.69696915e-02 -2.50414535e-02 -9.80052259e-03
 -8.39554705e-03  8.24741721e-02  2.42404919e-02  4.06378955e-02
  1.42206047e-02 -4.87208217e-02 -8.31327811e-02 -1.83419343e-02
  2.79638022e-02 -7.59868920e-02 -8.43582489e-03 -5.56927687e-03
 -3.92968133e-02  1.78681985e-02 -1.05947047e-01  2.76140217e-02
  5.89023605e-02 -9.48145241e-02 -2.78101284e-02  1.19540412e-02
  2.73369271e-02 -4.05273885e-02  8.19964036e-02  5.30156754e-02
 -2.58658477e-03  3.24803181e-02  3.48914899e-02  1.36992345e-02]"
"builders

 builders/Builder.java: Common builder interface

package refactoring_guru.builder.example.builders;

import refactoring_guru.builder.example.cars.CarType;
import refactoring_guru.builder.example.components.Engine;
import refactoring_guru.builder.example.components.GPSNavigator;
import refactoring_guru.builder.example.components.Transmission;
import refactoring_guru.builder.example.components.TripComputer;

/**
 * Builder interface defines all possible ways to configure a product.
 */
public interface Builder {
    void setCarType(CarType type);
    void setSeats(int seats);
    void setEngine(Engine engine);
    void setTransmission(Transmission transmission);
    void setTripComputer(TripComputer tripComputer);
    void setGPSNavigator(GPSNavigator gpsNavigator);
}
 builders/CarBuilder.java: Builder of car

package refactoring_guru.builder.example.builders;

import refactoring_guru.builder.example.cars.Car;
import refactoring_guru.builder.example.cars.CarType;
import refactoring_guru.builder.example.components.Engine;
import refactoring_guru.builder.example.components.GPSNavigator;
import refactoring_guru.builder.example.components.Transmission;
import refactoring_guru.builder.example.components.TripComputer;

/**
 * Concrete builders implement steps defined in the common interface.
 */
public class CarBuilder implements Builder {
    private CarType type;
    private int seats;
    private Engine engine;
    private Transmission transmission;
    private TripComputer tripComputer;
    private GPSNavigator gpsNavigator;

    public void setCarType(CarType type) {
        this.type = type;
    }

    @Override
    public void setSeats(int seats) {
        this.seats = seats;
    }

    @Override
    public void setEngine(Engine engine) {
        this.engine = engine;
    }

    @Override
    public void setTransmission(Transmission transmission) {
        this.transmission = transmission;
    }

    @Override
    public void setTripComputer(TripComputer tripComputer) {
        this.tripComputer = tripComputer;
    }

    @Override
    public void setGPSNavigator(GPSNavigator gpsNavigator) {
        this.gpsNavigator = gpsNavigator;
    }

    public Car getResult() {
        return new Car(type, seats, engine, transmission, tripComputer, gpsNavigator);
    }
}
 builders/CarManualBuilder.java: Builder of a car manual

package refactoring_guru.builder.example.builders;

import refactoring_guru.builder.example.cars.Manual;
import refactoring_guru.builder.example.cars.CarType;
import refactoring_guru.builder.example.components.Engine;
import refactoring_guru.builder.example.components.GPSNavigator;
import refactoring_guru.builder.example.components.Transmission;
import refactoring_guru.builder.example.components.TripComputer;

/**
 * Unlike other creational patterns, Builder can construct unrelated products,
 * which don't have the common interface.
 *
 * In this case we build a user manual for a car, using the same steps as we
 * built a car. This allows to produce manuals for specific car models,
 * configured with different features.
 */
public class CarManualBuilder implements Builder{
    private CarType type;
    private int seats;
    private Engine engine;
    private Transmission transmission;
    private TripComputer tripComputer;
    private GPSNavigator gpsNavigator;

    @Override
    public void setCarType(CarType type) {
        this.type = type;
    }

    @Override
    public void setSeats(int seats) {
        this.seats = seats;
    }

    @Override
    public void setEngine(Engine engine) {
        this.engine = engine;
    }

    @Override
    public void setTransmission(Transmission transmission) {
        this.transmission = transmission;
    }

    @Override
    public void setTripComputer(TripComputer tripComputer) {
        this.tripComputer = tripComputer;
    }

    @Override
    public void setGPSNavigator(GPSNavigator gpsNavigator) {
        this.gpsNavigator = gpsNavigator;
    }

    public Manual getResult() {
        return new Manual(type, seats, engine, transmission, tripComputer, gpsNavigator);
    }
}
 cars

 cars/Car.java: Car product

package refactoring_guru.builder.example.cars;

import refactoring_guru.builder.example.components.Engine;
import refactoring_guru.builder.example.components.GPSNavigator;
import refactoring_guru.builder.example.components.Transmission;
import refactoring_guru.builder.example.components.TripComputer;

/**
 * Car is a product class.
 */
public class Car {
    private final CarType carType;
    private final int seats;
    private final Engine engine;
    private final Transmission transmission;
    private final TripComputer tripComputer;
    private final GPSNavigator gpsNavigator;
    private double fuel = 0;

    public Car(CarType carType, int seats, Engine engine, Transmission transmission,
               TripComputer tripComputer, GPSNavigator gpsNavigator) {
        this.carType = carType;
        this.seats = seats;
        this.engine = engine;
        this.transmission = transmission;
        this.tripComputer = tripComputer;
        if (this.tripComputer != null) {
            this.tripComputer.setCar(this);
        }
        this.gpsNavigator = gpsNavigator;
    }

    public CarType getCarType() {
        return carType;
    }

    public double getFuel() {
        return fuel;
    }

    public void setFuel(double fuel) {
        this.fuel = fuel;
    }

    public int getSeats() {
        return seats;
    }

    public Engine getEngine() {
        return engine;
    }

    public Transmission getTransmission() {
        return transmission;
    }

    public TripComputer getTripComputer() {
        return tripComputer;
    }

    public GPSNavigator getGpsNavigator() {
        return gpsNavigator;
    }
}
 cars/Manual.java: Manual product

package refactoring_guru.builder.example.cars;

import refactoring_guru.builder.example.components.Engine;
import refactoring_guru.builder.example.components.GPSNavigator;
import refactoring_guru.builder.example.components.Transmission;
import refactoring_guru.builder.example.components.TripComputer;

/**
 * Car manual is another product. Note that it does not have the same ancestor
 * as a Car. They are not related.
 */
public class Manual {
    private final CarType carType;
    private final int seats;
    private final Engine engine;
    private final Transmission transmission;
    private final TripComputer tripComputer;
    private final GPSNavigator gpsNavigator;

    public Manual(CarType carType, int seats, Engine engine, Transmission transmission,
                  TripComputer tripComputer, GPSNavigator gpsNavigator) {
        this.carType = carType;
        this.seats = seats;
        this.engine = engine;
        this.transmission = transmission;
        this.tripComputer = tripComputer;
        this.gpsNavigator = gpsNavigator;
    }

    public String print() {
        String info = """";
        info += ""Type of car: "" + carType + ""\n"";
        info += ""Count of seats: "" + seats + ""\n"";
        info += ""Engine: volume - "" + engine.getVolume() + ""; mileage - "" + engine.getMileage() + ""\n"";
        info += ""Transmission: "" + transmission + ""\n"";
        if (this.tripComputer != null) {
            info += ""Trip Computer: Functional"" + ""\n"";
        } else {
            info += ""Trip Computer: N/A"" + ""\n"";
        }
        if (this.gpsNavigator != null) {
            info += ""GPS Navigator: Functional"" + ""\n"";
        } else {
            info += ""GPS Navigator: N/A"" + ""\n"";
        }
        return info;
    }
}
 cars/CarType.java

package refactoring_guru.builder.example.cars;

public enum CarType {
    CITY_CAR, SPORTS_CAR, SUV
}
 components

 components/Engine.java: Product feature 1

package refactoring_guru.builder.example.components;

/**
 * Just another feature of a car.
 */
public class Engine {
    private final double volume;
    private double mileage;
    private boolean started;

    public Engine(double volume, double mileage) {
        this.volume = volume;
        this.mileage = mileage;
    }

    public void on() {
        started = true;
    }

    public void off() {
        started = false;
    }

    public boolean isStarted() {
        return started;
    }

    public void go(double mileage) {
        if (started) {
            this.mileage += mileage;
        } else {
            System.err.println(""Cannot go(), you must start engine first!"");
        }
    }

    public double getVolume() {
        return volume;
    }

    public double getMileage() {
        return mileage;
    }
}
 components/GPSNavigator.java: Product feature 2

package refactoring_guru.builder.example.components;

/**
 * Just another feature of a car.
 */
public class GPSNavigator {
    private String route;

    public GPSNavigator() {
        this.route = ""221b, Baker Street, London  to Scotland Yard, 8-10 Broadway, London"";
    }

    public GPSNavigator(String manualRoute) {
        this.route = manualRoute;
    }

    public String getRoute() {
        return route;
    }
}
 components/Transmission.java: Product feature 3

package refactoring_guru.builder.example.components;

/**
 * Just another feature of a car.
 */
public enum Transmission {
    SINGLE_SPEED, MANUAL, AUTOMATIC, SEMI_AUTOMATIC
}
 components/TripComputer.java: Product feature 4

package refactoring_guru.builder.example.components;

import refactoring_guru.builder.example.cars.Car;

/**
 * Just another feature of a car.
 */
public class TripComputer {

    private Car car;

    public void setCar(Car car) {
        this.car = car;
    }

    public void showFuelLevel() {
        System.out.println(""Fuel level: "" + car.getFuel());
    }

    public void showStatus() {
        if (this.car.getEngine().isStarted()) {
            System.out.println(""Car is started"");
        } else {
            System.out.println(""Car isn't started"");
        }
    }
}
 director

 director/Director.java: Director controls builders

package refactoring_guru.builder.example.director;

import refactoring_guru.builder.example.builders.Builder;
import refactoring_guru.builder.example.cars.CarType;
import refactoring_guru.builder.example.components.Engine;
import refactoring_guru.builder.example.components.GPSNavigator;
import refactoring_guru.builder.example.components.Transmission;
import refactoring_guru.builder.example.components.TripComputer;

/**
 * Director defines the order of building steps. It works with a builder object
 * through common Builder interface. Therefore it may not know what product is
 * being built.
 */
public class Director {

    public void constructSportsCar(Builder builder) {
        builder.setCarType(CarType.SPORTS_CAR);
        builder.setSeats(2);
        builder.setEngine(new Engine(3.0, 0));
        builder.setTransmission(Transmission.SEMI_AUTOMATIC);
        builder.setTripComputer(new TripComputer());
        builder.setGPSNavigator(new GPSNavigator());
    }

    public void constructCityCar(Builder builder) {
        builder.setCarType(CarType.CITY_CAR);
        builder.setSeats(2);
        builder.setEngine(new Engine(1.2, 0));
        builder.setTransmission(Transmission.AUTOMATIC);
        builder.setTripComputer(new TripComputer());
        builder.setGPSNavigator(new GPSNavigator());
    }

    public void constructSUV(Builder builder) {
        builder.setCarType(CarType.SUV);
        builder.setSeats(4);
        builder.setEngine(new Engine(2.5, 0));
        builder.setTransmission(Transmission.MANUAL);
        builder.setGPSNavigator(new GPSNavigator());
    }
}
 Demo.java: Client code

package refactoring_guru.builder.example;

import refactoring_guru.builder.example.builders.CarBuilder;
import refactoring_guru.builder.example.builders.CarManualBuilder;
import refactoring_guru.builder.example.cars.Car;
import refactoring_guru.builder.example.cars.Manual;
import refactoring_guru.builder.example.director.Director;

/**
 * Demo class. Everything comes together here.
 */
public class Demo {

    public static void main(String[] args) {
        Director director = new Director();

        // Director gets the concrete builder object from the client
        // (application code). That's because application knows better which
        // builder to use to get a specific product.
        CarBuilder builder = new CarBuilder();
        director.constructSportsCar(builder);

        // The final product is often retrieved from a builder object, since
        // Director is not aware and not dependent on concrete builders and
        // products.
        Car car = builder.getResult();
        System.out.println(""Car built:\n"" + car.getCarType());


        CarManualBuilder manualBuilder = new CarManualBuilder();

        // Director may know several building recipes.
        director.constructSportsCar(manualBuilder);
        Manual carManual = manualBuilder.getResult();
        System.out.println(""\nCar manual built:\n"" + carManual.print());
    }

}",Java,Builder,Refactoring Guru,https://refactoring.guru/design-patterns/builder/java/example#example-0,"[-3.84999439e-02  3.97086293e-02  6.73338631e-03 -5.35928197e-02
 -1.15235627e-01  4.65408266e-02  1.67088713e-02  7.91901723e-02
 -1.13149486e-01 -8.80484749e-03  2.31848359e-02 -5.98965324e-02
  7.12634623e-02 -3.76675688e-02 -2.57400260e-03 -3.30309309e-02
  4.13742010e-03  2.53171530e-02 -4.34786975e-02  8.84294882e-03
  8.43057185e-02 -3.16923810e-03  2.52235606e-02  4.67218971e-03
 -2.68887002e-02  1.98818557e-03  5.21103619e-03 -1.18700741e-02
  6.85333787e-03 -1.18687656e-02 -1.92208122e-02  9.16438103e-02
 -6.73429295e-02  1.33768208e-02 -5.76499142e-02  4.38821651e-02
 -1.35748321e-02 -8.06407537e-04 -4.22793254e-02 -4.89708483e-02
 -8.43014494e-02  7.47029483e-03 -2.31575426e-02 -1.81266703e-02
  2.81442609e-02 -3.90909091e-02 -4.08378355e-02 -1.72213595e-02
  1.08325996e-01 -7.70656392e-02 -9.27584395e-02  2.94502173e-02
 -3.93070630e-04 -6.55463263e-02  1.40645420e-02  5.78900166e-02
  6.77265553e-03  4.15925868e-02 -2.03420669e-02 -5.08032478e-02
  1.92734785e-02 -5.46288257e-03 -1.62876900e-02 -6.20402619e-02
 -1.69408787e-02 -4.15856801e-02 -6.99611753e-03  1.12297423e-02
  1.49874743e-02  7.96889304e-04  2.00850125e-02  5.90253295e-03
  4.65711728e-02  4.54014018e-02 -6.35927916e-02 -1.30059440e-02
 -8.83000996e-03  2.45874617e-02  1.25426752e-02 -7.52651542e-02
 -3.17213349e-02 -8.77461955e-03 -4.09230478e-02  1.78092103e-02
  6.31590784e-02 -4.32911009e-04  2.68807393e-02 -2.52237152e-02
  3.46337669e-02  5.82128093e-02 -2.42790058e-02 -3.82822752e-02
  2.97859088e-02 -4.68201144e-03  6.54098243e-02  4.19704206e-02
 -3.18082348e-02 -1.47636449e-02 -1.88510828e-02  8.99611562e-02
 -6.52668327e-02  2.10311096e-02  2.25938149e-02  2.52941959e-02
 -3.11010536e-02 -8.16379488e-03 -2.34620664e-02  3.07252333e-02
 -6.74001267e-03 -2.26090234e-02 -4.00093496e-02  1.19207590e-03
 -3.69089730e-02 -5.42259812e-02 -1.07441097e-01  4.98682074e-03
 -1.74754933e-02 -1.61154568e-02 -1.91705003e-02  7.68429935e-02
  5.52002713e-02 -1.09347310e-02  6.64203987e-02  1.54489214e-02
  4.80725877e-02 -3.66328284e-02  2.86283670e-03  5.81831647e-33
 -3.89757790e-02 -6.84020370e-02 -7.61870900e-03  1.26173273e-01
  2.22590577e-04  3.39785926e-02 -6.31516858e-04  1.00028411e-01
  1.90452002e-02 -2.73268297e-02 -1.76852522e-03 -2.04158016e-02
 -6.35016710e-02  5.74784316e-02  3.52599807e-02 -1.43469544e-02
 -2.30555683e-02 -2.15516221e-02 -3.24679166e-02 -9.34869796e-02
  6.42503649e-02  8.26262403e-03 -1.99533366e-02 -1.46551225e-02
  2.32558884e-02  6.68437481e-02 -1.15986206e-02  2.59467624e-02
 -6.15916178e-02  3.37438658e-02  7.15604424e-02 -6.07056729e-02
 -4.22707722e-02  6.14862554e-02 -2.62996219e-02 -1.14818057e-02
 -2.98207868e-02 -2.99417488e-02 -4.59347181e-02 -8.97075534e-02
 -1.49297221e-02 -8.62873122e-02 -3.58294649e-03 -3.54216769e-02
  1.15528619e-02 -8.09640810e-02 -3.01739890e-02  8.79929438e-02
 -7.15842983e-03  5.18531427e-02 -2.11983640e-02  1.01050191e-01
  4.15196829e-02 -4.84792329e-02 -6.76193982e-02  4.24774140e-02
  9.50288028e-04  7.07622916e-02 -4.57183309e-02  1.60259232e-02
 -1.37952253e-01  1.19420797e-01 -4.47087735e-03  4.20109704e-02
  1.37935942e-02  9.12626386e-02 -7.81821087e-02 -1.34310767e-01
  1.06369697e-01 -2.53085457e-02 -3.08450889e-02 -5.47597408e-02
  3.18198390e-02  3.50336134e-02  2.34583858e-02 -6.10390445e-03
 -6.68973923e-02 -3.43047455e-02 -1.11330993e-01 -1.22036457e-01
 -6.28879964e-02  4.66045700e-02 -1.16379922e-02  6.81105405e-02
  6.04020841e-02  6.82876399e-03  2.90613007e-02 -6.97610993e-03
  6.90870956e-02  5.90789616e-02 -4.98826839e-02  8.26444384e-03
 -5.81290387e-02  3.91338579e-03  8.79477412e-02 -7.47939211e-33
 -1.78923691e-03  2.20169593e-02  4.92664869e-04 -4.54729833e-02
  4.22704294e-02 -3.67802791e-02  1.27817253e-02 -6.88334703e-02
 -4.61001582e-02  3.65521684e-02 -3.08653284e-02 -2.70452760e-02
  4.06081378e-02 -2.59867739e-02  2.18188651e-02  5.36874421e-02
  4.62775715e-02 -7.17120692e-02  1.66992135e-02  2.87751127e-02
 -5.58699034e-02  1.22711860e-01  2.32319571e-02 -1.14013124e-02
  1.39675532e-02 -1.30312126e-02 -2.93337051e-02  1.10814497e-01
  4.62514237e-02  5.37676085e-03  4.87818234e-02 -2.47595459e-02
 -7.18440190e-02  1.57173648e-02  1.81056522e-02 -6.75502717e-02
  1.34988278e-02  5.32838032e-02 -4.53937091e-02  7.00046793e-02
  8.95565301e-02 -6.21541105e-02  2.47633960e-02  2.09375899e-02
  5.59806600e-02 -9.68049467e-02  3.06306407e-02 -8.28457810e-03
  3.61883007e-02 -5.93212433e-02  6.94274530e-02 -6.87092543e-02
 -2.80122478e-02 -2.25786888e-03  4.10765000e-02  5.36377169e-02
  1.46360353e-01 -5.31889312e-02  6.10837601e-02  6.07219972e-02
  8.80632401e-02 -7.79424831e-02 -2.51749018e-03  3.31561379e-02
  5.10236099e-02 -9.86657888e-02 -8.38612299e-03 -1.33862616e-02
  2.16764538e-03 -2.08230428e-02 -7.09534585e-02  5.88959083e-02
  3.60016897e-02 -6.38770759e-02  4.71461415e-02  3.00597344e-02
 -2.97760329e-04  4.90520671e-02  3.85958627e-02 -8.36984143e-02
  1.08821345e-02 -6.67474270e-02  2.84591690e-02 -4.07933742e-02
  1.90502219e-02 -3.37265618e-02 -3.28982808e-02  3.19170877e-02
 -8.73803161e-03 -2.78115049e-02 -6.11916296e-02  7.06791133e-02
 -2.02695187e-02  2.95046847e-02 -8.87182951e-02 -5.46862857e-08
 -3.78515758e-02 -5.37730083e-02  1.14132846e-02  2.00399533e-02
  4.49071191e-02 -3.97086777e-02 -3.06441747e-02 -1.08899977e-02
 -7.06614628e-02 -4.00889516e-02  2.68060770e-02  6.33847415e-02
  3.76781374e-02  6.65876567e-02  5.42629659e-02 -1.32311955e-01
 -3.72644104e-02  2.08510570e-02 -1.16268940e-01  2.82558855e-02
  2.15939656e-02 -7.67294094e-02 -5.62042110e-02  7.21003190e-02
  9.18125659e-02 -8.65566880e-02  5.98196648e-02 -3.31953587e-03
  5.62896468e-02  8.92748684e-02  9.60407406e-03  7.94451833e-02
  6.74934238e-02  3.65881100e-02 -3.40729132e-02  6.55155815e-03
  7.11619109e-02  9.92776304e-02  1.87522359e-02  4.79356758e-02
  2.61233188e-02 -1.06012775e-03 -1.11692578e-01  4.04624920e-03
  1.13576464e-01 -5.83405159e-02 -9.24192369e-03 -6.33662865e-02
  7.30288075e-03  2.47876998e-02 -1.34285510e-01 -1.24083487e-02
  6.20237784e-03 -3.47382389e-02  1.66948494e-02 -3.07733640e-02
  1.87245142e-02 -5.30497469e-02  3.18741798e-02 -8.00125208e-03
 -3.93614359e-02  3.57580297e-02  1.09118288e-02 -4.05451050e-03]"
" buttons

 buttons/Button.java: Common product interface

package refactoring_guru.factory_method.example.buttons;

/**
 * Common interface for all buttons.
 */
public interface Button {
    void render();
    void onClick();
}
 buttons/HtmlButton.java: Concrete product

package refactoring_guru.factory_method.example.buttons;

/**
 * HTML button implementation.
 */
public class HtmlButton implements Button {

    public void render() {
        System.out.println(""<button>Test Button</button>"");
        onClick();
    }

    public void onClick() {
        System.out.println(""Click! Button says - 'Hello World!'"");
    }
}
 buttons/WindowsButton.java: One more concrete product

package refactoring_guru.factory_method.example.buttons;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

/**
 * Windows button implementation.
 */
public class WindowsButton implements Button {
    JPanel panel = new JPanel();
    JFrame frame = new JFrame();
    JButton button;

    public void render() {
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        JLabel label = new JLabel(""Hello World!"");
        label.setOpaque(true);
        label.setBackground(new Color(235, 233, 126));
        label.setFont(new Font(""Dialog"", Font.BOLD, 44));
        label.setHorizontalAlignment(SwingConstants.CENTER);
        panel.setLayout(new FlowLayout(FlowLayout.CENTER));
        frame.getContentPane().add(panel);
        panel.add(label);
        onClick();
        panel.add(button);

        frame.setSize(320, 200);
        frame.setVisible(true);
        onClick();
    }

    public void onClick() {
        button = new JButton(""Exit"");
        button.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                frame.setVisible(false);
                System.exit(0);
            }
        });
    }
}
 factory

 factory/Dialog.java: Base creator

package refactoring_guru.factory_method.example.factory;

import refactoring_guru.factory_method.example.buttons.Button;

/**
 * Base factory class. Note that ""factory"" is merely a role for the class. It
 * should have some core business logic which needs different products to be
 * created.
 */
public abstract class Dialog {

    public void renderWindow() {
        // ... other code ...

        Button okButton = createButton();
        okButton.render();
    }

    /**
     * Subclasses will override this method in order to create specific button
     * objects.
     */
    public abstract Button createButton();
}
 factory/HtmlDialog.java: Concrete creator

package refactoring_guru.factory_method.example.factory;

import refactoring_guru.factory_method.example.buttons.Button;
import refactoring_guru.factory_method.example.buttons.HtmlButton;

/**
 * HTML Dialog will produce HTML buttons.
 */
public class HtmlDialog extends Dialog {

    @Override
    public Button createButton() {
        return new HtmlButton();
    }
}
 factory/WindowsDialog.java: One more concrete creator

package refactoring_guru.factory_method.example.factory;

import refactoring_guru.factory_method.example.buttons.Button;
import refactoring_guru.factory_method.example.buttons.WindowsButton;

/**
 * Windows Dialog will produce Windows buttons.
 */
public class WindowsDialog extends Dialog {

    @Override
    public Button createButton() {
        return new WindowsButton();
    }
}
 Demo.java: Client code

package refactoring_guru.factory_method.example;

import refactoring_guru.factory_method.example.factory.Dialog;
import refactoring_guru.factory_method.example.factory.HtmlDialog;
import refactoring_guru.factory_method.example.factory.WindowsDialog;

/**
 * Demo class. Everything comes together here.
 */
public class Demo {
    private static Dialog dialog;

    public static void main(String[] args) {
        configure();
        runBusinessLogic();
    }

    /**
     * The concrete factory is usually chosen depending on configuration or
     * environment options.
     */
    static void configure() {
        if (System.getProperty(""os.name"").equals(""Windows 10"")) {
            dialog = new WindowsDialog();
        } else {
            dialog = new HtmlDialog();
        }
    }

    /**
     * All of the client code should work with factories and products through
     * abstract interfaces. This way it does not care which factory it works
     * with and what kind of product it returns.
     */
    static void runBusinessLogic() {
        dialog.renderWindow();
    }
}",Java,Factory,Refactoring Guru,https://refactoring.guru/design-patterns/factory-method/java/example#example-0,"[-7.50282109e-02 -3.50522622e-02 -5.44078350e-02 -5.20490929e-02
 -4.19119820e-02  3.64725776e-02  5.70045412e-02  7.18451813e-02
 -1.08778767e-01 -4.08935212e-02  1.25795677e-02 -5.13031892e-02
  1.16976453e-02 -3.50360610e-02  3.59176993e-02 -7.66309118e-03
 -2.91445684e-02 -6.01814650e-02 -2.96654012e-02  7.43741775e-03
  1.03442959e-01 -6.53559938e-02  5.35455830e-02 -5.99949770e-02
 -6.14473708e-02 -1.28713213e-02  5.15265428e-02 -2.16291789e-02
 -2.03177650e-02  2.07711272e-02  7.09912479e-02  4.74807508e-02
 -6.34833798e-03 -2.64715422e-02 -4.67779413e-02  7.03448430e-02
 -3.42035573e-03  9.06531885e-03 -4.26978208e-02 -8.71692970e-02
 -7.84466267e-02  4.12236527e-02 -6.79986179e-02 -4.77340855e-02
  5.75599447e-02 -4.94931638e-02 -7.15045407e-02 -1.72378290e-02
  3.20432745e-02  1.11884754e-02 -6.02988750e-02  1.09217307e-02
  1.87864620e-02 -8.35629553e-02 -4.94494215e-02 -2.45072600e-03
  5.52486293e-02  1.07882079e-02 -1.79749657e-03  2.66699251e-02
  1.48736965e-02 -2.71112956e-02 -5.09272628e-02 -1.14146899e-02
 -9.39599762e-04  4.87247854e-02 -8.48226622e-03  8.11813492e-03
  5.18827420e-03 -7.56614283e-02 -9.73941162e-02  1.06908509e-03
 -5.94580825e-03  2.09954679e-02 -8.95982683e-02 -6.85062110e-02
 -4.70237155e-03  3.44050303e-02 -3.07147279e-02 -3.34170200e-02
  3.21645029e-02  4.60549332e-02 -4.38088691e-03  4.09636123e-04
  8.09759200e-02  6.36968836e-02 -1.68765336e-02 -2.59735319e-03
  8.30694044e-04  6.19883426e-02 -2.95579471e-02 -1.12359356e-02
 -2.03692447e-02  1.11958077e-02  3.61339375e-02  4.76078019e-02
 -3.11785210e-02 -1.73301101e-02 -6.31443709e-02  6.34756237e-02
 -1.31087806e-02 -7.07820058e-02  1.08143128e-02 -4.13890705e-02
  8.03304240e-02 -3.62498127e-03 -8.79925564e-02  2.17570085e-02
  9.84619837e-03 -1.03280488e-02 -6.45239577e-02 -9.79165547e-03
 -3.67179811e-02 -3.64067219e-02  4.10007574e-02 -5.56159690e-02
  7.99980909e-02 -4.49852534e-02 -3.84746604e-02 -1.65677927e-02
  5.52674383e-02  4.71415371e-02 -3.14476937e-02 -4.07211706e-02
  2.49212179e-02  6.68207407e-02  9.84725542e-04  3.58672530e-33
  2.62957420e-02 -5.70878871e-02 -1.63042918e-02  1.37397170e-01
  2.78412234e-02  7.81112388e-02  6.30927756e-02  6.48259223e-02
  1.50926709e-02 -1.89892761e-02  7.51287618e-04 -8.51793662e-02
 -4.96341288e-02 -3.23929638e-02  4.17829007e-02 -5.45701347e-02
 -3.74062955e-02  1.76198460e-04  1.34600671e-02 -8.27091783e-02
 -1.86569057e-02  8.74282494e-02  1.37015991e-02  3.34649608e-02
  3.06428261e-02  7.60827959e-02  4.36864831e-02  6.17422499e-02
 -9.83194709e-02  1.34429149e-02  6.90713599e-02 -2.96321586e-02
 -7.87567645e-02  5.87604605e-02 -4.72334474e-02 -2.03915536e-02
 -5.82064241e-02 -3.24801877e-02 -3.55139608e-03 -5.63359298e-02
 -1.14284806e-01 -7.10887909e-02  1.70046184e-02  3.09248138e-02
  5.89635111e-02 -6.94814175e-02 -8.05235207e-02  1.08945169e-01
 -4.11508046e-03  3.84196229e-02 -9.13046524e-02  9.07790214e-02
  9.83598977e-02 -6.31457791e-02 -4.25811261e-02 -7.09617604e-03
 -4.25192714e-03  6.76158965e-02 -7.00849807e-03  6.42035948e-03
 -6.38666674e-02  2.37325542e-02 -5.65409139e-02  8.80620852e-02
 -7.81995580e-02  4.76495996e-02  8.41867412e-04 -1.03921130e-01
  6.40805624e-03 -4.80934381e-02  4.15475778e-02 -3.39624584e-02
  5.11689037e-02  3.68457660e-02  3.48661132e-02  4.07842211e-02
  4.22895094e-03  1.02547733e-02 -3.64223160e-02 -2.71669887e-02
 -2.08070576e-02  3.01429182e-02 -4.88523915e-02 -4.17709444e-03
  5.45281023e-02 -4.34425175e-02  4.64876145e-02 -1.21874344e-02
  9.51323956e-02  3.54688093e-02 -4.13461737e-02  1.22627830e-02
 -5.60038425e-02  4.01489437e-02  4.28255461e-02 -5.76822094e-33
  5.30878939e-02  4.44799513e-02 -4.40845899e-02 -4.78719845e-02
  3.72866564e-03  7.42910132e-02  1.27481041e-03  4.53180932e-02
 -7.94865564e-02  4.34517413e-02  9.24309902e-03  4.24542427e-02
  4.76097912e-02  2.62649395e-02  1.48352738e-02  6.46513253e-02
  4.25290018e-02  2.53060348e-02  7.04429997e-03  1.31924795e-02
  1.13562718e-02  1.00473054e-01 -7.51625374e-03 -3.07026077e-02
 -7.12872595e-02 -5.14612384e-02 -2.86744721e-02  1.03667177e-01
  5.48271947e-02  2.37056683e-03  9.66588780e-02  5.64759132e-03
 -2.01062858e-02  4.04799432e-02  8.25500712e-02 -6.82780147e-02
  3.69062051e-02 -6.33560792e-02 -1.53803946e-02  2.81107519e-02
  2.73949243e-02 -8.15486982e-02  2.29938701e-02  2.70110946e-02
 -3.39779002e-03 -4.26272862e-02 -2.82081030e-02 -7.67998993e-02
 -4.10340820e-03 -2.80545577e-02 -5.62162884e-03 -5.96922785e-02
 -5.22080017e-03 -1.02049131e-02 -2.57051047e-02  5.71084488e-03
  8.82027075e-02 -2.24194005e-02 -5.76193910e-03  6.55150265e-02
  5.96982166e-02 -6.60664067e-02  5.85503466e-02 -9.12803225e-03
  4.05276306e-02 -1.75616108e-02  3.53806093e-02  5.87929860e-02
  2.43982337e-02 -4.20520315e-03 -2.79463604e-02  4.42332923e-02
  2.30959319e-02 -5.21908961e-02  9.77380574e-02  5.92975058e-02
  2.05691289e-02 -3.11148502e-02 -3.86667848e-02 -6.88373670e-02
  1.08263776e-01 -2.40258239e-02  7.58861378e-02 -5.53041361e-02
 -3.21529172e-02 -1.01429269e-01 -2.48101372e-02  2.88212728e-02
 -4.51731123e-02 -4.73515093e-02 -9.81540382e-02  6.08408004e-02
  2.58204881e-02  9.65487063e-02  2.61760838e-02 -5.84177400e-08
 -9.30693671e-02 -5.09651527e-02  1.09484643e-01 -3.77370976e-02
 -3.30391824e-02 -5.29301688e-02 -3.36542763e-02 -1.87274348e-02
 -5.68465367e-02 -4.92085256e-02 -4.81070206e-03  6.97857141e-02
  1.29381660e-02  9.01515335e-02 -4.65402007e-03 -7.25237653e-02
 -9.22040716e-02  2.61520781e-02 -2.83524133e-02  7.51575828e-02
  1.00190975e-01 -5.19949459e-02  4.72216569e-02  9.99994278e-02
  1.83410030e-02 -6.08054809e-02 -5.48510579e-03  3.44696082e-02
  3.48855346e-03  7.10052550e-02 -4.75700619e-03  3.86094116e-02
  1.09241309e-03  7.81110674e-02 -9.79082733e-02 -1.56821217e-02
  2.59374897e-03  2.64344225e-03  9.06660873e-03  2.54978761e-02
  3.74757731e-03 -6.52257502e-02 -1.04908884e-01  1.33297667e-02
  9.58813503e-02  2.38617984e-04 -6.57768846e-02 -8.62280428e-02
 -2.74218358e-02  5.17784208e-02 -1.04784347e-01  5.78547344e-02
  6.22222349e-02 -5.23600318e-02 -8.80253222e-03 -2.91274656e-02
  1.19669493e-02 -1.55775305e-02  8.62881988e-02  4.74728234e-02
 -3.30276191e-02  3.99248935e-02  5.69193549e-02  9.96700401e-05]"
"shapes: Shape list

 shapes/Shape.java: Common shape interface

package refactoring_guru.prototype.example.shapes;

import java.util.Objects;

public abstract class Shape {
    public int x;
    public int y;
    public String color;

    public Shape() {
    }

    public Shape(Shape target) {
        if (target != null) {
            this.x = target.x;
            this.y = target.y;
            this.color = target.color;
        }
    }

    public abstract Shape clone();

    @Override
    public boolean equals(Object object2) {
        if (!(object2 instanceof Shape)) return false;
        Shape shape2 = (Shape) object2;
        return shape2.x == x && shape2.y == y && Objects.equals(shape2.color, color);
    }
}
 shapes/Circle.java: Simple shape

package refactoring_guru.prototype.example.shapes;

public class Circle extends Shape {
    public int radius;

    public Circle() {
    }

    public Circle(Circle target) {
        super(target);
        if (target != null) {
            this.radius = target.radius;
        }
    }

    @Override
    public Shape clone() {
        return new Circle(this);
    }

    @Override
    public boolean equals(Object object2) {
        if (!(object2 instanceof Circle) || !super.equals(object2)) return false;
        Circle shape2 = (Circle) object2;
        return shape2.radius == radius;
    }
}
 shapes/Rectangle.java: Another shape

package refactoring_guru.prototype.example.shapes;

public class Rectangle extends Shape {
    public int width;
    public int height;

    public Rectangle() {
    }

    public Rectangle(Rectangle target) {
        super(target);
        if (target != null) {
            this.width = target.width;
            this.height = target.height;
        }
    }

    @Override
    public Shape clone() {
        return new Rectangle(this);
    }

    @Override
    public boolean equals(Object object2) {
        if (!(object2 instanceof Rectangle) || !super.equals(object2)) return false;
        Rectangle shape2 = (Rectangle) object2;
        return shape2.width == width && shape2.height == height;
    }
}
 Demo.java: Cloning example

package refactoring_guru.prototype.example;

import refactoring_guru.prototype.example.shapes.Circle;
import refactoring_guru.prototype.example.shapes.Rectangle;
import refactoring_guru.prototype.example.shapes.Shape;

import java.util.ArrayList;
import java.util.List;

public class Demo {
    public static void main(String[] args) {
        List<Shape> shapes = new ArrayList<>();
        List<Shape> shapesCopy = new ArrayList<>();

        Circle circle = new Circle();
        circle.x = 10;
        circle.y = 20;
        circle.radius = 15;
        circle.color = ""red"";
        shapes.add(circle);

        Circle anotherCircle = (Circle) circle.clone();
        shapes.add(anotherCircle);

        Rectangle rectangle = new Rectangle();
        rectangle.width = 10;
        rectangle.height = 20;
        rectangle.color = ""blue"";
        shapes.add(rectangle);

        cloneAndCompare(shapes, shapesCopy);
    }

    private static void cloneAndCompare(List<Shape> shapes, List<Shape> shapesCopy) {
        for (Shape shape : shapes) {
            shapesCopy.add(shape.clone());
        }

        for (int i = 0; i < shapes.size(); i++) {
            if (shapes.get(i) != shapesCopy.get(i)) {
                System.out.println(i + "": Shapes are different objects (yay!)"");
                if (shapes.get(i).equals(shapesCopy.get(i))) {
                    System.out.println(i + "": And they are identical (yay!)"");
                } else {
                    System.out.println(i + "": But they are not identical (booo!)"");
                }
            } else {
                System.out.println(i + "": Shape objects are the same (booo!)"");
            }
        }
    }
}
 OutputDemo.txt: Execution result

0: Shapes are different objects (yay!)
0: And they are identical (yay!)
1: Shapes are different objects (yay!)
1: And they are identical (yay!)
2: Shapes are different objects (yay!)
2: And they are identical (yay!)
Prototype registry

You could implement a centralized prototype registry (or factory), which would contain a set of pre-defined prototype objects. This way you could retrieve new objects from the factory by passing its name or other parameters. The factory would search for an appropriate prototype, clone it and return you a copy.

 cache

 cache/BundledShapeCache.java: Prototype factory

package refactoring_guru.prototype.caching.cache;

import refactoring_guru.prototype.example.shapes.Circle;
import refactoring_guru.prototype.example.shapes.Rectangle;
import refactoring_guru.prototype.example.shapes.Shape;

import java.util.HashMap;
import java.util.Map;

public class BundledShapeCache {
    private Map<String, Shape> cache = new HashMap<>();

    public BundledShapeCache() {
        Circle circle = new Circle();
        circle.x = 5;
        circle.y = 7;
        circle.radius = 45;
        circle.color = ""Green"";

        Rectangle rectangle = new Rectangle();
        rectangle.x = 6;
        rectangle.y = 9;
        rectangle.width = 8;
        rectangle.height = 10;
        rectangle.color = ""Blue"";

        cache.put(""Big green circle"", circle);
        cache.put(""Medium blue rectangle"", rectangle);
    }

    public Shape put(String key, Shape shape) {
        cache.put(key, shape);
        return shape;
    }

    public Shape get(String key) {
        return cache.get(key).clone();
    }
}
 Demo.java: Cloning example

package refactoring_guru.prototype.caching;

import refactoring_guru.prototype.caching.cache.BundledShapeCache;
import refactoring_guru.prototype.example.shapes.Shape;

public class Demo {
    public static void main(String[] args) {
        BundledShapeCache cache = new BundledShapeCache();

        Shape shape1 = cache.get(""Big green circle"");
        Shape shape2 = cache.get(""Medium blue rectangle"");
        Shape shape3 = cache.get(""Medium blue rectangle"");

        if (shape1 != shape2 && !shape1.equals(shape2)) {
            System.out.println(""Big green circle != Medium blue rectangle (yay!)"");
        } else {
            System.out.println(""Big green circle == Medium blue rectangle (booo!)"");
        }

        if (shape2 != shape3) {
            System.out.println(""Medium blue rectangles are two different objects (yay!)"");
            if (shape2.equals(shape3)) {
                System.out.println(""And they are identical (yay!)"");
            } else {
                System.out.println(""But they are not identical (booo!)"");
            }
        } else {
            System.out.println(""Rectangle objects are the same (booo!)"");
        }
    }
}",Java,Prototype,Refactoring Guru,https://refactoring.guru/design-patterns/prototype/java/example#example-0,"[ 1.66081320e-02  5.75097743e-03  2.09900062e-03 -5.06420247e-02
 -7.24086985e-02 -5.56292534e-02  4.67649847e-02 -3.04081454e-03
 -5.54189794e-02 -3.25211585e-02  2.11127140e-02 -4.70653772e-02
  1.11922622e-01 -3.66177410e-02  2.96616089e-02 -2.14135670e-03
 -3.28818290e-03  8.00129771e-02 -7.57288411e-02 -7.19787255e-02
  5.30692972e-02 -8.94204751e-02  5.57003310e-03  4.32487242e-02
  3.02885636e-03  5.01253158e-02  6.01281449e-02 -2.69442797e-02
 -5.07804491e-02 -9.80787575e-02 -1.83743369e-02  1.80597920e-02
 -9.61962417e-02  5.47353253e-02 -1.42203700e-02  7.72372335e-02
 -5.19544445e-02  2.29694694e-02  4.02649082e-02 -1.07100919e-01
 -9.36748683e-02  4.87584919e-02 -2.46288776e-02 -3.10237352e-02
  3.61885428e-02  7.08506405e-02 -1.11430034e-01  4.20098044e-02
  1.53205181e-02 -5.20810448e-02 -2.01790407e-02 -6.94437250e-02
 -6.22378178e-02 -2.76106764e-02  9.24093351e-02  3.66427228e-02
  3.53830643e-02  8.47819785e-04  7.04100297e-04 -7.00329840e-02
 -2.75711790e-02 -1.84610542e-02  3.19039673e-02 -1.82312466e-02
 -1.73792411e-02 -3.42863500e-02  3.73248346e-02  2.21438389e-02
  2.74793413e-02 -7.96053465e-03  5.64605976e-03  1.23177446e-01
  9.96118262e-02  4.33864146e-02 -1.06212050e-02  4.47855107e-02
  5.97448926e-03  4.25600372e-02 -4.70944569e-02 -4.14960086e-02
 -1.16982020e-01  2.16464978e-03  2.67725475e-02  1.25230243e-02
  3.78311165e-02  3.26576941e-02  4.22586640e-03 -2.82161925e-02
 -3.84024456e-02  4.88727242e-02 -2.94516962e-02  6.41674921e-02
  3.66780125e-02 -1.20141997e-03  2.16363110e-02 -1.80968139e-02
  1.00556351e-02  1.06180916e-02 -2.35201977e-02  6.78222477e-02
  1.31257949e-02 -2.31856760e-03  1.08869113e-01 -4.16574329e-02
  6.63894787e-02 -1.52345132e-02 -3.88790630e-02 -8.85236710e-02
  3.50714736e-02 -5.02497777e-02  1.37798907e-02 -3.21907215e-02
  1.07636247e-02  4.41168286e-02 -3.44959758e-02  2.10947506e-02
  2.09938940e-02  2.92250514e-02 -4.83128987e-02 -2.67226771e-02
  1.03791550e-01  2.81195082e-02  3.17421742e-02 -2.40684357e-02
 -3.15081589e-02 -2.21653213e-03 -7.47812763e-02  5.75243148e-33
 -1.11637525e-02 -4.88770679e-02  2.56771538e-02  6.59483597e-02
 -1.91230699e-02 -3.75331454e-02  2.23466055e-03  7.12481588e-02
  5.00855371e-02 -3.28764468e-02 -7.75003135e-02 -1.93042159e-02
 -2.69347671e-02  3.08787264e-03  6.13576658e-02 -7.28584081e-02
  1.29407672e-02  4.98978086e-02 -1.12895973e-01 -2.23086216e-02
 -2.44182982e-02 -7.33899837e-03 -6.33557141e-02 -7.92362902e-04
 -2.49009319e-02  3.41562293e-02  1.61080416e-02  2.66050510e-02
 -5.41998073e-02 -1.17590447e-04  7.45309591e-02 -2.93290392e-02
  1.94846920e-03  1.20605871e-01  7.21097551e-03 -7.11424723e-02
  3.93934138e-02  6.67175977e-03 -1.70210749e-02 -1.26083061e-01
  4.58571203e-02 -5.84516749e-02  2.39108372e-02 -2.76471227e-02
  6.83817491e-02 -8.83893892e-02 -4.96420115e-02  6.89379349e-02
 -1.82212982e-02  3.15204486e-02  4.29797433e-02  1.00440793e-01
  2.86551677e-02 -3.10400091e-02 -2.01380514e-02 -1.98249370e-02
 -2.22716117e-04  2.15878431e-02 -2.52145678e-02  7.76473731e-02
 -4.45381254e-02  8.01190212e-02 -5.57153821e-02  5.45621999e-02
 -3.47719230e-02  6.68165013e-02 -1.25972088e-02 -7.65139610e-02
  4.77805845e-02  1.13553945e-02  9.52329487e-03 -3.39608304e-02
  1.86717398e-02 -1.66442394e-02 -5.12267277e-02 -9.52097550e-02
 -7.53763504e-03 -6.46388158e-03 -6.23027347e-02 -9.19547155e-02
 -9.85990688e-02  5.09945229e-02 -6.81620762e-02 -4.65397164e-02
 -6.77740276e-02  1.01434402e-02  8.93459842e-02 -6.12483500e-03
  5.19143231e-02  5.25795631e-02 -2.57804431e-02  2.33454742e-02
  2.34073140e-02 -3.45281325e-02  3.10090706e-02 -5.47421401e-33
  1.36892358e-02  2.57840976e-02  5.94815277e-02  6.71850704e-03
  3.75570171e-02 -1.92714692e-03  6.96372753e-03 -6.06935062e-02
 -6.20179586e-02 -5.80901615e-02 -1.21729210e-01 -2.72821728e-02
  2.14391537e-02 -1.45898554e-02  4.01080810e-02  8.09423625e-02
 -1.12008285e-02 -8.13025795e-03 -2.51135277e-03 -5.67008695e-03
 -1.51268989e-02  8.85239765e-02  2.78663971e-02 -9.55103245e-03
 -8.97779241e-02  3.11155468e-02 -5.29755466e-02  5.32499850e-02
  4.58322801e-02  3.42052989e-02  4.86797020e-02 -4.18877676e-02
 -3.56147811e-02  2.57040206e-02  3.14866193e-02 -1.40435562e-01
  6.38562590e-02 -6.90639159e-03 -1.81743046e-04  6.52520955e-02
 -1.20673059e-02 -8.92988816e-02 -5.44976145e-02  2.83593033e-02
  1.09038949e-02 -5.33557013e-02 -5.67964278e-04  7.26795718e-02
 -7.16258818e-03 -7.24080279e-02  1.30952932e-02 -5.17749637e-02
 -2.23005600e-02 -6.27517253e-02  1.56555250e-02  8.88764784e-02
  9.51533380e-04  2.97611076e-02  6.24270849e-02  7.27432296e-02
 -1.21155297e-02 -1.45712510e-01  3.68663184e-02  9.54403728e-02
  7.39731044e-02  2.27378192e-03  2.06456482e-02 -1.28477858e-02
 -2.54447069e-02  6.28322661e-02 -6.65586535e-03  1.01562835e-01
 -3.39009091e-02 -9.05809030e-02  5.25719859e-02 -1.81882698e-02
  1.17976749e-02  2.11555455e-02 -1.13355648e-02  2.50615627e-02
  1.15293553e-02  1.02719227e-02 -1.22551704e-02  4.54165079e-02
 -2.72788424e-02 -2.80040260e-02  1.04102651e-02  2.71325056e-02
 -4.78569083e-02  1.18029034e-02 -3.10637802e-02  7.49369338e-02
  1.52737694e-02  5.99852055e-02  5.02612144e-02 -5.10183540e-08
 -1.58366095e-02 -5.01402803e-02  1.84322931e-02  5.45545779e-02
  2.41238959e-02 -3.90594117e-02 -6.23879544e-02  6.86069205e-03
 -7.68525600e-02 -4.57884930e-02 -3.76350209e-02  9.36403945e-02
  9.88860894e-03  5.12552671e-02  7.02009797e-02 -1.06480122e-01
 -3.04145813e-02 -3.18813846e-02 -6.89258724e-02  5.11858910e-02
  2.60596704e-02 -4.64519933e-02 -3.73497792e-02  9.96067896e-02
 -7.30124209e-03 -3.19623388e-02  2.62491349e-02 -4.94829845e-03
  5.70335872e-02  7.73464367e-02  5.63892303e-03  5.36843836e-02
  3.51203121e-02 -1.80398766e-02  5.38562723e-02 -6.56205937e-02
 -1.41287576e-02  9.29353163e-02 -2.69020069e-02  1.18567370e-01
  4.88282777e-02  4.81829187e-03 -3.82305719e-02  1.72622222e-02
  9.72224995e-02 -7.03950301e-02  1.80880055e-02 -7.28250518e-02
  1.30128600e-02  6.43914342e-02 -9.24175680e-02  4.34532017e-02
  3.56980376e-02 -6.90001920e-02 -7.91438445e-02 -2.50215586e-02
  3.29061337e-02  3.41870897e-02  7.74170607e-02  9.65526253e-02
  1.79952662e-02  1.53929379e-03  4.56482098e-02 -1.90350097e-02]"
"round

 round/RoundHole.java: Round holes

package refactoring_guru.adapter.example.round;

/**
 * RoundHoles are compatible with RoundPegs.
 */
public class RoundHole {
    private double radius;

    public RoundHole(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public boolean fits(RoundPeg peg) {
        boolean result;
        result = (this.getRadius() >= peg.getRadius());
        return result;
    }
}
 round/RoundPeg.java: Round pegs

package refactoring_guru.adapter.example.round;

/**
 * RoundPegs are compatible with RoundHoles.
 */
public class RoundPeg {
    private double radius;

    public RoundPeg() {}

    public RoundPeg(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }
}
 square

 square/SquarePeg.java: Square pegs

package refactoring_guru.adapter.example.square;

/**
 * SquarePegs are not compatible with RoundHoles (they were implemented by
 * previous development team). But we have to integrate them into our program.
 */
public class SquarePeg {
    private double width;

    public SquarePeg(double width) {
        this.width = width;
    }

    public double getWidth() {
        return width;
    }

    public double getSquare() {
        double result;
        result = Math.pow(this.width, 2);
        return result;
    }
}
 adapters

 adapters/SquarePegAdapter.java: Adapter of square pegs to round holes

package refactoring_guru.adapter.example.adapters;

import refactoring_guru.adapter.example.round.RoundPeg;
import refactoring_guru.adapter.example.square.SquarePeg;

/**
 * Adapter allows fitting square pegs into round holes.
 */
public class SquarePegAdapter extends RoundPeg {
    private SquarePeg peg;

    public SquarePegAdapter(SquarePeg peg) {
        this.peg = peg;
    }

    @Override
    public double getRadius() {
        double result;
        // Calculate a minimum circle radius, which can fit this peg.
        result = (Math.sqrt(Math.pow((peg.getWidth() / 2), 2) * 2));
        return result;
    }
}
 Demo.java: Client code

package refactoring_guru.adapter.example;

import refactoring_guru.adapter.example.adapters.SquarePegAdapter;
import refactoring_guru.adapter.example.round.RoundHole;
import refactoring_guru.adapter.example.round.RoundPeg;
import refactoring_guru.adapter.example.square.SquarePeg;

/**
 * Somewhere in client code...
 */
public class Demo {
    public static void main(String[] args) {
        // Round fits round, no surprise.
        RoundHole hole = new RoundHole(5);
        RoundPeg rpeg = new RoundPeg(5);
        if (hole.fits(rpeg)) {
            System.out.println(""Round peg r5 fits round hole r5."");
        }

        SquarePeg smallSqPeg = new SquarePeg(2);
        SquarePeg largeSqPeg = new SquarePeg(20);
        // hole.fits(smallSqPeg); // Won't compile.

        // Adapter solves the problem.
        SquarePegAdapter smallSqPegAdapter = new SquarePegAdapter(smallSqPeg);
        SquarePegAdapter largeSqPegAdapter = new SquarePegAdapter(largeSqPeg);
        if (hole.fits(smallSqPegAdapter)) {
            System.out.println(""Square peg w2 fits round hole r5."");
        }
        if (!hole.fits(largeSqPegAdapter)) {
            System.out.println(""Square peg w20 does not fit into round hole r5."");
        }
    }
}",Java,Adapter,Refactoring Guru,https://refactoring.guru/design-patterns/adapter/java/example#example-0,"[-3.91015131e-03  5.31600900e-02 -7.09143505e-02 -2.03996338e-02
 -9.66408700e-02 -5.10063730e-02 -2.03815643e-02  8.51456746e-02
 -4.92938124e-02 -3.42576532e-03  2.93595642e-02 -4.28099930e-02
  6.34794384e-02 -9.20640584e-03  2.60734539e-02 -6.23716451e-02
 -7.27642700e-02  1.00155823e-01 -6.74103992e-03 -3.32559422e-02
  3.40753235e-02 -9.81509537e-02  2.85471440e-03  1.78110916e-02
  1.29340449e-02  2.40361784e-02  3.98017280e-02  2.48700026e-02
 -1.60615109e-02 -3.96502689e-02  9.33392067e-03  5.93014285e-02
 -4.88011502e-02  4.01992165e-02 -5.08219823e-02 -9.88647342e-03
 -7.59956762e-02  7.50001669e-02  1.84857585e-02 -6.85287341e-02
 -6.54977560e-02  3.69019471e-02  8.06696042e-02 -3.37725133e-02
 -6.22609677e-03 -3.86857912e-02 -1.24742076e-01  4.58274148e-02
  8.87180213e-04 -3.88788544e-02 -2.20725853e-02 -3.70222963e-02
  1.87765099e-02 -4.11303677e-02  6.42023906e-02 -3.24237794e-02
  4.92878705e-02  2.08201408e-02  4.20652144e-02 -1.20522184e-02
  2.35388912e-02 -2.83535756e-02 -3.15502682e-03 -1.62488781e-02
 -9.87088680e-02 -3.26825231e-02  2.18589175e-02 -5.05705066e-02
 -2.08255202e-02  2.02547219e-02 -5.14039956e-02  6.50837943e-02
 -1.08107203e-03  9.41314921e-03  2.82352977e-02 -7.71558424e-03
 -2.83153374e-02  4.15804517e-03  2.68867761e-02  6.71637729e-02
 -6.50328398e-02  2.74016280e-02  7.77057372e-03 -1.55838281e-02
  4.81067933e-02  1.19886044e-02  2.87947115e-02 -1.08417664e-02
  4.37555723e-02 -1.99416131e-02  1.78985577e-02  4.56348509e-02
 -9.58399698e-02 -1.25648966e-02  1.52870491e-02 -9.09410790e-03
  5.43272879e-04 -3.58647257e-02 -5.92153259e-02  7.22252056e-02
  2.73653176e-02 -1.52533501e-02  2.37381384e-02 -6.60482273e-02
  5.99623621e-02  4.64137122e-02  3.35789635e-03 -1.42160652e-03
  5.66058196e-02 -2.29973644e-02 -2.86830664e-02 -2.50054486e-02
  8.54891315e-02  1.55358277e-02 -1.49883116e-02  5.78642301e-02
  3.87853943e-02 -4.49062027e-02 -1.94691457e-02 -4.69782688e-02
  4.16086651e-02  6.08620867e-02  1.34239793e-02 -2.50032190e-02
  5.30588813e-02  8.06283504e-02 -7.66746104e-02  6.91888995e-33
 -5.66494577e-02  1.35959229e-02  3.69340517e-02  4.82716365e-04
 -4.34736349e-02 -2.66818143e-02 -2.78802332e-03  2.72335000e-02
  1.22967370e-01  1.96850821e-02 -1.01859784e-02 -9.20088366e-02
 -5.97389368e-03 -2.33762953e-02  1.09884381e-01 -2.43581850e-02
  5.50933480e-02  8.46394375e-02 -6.82902262e-02  3.91573831e-03
 -2.72131078e-02 -6.29699677e-02 -2.15964802e-02  2.16481462e-02
  5.24096526e-02  8.63607153e-02  6.04002140e-02  2.10739542e-02
 -1.81064922e-02  2.50752177e-02  6.32758811e-02 -6.09817132e-02
 -3.17384489e-02  8.08868408e-02  2.06721481e-02 -4.50662412e-02
  1.84117071e-02 -4.83801775e-03 -1.98327322e-02 -7.67988563e-02
 -1.43257743e-02 -5.75542375e-02  1.44017031e-02  2.46844105e-02
  7.34248906e-02 -4.07073237e-02  2.04756241e-02  5.91506921e-02
 -1.29537927e-02  1.76396482e-02 -3.40018049e-02  1.16906613e-01
 -8.89741909e-03 -2.75883432e-02  6.84422925e-02  3.57108340e-02
  6.38891431e-03  1.22843189e-02 -5.29692927e-03  8.98999646e-02
 -1.04684733e-01  3.41073014e-02 -5.35281152e-02 -3.86438854e-02
 -3.43650281e-02  2.25524101e-02 -5.46300374e-02 -1.64366066e-01
  3.38174682e-03 -1.73266996e-02  1.07373865e-02 -4.27341163e-02
  5.61134666e-02  6.61114678e-02 -4.72253636e-02 -6.39013499e-02
  5.59491962e-02 -5.70878573e-03  3.42432894e-02 -1.79440796e-01
 -5.62937669e-02  9.23803970e-02  8.54650221e-04 -8.30336213e-02
 -3.01541332e-02 -9.14246812e-02  8.55804831e-02 -1.56495906e-02
 -9.65893548e-03 -8.36897120e-02 -3.12528536e-02  7.87991751e-03
 -7.22572161e-03  2.73046512e-02 -2.01388430e-02 -5.75826230e-33
 -6.08627573e-02  7.22845346e-02 -1.05005261e-02  3.13815102e-02
  3.84351425e-02  6.58703560e-04 -2.29774788e-03 -8.33906606e-02
  2.42249500e-02 -5.76541796e-02 -7.44476169e-02 -3.26820128e-02
 -1.02635082e-02  1.47377970e-02  1.28965765e-01  4.10072803e-02
  1.69680137e-02  2.22278610e-02 -2.01464556e-02  5.88528030e-02
  5.72684333e-02  3.26130651e-02  6.51240274e-02 -1.20180072e-02
  1.71672385e-02  2.22916007e-02  3.02410359e-03 -3.67994197e-02
  7.37214182e-03  1.09485388e-01 -2.31026374e-02 -2.86211744e-02
 -5.73994741e-02 -7.51933549e-03  4.91558388e-02 -1.90079615e-01
  1.29087567e-02 -3.44518274e-02  8.67973361e-03  2.47938335e-02
  5.35052419e-02 -5.59743866e-02 -5.58954366e-02  4.61239479e-02
  2.89346408e-02 -4.99953888e-02  8.01081806e-02  4.02373448e-02
 -7.91926309e-03 -7.22050369e-02 -4.19377387e-02 -6.77101240e-02
  4.33995984e-02  4.69856299e-02  1.38712702e-02  5.89607358e-02
  1.58956368e-02  2.37715729e-02  6.73125461e-02 -2.43139942e-03
 -4.79833595e-02 -1.12554505e-01  5.22527359e-02  4.39754017e-02
  7.50880688e-02  4.11042273e-02  2.44567953e-02  3.94934118e-02
 -1.03522047e-01  5.52300364e-02 -4.64878529e-02  9.60214585e-02
  3.82409394e-02 -2.94766966e-02  5.43527007e-02  4.66824509e-02
 -1.38595551e-02  2.74793319e-02  2.60300785e-02  3.12919654e-02
  7.88430125e-03  3.79233062e-02  2.15658918e-02 -3.24105397e-02
  2.79892813e-02 -5.02274930e-02 -1.79166568e-03  5.90693690e-02
 -7.24861100e-02  1.45825073e-02 -8.10606629e-02  7.13391304e-02
  4.21618968e-02  1.07418494e-02  3.71922106e-02 -4.96796027e-08
 -6.27352595e-02 -4.22860645e-02 -1.46781895e-02  1.38390984e-03
  6.91539720e-02 -5.95491240e-03 -6.75604343e-02 -6.63265912e-03
 -6.77200928e-02 -1.58341452e-02 -2.24584397e-02  1.22210681e-01
  2.58290544e-02  7.86035508e-02  3.51528041e-02 -5.41558340e-02
  7.15316134e-03 -8.80388450e-03 -9.50411856e-02  3.63708287e-02
 -3.22142765e-02 -1.99079271e-02 -5.86337149e-02  2.58166203e-03
 -4.37112562e-02 -5.29412962e-02 -1.13224331e-02  7.58823827e-02
  7.40472786e-03  3.10164057e-02 -1.49452332e-02  7.21270069e-02
 -1.50378319e-02  2.58655404e-03 -3.22211459e-02 -6.23700134e-02
  2.17539705e-02  1.19537450e-01  3.77088822e-02  1.44377291e-01
 -7.94006661e-02 -2.02972014e-02 -7.33443024e-03 -4.83027399e-02
  5.20662032e-02  5.97940013e-03  3.82544063e-02 -3.26766297e-02
 -6.03721291e-02 -2.94639207e-02 -1.04029179e-01  4.70798230e-03
 -7.56442035e-03 -8.06513131e-02  1.39821339e-02 -4.98157106e-02
 -1.33512402e-03 -1.66872200e-02 -9.41308308e-03  6.50425330e-02
 -6.57632351e-02  2.54641306e-02  5.40935174e-02  2.33213678e-02]"
"devices

 devices/Device.java: Common interface of all devices

package refactoring_guru.bridge.example.devices;

public interface Device {
    boolean isEnabled();

    void enable();

    void disable();

    int getVolume();

    void setVolume(int percent);

    int getChannel();

    void setChannel(int channel);

    void printStatus();
}
 devices/Radio.java: Radio

package refactoring_guru.bridge.example.devices;

public class Radio implements Device {
    private boolean on = false;
    private int volume = 30;
    private int channel = 1;

    @Override
    public boolean isEnabled() {
        return on;
    }

    @Override
    public void enable() {
        on = true;
    }

    @Override
    public void disable() {
        on = false;
    }

    @Override
    public int getVolume() {
        return volume;
    }

    @Override
    public void setVolume(int volume) {
        if (volume > 100) {
            this.volume = 100;
        } else if (volume < 0) {
            this.volume = 0;
        } else {
            this.volume = volume;
        }
    }

    @Override
    public int getChannel() {
        return channel;
    }

    @Override
    public void setChannel(int channel) {
        this.channel = channel;
    }

    @Override
    public void printStatus() {
        System.out.println(""------------------------------------"");
        System.out.println(""| I'm radio."");
        System.out.println(""| I'm "" + (on ? ""enabled"" : ""disabled""));
        System.out.println(""| Current volume is "" + volume + ""%"");
        System.out.println(""| Current channel is "" + channel);
        System.out.println(""------------------------------------\n"");
    }
}
 devices/Tv.java: TV

package refactoring_guru.bridge.example.devices;

public class Tv implements Device {
    private boolean on = false;
    private int volume = 30;
    private int channel = 1;

    @Override
    public boolean isEnabled() {
        return on;
    }

    @Override
    public void enable() {
        on = true;
    }

    @Override
    public void disable() {
        on = false;
    }

    @Override
    public int getVolume() {
        return volume;
    }

    @Override
    public void setVolume(int volume) {
        if (volume > 100) {
            this.volume = 100;
        } else if (volume < 0) {
            this.volume = 0;
        } else {
            this.volume = volume;
        }
    }

    @Override
    public int getChannel() {
        return channel;
    }

    @Override
    public void setChannel(int channel) {
        this.channel = channel;
    }

    @Override
    public void printStatus() {
        System.out.println(""------------------------------------"");
        System.out.println(""| I'm TV set."");
        System.out.println(""| I'm "" + (on ? ""enabled"" : ""disabled""));
        System.out.println(""| Current volume is "" + volume + ""%"");
        System.out.println(""| Current channel is "" + channel);
        System.out.println(""------------------------------------\n"");
    }
}
 remotes

 remotes/Remote.java: Common interface for all remotes

package refactoring_guru.bridge.example.remotes;

public interface Remote {
    void power();

    void volumeDown();

    void volumeUp();

    void channelDown();

    void channelUp();
}
 remotes/BasicRemote.java: Basic remote control

package refactoring_guru.bridge.example.remotes;

import refactoring_guru.bridge.example.devices.Device;

public class BasicRemote implements Remote {
    protected Device device;

    public BasicRemote() {}

    public BasicRemote(Device device) {
        this.device = device;
    }

    @Override
    public void power() {
        System.out.println(""Remote: power toggle"");
        if (device.isEnabled()) {
            device.disable();
        } else {
            device.enable();
        }
    }

    @Override
    public void volumeDown() {
        System.out.println(""Remote: volume down"");
        device.setVolume(device.getVolume() - 10);
    }

    @Override
    public void volumeUp() {
        System.out.println(""Remote: volume up"");
        device.setVolume(device.getVolume() + 10);
    }

    @Override
    public void channelDown() {
        System.out.println(""Remote: channel down"");
        device.setChannel(device.getChannel() - 1);
    }

    @Override
    public void channelUp() {
        System.out.println(""Remote: channel up"");
        device.setChannel(device.getChannel() + 1);
    }
}
 remotes/AdvancedRemote.java: Advanced remote control

package refactoring_guru.bridge.example.remotes;

import refactoring_guru.bridge.example.devices.Device;

public class AdvancedRemote extends BasicRemote {

    public AdvancedRemote(Device device) {
        super.device = device;
    }

    public void mute() {
        System.out.println(""Remote: mute"");
        device.setVolume(0);
    }
}
 Demo.java: Client code

package refactoring_guru.bridge.example;

import refactoring_guru.bridge.example.devices.Device;
import refactoring_guru.bridge.example.devices.Radio;
import refactoring_guru.bridge.example.devices.Tv;
import refactoring_guru.bridge.example.remotes.AdvancedRemote;
import refactoring_guru.bridge.example.remotes.BasicRemote;

public class Demo {
    public static void main(String[] args) {
        testDevice(new Tv());
        testDevice(new Radio());
    }

    public static void testDevice(Device device) {
        System.out.println(""Tests with basic remote."");
        BasicRemote basicRemote = new BasicRemote(device);
        basicRemote.power();
        device.printStatus();

        System.out.println(""Tests with advanced remote."");
        AdvancedRemote advancedRemote = new AdvancedRemote(device);
        advancedRemote.power();
        advancedRemote.mute();
        device.printStatus();
    }
}",Java,Bridge,Refactoring Guru,https://refactoring.guru/design-patterns/bridge/java/example#example-0,"[ 2.07447037e-02  1.93118397e-02 -5.07427789e-02 -6.45811558e-02
 -9.43225846e-02 -1.43442098e-02 -8.61220248e-03  7.73634389e-02
 -3.98123190e-02  3.60149965e-02  5.15827872e-02 -2.36048810e-02
  8.22397098e-02 -2.30469182e-02 -4.29884568e-02 -6.14595525e-02
  2.24409085e-02  2.61537824e-02 -4.66548875e-02 -1.11880545e-02
  8.50265473e-02  3.80649902e-02 -7.87024153e-04 -5.43021783e-02
  5.56966178e-02 -6.98662028e-02  6.78643808e-02 -3.12535688e-02
 -1.59629360e-02 -2.33940799e-02 -1.06060300e-02  5.63611649e-02
 -2.16160212e-02  4.72706882e-03 -6.56099990e-02 -4.35513956e-03
  1.26548540e-02 -1.61728309e-03 -4.36923429e-02 -4.42748927e-02
 -1.07317798e-01 -6.10145032e-02 -2.14412678e-02 -7.90035799e-02
 -7.09403604e-02 -2.56585050e-02 -9.85347778e-02 -5.35642691e-02
  3.21549661e-02 -4.23277840e-02 -4.41583879e-02  4.09462601e-02
  2.32792031e-02  2.22941190e-02  1.85384620e-02  1.38553255e-03
  2.86892448e-02  8.87592733e-02  2.74838731e-02 -1.67141184e-02
 -3.41329016e-02  3.58856749e-03 -1.27646411e-02 -1.33708455e-02
 -8.39263434e-04 -2.28395220e-02  7.19257146e-02  2.26463731e-02
 -2.75908560e-02 -2.23600678e-02 -3.56307067e-02  5.76792546e-02
  7.36564323e-02 -8.90246069e-04  9.01861303e-03 -2.29597092e-02
  8.83249938e-03 -5.61692333e-03  8.04340001e-03 -2.31370479e-02
 -4.59553488e-02 -5.84915131e-02 -1.38471290e-01  1.80973858e-02
  6.20520022e-03  4.82592806e-02 -3.61253694e-02 -7.76579510e-03
 -1.34447562e-02  7.18973428e-02 -8.34506229e-02  4.36773188e-02
 -3.75094265e-02  5.13192713e-02  2.67618932e-02  3.55999060e-02
 -2.72687711e-02 -6.72469735e-02 -5.83444014e-02  8.29685852e-02
  2.48103449e-03 -1.80708114e-02 -1.67368017e-02  3.41400579e-02
  3.52630615e-02 -9.97451991e-02  1.44234560e-02  4.05120514e-02
 -2.28517968e-02 -3.57453860e-02  2.62468634e-03  3.29047767e-03
 -1.12559842e-02  3.00786663e-02  1.46259042e-02  7.60591924e-02
  9.84409079e-02  3.69148999e-02 -1.71614941e-02 -4.42692265e-02
  5.57495505e-02 -2.48081647e-02 -4.34326865e-02 -3.57127748e-02
  3.06095835e-02  2.16698404e-02  2.09494624e-02  4.36983854e-33
 -9.68687236e-03 -8.93188715e-02 -4.66534458e-02  4.43523265e-02
 -8.41421727e-03  4.06662337e-02 -1.77498851e-02  8.00077096e-02
  5.33471890e-02 -3.35404165e-02  1.87545381e-02  4.45959941e-02
  2.72199940e-02 -5.04295640e-02 -2.74731871e-02 -5.57140186e-02
  3.05124149e-02  4.70872745e-02 -2.73333080e-02 -3.42545882e-02
  7.09430054e-02 -1.55776413e-02  2.04199832e-02 -9.09444783e-03
  3.04359458e-02  6.85020760e-02 -8.64149630e-03  2.42327042e-02
 -1.99661832e-02  3.81566919e-02  3.07159238e-02 -9.78231709e-03
 -2.94498354e-02  4.69660610e-02 -2.83678249e-02 -1.78628732e-02
 -2.60444544e-02  1.77192800e-02 -1.95547305e-02 -3.94639894e-02
 -6.94855452e-02 -9.17089060e-02 -4.22118567e-02 -1.70605369e-02
  6.10614521e-03 -1.16420269e-01 -6.31199107e-02  5.70646068e-03
 -2.30860151e-02  8.03934634e-02 -2.20666509e-02  9.77704152e-02
 -3.27525958e-02 -6.23084456e-02  1.63929854e-02 -2.02845633e-02
 -2.22849511e-02  9.20982212e-02 -5.75750917e-02  5.18397018e-02
 -7.26245344e-02  1.16121829e-01  1.10942479e-02  2.22926456e-02
 -7.62076909e-03  8.64371583e-02 -2.59399991e-02 -1.16677076e-01
  6.17451780e-02 -9.07652453e-02 -3.88673954e-02  1.17708268e-02
  2.57367156e-02  2.28737085e-03 -4.16253246e-02  2.31557526e-02
 -2.37101614e-02  2.20417008e-02 -9.40207243e-02 -9.88092050e-02
 -2.85390951e-02  8.22353214e-02 -2.80504338e-02  7.17670172e-02
  7.74141774e-02 -1.23669272e-02 -1.61088333e-02 -3.03553920e-02
  3.49366048e-04 -6.05705241e-03 -4.38373089e-02  3.59955505e-02
 -3.55982073e-02 -5.11545539e-02  5.44510484e-02 -5.37308696e-33
 -1.35784259e-03  1.11524560e-01 -4.00035232e-02 -2.89936159e-02
  4.02802564e-02 -3.23289968e-02  1.18709859e-02 -2.82980204e-02
 -1.08001076e-01 -1.06740082e-02 -6.73602568e-04 -6.58447742e-02
 -1.03779100e-01 -3.61175276e-02  2.60578096e-02 -2.16330308e-02
  3.79453115e-02 -6.69661537e-03  1.67142227e-02  1.05930895e-01
 -7.31601566e-03  1.51645184e-01  2.63931863e-02  2.81919520e-02
 -5.52479066e-02 -2.90032309e-02 -2.78759245e-02  8.82298127e-02
  1.69098079e-02 -3.79280001e-02  4.93110344e-02 -1.35794971e-02
 -5.57086132e-02 -1.06835868e-02  5.49939610e-02 -2.75895633e-02
  8.05979222e-02  6.03070371e-02 -3.93570401e-02  4.45931480e-04
  1.33174539e-01 -3.08346003e-02 -1.31222568e-02  6.83457172e-03
 -9.89479572e-03 -4.86371405e-02  4.94975112e-02 -1.21490695e-02
 -2.96900775e-02 -6.99977428e-02  5.77011779e-02 -9.90888625e-02
  3.73708978e-02  3.06403711e-02  4.80715185e-02  8.32384378e-02
  1.35276556e-01  3.60186696e-02  4.73761000e-02  3.49700041e-02
  9.32752490e-02 -1.28399134e-01 -9.01627541e-03  1.06858304e-02
  2.33027097e-02  1.15704425e-02  7.87159279e-02  6.21376783e-02
  1.06468368e-02  5.50480559e-02  1.36539368e-02  1.89915560e-02
  6.11580834e-02 -5.29735088e-02  8.95049423e-02  6.64861202e-02
 -1.04744479e-01 -3.17479782e-02 -4.82594557e-02 -2.14459244e-02
  3.91347520e-02 -1.06692016e-02 -5.45029119e-02 -3.84820215e-02
  6.68640137e-02 -6.44509727e-03 -1.95070636e-02  5.29519320e-02
 -2.44583227e-02 -4.98986021e-02 -6.97197840e-02  7.36123919e-02
 -2.78113931e-02  6.19442649e-02 -2.41795070e-02 -5.38563150e-08
  1.01405205e-02 -7.38571435e-02  1.92277338e-02  2.05095718e-03
 -9.34520923e-03 -3.48060727e-02  8.15435033e-03 -7.54238665e-02
 -7.70218223e-02 -4.55072820e-02 -2.38692593e-02  2.78008115e-02
  1.08750023e-01  4.61143814e-02  7.36879930e-02 -5.80281578e-02
 -3.24300304e-02  3.74267739e-03 -6.18729591e-02  4.55588028e-02
 -6.41343009e-04 -8.21898505e-02 -4.78288420e-02  6.60301968e-02
  6.64166063e-02 -6.16516359e-03  5.32558784e-02 -9.91550274e-03
  4.51739877e-02 -6.05412759e-03  3.94993322e-03  7.51877949e-02
 -1.34351626e-02  3.95288356e-02 -4.06463556e-02  5.38778305e-02
  3.10240779e-02  3.62871811e-02  2.28083227e-02  1.13137707e-01
 -3.99567187e-02 -2.65719853e-02 -9.38027650e-02  3.61498706e-02
  5.54292239e-02 -2.68939622e-02 -3.38932872e-03 -1.56812333e-02
 -8.42060690e-05 -1.10594034e-02 -1.31589353e-01  2.16329116e-02
  3.06702014e-02 -1.11250021e-01  1.12585565e-02  4.41221073e-02
  5.38540706e-02 -7.12928027e-02 -4.26757075e-02  9.90833268e-02
  2.67435033e-02  8.72666910e-02 -5.78046665e-02 -1.37656145e-02]"
"shapes

 shapes/Shape.java: Common shape interface

package refactoring_guru.composite.example.shapes;

import java.awt.*;

public interface Shape {
    int getX();
    int getY();
    int getWidth();
    int getHeight();
    void move(int x, int y);
    boolean isInsideBounds(int x, int y);
    void select();
    void unSelect();
    boolean isSelected();
    void paint(Graphics graphics);
}
 shapes/BaseShape.java: Abstract shape with basic functionality

package refactoring_guru.composite.example.shapes;

import java.awt.*;

abstract class BaseShape implements Shape {
    public int x;
    public int y;
    public Color color;
    private boolean selected = false;

    BaseShape(int x, int y, Color color) {
        this.x = x;
        this.y = y;
        this.color = color;
    }

    @Override
    public int getX() {
        return x;
    }

    @Override
    public int getY() {
        return y;
    }

    @Override
    public int getWidth() {
        return 0;
    }

    @Override
    public int getHeight() {
        return 0;
    }

    @Override
    public void move(int x, int y) {
        this.x += x;
        this.y += y;
    }

    @Override
    public boolean isInsideBounds(int x, int y) {
        return x > getX() && x < (getX() + getWidth()) &&
                y > getY() && y < (getY() + getHeight());
    }

    @Override
    public void select() {
        selected = true;
    }

    @Override
    public void unSelect() {
        selected = false;
    }

    @Override
    public boolean isSelected() {
        return selected;
    }

    void enableSelectionStyle(Graphics graphics) {
        graphics.setColor(Color.LIGHT_GRAY);

        Graphics2D g2 = (Graphics2D) graphics;
        float[] dash1 = {2.0f};
        g2.setStroke(new BasicStroke(1.0f,
                BasicStroke.CAP_BUTT,
                BasicStroke.JOIN_MITER,
                2.0f, dash1, 0.0f));
    }

    void disableSelectionStyle(Graphics graphics) {
        graphics.setColor(color);
        Graphics2D g2 = (Graphics2D) graphics;
        g2.setStroke(new BasicStroke());
    }


    @Override
    public void paint(Graphics graphics) {
        if (isSelected()) {
            enableSelectionStyle(graphics);
        }
        else {
            disableSelectionStyle(graphics);
        }

        // ...
    }
}
 shapes/Dot.java: A dot

package refactoring_guru.composite.example.shapes;

import java.awt.*;

public class Dot extends BaseShape {
    private final int DOT_SIZE = 3;

    public Dot(int x, int y, Color color) {
        super(x, y, color);
    }

    @Override
    public int getWidth() {
        return DOT_SIZE;
    }

    @Override
    public int getHeight() {
        return DOT_SIZE;
    }

    @Override
    public void paint(Graphics graphics) {
        super.paint(graphics);
        graphics.fillRect(x - 1, y - 1, getWidth(), getHeight());
    }
}
 shapes/Circle.java: A circle

package refactoring_guru.composite.example.shapes;

import java.awt.*;

public class Circle extends BaseShape {
    public int radius;

    public Circle(int x, int y, int radius, Color color) {
        super(x, y, color);
        this.radius = radius;
    }

    @Override
    public int getWidth() {
        return radius * 2;
    }

    @Override
    public int getHeight() {
        return radius * 2;
    }

    public void paint(Graphics graphics) {
        super.paint(graphics);
        graphics.drawOval(x, y, getWidth() - 1, getHeight() - 1);
    }
}
 shapes/Rectangle.java: A rectangle

package refactoring_guru.composite.example.shapes;

import java.awt.*;

public class Rectangle extends BaseShape {
    public int width;
    public int height;

    public Rectangle(int x, int y, int width, int height, Color color) {
        super(x, y, color);
        this.width = width;
        this.height = height;
    }

    @Override
    public int getWidth() {
        return width;
    }

    @Override
    public int getHeight() {
        return height;
    }

    @Override
    public void paint(Graphics graphics) {
        super.paint(graphics);
        graphics.drawRect(x, y, getWidth() - 1, getHeight() - 1);
    }
}
 shapes/CompoundShape.java: Compound shape, which consists of other shape objects

package refactoring_guru.composite.example.shapes;

import java.awt.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class CompoundShape extends BaseShape {
    protected List<Shape> children = new ArrayList<>();

    public CompoundShape(Shape... components) {
        super(0, 0, Color.BLACK);
        add(components);
    }

    public void add(Shape component) {
        children.add(component);
    }

    public void add(Shape... components) {
        children.addAll(Arrays.asList(components));
    }

    public void remove(Shape child) {
        children.remove(child);
    }

    public void remove(Shape... components) {
        children.removeAll(Arrays.asList(components));
    }

    public void clear() {
        children.clear();
    }

    @Override
    public int getX() {
        if (children.size() == 0) {
            return 0;
        }
        int x = children.get(0).getX();
        for (Shape child : children) {
            if (child.getX() < x) {
                x = child.getX();
            }
        }
        return x;
    }

    @Override
    public int getY() {
        if (children.size() == 0) {
            return 0;
        }
        int y = children.get(0).getY();
        for (Shape child : children) {
            if (child.getY() < y) {
                y = child.getY();
            }
        }
        return y;
    }

    @Override
    public int getWidth() {
        int maxWidth = 0;
        int x = getX();
        for (Shape child : children) {
            int childsRelativeX = child.getX() - x;
            int childWidth = childsRelativeX + child.getWidth();
            if (childWidth > maxWidth) {
                maxWidth = childWidth;
            }
        }
        return maxWidth;
    }

    @Override
    public int getHeight() {
        int maxHeight = 0;
        int y = getY();
        for (Shape child : children) {
            int childsRelativeY = child.getY() - y;
            int childHeight = childsRelativeY + child.getHeight();
            if (childHeight > maxHeight) {
                maxHeight = childHeight;
            }
        }
        return maxHeight;
    }

    @Override
    public void move(int x, int y) {
        for (Shape child : children) {
            child.move(x, y);
        }
    }

    @Override
    public boolean isInsideBounds(int x, int y) {
        for (Shape child : children) {
            if (child.isInsideBounds(x, y)) {
                return true;
            }
        }
        return false;
    }

    @Override
    public void unSelect() {
        super.unSelect();
        for (Shape child : children) {
            child.unSelect();
        }
    }

    public boolean selectChildAt(int x, int y) {
        for (Shape child : children) {
            if (child.isInsideBounds(x, y)) {
                child.select();
                return true;
            }
        }
        return false;
    }

    @Override
    public void paint(Graphics graphics) {
        if (isSelected()) {
            enableSelectionStyle(graphics);
            graphics.drawRect(getX() - 1, getY() - 1, getWidth() + 1, getHeight() + 1);
            disableSelectionStyle(graphics);
        }

        for (Shape child : children) {
            child.paint(graphics);
        }
    }
}
 editor

 editor/ImageEditor.java: Shape editor

package refactoring_guru.composite.example.editor;

import refactoring_guru.composite.example.shapes.CompoundShape;
import refactoring_guru.composite.example.shapes.Shape;

import javax.swing.*;
import javax.swing.border.Border;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

public class ImageEditor {
    private EditorCanvas canvas;
    private CompoundShape allShapes = new CompoundShape();

    public ImageEditor() {
        canvas = new EditorCanvas();
    }

    public void loadShapes(Shape... shapes) {
        allShapes.clear();
        allShapes.add(shapes);
        canvas.refresh();
    }

    private class EditorCanvas extends Canvas {
        JFrame frame;

        private static final int PADDING = 10;

        EditorCanvas() {
            createFrame();
            refresh();
            addMouseListener(new MouseAdapter() {
                @Override
                public void mousePressed(MouseEvent e) {
                    allShapes.unSelect();
                    allShapes.selectChildAt(e.getX(), e.getY());
                    e.getComponent().repaint();
                }
            });
        }

        void createFrame() {
            frame = new JFrame();
            frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
            frame.setLocationRelativeTo(null);

            JPanel contentPanel = new JPanel();
            Border padding = BorderFactory.createEmptyBorder(PADDING, PADDING, PADDING, PADDING);
            contentPanel.setBorder(padding);
            frame.setContentPane(contentPanel);

            frame.add(this);
            frame.setVisible(true);
            frame.getContentPane().setBackground(Color.LIGHT_GRAY);
        }

        public int getWidth() {
            return allShapes.getX() + allShapes.getWidth() + PADDING;
        }

        public int getHeight() {
            return allShapes.getY() + allShapes.getHeight() + PADDING;
        }

        void refresh() {
            this.setSize(getWidth(), getHeight());
            frame.pack();
        }

        public void paint(Graphics graphics) {
            allShapes.paint(graphics);
        }
    }
}
 Demo.java: Client code

package refactoring_guru.composite.example;

import refactoring_guru.composite.example.editor.ImageEditor;
import refactoring_guru.composite.example.shapes.Circle;
import refactoring_guru.composite.example.shapes.CompoundShape;
import refactoring_guru.composite.example.shapes.Dot;
import refactoring_guru.composite.example.shapes.Rectangle;

import java.awt.*;

public class Demo {
    public static void main(String[] args) {
        ImageEditor editor = new ImageEditor();

        editor.loadShapes(
                new Circle(10, 10, 10, Color.BLUE),

                new CompoundShape(
                    new Circle(110, 110, 50, Color.RED),
                    new Dot(160, 160, Color.RED)
                ),

                new CompoundShape(
                        new Rectangle(250, 250, 100, 100, Color.GREEN),
                        new Dot(240, 240, Color.GREEN),
                        new Dot(240, 360, Color.GREEN),
                        new Dot(360, 360, Color.GREEN),
                        new Dot(360, 240, Color.GREEN)
                )
        );
    }
}",Java,Composite,Refactoring Guru,https://refactoring.guru/design-patterns/composite/java/example#example-0,"[ 3.65971029e-02  1.36991013e-02 -3.42370663e-03 -1.94851235e-02
 -2.01616958e-02  1.25312144e-02  7.36045185e-03  1.11312672e-01
 -4.27114218e-02 -3.96630913e-02 -1.84568155e-04 -5.95194986e-03
  6.67423680e-02 -1.89883336e-02 -7.80781405e-03 -4.37665060e-02
 -6.14264123e-02  6.55044839e-02 -7.14201927e-02 -1.67888924e-02
  2.27821041e-02 -1.14270657e-01  5.41235022e-02 -5.55421300e-02
 -5.73484553e-03  7.83094466e-02  5.88971041e-02 -1.78546868e-02
 -3.88861783e-02 -8.48416910e-02 -3.36965993e-02  1.69751160e-02
 -6.37735613e-03  2.95567941e-02 -6.75441176e-02  1.74908116e-02
 -4.29550298e-02  8.53572786e-02 -1.69967841e-02 -6.83442205e-02
 -1.07083544e-01  4.71333638e-02  5.16376197e-02 -5.58377653e-02
  3.12310401e-02 -6.52676448e-03 -7.08932951e-02 -1.15457391e-02
  5.65448888e-02 -9.21313185e-03 -3.96888889e-02 -5.17754108e-02
 -2.12394670e-02 -1.04077104e-02  3.69302779e-02  2.90535856e-02
  2.08371915e-02  5.71996672e-03  2.27270052e-02 -3.07166260e-02
 -1.71815678e-02  8.85414798e-03  1.73881068e-03 -2.92054634e-03
 -2.51118653e-02 -5.31396419e-02  5.69433086e-02 -2.09991634e-02
 -2.48400774e-02 -9.72403213e-03 -1.71987452e-02  3.19973081e-02
  6.13594204e-02 -1.24838483e-02 -1.17034409e-02  7.46968715e-03
 -2.13934146e-02  6.45870790e-02  1.65932684e-03 -6.69073462e-02
 -2.52843834e-02  4.98267263e-02  2.24527474e-02  5.70974462e-02
  4.81195673e-02  8.23250934e-02 -2.01221947e-02 -4.66754921e-02
 -4.19946155e-03  7.90023059e-02 -9.54901800e-03  8.86720791e-02
 -2.22057682e-02  8.11733529e-02 -7.68428785e-04 -6.30577505e-02
 -4.79488308e-03 -4.52437177e-02 -6.30545169e-02  7.54945278e-02
  3.52470018e-02 -4.23117615e-02  5.57628721e-02  3.42129357e-02
  5.69366626e-02 -2.37355009e-02 -4.77929376e-02 -1.28224660e-02
 -1.68641955e-02 -4.43261769e-03 -4.25906964e-02 -7.59551823e-02
 -1.03091532e-02  3.64150219e-02 -4.12279032e-02 -8.39348475e-04
  4.97520417e-02 -3.21120359e-02 -1.81955490e-02 -6.28072992e-02
  9.93174389e-02  4.52550985e-02 -4.51602452e-02 -1.13934381e-02
  2.41151545e-03 -1.95807926e-02 -2.28315014e-02  6.14225626e-33
 -4.12665457e-02 -6.48732781e-02  1.30118700e-02  6.49509877e-02
 -9.96417087e-03  3.38149443e-02 -2.80118436e-02  5.44689931e-02
  7.59549346e-03 -4.52223383e-02 -2.46668328e-02 -6.84341267e-02
 -2.25416403e-02  4.45258990e-02  9.14167836e-02 -8.29789862e-02
  5.59786223e-02  1.04284011e-01 -9.24605429e-02 -1.73108000e-02
 -2.96660345e-02 -1.70079786e-02 -5.10109738e-02  7.77993212e-03
 -4.59117368e-02  7.95903206e-02  7.26335822e-03  6.39306903e-02
 -8.16212371e-02 -7.65181193e-03  7.43676908e-03 -2.86261756e-02
 -2.89813261e-02  4.75606658e-02 -4.06469852e-02 -4.41510417e-02
  1.45805464e-03  2.89627351e-03 -8.29922594e-03 -4.94900681e-02
 -6.57165945e-02 -8.06834698e-02  4.89595905e-02 -2.05638725e-02
  3.97579111e-02 -4.76099029e-02  2.70633493e-04  1.16886638e-01
 -1.19802460e-01  7.62442946e-02  8.14345479e-03  1.08138762e-01
  2.11540498e-02 -1.03947848e-01 -4.14895229e-02  1.32301310e-02
  5.40756900e-03  8.43918249e-02 -7.50538111e-02  6.03809915e-02
 -6.52374253e-02  7.80291706e-02 -7.11227581e-02  2.54122112e-02
 -7.25234747e-02  8.09370801e-02 -5.14434054e-02 -8.87567252e-02
  3.20712780e-03 -3.90804559e-02 -7.95000792e-03  3.42204887e-03
  7.87329897e-02 -6.70516025e-03 -3.71985212e-02 -6.96475804e-02
 -5.66348172e-05 -2.50135567e-02 -4.37030457e-02 -7.15851039e-02
 -7.06210136e-02  4.71027419e-02 -1.72749124e-02 -7.49898627e-02
 -2.19686553e-02 -4.27839421e-02  1.13390163e-01  3.14439423e-02
  2.83546839e-02 -1.73385292e-02 -6.59993291e-02 -4.36619334e-02
  4.76974957e-02 -2.47316062e-02  3.05843055e-02 -5.29754162e-33
  3.41946408e-02  5.45758195e-02 -3.33094411e-02 -1.67964317e-03
 -7.69791252e-04  4.21973020e-02  3.81516032e-02  3.33065987e-02
 -8.05397108e-02 -5.31775616e-02 -4.15751636e-02  1.71508323e-02
 -5.11742532e-02  1.12156002e-02 -7.71673280e-04  4.51987199e-02
  1.29874116e-02  1.29618552e-02 -6.92768246e-02 -1.53362043e-02
 -5.94708417e-03  5.06777540e-02  2.79708952e-02  1.42750144e-02
 -4.44798023e-02  4.76133376e-02 -8.99729040e-03  1.02935232e-01
  1.24656763e-02  7.42044747e-02  3.87394987e-02 -4.49785478e-02
 -3.94825973e-02  4.43342961e-02  8.98013115e-02 -1.69687480e-01
 -4.80822334e-03 -1.34633901e-02 -4.43107402e-03  1.01524308e-01
  1.15264598e-02 -7.08817467e-02  5.94514608e-03  6.62140697e-02
  1.65277198e-02  2.76664365e-02  2.76861899e-02  8.73343498e-02
 -2.31902711e-02 -3.70949879e-02 -3.96098047e-02 -7.32403994e-02
  3.48376445e-02 -2.84484662e-02  5.50225228e-02  7.75705129e-02
  2.53794398e-02  5.15769422e-02  6.86709508e-02  2.05907077e-02
  1.73212588e-02 -8.08029845e-02  2.92116450e-03  4.18920591e-02
  1.30135044e-01  2.96357553e-03 -1.79426931e-02 -5.80227142e-03
 -7.62876421e-02  6.96969479e-02 -1.39382211e-02  9.24583152e-02
  2.52754260e-02 -8.42282400e-02  9.59537849e-02 -5.11958497e-03
  7.65517130e-02  1.55610126e-02  1.59821063e-02 -9.49664321e-03
 -6.89155189e-04 -1.70851834e-02  3.45481522e-02 -8.10984429e-03
  1.78731643e-02  4.69220849e-03 -6.88696355e-02  1.72756054e-02
 -2.61685764e-03 -2.44254302e-02 -3.49415913e-02  3.92816924e-02
  9.58531946e-02  3.75423506e-02  2.87042446e-02 -5.27602140e-08
 -3.01523600e-02 -6.42472506e-02  8.32036138e-02  9.67396889e-03
  6.88225627e-02 -2.98115555e-02  6.43351115e-03  7.24246306e-03
 -2.12729238e-02 -5.01088612e-02 -2.06543673e-02  4.53434736e-02
  4.39379290e-02  2.52598189e-02  6.91853091e-02 -1.05977409e-01
  7.99918268e-03 -7.21285539e-03 -5.89213483e-02  1.59422420e-02
 -5.49813546e-02 -8.27627778e-02 -3.25039588e-02  6.23440631e-02
  1.52798714e-02 -1.04332380e-01 -2.88528837e-02  2.17082053e-02
  8.06909651e-02  5.30880950e-02 -1.37380334e-02  5.21390811e-02
  1.25817478e-01  3.68410721e-02 -1.20766135e-02 -5.59857488e-02
 -2.91501619e-02  8.50049257e-02 -3.60674262e-02  9.08618048e-02
 -2.49933358e-02  1.87790934e-02  7.86668900e-03 -1.75517425e-02
  9.26356092e-02 -4.49082293e-02  8.17870125e-02 -1.33919399e-02
 -1.10438475e-02  4.86946553e-02 -1.44408166e-01  1.09825535e-02
  3.65350693e-02 -7.88512528e-02 -9.40803811e-03 -6.35338351e-02
 -1.03174214e-04  3.23479474e-02  3.83631922e-02  1.15402311e-01
 -7.64593780e-02  3.35897468e-02 -3.05813123e-02  4.85344644e-04]"
"decorators

 decorators/DataSource.java: A common data interface, which defines read and write operations

package refactoring_guru.decorator.example.decorators;

public interface DataSource {
    void writeData(String data);

    String readData();
}
 decorators/FileDataSource.java: Simple data reader-writer

package refactoring_guru.decorator.example.decorators;

import java.io.*;

public class FileDataSource implements DataSource {
    private String name;

    public FileDataSource(String name) {
        this.name = name;
    }

    @Override
    public void writeData(String data) {
        File file = new File(name);
        try (OutputStream fos = new FileOutputStream(file)) {
            fos.write(data.getBytes(), 0, data.length());
        } catch (IOException ex) {
            System.out.println(ex.getMessage());
        }
    }

    @Override
    public String readData() {
        char[] buffer = null;
        File file = new File(name);
        try (FileReader reader = new FileReader(file)) {
            buffer = new char[(int) file.length()];
            reader.read(buffer);
        } catch (IOException ex) {
            System.out.println(ex.getMessage());
        }
        return new String(buffer);
    }
}
 decorators/DataSourceDecorator.java: Abstract base decorator

package refactoring_guru.decorator.example.decorators;

public class DataSourceDecorator implements DataSource {
    private DataSource wrappee;

    DataSourceDecorator(DataSource source) {
        this.wrappee = source;
    }

    @Override
    public void writeData(String data) {
        wrappee.writeData(data);
    }

    @Override
    public String readData() {
        return wrappee.readData();
    }
}
 decorators/EncryptionDecorator.java: Encryption decorator

package refactoring_guru.decorator.example.decorators;

import java.util.Base64;

public class EncryptionDecorator extends DataSourceDecorator {

    public EncryptionDecorator(DataSource source) {
        super(source);
    }

    @Override
    public void writeData(String data) {
        super.writeData(encode(data));
    }

    @Override
    public String readData() {
        return decode(super.readData());
    }

    private String encode(String data) {
        byte[] result = data.getBytes();
        for (int i = 0; i < result.length; i++) {
            result[i] += (byte) 1;
        }
        return Base64.getEncoder().encodeToString(result);
    }

    private String decode(String data) {
        byte[] result = Base64.getDecoder().decode(data);
        for (int i = 0; i < result.length; i++) {
            result[i] -= (byte) 1;
        }
        return new String(result);
    }
}
 decorators/CompressionDecorator.java: Compression decorator

package refactoring_guru.decorator.example.decorators;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Base64;
import java.util.zip.Deflater;
import java.util.zip.DeflaterOutputStream;
import java.util.zip.InflaterInputStream;

public class CompressionDecorator extends DataSourceDecorator {
    private int compLevel = 6;

    public CompressionDecorator(DataSource source) {
        super(source);
    }

    public int getCompressionLevel() {
        return compLevel;
    }

    public void setCompressionLevel(int value) {
        compLevel = value;
    }

    @Override
    public void writeData(String data) {
        super.writeData(compress(data));
    }

    @Override
    public String readData() {
        return decompress(super.readData());
    }

    private String compress(String stringData) {
        byte[] data = stringData.getBytes();
        try {
            ByteArrayOutputStream bout = new ByteArrayOutputStream(512);
            DeflaterOutputStream dos = new DeflaterOutputStream(bout, new Deflater(compLevel));
            dos.write(data);
            dos.close();
            bout.close();
            return Base64.getEncoder().encodeToString(bout.toByteArray());
        } catch (IOException ex) {
            return null;
        }
    }

    private String decompress(String stringData) {
        byte[] data = Base64.getDecoder().decode(stringData);
        try {
            InputStream in = new ByteArrayInputStream(data);
            InflaterInputStream iin = new InflaterInputStream(in);
            ByteArrayOutputStream bout = new ByteArrayOutputStream(512);
            int b;
            while ((b = iin.read()) != -1) {
                bout.write(b);
            }
            in.close();
            iin.close();
            bout.close();
            return new String(bout.toByteArray());
        } catch (IOException ex) {
            return null;
        }
    }
}
 Demo.java: Client code

package refactoring_guru.decorator.example;

import refactoring_guru.decorator.example.decorators.*;

public class Demo {
    public static void main(String[] args) {
        String salaryRecords = ""Name,Salary\nJohn Smith,100000\nSteven Jobs,912000"";
        DataSourceDecorator encoded = new CompressionDecorator(
                                         new EncryptionDecorator(
                                             new FileDataSource(""out/OutputDemo.txt"")));
        encoded.writeData(salaryRecords);
        DataSource plain = new FileDataSource(""out/OutputDemo.txt"");

        System.out.println(""- Input ----------------"");
        System.out.println(salaryRecords);
        System.out.println(""- Encoded --------------"");
        System.out.println(plain.readData());
        System.out.println(""- Decoded --------------"");
        System.out.println(encoded.readData());
    }
}",Java,Decorator,Refactoring Guru,https://refactoring.guru/design-patterns/decorator/java/example#example-0,"[-4.71628457e-02  7.80478939e-02 -1.02876343e-01 -3.76706421e-02
 -1.01902962e-01 -4.32078913e-02 -4.49314155e-03  5.44596501e-02
 -8.14224631e-02  1.02022188e-02  7.79704098e-03 -1.43703930e-02
  8.02406967e-02 -7.31530488e-02 -5.62680550e-02 -1.05103932e-01
 -8.14084709e-02  9.38235745e-02 -6.29482642e-02 -2.25361120e-02
  1.20726973e-01 -6.85166754e-03 -8.72976705e-03 -5.28999567e-02
  6.44091740e-02  5.14917821e-02  8.34063161e-03  3.55018415e-02
 -4.65994179e-02  8.51607509e-03  2.40773484e-02 -6.05587754e-03
 -8.81129992e-04  2.57852189e-02  6.98723132e-03  5.82941324e-02
  3.39135379e-02 -9.27276444e-03 -5.07292598e-02 -2.97105331e-02
 -7.32580125e-02  3.83826941e-02 -7.66777173e-02  3.78877297e-02
 -4.89476509e-02 -6.51933923e-02  9.50605702e-03 -4.17176858e-02
 -1.45806903e-02 -4.13382985e-02 -6.86416179e-02  6.93841949e-02
 -1.11659849e-02  5.42607866e-02 -3.33658047e-02 -4.23936024e-02
 -8.10695067e-03  3.48744802e-02 -7.42207989e-02  5.23998681e-03
 -7.38635138e-02  4.30229828e-02 -3.12310942e-02  1.88272968e-02
 -1.55150676e-02 -3.73787470e-02  9.58574191e-02  4.56784591e-02
  1.67838037e-02 -9.90779400e-02 -6.13614321e-02  3.84344906e-02
 -4.63004075e-02  5.65707684e-02 -5.60295805e-02  1.49388053e-02
 -3.16111371e-02  3.09322942e-02  2.87268870e-02 -4.89338227e-02
  2.35851295e-02 -3.67373340e-02  2.42533740e-02  5.02459742e-02
  4.40502714e-04  2.23741811e-02 -3.98567691e-02  2.43603792e-02
  1.43560395e-02  7.88654536e-02  7.66167557e-03 -8.97336751e-03
 -2.28228215e-02  7.95542374e-02 -2.44512763e-02  4.12423275e-02
  3.62695823e-03  2.99382657e-02 -1.68211423e-02  5.84488735e-02
 -3.39346752e-02  2.64408393e-03 -1.17969858e-02 -1.00621600e-02
  3.54363173e-02 -5.55828325e-02  3.80270816e-02  6.88144863e-02
  4.84758290e-03 -6.13270663e-02  8.57069530e-03  1.37974443e-02
 -5.55465445e-02 -4.18498516e-02  4.10967432e-02  3.03565022e-02
 -4.80686873e-02 -6.34952169e-03 -6.64256364e-02  3.56775448e-02
  1.52883539e-02 -1.66983511e-02 -5.11623919e-02  4.47311671e-03
 -1.94711201e-02 -3.19504701e-02 -1.11823138e-02  4.37868303e-33
  1.45571707e-02 -6.11363426e-02  2.76997257e-02  4.13424969e-02
 -8.29843357e-02  8.73331726e-03  1.70056615e-03  5.50774299e-02
 -1.79213453e-02 -2.57790764e-03 -8.28854442e-02 -8.16527456e-02
  3.24486606e-02 -7.57498387e-03 -1.77450012e-02 -1.06261903e-02
 -1.12287551e-02  1.43134110e-02  1.00524537e-02  4.47451510e-02
  1.13832779e-01  3.17323953e-02  1.79685522e-02 -3.48417424e-02
 -5.11863120e-02  8.92137811e-02  4.85023577e-03 -3.31777669e-02
 -2.85213068e-03  3.39846462e-02  8.68012905e-02 -1.01424932e-01
 -1.86399871e-03  1.64166279e-02  3.06965131e-02 -6.58605844e-02
  7.15204999e-02 -7.42924633e-03 -7.85164982e-02 -3.53427753e-02
  1.80910379e-02 -6.49173781e-02  5.98234534e-02  2.93988865e-02
  3.53382751e-02 -4.87963371e-02 -4.05010767e-02  2.93901097e-02
 -2.01810692e-02  7.20253885e-02  3.44119072e-02  1.06922291e-01
  2.06750873e-02  6.94626616e-03 -2.21705530e-02  4.75716405e-03
  6.09884746e-02 -1.07609238e-02 -2.98810564e-02  5.55303991e-02
 -1.32608160e-01  5.82039133e-02 -1.38854394e-02 -3.36487927e-02
  1.81132704e-02  1.48196165e-02 -1.95011962e-02 -1.33139685e-01
  1.20896399e-02 -2.52340846e-02 -1.04749665e-01 -4.11325656e-02
  8.40578079e-02  2.74237320e-02 -8.63126304e-04  5.35071492e-02
 -5.43335080e-02 -1.41209699e-02 -8.92644152e-02 -1.16280302e-01
 -3.15638520e-02  5.13022281e-02  4.13993467e-03  1.70491394e-02
  1.76021084e-02  8.03906098e-02 -8.06814618e-03 -5.19150458e-02
  9.14286450e-02  6.01322157e-03  3.09408996e-02  2.58681295e-03
 -2.69555394e-02 -1.40395522e-01  4.51291464e-02 -5.01898766e-33
  2.29672603e-02  6.27241358e-02 -8.33402798e-02 -1.48936817e-02
  2.61365399e-02  8.71379219e-04  4.86545637e-02  1.41681535e-02
 -5.83608076e-03 -1.28853163e-02 -7.02263638e-02 -5.34655526e-02
  3.07216085e-02 -1.07181352e-02  9.06222984e-02 -2.51774117e-02
  2.32316945e-02 -4.14813589e-03  3.91438454e-02  3.91582809e-02
 -4.38534245e-02  1.05890378e-01  5.45372479e-02  2.82949489e-02
  6.68116733e-02 -2.68797763e-03 -6.01746626e-02  1.01861134e-01
  6.16318248e-02  2.41807438e-02  3.61730568e-02 -1.81324873e-02
 -3.73489447e-02 -2.69275792e-02 -4.14126664e-02 -9.21874419e-02
  2.73480527e-02  2.04904936e-02 -3.25279310e-02  7.30604231e-02
  5.08379042e-02 -4.74045277e-02 -2.15081479e-02  3.63213606e-02
  6.89576790e-02 -1.13047540e-01 -7.91384354e-02  2.28872914e-02
  2.04685926e-02 -1.38379605e-02  3.10046338e-02 -2.98045315e-02
 -5.00748269e-02 -9.91977099e-03  1.10405959e-01  1.89160593e-02
  6.00879565e-02  1.73637513e-02  9.27723572e-03  4.35958542e-02
  3.48440260e-02 -8.03982094e-02  5.33280447e-02  9.47864167e-03
  9.42997858e-02  8.66054557e-03  6.32008165e-02 -4.89641428e-02
 -4.27103192e-02  2.60014832e-02  2.72059888e-02 -2.18943916e-02
  3.28990445e-03  5.11599146e-03  1.56537279e-01  1.64837055e-02
 -7.15461224e-02  2.25492157e-02 -2.84783579e-02  7.74032325e-02
  2.80049555e-02 -7.29166716e-03  6.43248251e-03  5.78016229e-02
  1.12642124e-01 -7.64748454e-02 -3.38111632e-03  3.91095923e-03
 -8.71566460e-02 -7.97420219e-02 -5.35238646e-02  5.86883351e-02
 -2.66237762e-02  5.37680387e-02  3.75362225e-02 -5.44160272e-08
 -3.89183909e-02 -8.01701099e-02 -4.32348251e-02  3.56828757e-02
  5.76809756e-02 -1.39974244e-02 -6.26583323e-02 -4.87244129e-02
  3.73306009e-03 -7.40748420e-02  6.02649413e-02 -1.54298386e-02
  1.86215912e-03 -1.12123489e-02  5.54352216e-02 -2.89177448e-02
  3.58670019e-02 -7.88439065e-02 -8.76019672e-02 -3.25426199e-02
  3.45387608e-02 -2.68088393e-02 -1.54065400e-01  1.55409211e-02
  6.72422051e-02  8.33144877e-03  6.63762763e-02  7.39546344e-02
  3.10987104e-02  2.92960703e-02 -1.52568901e-02  1.88875385e-02
  8.12912732e-02 -4.01934013e-02 -3.77383418e-02  3.33748423e-02
  8.09975043e-02  6.41463324e-02  5.56869358e-02  8.40451568e-02
  4.18256223e-02 -1.47018605e-03 -4.33665588e-02  2.63060443e-02
  7.89991170e-02 -4.86025289e-02  2.58499943e-02  3.60058546e-02
  5.61766652e-03  2.60545537e-02 -6.84763938e-02 -8.67844373e-03
 -1.76714119e-02 -4.80657667e-02 -5.52346595e-02 -8.10900331e-02
 -1.03750136e-02 -7.70610124e-02 -1.01709589e-02  6.93799406e-02
  1.38428509e-02  5.88221475e-03  1.19294645e-03 -2.88904831e-02]"
"some_complex_media_library: Complex video conversion library

 some_complex_media_library/VideoFile.java

package refactoring_guru.facade.example.some_complex_media_library;

public class VideoFile {
    private String name;
    private String codecType;

    public VideoFile(String name) {
        this.name = name;
        this.codecType = name.substring(name.indexOf(""."") + 1);
    }

    public String getCodecType() {
        return codecType;
    }

    public String getName() {
        return name;
    }
}
 some_complex_media_library/Codec.java

package refactoring_guru.facade.example.some_complex_media_library;

public interface Codec {
}
 some_complex_media_library/MPEG4CompressionCodec.java

package refactoring_guru.facade.example.some_complex_media_library;

public class MPEG4CompressionCodec implements Codec {
    public String type = ""mp4"";

}
 some_complex_media_library/OggCompressionCodec.java

package refactoring_guru.facade.example.some_complex_media_library;

public class OggCompressionCodec implements Codec {
    public String type = ""ogg"";
}
 some_complex_media_library/CodecFactory.java

package refactoring_guru.facade.example.some_complex_media_library;

public class CodecFactory {
    public static Codec extract(VideoFile file) {
        String type = file.getCodecType();
        if (type.equals(""mp4"")) {
            System.out.println(""CodecFactory: extracting mpeg audio..."");
            return new MPEG4CompressionCodec();
        }
        else {
            System.out.println(""CodecFactory: extracting ogg audio..."");
            return new OggCompressionCodec();
        }
    }
}
 some_complex_media_library/BitrateReader.java

package refactoring_guru.facade.example.some_complex_media_library;

public class BitrateReader {
    public static VideoFile read(VideoFile file, Codec codec) {
        System.out.println(""BitrateReader: reading file..."");
        return file;
    }

    public static VideoFile convert(VideoFile buffer, Codec codec) {
        System.out.println(""BitrateReader: writing file..."");
        return buffer;
    }
}
 some_complex_media_library/AudioMixer.java

package refactoring_guru.facade.example.some_complex_media_library;

import java.io.File;

public class AudioMixer {
    public File fix(VideoFile result){
        System.out.println(""AudioMixer: fixing audio..."");
        return new File(""tmp"");
    }
}
 facade

 facade/VideoConversionFacade.java: Facade provides simple interface of video conversion

package refactoring_guru.facade.example.facade;

import refactoring_guru.facade.example.some_complex_media_library.*;

import java.io.File;

public class VideoConversionFacade {
    public File convertVideo(String fileName, String format) {
        System.out.println(""VideoConversionFacade: conversion started."");
        VideoFile file = new VideoFile(fileName);
        Codec sourceCodec = CodecFactory.extract(file);
        Codec destinationCodec;
        if (format.equals(""mp4"")) {
            destinationCodec = new MPEG4CompressionCodec();
        } else {
            destinationCodec = new OggCompressionCodec();
        }
        VideoFile buffer = BitrateReader.read(file, sourceCodec);
        VideoFile intermediateResult = BitrateReader.convert(buffer, destinationCodec);
        File result = (new AudioMixer()).fix(intermediateResult);
        System.out.println(""VideoConversionFacade: conversion completed."");
        return result;
    }
}
 Demo.java: Client code

package refactoring_guru.facade.example;

import refactoring_guru.facade.example.facade.VideoConversionFacade;

import java.io.File;

public class Demo {
    public static void main(String[] args) {
        VideoConversionFacade converter = new VideoConversionFacade();
        File mp4Video = converter.convertVideo(""youtubevideo.ogg"", ""mp4"");
        // ...
    }
}",Java,Facade,Refactoring Guru,https://refactoring.guru/design-patterns/facade/java/example#example-0,"[ 4.05023731e-02  1.83704067e-02 -8.46398622e-02 -1.10018857e-01
  1.83368959e-02 -5.48848533e-04 -2.81408485e-02  7.55067691e-02
 -5.00510931e-02 -2.72989944e-02  2.16167537e-03 -9.34467912e-02
 -3.04113422e-02 -9.79741197e-03  7.54976692e-03 -1.11072004e-01
 -7.72738904e-02  6.82240352e-02 -6.47440404e-02  1.25445528e-02
  8.74384865e-02 -7.38724396e-02  4.75702658e-02 -7.32254162e-02
  3.32486331e-02  3.67681757e-02  1.72402374e-02  4.26532608e-03
 -1.55741228e-02 -8.31798371e-03  5.93930744e-02  4.46587093e-02
  5.33275045e-02 -3.04651004e-03  4.86577302e-02  3.43778245e-02
  4.55717035e-02 -5.40686809e-02 -9.50853527e-02 -2.64233556e-02
 -3.11786868e-02  8.05824250e-02 -1.46556902e-03 -6.98934570e-02
 -6.17884062e-02 -6.06336184e-02 -1.24748768e-02 -3.77834253e-02
  3.65335569e-02 -5.23287393e-02 -9.85231847e-02 -1.03326906e-02
 -8.74342844e-02 -5.06820604e-02 -1.01837171e-02  4.31448929e-02
  3.45005020e-02  5.23646586e-02 -1.38247991e-02  3.67769487e-02
 -2.58912705e-02 -1.28498934e-02 -2.42452528e-02  1.54992808e-02
  1.31922122e-03 -3.60444859e-02  1.07856654e-01  1.15719354e-02
  2.76641045e-02 -7.13628009e-02 -1.69382527e-01  4.59165797e-02
  2.32845917e-02  5.25363609e-02 -6.77021667e-02 -4.44331281e-02
 -2.65752175e-03  4.19034101e-02  5.41093573e-02 -7.07785338e-02
  8.30750689e-02 -2.58416906e-02  2.32931003e-02 -1.04091791e-02
  5.33025116e-02  4.19870168e-02 -5.62758511e-03  6.66253548e-03
 -5.96220698e-03  4.84109409e-02 -1.48786187e-01 -4.16801684e-03
 -4.21963952e-04  5.23083087e-04  6.39553890e-02  7.59899318e-02
 -3.27881388e-02  1.37404748e-03  4.35518064e-02  6.68384954e-02
 -1.74868088e-02 -2.23666765e-02  4.21850048e-02  1.35234296e-02
  3.62628475e-02 -2.56274268e-02  8.41958635e-03  1.41457275e-01
 -8.26239679e-03 -5.78826759e-03 -4.49654423e-02  1.42285265e-02
 -1.43357143e-02 -1.17574282e-01  2.60487720e-02  3.92118320e-02
 -1.17376382e-02 -2.84898244e-02 -5.82987182e-02  3.82562429e-02
  2.42290478e-02 -5.05234115e-02  1.40272165e-02 -8.00097652e-04
  3.99295837e-02 -1.22233084e-03  4.75007901e-03  2.88337450e-33
 -1.83912013e-02 -7.63941407e-02  2.89734434e-02  5.34612648e-02
 -4.91366088e-02 -3.40830907e-02  3.57551835e-02  5.98723814e-02
 -1.25190364e-02 -3.14570479e-02  3.82531434e-02 -1.08747303e-01
 -2.06941683e-02  6.33264855e-02 -1.01680160e-02 -4.39285859e-02
 -3.57742086e-02 -9.40415729e-03 -7.47312093e-03 -1.42052919e-02
  9.10073146e-02  8.61275122e-02 -2.88180597e-02  4.15133052e-02
 -7.58184940e-02  7.93829411e-02  3.15150246e-02 -3.73619236e-02
  5.55413291e-02  6.98047923e-03  8.46341550e-02 -1.27535835e-01
 -2.89658271e-02 -1.33527431e-03  2.44295113e-02 -1.04715806e-02
 -2.06125397e-02  7.03288149e-03 -5.20115644e-02 -7.20746070e-02
 -3.87669355e-02 -2.21348670e-03 -2.17249207e-02 -1.39604993e-02
  3.55239622e-02 -3.38493511e-02 -2.57168803e-02  7.08448887e-02
 -6.02396503e-02  1.62823331e-02  5.51034920e-02  1.23301625e-01
  3.49040218e-02  7.67219486e-03 -3.45675014e-02  6.37071803e-02
  4.31747288e-02  4.23274636e-02 -4.87236083e-02 -5.08317798e-02
 -1.19200423e-02  9.61695611e-02 -2.57329307e-02  2.80414615e-02
  5.88483699e-02 -3.75783294e-02  4.10804749e-02 -1.21403992e-01
  2.21625660e-02  1.61969382e-03 -2.78539229e-02 -4.13825661e-02
  1.99084915e-02 -2.36450788e-02  9.79891419e-03  4.29250784e-02
 -5.54974861e-02 -2.28125490e-02 -9.85178053e-02 -1.02644280e-01
 -9.26498845e-02  5.84381148e-02  8.07464272e-02 -5.00590689e-02
  9.96823795e-03  5.12841018e-03  3.60119902e-02 -8.67004544e-02
  1.01953559e-01 -4.28097919e-02  9.62645223e-04 -6.44876016e-03
 -5.14352173e-02 -2.72452980e-02  5.22240549e-02 -2.36173952e-33
  7.15779588e-02  1.36036247e-01 -1.67685524e-02 -3.23208980e-02
  1.83541402e-02  8.72979779e-03  3.97244245e-02 -3.31865549e-02
 -6.19541714e-03 -1.67789925e-02 -6.86153248e-02 -7.09892213e-02
  1.11772092e-02 -4.59838845e-02  6.61908463e-02 -7.83420578e-02
  1.40431551e-02 -6.44776076e-02 -1.17686018e-03  4.06670608e-02
 -2.18556654e-02  6.53381795e-02  1.48398012e-01 -1.36117237e-02
  2.33513694e-02  6.47898181e-04  1.61020849e-02  9.68746766e-02
  3.15945335e-02  4.03919518e-02  6.49048313e-02  2.95413448e-03
 -6.61612973e-02 -1.98705494e-02  2.90862694e-02 -7.38015249e-02
  8.17196965e-02  2.06562430e-02 -6.40113130e-02  5.16407602e-02
  3.81324231e-03 -2.77160411e-03 -9.47594084e-03 -1.36301378e-02
  2.26712096e-02 -2.59271208e-02  1.51778357e-02  4.69001494e-02
  1.72656996e-03 -9.29917544e-02  1.74099598e-02 -2.89190859e-02
 -2.27714721e-02 -3.26598249e-02  8.73547494e-02  3.89734693e-02
  5.77505752e-02  1.12628881e-02  1.41607616e-02  4.88025881e-02
  4.12001684e-02 -1.15100503e-01 -2.29494385e-02 -3.94681878e-02
  7.86852464e-02 -1.84062566e-03 -2.25974750e-02 -1.91656221e-02
 -6.83195218e-02  2.87027042e-02  2.56412793e-02  4.35926914e-02
 -6.21959940e-03  2.96913423e-02  7.58721828e-02  4.90492508e-02
 -3.04873604e-02  4.37756144e-02  2.42002751e-03  1.98478834e-03
  1.69928707e-02 -2.31652744e-02  6.45388290e-03 -3.10806669e-02
  5.96109815e-02 -3.39692160e-02  6.12211302e-02  2.46772431e-02
 -5.53790219e-02 -5.83833754e-02 -4.77701649e-02  1.07924610e-01
  5.34644350e-02  1.15139121e-02 -4.74361051e-03 -4.20737365e-08
 -5.73064908e-02 -4.03533466e-02 -4.02388573e-02  3.75668742e-02
 -3.46398950e-02  6.62638294e-03 -7.02882558e-02 -8.62350315e-02
  4.32975963e-02 -5.98644167e-02  2.04087086e-02  1.62785370e-02
  4.40685153e-02  4.30967063e-02 -1.55010782e-02 -7.92906880e-02
  1.32171027e-02  1.56216202e-02 -4.81808670e-02  6.68972954e-02
  1.22919902e-02 -1.15450267e-02 -6.56530112e-02  7.50275154e-04
  1.07150739e-02  1.50407013e-03  9.69458297e-02  1.99950058e-02
  4.12313603e-02  4.61832471e-02 -1.85599476e-02  9.90774855e-02
  3.67252305e-02 -7.40897954e-02 -3.74040082e-02  2.28259936e-02
  7.00902194e-02  5.64648695e-02  2.82090623e-02  4.47845049e-02
  2.29850542e-02  1.59990191e-02 -4.52669077e-02 -8.09668098e-03
  6.21711053e-02 -5.98470457e-02  4.91412356e-02  9.72827803e-03
  2.17854753e-02  6.05469979e-02 -1.16813056e-01  5.25477566e-02
 -5.05718179e-02 -5.08722849e-02  8.15268140e-03 -8.49804431e-02
  4.78836559e-02 -1.96872745e-03 -1.67780779e-02  4.89578545e-02
  1.51991425e-03  1.71432216e-02  3.27748097e-02  1.36998808e-02]"
"trees

 trees/Tree.java: Contains state unique for each tree

package refactoring_guru.flyweight.example.trees;

import java.awt.*;

public class Tree {
    private int x;
    private int y;
    private TreeType type;

    public Tree(int x, int y, TreeType type) {
        this.x = x;
        this.y = y;
        this.type = type;
    }

    public void draw(Graphics g) {
        type.draw(g, x, y);
    }
}
 trees/TreeType.java: Contains state shared by several trees

package refactoring_guru.flyweight.example.trees;

import java.awt.*;

public class TreeType {
    private String name;
    private Color color;
    private String otherTreeData;

    public TreeType(String name, Color color, String otherTreeData) {
        this.name = name;
        this.color = color;
        this.otherTreeData = otherTreeData;
    }

    public void draw(Graphics g, int x, int y) {
        g.setColor(Color.BLACK);
        g.fillRect(x - 1, y, 3, 5);
        g.setColor(color);
        g.fillOval(x - 5, y - 10, 10, 10);
    }
}
 trees/TreeFactory.java: Encapsulates complexity of flyweight creation

package refactoring_guru.flyweight.example.trees;

import java.awt.*;
import java.util.HashMap;
import java.util.Map;

public class TreeFactory {
    static Map<String, TreeType> treeTypes = new HashMap<>();

    public static TreeType getTreeType(String name, Color color, String otherTreeData) {
        TreeType result = treeTypes.get(name);
        if (result == null) {
            result = new TreeType(name, color, otherTreeData);
            treeTypes.put(name, result);
        }
        return result;
    }
}
 forest

 forest/Forest.java: Forest, which we draw

package refactoring_guru.flyweight.example.forest;

import refactoring_guru.flyweight.example.trees.Tree;
import refactoring_guru.flyweight.example.trees.TreeFactory;
import refactoring_guru.flyweight.example.trees.TreeType;

import javax.swing.*;
import java.awt.*;
import java.util.ArrayList;
import java.util.List;

public class Forest extends JFrame {
    private List<Tree> trees = new ArrayList<>();

    public void plantTree(int x, int y, String name, Color color, String otherTreeData) {
        TreeType type = TreeFactory.getTreeType(name, color, otherTreeData);
        Tree tree = new Tree(x, y, type);
        trees.add(tree);
    }

    @Override
    public void paint(Graphics graphics) {
        for (Tree tree : trees) {
            tree.draw(graphics);
        }
    }
}
 Demo.java: Client code

package refactoring_guru.flyweight.example;

import refactoring_guru.flyweight.example.forest.Forest;

import java.awt.*;

public class Demo {
    static int CANVAS_SIZE = 500;
    static int TREES_TO_DRAW = 1000000;
    static int TREE_TYPES = 2;

    public static void main(String[] args) {
        Forest forest = new Forest();
        for (int i = 0; i < Math.floor(TREES_TO_DRAW / TREE_TYPES); i++) {
            forest.plantTree(random(0, CANVAS_SIZE), random(0, CANVAS_SIZE),
                    ""Summer Oak"", Color.GREEN, ""Oak texture stub"");
            forest.plantTree(random(0, CANVAS_SIZE), random(0, CANVAS_SIZE),
                    ""Autumn Oak"", Color.ORANGE, ""Autumn Oak texture stub"");
        }
        forest.setSize(CANVAS_SIZE, CANVAS_SIZE);
        forest.setVisible(true);

        System.out.println(TREES_TO_DRAW + "" trees drawn"");
        System.out.println(""---------------------"");
        System.out.println(""Memory usage:"");
        System.out.println(""Tree size (8 bytes) * "" + TREES_TO_DRAW);
        System.out.println(""+ TreeTypes size (~30 bytes) * "" + TREE_TYPES + """");
        System.out.println(""---------------------"");
        System.out.println(""Total: "" + ((TREES_TO_DRAW * 8 + TREE_TYPES * 30) / 1024 / 1024) +
                ""MB (instead of "" + ((TREES_TO_DRAW * 38) / 1024 / 1024) + ""MB)"");
    }

    private static int random(int min, int max) {
        return min + (int) (Math.random() * ((max - min) + 1));
    }
}",Java,Flyweight,Refactoring Guru,https://refactoring.guru/design-patterns/flyweight/java/example#example-0,"[ 6.56587034e-02  6.19957596e-02  2.27622464e-02  2.10395027e-02
  6.45128777e-03 -5.98662123e-02  4.75021228e-02  4.28544581e-02
 -6.37905747e-02  2.83229407e-02 -3.14053483e-02 -5.77074625e-02
  6.73127547e-02 -5.01236841e-02 -5.36975935e-02  1.42635060e-02
 -6.81135207e-02  6.36483356e-02 -5.62661067e-02 -1.03685603e-01
  9.50804949e-02 -5.00029325e-02 -4.41224575e-02  1.22418785e-02
  3.67537998e-02 -2.74024867e-02 -5.25530092e-02  8.56599957e-03
  2.82077398e-03 -5.31669781e-02 -9.97215789e-03  3.29258405e-02
  6.01111241e-02  2.67429426e-02 -9.24111605e-02  1.03837496e-03
 -6.50449917e-02 -6.11232929e-02  5.05735446e-03  1.99684091e-02
 -7.69757256e-02  1.42067775e-01 -1.07410895e-02 -1.27199003e-02
 -1.65383521e-04  1.58487801e-02 -7.91779831e-02 -6.48362190e-03
  1.70011427e-02  3.93354846e-03 -3.64401639e-02 -3.23400721e-02
 -8.57435539e-02 -6.84949979e-02  3.30683105e-02 -1.38781229e-02
  2.70746183e-02 -5.71197905e-02 -2.66071521e-02  1.82666760e-02
  1.24313943e-02  3.92944515e-02 -3.03554777e-02 -3.02604418e-02
  2.52877679e-02 -3.92802991e-04  1.38836550e-02  1.74188036e-02
  5.13238758e-02 -5.38449362e-02  1.43922260e-02  8.42822194e-02
 -1.45238014e-02  8.01421702e-02 -5.15535416e-04  2.22485401e-02
  5.30471094e-03  3.48768085e-02 -2.09080521e-02 -6.42104149e-02
 -1.12174399e-01  2.08324045e-02 -3.83259468e-02  1.46765336e-02
  6.31725192e-02  2.50675641e-02 -6.26183860e-03  7.22639859e-02
  1.70770325e-02  6.71250448e-02 -5.68904802e-02  3.63970846e-02
 -2.71000843e-02  7.11986125e-02 -4.76125740e-02  6.68173730e-02
  4.16024104e-02 -1.05685219e-01 -4.78941090e-02  8.34278315e-02
 -3.34209502e-02  1.31515609e-02  1.25758946e-01 -5.73017225e-02
 -1.93591788e-02 -3.29455510e-02 -6.51325807e-02 -9.04487912e-03
 -8.08123779e-03 -2.89989710e-02  5.86640742e-03 -1.97344702e-02
 -4.19742577e-02  8.50915462e-02 -3.18531878e-02 -1.10748308e-02
 -2.15558652e-02 -4.37649153e-02 -6.84794486e-02  7.86852930e-03
  7.06939176e-02  3.02974470e-02  7.18329288e-03 -3.90037559e-02
  3.27948332e-02 -8.76740646e-03 -4.50787842e-02  2.94448019e-33
 -2.21695192e-03 -9.52687562e-02  5.56528717e-02  5.30438237e-02
  6.70122132e-02 -2.10245494e-02  6.15070621e-03 -5.15987724e-03
  3.27867977e-02  3.01772021e-02 -1.02580681e-01 -6.85796887e-02
 -1.84404501e-03 -1.89666077e-02  9.81644616e-02 -4.34859917e-02
  3.20077017e-02 -6.85345265e-04 -6.31532446e-02 -1.40077854e-02
 -3.68681573e-03  4.60283644e-02 -3.75310220e-02 -4.51824218e-02
  4.12583202e-02  4.11218889e-02  2.99963076e-02 -3.08366795e-03
 -1.00578426e-03  1.43212965e-02  6.31475151e-02 -6.64283857e-02
 -5.20508476e-02 -5.57894446e-03  3.20010260e-02 -6.17647842e-02
  7.13523477e-02 -3.16967443e-02 -2.95492932e-02 -9.40837488e-02
 -2.23745164e-02 -1.16703054e-02  8.05892572e-02  1.02579100e-02
  3.08577027e-02  1.65226925e-02  3.81599180e-03  6.36219531e-02
 -8.50062296e-02  9.44630802e-02 -2.38623992e-02  1.06447659e-01
  7.61118457e-02  3.61655876e-02 -4.11058962e-02  5.42862229e-02
  6.76223487e-02  8.27724338e-02  1.09466277e-02  1.44970953e-01
  3.02403118e-03  4.00893167e-02  3.85993579e-03  6.32434934e-02
  2.30386993e-03  8.05409849e-02 -3.48037519e-02 -8.54327679e-02
  2.66244188e-02 -2.72908685e-04 -2.78819888e-03 -2.55613029e-02
  2.80514639e-02 -4.98320954e-03 -6.68113679e-02 -3.39032635e-02
  3.44095528e-02 -2.15895828e-02 -1.15160763e-01 -4.10423316e-02
 -7.13215545e-02  1.03883361e-02  2.65323687e-02 -5.89421168e-02
 -6.55952888e-03 -6.24129884e-02  5.63066788e-02  2.53881849e-02
  2.90277856e-03 -4.48010815e-03 -4.63717058e-02  2.26593614e-02
  4.66238670e-02 -6.64853752e-02  4.42977510e-02 -4.22954806e-33
 -6.26624003e-02  1.97154675e-02  4.05405872e-02  5.48452884e-03
  4.07420658e-02  9.10968985e-03 -7.40985945e-02 -5.67145199e-02
 -6.10123239e-02 -2.60140896e-02 -6.67955577e-02  8.25916603e-02
  1.05024911e-02  2.65958067e-03  8.03244859e-02 -4.47847620e-02
  1.99838132e-02  6.88400865e-02 -3.49942371e-02  1.89074557e-02
 -8.70286603e-04  1.18871525e-01  6.68977154e-03  8.71510059e-03
 -5.30831702e-03  6.56889053e-03 -3.46146114e-02  6.52433410e-02
 -2.31568217e-02 -8.38506021e-05  4.16140407e-02 -5.65068573e-02
 -2.74748914e-02 -1.29611297e-02  9.82712023e-03 -1.65577903e-01
  8.37108046e-02 -5.24169765e-02 -1.31172165e-02  1.32404298e-01
  6.46511167e-02 -9.07279402e-02 -1.46046942e-02 -1.15759252e-02
  1.41425692e-02 -5.24373632e-03 -4.05262820e-02  1.51094170e-02
  2.23251544e-02 -3.96212153e-02  1.06000891e-02 -4.87420782e-02
 -3.93551998e-02  1.54473158e-02  6.86443448e-02  1.89589672e-02
 -2.86330329e-03  7.20952377e-02  1.10250346e-01  3.07409894e-02
 -7.39123821e-02 -1.02637738e-01 -7.41535276e-02 -4.14212234e-02
  1.11413114e-02 -8.27154145e-02 -5.66269532e-02 -9.24027339e-02
 -3.85006033e-02  2.57535279e-02 -3.85455452e-02  1.22922599e-01
 -4.42830399e-02 -1.05426349e-02  4.60004620e-03  1.57697243e-03
  3.32779586e-02  4.87577170e-02  3.09984442e-02 -2.60841008e-02
 -4.68790159e-03  1.33904237e-02  4.78468426e-02  1.63557082e-02
  6.90637156e-02 -3.12234703e-02 -1.16105145e-02  1.49440467e-02
  1.77009534e-02 -2.86472756e-02 -2.90877242e-02  7.66627938e-02
  4.58377786e-02  4.59345058e-02 -2.20545940e-02 -4.89497722e-08
 -4.59143780e-02 -2.44321879e-02  1.64129939e-02  3.59117314e-02
  9.43927914e-02  6.11962425e-03  3.30064334e-02  5.60207851e-02
 -5.46575338e-02 -4.65629734e-02  7.95759410e-02  4.80772816e-02
  1.44029455e-03  5.16385175e-02  8.44824761e-02 -8.66052806e-02
 -4.08646017e-02 -3.63537632e-02 -5.63827753e-02  8.95677879e-02
 -5.24502248e-03 -6.43071681e-02 -7.22241774e-02  7.05931932e-02
 -3.36979553e-02 -1.07074253e-01  7.91767910e-02  4.91096787e-02
  1.59539562e-02  7.10225031e-02  1.83990896e-02  7.41938502e-02
  3.20153572e-02  3.37936208e-02 -4.50427085e-02 -1.98566858e-02
 -2.80871112e-02  9.13231149e-02  1.62093504e-03  4.93823066e-02
 -3.85049321e-02 -3.56558003e-02  2.80952459e-04 -2.67017335e-02
  4.32069413e-02 -4.60214503e-02 -1.77521054e-02  1.84271932e-02
  2.90866513e-02 -8.58085987e-04 -8.04799572e-02 -1.36121660e-02
  8.38827994e-03 -8.01252127e-02  1.00308564e-02 -5.92682585e-02
  8.30940157e-03 -3.00071090e-02  8.54594540e-03  8.16201642e-02
  4.90724258e-02 -1.00075789e-01 -2.01762877e-02 -6.12881454e-03]"
" some_cool_media_library

 some_cool_media_library/ThirdPartyYouTubeLib.java: Remote service interface

package refactoring_guru.proxy.example.some_cool_media_library;

import java.util.HashMap;

public interface ThirdPartyYouTubeLib {
    HashMap<String, Video> popularVideos();

    Video getVideo(String videoId);
}
 some_cool_media_library/ThirdPartyYouTubeClass.java: Remote service implementation

package refactoring_guru.proxy.example.some_cool_media_library;

import java.util.HashMap;

public class ThirdPartyYouTubeClass implements ThirdPartyYouTubeLib {

    @Override
    public HashMap<String, Video> popularVideos() {
        connectToServer(""http://www.youtube.com"");
        return getRandomVideos();
    }

    @Override
    public Video getVideo(String videoId) {
        connectToServer(""http://www.youtube.com/"" + videoId);
        return getSomeVideo(videoId);
    }

    // -----------------------------------------------------------------------
    // Fake methods to simulate network activity. They as slow as a real life.

    private int random(int min, int max) {
        return min + (int) (Math.random() * ((max - min) + 1));
    }

    private void experienceNetworkLatency() {
        int randomLatency = random(5, 10);
        for (int i = 0; i < randomLatency; i++) {
            try {
                Thread.sleep(100);
            } catch (InterruptedException ex) {
                ex.printStackTrace();
            }
        }
    }

    private void connectToServer(String server) {
        System.out.print(""Connecting to "" + server + ""... "");
        experienceNetworkLatency();
        System.out.print(""Connected!"" + ""\n"");
    }

    private HashMap<String, Video> getRandomVideos() {
        System.out.print(""Downloading populars... "");

        experienceNetworkLatency();
        HashMap<String, Video> hmap = new HashMap<String, Video>();
        hmap.put(""catzzzzzzzzz"", new Video(""sadgahasgdas"", ""Catzzzz.avi""));
        hmap.put(""mkafksangasj"", new Video(""mkafksangasj"", ""Dog play with ball.mp4""));
        hmap.put(""dancesvideoo"", new Video(""asdfas3ffasd"", ""Dancing video.mpq""));
        hmap.put(""dlsdk5jfslaf"", new Video(""dlsdk5jfslaf"", ""Barcelona vs RealM.mov""));
        hmap.put(""3sdfgsd1j333"", new Video(""3sdfgsd1j333"", ""Programing lesson#1.avi""));

        System.out.print(""Done!"" + ""\n"");
        return hmap;
    }

    private Video getSomeVideo(String videoId) {
        System.out.print(""Downloading video... "");

        experienceNetworkLatency();
        Video video = new Video(videoId, ""Some video title"");

        System.out.print(""Done!"" + ""\n"");
        return video;
    }

}
 some_cool_media_library/Video.java: Video file

package refactoring_guru.proxy.example.some_cool_media_library;

public class Video {
    public String id;
    public String title;
    public String data;

    Video(String id, String title) {
        this.id = id;
        this.title = title;
        this.data = ""Random video."";
    }
}
 proxy

 proxy/YouTubeCacheProxy.java: Caching proxy

package refactoring_guru.proxy.example.proxy;

import refactoring_guru.proxy.example.some_cool_media_library.ThirdPartyYouTubeClass;
import refactoring_guru.proxy.example.some_cool_media_library.ThirdPartyYouTubeLib;
import refactoring_guru.proxy.example.some_cool_media_library.Video;

import java.util.HashMap;

public class YouTubeCacheProxy implements ThirdPartyYouTubeLib {
    private ThirdPartyYouTubeLib youtubeService;
    private HashMap<String, Video> cachePopular = new HashMap<String, Video>();
    private HashMap<String, Video> cacheAll = new HashMap<String, Video>();

    public YouTubeCacheProxy() {
        this.youtubeService = new ThirdPartyYouTubeClass();
    }

    @Override
    public HashMap<String, Video> popularVideos() {
        if (cachePopular.isEmpty()) {
            cachePopular = youtubeService.popularVideos();
        } else {
            System.out.println(""Retrieved list from cache."");
        }
        return cachePopular;
    }

    @Override
    public Video getVideo(String videoId) {
        Video video = cacheAll.get(videoId);
        if (video == null) {
            video = youtubeService.getVideo(videoId);
            cacheAll.put(videoId, video);
        } else {
            System.out.println(""Retrieved video '"" + videoId + ""' from cache."");
        }
        return video;
    }

    public void reset() {
        cachePopular.clear();
        cacheAll.clear();
    }
}
 downloader

 downloader/YouTubeDownloader.java: Media downloader app

package refactoring_guru.proxy.example.downloader;

import refactoring_guru.proxy.example.some_cool_media_library.ThirdPartyYouTubeLib;
import refactoring_guru.proxy.example.some_cool_media_library.Video;

import java.util.HashMap;

public class YouTubeDownloader {
    private ThirdPartyYouTubeLib api;

    public YouTubeDownloader(ThirdPartyYouTubeLib api) {
        this.api = api;
    }

    public void renderVideoPage(String videoId) {
        Video video = api.getVideo(videoId);
        System.out.println(""\n-------------------------------"");
        System.out.println(""Video page (imagine fancy HTML)"");
        System.out.println(""ID: "" + video.id);
        System.out.println(""Title: "" + video.title);
        System.out.println(""Video: "" + video.data);
        System.out.println(""-------------------------------\n"");
    }

    public void renderPopularVideos() {
        HashMap<String, Video> list = api.popularVideos();
        System.out.println(""\n-------------------------------"");
        System.out.println(""Most popular videos on YouTube (imagine fancy HTML)"");
        for (Video video : list.values()) {
            System.out.println(""ID: "" + video.id + "" / Title: "" + video.title);
        }
        System.out.println(""-------------------------------\n"");
    }
}
 Demo.java: Initialization code

package refactoring_guru.proxy.example;

import refactoring_guru.proxy.example.downloader.YouTubeDownloader;
import refactoring_guru.proxy.example.proxy.YouTubeCacheProxy;
import refactoring_guru.proxy.example.some_cool_media_library.ThirdPartyYouTubeClass;

public class Demo {

    public static void main(String[] args) {
        YouTubeDownloader naiveDownloader = new YouTubeDownloader(new ThirdPartyYouTubeClass());
        YouTubeDownloader smartDownloader = new YouTubeDownloader(new YouTubeCacheProxy());

        long naive = test(naiveDownloader);
        long smart = test(smartDownloader);
        System.out.print(""Time saved by caching proxy: "" + (naive - smart) + ""ms"");

    }

    private static long test(YouTubeDownloader downloader) {
        long startTime = System.currentTimeMillis();

        // User behavior in our app:
        downloader.renderPopularVideos();
        downloader.renderVideoPage(""catzzzzzzzzz"");
        downloader.renderPopularVideos();
        downloader.renderVideoPage(""dancesvideoo"");
        // Users might visit the same page quite often.
        downloader.renderVideoPage(""catzzzzzzzzz"");
        downloader.renderVideoPage(""someothervid"");

        long estimatedTime = System.currentTimeMillis() - startTime;
        System.out.print(""Time elapsed: "" + estimatedTime + ""ms\n"");
        return estimatedTime;
    }
}",Java,Proxy,Refactoring Guru,https://refactoring.guru/design-patterns/proxy/java/example#example-0,"[-1.77579969e-02 -1.27411578e-02 -4.28817011e-02 -1.10762127e-01
 -2.55642105e-02  3.22143286e-02  3.00038960e-02  1.85077097e-02
 -2.30464898e-02 -4.45971452e-03  2.93728597e-02  2.65504909e-03
  4.00256962e-02 -7.11672306e-02  3.56865712e-02 -4.60705049e-02
  2.31436882e-02 -6.54290477e-03 -9.96515155e-02 -7.20756203e-02
  6.92563727e-02 -1.05345093e-01  4.08343375e-02 -4.74881269e-02
  8.10185634e-03  2.56487280e-02  2.25705188e-02  1.84059311e-02
 -1.47913219e-02  7.52236182e-03  5.27192205e-02  1.52596552e-02
 -9.88121182e-02 -4.32382450e-02 -1.20945449e-03  2.59425845e-02
 -6.56183735e-02 -3.82564627e-02 -4.39038686e-02 -3.43598686e-02
 -3.36103560e-03  4.37946990e-02 -3.66281979e-02 -2.50292290e-02
 -5.31585738e-02 -5.50482869e-02 -2.57612634e-02 -3.98014970e-02
  4.98062856e-02 -2.79311221e-02 -9.15592983e-02 -1.23144658e-02
 -4.20662649e-02 -1.31457811e-02  6.04799157e-03  2.90306658e-03
 -9.48167499e-03  5.22803552e-02 -2.40948014e-02  4.12160307e-02
 -3.04099987e-03 -5.01887240e-02  1.34231336e-02  1.75086670e-02
  3.95293199e-02 -6.25492632e-02  2.69437414e-02  1.35500561e-02
  4.78131250e-02 -3.64419073e-02 -1.02675684e-01  8.08173865e-02
 -2.78272703e-02  5.90848662e-02 -6.08877391e-02 -3.26237492e-02
 -8.37283768e-03  1.47646870e-02 -1.77065805e-02 -9.22938585e-02
  3.11910138e-02 -4.73048128e-02  6.56994467e-04  1.35720987e-02
  6.85537606e-02 -2.99063381e-02 -6.97155297e-03 -4.67113592e-02
 -2.45348690e-03  4.67556827e-02 -9.72128212e-02  8.13633725e-02
  8.36303830e-03  5.21809421e-02  2.31502950e-02  9.02319029e-02
  7.03828223e-03 -2.42791474e-02 -2.09089760e-02  1.18908167e-01
 -1.69551354e-02  2.00335402e-02  2.44414527e-02  3.71458381e-02
  5.52585386e-02 -6.42310902e-02  5.38283726e-03  1.03146799e-01
 -3.64648947e-03 -4.14085248e-03 -5.99644743e-02  4.79862822e-04
 -4.40002456e-02 -5.85785657e-02 -5.69680557e-02  4.24181484e-02
  5.11578545e-02 -2.21220598e-05 -1.46340160e-02 -6.86105527e-03
  8.69723186e-02  1.24417963e-02  2.80295350e-02 -7.06014112e-02
  2.10404471e-02 -3.16216648e-02  2.77793910e-02  3.64490750e-33
  5.23462668e-02 -1.40208259e-01 -2.72976211e-03  5.86807914e-02
  1.94912609e-02 -6.14882493e-03  6.76566362e-02  7.28011429e-02
  7.52103841e-03 -4.26198654e-02  2.72317622e-02 -9.96982455e-02
 -1.76759884e-02 -7.08811171e-03  4.40267008e-03 -7.90921971e-03
 -3.94147187e-02  1.57662649e-02  2.02606041e-02  1.95999257e-02
  5.76700307e-02 -2.21907608e-02  2.89104437e-03 -4.16968912e-02
 -3.64774242e-02  7.14837685e-02  2.77412776e-02  4.43047052e-03
 -1.30801648e-02  3.06966379e-02  1.41749084e-01 -7.36363456e-02
 -6.31111786e-02  1.08849732e-02  6.59844875e-02 -3.03227976e-02
 -2.91858129e-02 -1.54193686e-02 -7.77832642e-02 -8.00849646e-02
 -9.78039671e-03 -5.03898486e-02 -2.15912573e-02 -2.74941754e-02
 -4.82661985e-02 -6.46116808e-02 -3.35942470e-02  5.95748499e-02
 -2.93312315e-02  5.13156541e-02  6.44989237e-02  9.51686352e-02
  3.73157151e-02 -6.17004074e-02 -4.03421223e-02  6.20140731e-02
  2.05733590e-02  5.41743971e-02 -4.30318154e-02 -8.57566576e-03
 -5.56471273e-02  5.03853820e-02 -3.48231792e-02  1.17231328e-02
  2.82130204e-02  7.13451281e-02  4.46052663e-02 -7.76610076e-02
  7.08472207e-02 -3.82918976e-02 -3.03159822e-02 -1.41697414e-02
  8.15893412e-02 -4.41191047e-02 -8.00656620e-03  8.29838496e-03
 -8.23712274e-02 -1.61717851e-02 -1.06445059e-01 -6.62028566e-02
  1.65672600e-02 -5.33293150e-02 -1.90399233e-02  2.29939502e-02
 -6.05131201e-02  2.40023043e-02  6.08044006e-02 -9.00409445e-02
  3.83483879e-02  1.66337136e-02 -6.20468296e-02  7.58537427e-02
 -3.45580955e-03 -5.06006833e-03  2.50317585e-02 -4.05760189e-33
  2.94396468e-02  3.19765285e-02  2.85844281e-02 -6.54488616e-03
  1.22397736e-01 -8.20079003e-04  3.41216289e-02  1.97873320e-02
 -3.69725563e-02  2.14394573e-02 -2.98918933e-02 -5.64776435e-02
 -6.13341518e-02 -6.32875189e-02  3.95542793e-02  1.56581439e-02
  4.50063758e-02 -5.67036122e-02 -8.22686404e-03  2.98764184e-02
 -5.19202501e-02  1.29113033e-01  7.45961368e-02 -1.54818501e-02
  2.91138072e-03 -4.16340353e-03  2.17311527e-03  7.40384385e-02
  3.14570987e-03  2.00963318e-02  8.35182518e-02 -2.40802212e-04
 -1.04166187e-01 -2.20561326e-02  3.41838077e-02 -6.01299480e-02
  7.04638287e-02  4.35519516e-02 -5.07558398e-02  6.91667423e-02
  8.77223238e-02 -6.01458661e-02 -2.32169349e-02 -9.55218158e-04
  6.76414222e-02 -7.29524195e-02 -4.86466065e-02  4.15747315e-02
 -4.92331870e-02  4.83613834e-03  5.52391559e-02 -6.88896924e-02
 -1.96814481e-02  3.34070511e-02  1.15058571e-01  4.09711152e-02
  3.91205885e-02  1.86145622e-02  7.65164718e-02  4.46624607e-02
  6.38886765e-02 -1.45965621e-01 -5.14358841e-02  2.64608860e-02
  9.78317186e-02  1.20834140e-02  1.32952700e-04 -1.11503797e-02
 -4.26667258e-02  5.33017479e-02 -5.79315536e-02  3.26968208e-02
  2.74028536e-02 -3.17328200e-02  1.18793115e-01  5.38242934e-03
  1.93223488e-02  1.06744766e-02  2.54613850e-02  6.43857382e-03
 -2.54162420e-02  2.26719007e-02 -3.02792583e-02 -1.03943229e-01
  8.36281478e-02 -6.27804324e-02  3.25377919e-02  4.91853654e-02
 -5.07559776e-02 -1.00454457e-01 -2.97248904e-02  8.13994035e-02
 -2.14210860e-02  1.42135518e-02  2.60616783e-02 -5.16222087e-08
 -5.80846667e-02 -2.15975791e-02 -1.76745318e-02  7.87440166e-02
  2.20567323e-02  6.78353105e-03 -4.02437039e-02 -2.47509181e-02
  4.77360822e-02 -7.61573017e-02  5.70295714e-02  3.69130336e-02
  5.74682429e-02  3.88860665e-02 -1.96954347e-02 -1.25004679e-01
 -2.20182780e-02 -2.13616509e-02 -6.71724826e-02  5.45735694e-02
 -4.85273078e-02 -2.59749424e-02  9.91023495e-04 -3.22941691e-02
 -4.91777901e-03  2.68460903e-02  1.18521377e-01 -3.93975852e-03
  3.24818119e-02  3.68298888e-02 -6.11617416e-02  5.37247844e-02
  3.95561531e-02 -7.27564842e-02 -5.07976823e-02  1.98444575e-02
  3.00889998e-03 -2.61367708e-02  2.00782865e-02  9.90577191e-02
  3.85918617e-02  9.16646980e-03  2.16552690e-02  7.74894748e-03
  1.17586397e-01 -2.58501824e-02  5.49790740e-04  2.24014632e-02
  4.34326269e-02  6.90029785e-02 -1.10379286e-01 -3.43300663e-02
 -2.15091743e-02 -1.06369168e-01 -2.24721227e-02 -9.23926532e-02
  7.24813044e-02 -4.96527925e-02 -2.29207091e-02  7.74113685e-02
  7.40017146e-02 -1.12040592e-02 -1.29403602e-02  1.73502527e-02]"
"middleware

 middleware/Middleware.java: Basic validation interface

package refactoring_guru.chain_of_responsibility.example.middleware;

/**
 * Base middleware class.
 */
public abstract class Middleware {
    private Middleware next;

    /**
     * Builds chains of middleware objects.
     */
    public static Middleware link(Middleware first, Middleware... chain) {
        Middleware head = first;
        for (Middleware nextInChain: chain) {
            head.next = nextInChain;
            head = nextInChain;
        }
        return first;
    }

    /**
     * Subclasses will implement this method with concrete checks.
     */
    public abstract boolean check(String email, String password);

    /**
     * Runs check on the next object in chain or ends traversing if we're in
     * last object in chain.
     */
    protected boolean checkNext(String email, String password) {
        if (next == null) {
            return true;
        }
        return next.check(email, password);
    }
}
 middleware/ThrottlingMiddleware.java: Check whether the limit on the number of requests is reached

package refactoring_guru.chain_of_responsibility.example.middleware;

/**
 * ConcreteHandler. Checks whether there are too many failed login requests.
 */
public class ThrottlingMiddleware extends Middleware {
    private int requestPerMinute;
    private int request;
    private long currentTime;

    public ThrottlingMiddleware(int requestPerMinute) {
        this.requestPerMinute = requestPerMinute;
        this.currentTime = System.currentTimeMillis();
    }

    /**
     * Please, not that checkNext() call can be inserted both in the beginning
     * of this method and in the end.
     *
     * This gives much more flexibility than a simple loop over all middleware
     * objects. For instance, an element of a chain can change the order of
     * checks by running its check after all other checks.
     */
    public boolean check(String email, String password) {
        if (System.currentTimeMillis() > currentTime + 60_000) {
            request = 0;
            currentTime = System.currentTimeMillis();
        }

        request++;
        
        if (request > requestPerMinute) {
            System.out.println(""Request limit exceeded!"");
            Thread.currentThread().stop();
        }
        return checkNext(email, password);
    }
}
 middleware/UserExistsMiddleware.java: Check user’s credentials

package refactoring_guru.chain_of_responsibility.example.middleware;

import refactoring_guru.chain_of_responsibility.example.server.Server;

/**
 * ConcreteHandler. Checks whether a user with the given credentials exists.
 */
public class UserExistsMiddleware extends Middleware {
    private Server server;

    public UserExistsMiddleware(Server server) {
        this.server = server;
    }

    public boolean check(String email, String password) {
        if (!server.hasEmail(email)) {
            System.out.println(""This email is not registered!"");
            return false;
        }
        if (!server.isValidPassword(email, password)) {
            System.out.println(""Wrong password!"");
            return false;
        }
        return checkNext(email, password);
    }
}
 middleware/RoleCheckMiddleware.java: Check user’s role

package refactoring_guru.chain_of_responsibility.example.middleware;

/**
 * ConcreteHandler. Checks a user's role.
 */
public class RoleCheckMiddleware extends Middleware {
    public boolean check(String email, String password) {
        if (email.equals(""admin@example.com"")) {
            System.out.println(""Hello, admin!"");
            return true;
        }
        System.out.println(""Hello, user!"");
        return checkNext(email, password);
    }
}
 server

 server/Server.java: Authorization target

package refactoring_guru.chain_of_responsibility.example.server;

import refactoring_guru.chain_of_responsibility.example.middleware.Middleware;

import java.util.HashMap;
import java.util.Map;

/**
 * Server class.
 */
public class Server {
    private Map<String, String> users = new HashMap<>();
    private Middleware middleware;

    /**
     * Client passes a chain of object to server. This improves flexibility and
     * makes testing the server class easier.
     */
    public void setMiddleware(Middleware middleware) {
        this.middleware = middleware;
    }

    /**
     * Server gets email and password from client and sends the authorization
     * request to the chain.
     */
    public boolean logIn(String email, String password) {
        if (middleware.check(email, password)) {
            System.out.println(""Authorization have been successful!"");

            // Do something useful here for authorized users.

            return true;
        }
        return false;
    }

    public void register(String email, String password) {
        users.put(email, password);
    }

    public boolean hasEmail(String email) {
        return users.containsKey(email);
    }

    public boolean isValidPassword(String email, String password) {
        return users.get(email).equals(password);
    }
}
 Demo.java: Client code

package refactoring_guru.chain_of_responsibility.example;

import refactoring_guru.chain_of_responsibility.example.middleware.Middleware;
import refactoring_guru.chain_of_responsibility.example.middleware.RoleCheckMiddleware;
import refactoring_guru.chain_of_responsibility.example.middleware.ThrottlingMiddleware;
import refactoring_guru.chain_of_responsibility.example.middleware.UserExistsMiddleware;
import refactoring_guru.chain_of_responsibility.example.server.Server;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

/**
 * Demo class. Everything comes together here.
 */
public class Demo {
    private static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
    private static Server server;

    private static void init() {
        server = new Server();
        server.register(""admin@example.com"", ""admin_pass"");
        server.register(""user@example.com"", ""user_pass"");

        // All checks are linked. Client can build various chains using the same
        // components.
        Middleware middleware = Middleware.link(
            new ThrottlingMiddleware(2),
            new UserExistsMiddleware(server),
            new RoleCheckMiddleware()
        );

        // Server gets a chain from client code.
        server.setMiddleware(middleware);
    }

    public static void main(String[] args) throws IOException {
        init();

        boolean success;
        do {
            System.out.print(""Enter email: "");
            String email = reader.readLine();
            System.out.print(""Input password: "");
            String password = reader.readLine();
            success = server.logIn(email, password);
        } while (!success);
    }
}",Java,Chain of Responsibility,Refactoring Guru,https://refactoring.guru/design-patterns/chain-of-responsibility/java/example#example-0,"[-4.86223102e-02  5.47562540e-02 -2.63775568e-02 -1.02613047e-01
 -4.07727584e-02 -6.62645474e-02  3.73819098e-02  5.25674634e-02
 -3.64981294e-02  3.54111530e-02 -1.05609950e-02 -1.98651366e-02
  1.20363817e-01 -4.02495414e-02  1.68707746e-03 -9.99038224e-04
 -2.04200801e-02  5.06318659e-02  6.38077687e-03 -4.63654362e-02
  3.58744599e-02 -6.37285784e-02  1.49758989e-02  3.62201817e-02
 -8.72448161e-02 -4.67616729e-02  2.88717411e-02 -4.39530686e-02
 -9.92776901e-02  1.50511991e-02  2.86798999e-02 -7.88098481e-03
 -9.85606089e-02  5.84285986e-03 -6.23870902e-02  5.48133701e-02
  9.77373775e-03 -1.61365059e-03  1.91610474e-02 -1.00877225e-01
 -9.89752486e-02  4.61859070e-02 -3.61242928e-02 -4.11587162e-03
 -2.03581918e-02 -3.37026641e-02 -5.90021871e-02  1.87591333e-02
  3.47532541e-03 -2.50824429e-02 -5.89420237e-02 -4.93826456e-02
  4.00566347e-02 -3.64861824e-02  6.20434573e-03 -2.13534515e-02
 -2.31609643e-02 -1.51016358e-02 -1.45420851e-02 -2.50957645e-02
  2.31416104e-03 -5.17784758e-03 -1.19800773e-02  2.53409689e-05
  7.02271890e-03 -2.27670986e-02  4.38035913e-02 -2.41492945e-03
  3.13761532e-02 -2.06549335e-02 -3.26424539e-02  7.83601590e-03
 -4.76566665e-02  2.93871816e-02 -2.23124623e-02  3.94491199e-03
 -5.35786375e-02  8.29601195e-03 -8.66299029e-03 -6.15106784e-02
 -6.29188865e-02  5.18430322e-02 -4.50134929e-03 -1.10273669e-03
  2.29877010e-02  4.60339598e-02  2.61447728e-02  1.08278142e-02
 -4.82830172e-03  6.00630194e-02  5.43416739e-02  5.30646257e-02
 -2.97828484e-02 -3.22573707e-02  4.99654263e-02  9.30302665e-02
 -7.62708336e-02  1.20242471e-02 -6.44754395e-02  1.06353275e-01
  1.65691096e-02 -1.66827161e-02  4.17032130e-02 -5.92804477e-02
  1.22999154e-01 -1.98384933e-02  7.11556301e-02  3.62087339e-02
 -1.02598947e-02 -3.50479148e-02 -4.60730903e-02  2.21707523e-02
 -1.68510491e-03 -2.82891188e-02 -2.67837364e-02 -2.97860592e-03
  7.95564651e-02  4.87120375e-02 -3.40333171e-02  6.31714538e-02
  4.30509709e-02  2.07656268e-02  9.87710152e-03 -5.38517535e-02
  5.52025177e-02 -1.77063681e-02 -9.90336644e-04  5.41311769e-33
 -2.25715283e-02 -2.90620532e-02 -9.81432851e-03  4.74741757e-02
 -3.28968912e-02 -2.18502954e-02  3.97761241e-02  3.81019339e-02
 -4.63110618e-02 -4.51684073e-02 -3.13571952e-02 -1.68375634e-02
  6.24634139e-02 -5.88132553e-02  4.68818843e-02 -5.78650422e-02
  5.83215244e-02  1.37982089e-02  1.00010887e-01 -1.89419128e-02
 -5.88855054e-03 -8.44888017e-02  4.82558236e-02 -1.41347311e-02
  1.25639150e-02 -2.06882088e-03 -9.32731107e-03  6.71008378e-02
 -2.76675671e-02  2.11302247e-02  1.17795967e-01 -5.98123223e-02
 -6.47691339e-02  1.16077654e-01  2.22844514e-03 -1.95090957e-02
  4.43848930e-02 -1.78991202e-02  4.66867257e-03 -1.15830809e-01
 -5.38285226e-02 -4.93916087e-02  3.97475995e-02  4.29116152e-02
 -5.37076108e-02 -8.44580159e-02 -7.78209865e-02  3.89645435e-02
  1.69329140e-02  6.68780133e-02  4.02272567e-02  3.27592418e-02
  3.75619493e-02 -4.79475074e-02 -4.61739525e-02  1.56116867e-02
  2.58982717e-03  4.13225517e-02 -5.65011762e-02  7.61140957e-02
 -5.39898984e-02  1.25521813e-02 -6.97899610e-02  2.54173521e-02
  3.09432633e-02 -3.29597183e-02 -8.14677328e-02 -8.62059891e-02
  5.53845465e-02 -6.44399673e-02 -1.43206827e-02 -3.14078927e-02
  6.27001971e-02  8.63640457e-02 -8.44029039e-02 -1.07260989e-02
 -3.33161876e-02  1.27401408e-02 -6.72023594e-02 -7.29595348e-02
 -9.70220752e-03  1.89858186e-03 -8.15030485e-02  9.86166745e-02
  2.64531211e-03  2.73219384e-02 -4.26776242e-03  2.57382635e-02
  4.24081087e-02  3.82751897e-02 -2.66895890e-02 -3.89373377e-02
  6.16435595e-02  3.63757312e-02  2.27591284e-02 -5.80082769e-33
  6.72419509e-03 -6.52328320e-03  3.13944966e-02 -2.34304219e-02
  8.64434242e-02  6.36908785e-02  3.08789294e-02 -2.60192156e-02
 -1.37359902e-01  1.00686187e-02 -1.72646390e-03 -3.09954770e-03
  1.40685989e-02  3.42594162e-02  4.02095392e-02 -1.23595130e-02
  2.04943698e-02 -2.38810368e-02  4.08316078e-03  2.19074357e-02
 -2.20964085e-02  1.42504618e-01  2.64549125e-02  5.76487277e-03
 -3.30320932e-02  4.22082990e-02 -8.36402327e-02  8.06989968e-02
 -4.68357559e-03  5.46108512e-03  6.07661083e-02 -4.09214664e-03
 -8.72042682e-03 -5.37685445e-03 -2.79529253e-03 -1.65644005e-01
  6.39177561e-02  1.16089433e-01 -2.14398783e-02  9.44789425e-02
  1.39522552e-01 -5.22057265e-02 -8.72286444e-04 -6.07158616e-03
  4.39895913e-02 -4.79334071e-02 -2.01383159e-02  1.88251790e-02
 -4.12177704e-02  8.80604051e-03 -6.10192567e-02 -8.42100382e-02
  1.03533320e-01 -2.43485644e-02  4.93387282e-02  6.26846105e-02
  8.13113898e-02 -5.27211502e-02  1.16726980e-01  1.67971384e-03
  6.07156754e-03 -1.01638816e-01  4.05504629e-02  1.13089025e-01
  9.42214504e-02 -4.63412404e-02 -7.60305347e-03  1.70416944e-02
 -4.33911607e-02  5.40969819e-02 -2.90221367e-02  3.45187709e-02
 -5.12780733e-02 -4.82221507e-02  1.25903800e-01  7.69577175e-03
 -4.83155325e-02 -5.54658026e-02 -1.43548185e-02  1.97330378e-02
  2.89357882e-02 -5.28653674e-02 -8.65301415e-02 -5.40657667e-04
 -1.71902105e-02 -1.33118004e-01  2.11227518e-02 -2.21104827e-02
 -1.02121560e-02 -5.58595955e-02 -1.80496369e-02  5.17207906e-02
 -4.92883548e-02 -2.80716661e-02 -2.97153518e-02 -5.49451684e-08
 -9.14206170e-03 -6.82816803e-02  6.04524240e-02  7.15842843e-02
  6.36209920e-02  3.12309321e-02 -3.81451510e-02 -8.76114443e-02
  9.62775014e-03 -2.54263985e-03 -1.84130408e-02  4.29736264e-02
  7.14351237e-02 -3.16389315e-02  1.12780146e-02 -7.02008232e-02
 -6.30280981e-03 -6.40112534e-02 -8.38875100e-02  2.09305603e-02
 -1.21710887e-02 -3.76494266e-02 -5.39816059e-02  6.63359985e-02
  3.92751992e-02  5.80726843e-03  9.93628502e-02  6.34818822e-02
 -2.40041856e-02  4.62308340e-02 -6.86422586e-02  4.71166708e-02
  1.79330744e-02 -2.30714995e-02 -8.95742625e-02  6.27351105e-02
 -5.68955652e-02 -6.23483537e-03  1.27040700e-03  8.42148438e-02
  3.39516401e-02  3.32264714e-02 -6.88483519e-03  7.72373844e-03
  7.94845447e-02 -2.04981342e-02 -1.11423396e-02  3.34690735e-02
  2.65111644e-02 -2.76440550e-02 -1.05884247e-01  1.85350329e-02
  2.22736709e-02  4.16869530e-03 -6.71024546e-02 -3.38313319e-02
  6.32208064e-02 -6.07106797e-02  2.62816846e-02  5.92865497e-02
  6.92855492e-02  6.23170026e-02  9.16515826e-04 -1.34581160e-02]"
"iterators

 iterators/ProfileIterator.java: Defines profile interface

package refactoring_guru.iterator.example.iterators;

import refactoring_guru.iterator.example.profile.Profile;

public interface ProfileIterator {
    boolean hasNext();

    Profile getNext();

    void reset();
}
 iterators/FacebookIterator.java: Implements iteration over Facebook profiles

package refactoring_guru.iterator.example.iterators;

import refactoring_guru.iterator.example.profile.Profile;
import refactoring_guru.iterator.example.social_networks.Facebook;

import java.util.ArrayList;
import java.util.List;

public class FacebookIterator implements ProfileIterator {
    private Facebook facebook;
    private String type;
    private String email;
    private int currentPosition = 0;
    private List<String> emails = new ArrayList<>();
    private List<Profile> profiles = new ArrayList<>();

    public FacebookIterator(Facebook facebook, String type, String email) {
        this.facebook = facebook;
        this.type = type;
        this.email = email;
    }

    private void lazyLoad() {
        if (emails.size() == 0) {
            List<String> profiles = facebook.requestProfileFriendsFromFacebook(this.email, this.type);
            for (String profile : profiles) {
                this.emails.add(profile);
                this.profiles.add(null);
            }
        }
    }

    @Override
    public boolean hasNext() {
        lazyLoad();
        return currentPosition < emails.size();
    }

    @Override
    public Profile getNext() {
        if (!hasNext()) {
            return null;
        }

        String friendEmail = emails.get(currentPosition);
        Profile friendProfile = profiles.get(currentPosition);
        if (friendProfile == null) {
            friendProfile = facebook.requestProfileFromFacebook(friendEmail);
            profiles.set(currentPosition, friendProfile);
        }
        currentPosition++;
        return friendProfile;
    }

    @Override
    public void reset() {
        currentPosition = 0;
    }
}
 iterators/LinkedInIterator.java: Implements iteration over LinkedIn profiles

package refactoring_guru.iterator.example.iterators;

import refactoring_guru.iterator.example.profile.Profile;
import refactoring_guru.iterator.example.social_networks.LinkedIn;

import java.util.ArrayList;
import java.util.List;

public class LinkedInIterator implements ProfileIterator {
    private LinkedIn linkedIn;
    private String type;
    private String email;
    private int currentPosition = 0;
    private List<String> emails = new ArrayList<>();
    private List<Profile> contacts = new ArrayList<>();

    public LinkedInIterator(LinkedIn linkedIn, String type, String email) {
        this.linkedIn = linkedIn;
        this.type = type;
        this.email = email;
    }

    private void lazyLoad() {
        if (emails.size() == 0) {
            List<String> profiles = linkedIn.requestRelatedContactsFromLinkedInAPI(this.email, this.type);
            for (String profile : profiles) {
                this.emails.add(profile);
                this.contacts.add(null);
            }
        }
    }

    @Override
    public boolean hasNext() {
        lazyLoad();
        return currentPosition < emails.size();
    }

    @Override
    public Profile getNext() {
        if (!hasNext()) {
            return null;
        }

        String friendEmail = emails.get(currentPosition);
        Profile friendContact = contacts.get(currentPosition);
        if (friendContact == null) {
            friendContact = linkedIn.requestContactInfoFromLinkedInAPI(friendEmail);
            contacts.set(currentPosition, friendContact);
        }
        currentPosition++;
        return friendContact;
    }

    @Override
    public void reset() {
        currentPosition = 0;
    }
}
 social_networks

 social_networks/SocialNetwork.java: Defines common social network interface

package refactoring_guru.iterator.example.social_networks;

import refactoring_guru.iterator.example.iterators.ProfileIterator;

public interface SocialNetwork {
    ProfileIterator createFriendsIterator(String profileEmail);

    ProfileIterator createCoworkersIterator(String profileEmail);
}
 social_networks/Facebook.java: Facebook

package refactoring_guru.iterator.example.social_networks;

import refactoring_guru.iterator.example.iterators.FacebookIterator;
import refactoring_guru.iterator.example.iterators.ProfileIterator;
import refactoring_guru.iterator.example.profile.Profile;

import java.util.ArrayList;
import java.util.List;

public class Facebook implements SocialNetwork {
    private List<Profile> profiles;

    public Facebook(List<Profile> cache) {
        if (cache != null) {
            this.profiles = cache;
        } else {
            this.profiles = new ArrayList<>();
        }
    }

    public Profile requestProfileFromFacebook(String profileEmail) {
        // Here would be a POST request to one of the Facebook API endpoints.
        // Instead, we emulates long network connection, which you would expect
        // in the real life...
        simulateNetworkLatency();
        System.out.println(""Facebook: Loading profile '"" + profileEmail + ""' over the network..."");

        // ...and return test data.
        return findProfile(profileEmail);
    }

    public List<String> requestProfileFriendsFromFacebook(String profileEmail, String contactType) {
        // Here would be a POST request to one of the Facebook API endpoints.
        // Instead, we emulates long network connection, which you would expect
        // in the real life...
        simulateNetworkLatency();
        System.out.println(""Facebook: Loading '"" + contactType + ""' list of '"" + profileEmail + ""' over the network..."");

        // ...and return test data.
        Profile profile = findProfile(profileEmail);
        if (profile != null) {
            return profile.getContacts(contactType);
        }
        return null;
    }

    private Profile findProfile(String profileEmail) {
        for (Profile profile : profiles) {
            if (profile.getEmail().equals(profileEmail)) {
                return profile;
            }
        }
        return null;
    }

    private void simulateNetworkLatency() {
        try {
            Thread.sleep(2500);
        } catch (InterruptedException ex) {
            ex.printStackTrace();
        }
    }

    @Override
    public ProfileIterator createFriendsIterator(String profileEmail) {
        return new FacebookIterator(this, ""friends"", profileEmail);
    }

    @Override
    public ProfileIterator createCoworkersIterator(String profileEmail) {
        return new FacebookIterator(this, ""coworkers"", profileEmail);
    }

}
 social_networks/LinkedIn.java: LinkedIn

package refactoring_guru.iterator.example.social_networks;

import refactoring_guru.iterator.example.iterators.LinkedInIterator;
import refactoring_guru.iterator.example.iterators.ProfileIterator;
import refactoring_guru.iterator.example.profile.Profile;

import java.util.ArrayList;
import java.util.List;

public class LinkedIn implements SocialNetwork {
    private List<Profile> contacts;

    public LinkedIn(List<Profile> cache) {
        if (cache != null) {
            this.contacts = cache;
        } else {
            this.contacts = new ArrayList<>();
        }
    }

    public Profile requestContactInfoFromLinkedInAPI(String profileEmail) {
        // Here would be a POST request to one of the LinkedIn API endpoints.
        // Instead, we emulates long network connection, which you would expect
        // in the real life...
        simulateNetworkLatency();
        System.out.println(""LinkedIn: Loading profile '"" + profileEmail + ""' over the network..."");

        // ...and return test data.
        return findContact(profileEmail);
    }

    public List<String> requestRelatedContactsFromLinkedInAPI(String profileEmail, String contactType) {
        // Here would be a POST request to one of the LinkedIn API endpoints.
        // Instead, we emulates long network connection, which you would expect
        // in the real life.
        simulateNetworkLatency();
        System.out.println(""LinkedIn: Loading '"" + contactType + ""' list of '"" + profileEmail + ""' over the network..."");

        // ...and return test data.
        Profile profile = findContact(profileEmail);
        if (profile != null) {
            return profile.getContacts(contactType);
        }
        return null;
    }

    private Profile findContact(String profileEmail) {
        for (Profile profile : contacts) {
            if (profile.getEmail().equals(profileEmail)) {
                return profile;
            }
        }
        return null;
    }

    private void simulateNetworkLatency() {
        try {
            Thread.sleep(2500);
        } catch (InterruptedException ex) {
            ex.printStackTrace();
        }
    }

    @Override
    public ProfileIterator createFriendsIterator(String profileEmail) {
        return new LinkedInIterator(this, ""friends"", profileEmail);
    }

    @Override
    public ProfileIterator createCoworkersIterator(String profileEmail) {
        return new LinkedInIterator(this, ""coworkers"", profileEmail);
    }
}
 profile

 profile/Profile.java: Social profiles

package refactoring_guru.iterator.example.profile;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Profile {
    private String name;
    private String email;
    private Map<String, List<String>> contacts = new HashMap<>();

    public Profile(String email, String name, String... contacts) {
        this.email = email;
        this.name = name;

        // Parse contact list from a set of ""friend:email@gmail.com"" pairs.
        for (String contact : contacts) {
            String[] parts = contact.split("":"");
            String contactType = ""friend"", contactEmail;
            if (parts.length == 1) {
                contactEmail = parts[0];
            }
            else {
                contactType = parts[0];
                contactEmail = parts[1];
            }
            if (!this.contacts.containsKey(contactType)) {
                this.contacts.put(contactType, new ArrayList<>());
            }
            this.contacts.get(contactType).add(contactEmail);
        }
    }

    public String getEmail() {
        return email;
    }

    public String getName() {
        return name;
    }

    public List<String> getContacts(String contactType) {
        if (!this.contacts.containsKey(contactType)) {
            this.contacts.put(contactType, new ArrayList<>());
        }
        return contacts.get(contactType);
    }
}
 spammer

 spammer/SocialSpammer.java: Message sending app

package refactoring_guru.iterator.example.spammer;

import refactoring_guru.iterator.example.iterators.ProfileIterator;
import refactoring_guru.iterator.example.profile.Profile;
import refactoring_guru.iterator.example.social_networks.SocialNetwork;

public class SocialSpammer {
    public SocialNetwork network;
    public ProfileIterator iterator;

    public SocialSpammer(SocialNetwork network) {
        this.network = network;
    }

    public void sendSpamToFriends(String profileEmail, String message) {
        System.out.println(""\nIterating over friends...\n"");
        iterator = network.createFriendsIterator(profileEmail);
        while (iterator.hasNext()) {
            Profile profile = iterator.getNext();
            sendMessage(profile.getEmail(), message);
        }
    }

    public void sendSpamToCoworkers(String profileEmail, String message) {
        System.out.println(""\nIterating over coworkers...\n"");
        iterator = network.createCoworkersIterator(profileEmail);
        while (iterator.hasNext()) {
            Profile profile = iterator.getNext();
            sendMessage(profile.getEmail(), message);
        }
    }

    public void sendMessage(String email, String message) {
        System.out.println(""Sent message to: '"" + email + ""'. Message body: '"" + message + ""'"");
    }
}
 Demo.java: Client code

package refactoring_guru.iterator.example;

import refactoring_guru.iterator.example.profile.Profile;
import refactoring_guru.iterator.example.social_networks.Facebook;
import refactoring_guru.iterator.example.social_networks.LinkedIn;
import refactoring_guru.iterator.example.social_networks.SocialNetwork;
import refactoring_guru.iterator.example.spammer.SocialSpammer;

import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

/**
 * Demo class. Everything comes together here.
 */
public class Demo {
    public static Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) {
        System.out.println(""Please specify social network to target spam tool (default:Facebook):"");
        System.out.println(""1. Facebook"");
        System.out.println(""2. LinkedIn"");
        String choice = scanner.nextLine();

        SocialNetwork network;
        if (choice.equals(""2"")) {
            network = new LinkedIn(createTestProfiles());
        }
        else {
            network = new Facebook(createTestProfiles());
        }

        SocialSpammer spammer = new SocialSpammer(network);
        spammer.sendSpamToFriends(""anna.smith@bing.com"",
                ""Hey! This is Anna's friend Josh. Can you do me a favor and like this post [link]?"");
        spammer.sendSpamToCoworkers(""anna.smith@bing.com"",
                ""Hey! This is Anna's boss Jason. Anna told me you would be interested in [link]."");
    }

    public static List<Profile> createTestProfiles() {
        List<Profile> data = new ArrayList<Profile>();
        data.add(new Profile(""anna.smith@bing.com"", ""Anna Smith"", ""friends:mad_max@ya.com"", ""friends:catwoman@yahoo.com"", ""coworkers:sam@amazon.com""));
        data.add(new Profile(""mad_max@ya.com"", ""Maximilian"", ""friends:anna.smith@bing.com"", ""coworkers:sam@amazon.com""));
        data.add(new Profile(""bill@microsoft.eu"", ""Billie"", ""coworkers:avanger@ukr.net""));
        data.add(new Profile(""avanger@ukr.net"", ""John Day"", ""coworkers:bill@microsoft.eu""));
        data.add(new Profile(""sam@amazon.com"", ""Sam Kitting"", ""coworkers:anna.smith@bing.com"", ""coworkers:mad_max@ya.com"", ""friends:catwoman@yahoo.com""));
        data.add(new Profile(""catwoman@yahoo.com"", ""Liza"", ""friends:anna.smith@bing.com"", ""friends:sam@amazon.com""));
        return data;
    }
}",Java,Iterator,Refactoring Guru,https://refactoring.guru/design-patterns/iterator/java/example#example-0,"[-4.14641015e-02  4.45923992e-02 -2.17797011e-02 -4.04910930e-03
 -3.34577821e-02 -1.39830355e-02  5.92197627e-02  4.07937430e-02
 -8.61489177e-02 -2.82023959e-02  4.08926830e-02 -3.86135653e-02
  9.49370563e-02 -4.80638817e-02 -9.69668943e-03 -1.27813406e-02
 -3.27482745e-02 -1.27891647e-02  6.12281961e-03 -5.71798906e-02
  3.31149846e-02 -2.09041275e-02  2.89807823e-02 -5.94006926e-02
 -2.22564861e-03 -2.47825440e-02 -1.14758043e-02 -6.99903741e-02
 -1.00824609e-01  1.87207311e-02  5.12126200e-02  5.98218217e-02
 -1.31586000e-01  2.37421654e-02 -3.62257264e-03  2.64822468e-02
 -1.35885673e-02  3.49334255e-02 -5.47710108e-03 -5.80832139e-02
 -5.96661270e-02  3.81189561e-03 -5.37884124e-02 -3.54728065e-02
 -5.22748474e-03 -4.30907086e-02 -5.32062575e-02  2.21668184e-03
  1.76457129e-02 -4.81489561e-02 -1.13095775e-01 -8.87001341e-04
 -2.02290174e-02  1.26103766e-03  1.04737975e-01  8.01273715e-03
 -5.32064680e-03  2.41189282e-02 -5.20305894e-02 -2.15677060e-02
  3.90564576e-02 -7.02052414e-02 -1.01979561e-02 -4.08219621e-02
  1.69952288e-02 -6.20998144e-02 -6.80765742e-03  3.52265052e-02
  2.95521878e-02 -2.79315021e-02 -4.90878485e-02  7.99335465e-02
 -8.63065943e-02  6.73074871e-02 -1.56477317e-02  2.07448583e-02
 -4.18395884e-02  7.21605914e-03  1.28363166e-03 -1.65625717e-02
 -4.74579111e-02 -3.82695301e-03 -2.04890519e-02 -1.87865403e-02
  1.99275110e-02 -1.15894172e-02 -8.66554154e-04 -9.97924060e-02
 -8.80041567e-04  5.76187335e-02 -3.38737741e-02  8.92407745e-02
 -4.07086760e-02  1.06137656e-02  4.18858416e-02  6.99504614e-02
 -4.68470305e-02  3.55758239e-03 -5.43925427e-02  1.12476811e-01
 -4.31680307e-02  4.27960139e-03  2.33932547e-02  3.05278245e-02
  2.71519423e-02  1.54014733e-02  4.44270186e-02  1.23572154e-02
 -1.74617302e-02 -2.85735484e-02 -3.92481163e-02  1.79991014e-02
 -8.12440813e-02 -1.68441969e-03 -2.48020366e-02 -5.76001741e-02
  8.16399083e-02  4.98371348e-02  2.01246999e-02  4.57964279e-02
  7.31709301e-02  1.17018139e-02  2.38991678e-02 -6.27236441e-02
 -3.06217410e-02 -2.67029908e-02 -2.93057710e-02  5.80892243e-33
  8.42334330e-02 -3.90432663e-02  1.22410338e-03  4.68436554e-02
 -7.57749826e-02 -2.59633865e-02  1.08633135e-02  8.27401727e-02
  2.19069980e-03 -7.47291371e-02 -4.66753468e-02 -2.95584090e-02
  4.39458676e-02  4.53007445e-02 -2.97527621e-03 -7.01936111e-02
  8.87494460e-02  4.21608128e-02 -1.16223032e-02 -2.14772616e-02
  4.60920520e-02 -4.05931920e-02 -2.01793909e-02 -1.80329569e-02
  1.18911443e-02  4.15939689e-02  3.57230119e-02  2.20620483e-02
 -6.03874885e-02  5.05264010e-03  8.91476795e-02  6.17858907e-03
 -6.22592568e-02  7.53878430e-02  6.11214601e-02  1.52322613e-02
  3.62984985e-02 -2.58221664e-02 -3.62923257e-02 -9.66973379e-02
  8.36358313e-03 -3.33990864e-02  5.76634668e-02 -6.63161930e-03
 -2.22785287e-02 -2.66131274e-02 -3.53081971e-02  5.71649894e-02
 -3.89524139e-02  6.26567751e-02  4.10142355e-02  2.70245057e-02
 -3.11185438e-02  8.05015303e-03 -5.87023906e-02  4.50856015e-02
 -1.69264730e-02  5.44401705e-02 -7.22754421e-03  9.42312479e-02
 -5.79524562e-02  2.66490672e-02 -4.63851243e-02  7.34971929e-03
  5.24371527e-02  2.80585382e-02 -3.87376659e-02 -8.51382166e-02
  7.19115734e-02 -8.40342492e-02 -1.93956587e-02  4.61448766e-02
  8.82782638e-02  1.87726486e-02 -2.90341824e-02 -1.98007543e-02
 -7.53359497e-02 -3.30023840e-02 -1.14774138e-01 -6.80931360e-02
  3.49351019e-02  1.45931644e-02 -8.49718526e-02  5.45291649e-03
 -3.85210998e-02  4.91805486e-02  3.98821905e-02 -4.58099619e-02
  3.81718427e-02  5.22644930e-02  4.40179370e-03  5.84858619e-02
  2.71188039e-02  5.22967987e-03 -9.63948853e-03 -5.70366059e-33
  3.61693949e-02 -2.48803720e-02  1.62642766e-02 -9.00006145e-02
  1.29702613e-01 -7.29776174e-03  6.51021004e-02  2.38134526e-02
 -7.49602690e-02 -1.45902131e-02 -5.41618615e-02 -7.69844055e-02
  1.90962385e-02 -3.35882232e-02  8.11877549e-02  6.59769997e-02
  3.47816870e-02 -4.59382497e-02 -2.43440650e-06  1.56638604e-02
 -4.85613681e-02  9.39436331e-02  2.38350555e-02 -1.74267888e-02
  1.59620717e-02 -3.31978477e-03 -1.65247899e-02  5.23855239e-02
 -3.03877871e-02 -2.30326899e-03  1.00958854e-01  3.25250323e-03
 -7.84784481e-02 -6.97118137e-03  4.70252968e-02 -4.72578667e-02
 -2.21777149e-02  6.56752288e-02  2.62758993e-02  3.77742611e-02
  1.09886482e-01 -3.24103907e-02 -3.64726633e-02  8.07621609e-03
  8.73894095e-02 -5.20847403e-02 -1.71373859e-02  3.36121954e-02
 -4.43558991e-02  2.47692000e-02  8.36834386e-02 -6.91194013e-02
  5.39841969e-03 -1.59385577e-02  5.92527539e-02  1.41747370e-02
  1.04095794e-01 -3.66889387e-02  9.49799493e-02  1.77104294e-03
  1.99079588e-02 -1.21148847e-01  4.64768708e-02  1.02622449e-01
  1.23123057e-01 -7.75683820e-02  1.40873557e-02 -2.81420555e-02
 -4.54510748e-02  4.28864993e-02 -6.01481162e-02  5.22912927e-02
 -2.07541920e-02 -6.01350293e-02  1.31160483e-01 -3.39728110e-02
 -4.13336717e-02 -1.93181366e-03 -2.47582421e-02  7.67057166e-02
 -6.13632426e-02  8.64037964e-03 -2.14465652e-02 -9.16736424e-02
  3.97451594e-02 -5.61898351e-02  7.55695999e-03  5.67050353e-02
 -4.14670706e-02 -3.64621654e-02 -1.18990298e-02 -1.86092835e-02
 -2.01343223e-02 -1.14254979e-02 -3.74127291e-02 -5.07882021e-08
 -7.71858320e-02 -8.35261792e-02 -1.64549239e-02  9.57557037e-02
  4.38765064e-02  7.00222850e-02 -2.26067030e-03 -2.82232128e-02
  2.57067494e-02 -2.94582956e-02 -3.74110267e-02  5.35837039e-02
  6.76976293e-02  5.03951497e-02  5.54261841e-02 -1.33614644e-01
  2.65979674e-02 -8.00078288e-02 -6.66815192e-02  8.77468735e-02
  6.05649874e-03 -4.73893397e-02 -8.16885978e-02  4.37797159e-02
  9.05083492e-02 -1.28911231e-02  7.36732855e-02  3.90751772e-02
 -1.33478614e-02  6.59083650e-02 -2.43842043e-02  2.07463130e-02
  6.39119819e-02 -4.12702858e-02 -3.29576880e-02  3.83903235e-02
  2.65272651e-02 -1.05341990e-02 -1.49083268e-02  1.07735880e-01
  7.59367570e-02  3.25987674e-02  1.72371808e-02  2.36605611e-02
  1.09270081e-01 -7.24995062e-02  1.33191962e-02 -2.69215405e-02
  4.17313203e-02 -4.04135920e-02 -1.33094192e-01 -1.62699930e-02
  1.99099276e-02 -9.36975479e-02 -8.03855136e-02 -6.92850575e-02
  4.46472503e-02 -1.37341367e-02  4.33290787e-02  3.02050505e-02
  4.09272127e-02 -1.02780201e-02 -5.87644763e-02  4.33427058e-02]"
"editor

 editor/Editor.java: Editor code

package refactoring_guru.memento.example.editor;

import refactoring_guru.memento.example.commands.Command;
import refactoring_guru.memento.example.history.History;
import refactoring_guru.memento.example.history.Memento;
import refactoring_guru.memento.example.shapes.CompoundShape;
import refactoring_guru.memento.example.shapes.Shape;

import javax.swing.*;
import java.io.*;
import java.util.Base64;

public class Editor extends JComponent {
    private Canvas canvas;
    private CompoundShape allShapes = new CompoundShape();
    private History history;

    public Editor() {
        canvas = new Canvas(this);
        history = new History();
    }

    public void loadShapes(Shape... shapes) {
        allShapes.clear();
        allShapes.add(shapes);
        canvas.refresh();
    }

    public CompoundShape getShapes() {
        return allShapes;
    }

    public void execute(Command c) {
        history.push(c, new Memento(this));
        c.execute();
    }

    public void undo() {
        if (history.undo())
            canvas.repaint();
    }

    public void redo() {
        if (history.redo())
            canvas.repaint();
    }

    public String backup() {
        try {
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            ObjectOutputStream oos = new ObjectOutputStream(baos);
            oos.writeObject(this.allShapes);
            oos.close();
            return Base64.getEncoder().encodeToString(baos.toByteArray());
        } catch (IOException e) {
            return """";
        }
    }

    public void restore(String state) {
        try {
            byte[] data = Base64.getDecoder().decode(state);
            ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(data));
            this.allShapes = (CompoundShape) ois.readObject();
            ois.close();
        } catch (ClassNotFoundException e) {
            System.out.print(""ClassNotFoundException occurred."");
        } catch (IOException e) {
            System.out.print(""IOException occurred."");
        }
    }
}
 editor/Canvas.java: Canvas code

package refactoring_guru.memento.example.editor;

import refactoring_guru.memento.example.commands.ColorCommand;
import refactoring_guru.memento.example.commands.MoveCommand;
import refactoring_guru.memento.example.shapes.Shape;

import javax.swing.*;
import javax.swing.border.Border;
import java.awt.*;
import java.awt.event.*;
import java.awt.image.BufferedImage;

class Canvas extends java.awt.Canvas {
    private Editor editor;
    private JFrame frame;
    private static final int PADDING = 10;

    Canvas(Editor editor) {
        this.editor = editor;
        createFrame();
        attachKeyboardListeners();
        attachMouseListeners();
        refresh();
    }

    private void createFrame() {
        frame = new JFrame();
        frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        frame.setLocationRelativeTo(null);

        JPanel contentPanel = new JPanel();
        Border padding = BorderFactory.createEmptyBorder(PADDING, PADDING, PADDING, PADDING);
        contentPanel.setBorder(padding);
        contentPanel.setLayout(new BoxLayout(contentPanel, BoxLayout.Y_AXIS));
        frame.setContentPane(contentPanel);

        contentPanel.add(new JLabel(""Select and drag to move.""), BorderLayout.PAGE_END);
        contentPanel.add(new JLabel(""Right click to change color.""), BorderLayout.PAGE_END);
        contentPanel.add(new JLabel(""Undo: Ctrl+Z, Redo: Ctrl+R""), BorderLayout.PAGE_END);
        contentPanel.add(this);
        frame.setVisible(true);
        contentPanel.setBackground(Color.LIGHT_GRAY);
    }

    private void attachKeyboardListeners() {
        addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                if ((e.getModifiers() & KeyEvent.CTRL_MASK) != 0) {
                    switch (e.getKeyCode()) {
                        case KeyEvent.VK_Z:
                            editor.undo();
                            break;
                        case KeyEvent.VK_R:
                            editor.redo();
                            break;
                    }
                }
            }
        });
    }

    private void attachMouseListeners() {
        MouseAdapter colorizer = new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                if (e.getButton() != MouseEvent.BUTTON3) {
                    return;
                }
                Shape target = editor.getShapes().getChildAt(e.getX(), e.getY());
                if (target != null) {
                    editor.execute(new ColorCommand(editor, new Color((int) (Math.random() * 0x1000000))));
                    repaint();
                }
            }
        };
        addMouseListener(colorizer);

        MouseAdapter selector = new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                if (e.getButton() != MouseEvent.BUTTON1) {
                    return;
                }

                Shape target = editor.getShapes().getChildAt(e.getX(), e.getY());
                boolean ctrl = (e.getModifiers() & ActionEvent.CTRL_MASK) == ActionEvent.CTRL_MASK;

                if (target == null) {
                    if (!ctrl) {
                        editor.getShapes().unSelect();
                    }
                } else {
                    if (ctrl) {
                        if (target.isSelected()) {
                            target.unSelect();
                        } else {
                            target.select();
                        }
                    } else {
                        if (!target.isSelected()) {
                            editor.getShapes().unSelect();
                        }
                        target.select();
                    }
                }
                repaint();
            }
        };
        addMouseListener(selector);


        MouseAdapter dragger = new MouseAdapter() {
            MoveCommand moveCommand;

            @Override
            public void mouseDragged(MouseEvent e) {
                if ((e.getModifiersEx() & MouseEvent.BUTTON1_DOWN_MASK) != MouseEvent.BUTTON1_DOWN_MASK) {
                    return;
                }
                if (moveCommand == null) {
                    moveCommand = new MoveCommand(editor);
                    moveCommand.start(e.getX(), e.getY());
                }
                moveCommand.move(e.getX(), e.getY());
                repaint();
            }

            @Override
            public void mouseReleased(MouseEvent e) {
                if (e.getButton() != MouseEvent.BUTTON1 || moveCommand == null) {
                    return;
                }
                moveCommand.stop(e.getX(), e.getY());
                editor.execute(moveCommand);
                this.moveCommand = null;
                repaint();
            }
        };
        addMouseListener(dragger);
        addMouseMotionListener(dragger);
    }

    public int getWidth() {
        return editor.getShapes().getX() + editor.getShapes().getWidth() + PADDING;
    }

    public int getHeight() {
        return editor.getShapes().getY() + editor.getShapes().getHeight() + PADDING;
    }

    void refresh() {
        this.setSize(getWidth(), getHeight());
        frame.pack();
    }

    public void update(Graphics g) {
        paint(g);
    }

    public void paint(Graphics graphics) {
        BufferedImage buffer = new BufferedImage(this.getWidth(), this.getHeight(), BufferedImage.TYPE_INT_RGB);
        Graphics2D ig2 = buffer.createGraphics();
        ig2.setBackground(Color.WHITE);
        ig2.clearRect(0, 0, this.getWidth(), this.getHeight());

        editor.getShapes().paint(buffer.getGraphics());

        graphics.drawImage(buffer, 0, 0, null);
    }
}
 history

 history/History.java: History stores commands and mementos

package refactoring_guru.memento.example.history;

import refactoring_guru.memento.example.commands.Command;

import java.util.ArrayList;
import java.util.List;

public class History {
    private List<Pair> history = new ArrayList<Pair>();
    private int virtualSize = 0;

    private class Pair {
        Command command;
        Memento memento;
        Pair(Command c, Memento m) {
            command = c;
            memento = m;
        }

        private Command getCommand() {
            return command;
        }

        private Memento getMemento() {
            return memento;
        }
    }

    public void push(Command c, Memento m) {
        if (virtualSize != history.size() && virtualSize > 0) {
            history = history.subList(0, virtualSize - 1);
        }
        history.add(new Pair(c, m));
        virtualSize = history.size();
    }

    public boolean undo() {
        Pair pair = getUndo();
        if (pair == null) {
            return false;
        }
        System.out.println(""Undoing: "" + pair.getCommand().getName());
        pair.getMemento().restore();
        return true;
    }

    public boolean redo() {
        Pair pair = getRedo();
        if (pair == null) {
            return false;
        }
        System.out.println(""Redoing: "" + pair.getCommand().getName());
        pair.getMemento().restore();
        pair.getCommand().execute();
        return true;
    }

    private Pair getUndo() {
        if (virtualSize == 0) {
            return null;
        }
        virtualSize = Math.max(0, virtualSize - 1);
        return history.get(virtualSize);
    }

    private Pair getRedo() {
        if (virtualSize == history.size()) {
            return null;
        }
        virtualSize = Math.min(history.size(), virtualSize + 1);
        return history.get(virtualSize - 1);
    }
}
 history/Memento.java: Memento class

package refactoring_guru.memento.example.history;

import refactoring_guru.memento.example.editor.Editor;

public class Memento {
    private String backup;
    private Editor editor;

    public Memento(Editor editor) {
        this.editor = editor;
        this.backup = editor.backup();
    }

    public void restore() {
        editor.restore(backup);
    }
}
 commands

 commands/Command.java: Base command class

package refactoring_guru.memento.example.commands;

public interface Command {
    String getName();
    void execute();
}
 commands/ColorCommand.java: Changes color of selected shape

package refactoring_guru.memento.example.commands;

import refactoring_guru.memento.example.editor.Editor;
import refactoring_guru.memento.example.shapes.Shape;

import java.awt.*;

public class ColorCommand implements Command {
    private Editor editor;
    private Color color;

    public ColorCommand(Editor editor, Color color) {
        this.editor = editor;
        this.color = color;
    }

    @Override
    public String getName() {
        return ""Colorize: "" + color.toString();
    }

    @Override
    public void execute() {
        for (Shape child : editor.getShapes().getSelected()) {
            child.setColor(color);
        }
    }
}
 commands/MoveCommand.java: Moves selected shape

package refactoring_guru.memento.example.commands;

import refactoring_guru.memento.example.editor.Editor;
import refactoring_guru.memento.example.shapes.Shape;

public class MoveCommand implements Command {
    private Editor editor;
    private int startX, startY;
    private int endX, endY;

    public MoveCommand(Editor editor) {
        this.editor = editor;
    }

    @Override
    public String getName() {
        return ""Move by X:"" + (endX - startX) + "" Y:"" + (endY - startY);
    }

    public void start(int x, int y) {
        startX = x;
        startY = y;
        for (Shape child : editor.getShapes().getSelected()) {
            child.drag();
        }
    }

    public void move(int x, int y) {
        for (Shape child : editor.getShapes().getSelected()) {
            child.moveTo(x - startX, y - startY);
        }
    }

    public void stop(int x, int y) {
        endX = x;
        endY = y;
        for (Shape child : editor.getShapes().getSelected()) {
            child.drop();
        }
    }

    @Override
    public void execute() {
        for (Shape child : editor.getShapes().getSelected()) {
            child.moveBy(endX - startX, endY - startY);
        }
    }
}
 shapes: Various shapes

 shapes/Shape.java

package refactoring_guru.memento.example.shapes;

import java.awt.*;
import java.io.Serializable;

public interface Shape extends Serializable {
    int getX();
    int getY();
    int getWidth();
    int getHeight();
    void drag();
    void drop();
    void moveTo(int x, int y);
    void moveBy(int x, int y);
    boolean isInsideBounds(int x, int y);
    Color getColor();
    void setColor(Color color);
    void select();
    void unSelect();
    boolean isSelected();
    void paint(Graphics graphics);
}
 shapes/BaseShape.java

package refactoring_guru.memento.example.shapes;

import java.awt.*;

public abstract class BaseShape implements Shape {
    int x, y;
    private int dx = 0, dy = 0;
    private Color color;
    private boolean selected = false;

    BaseShape(int x, int y, Color color) {
        this.x = x;
        this.y = y;
        this.color = color;
    }

    @Override
    public int getX() {
        return x;
    }

    @Override
    public int getY() {
        return y;
    }

    @Override
    public int getWidth() {
        return 0;
    }

    @Override
    public int getHeight() {
        return 0;
    }

    @Override
    public void drag() {
        dx = x;
        dy = y;
    }

    @Override
    public void moveTo(int x, int y) {
        this.x = dx + x;
        this.y = dy + y;
    }

    @Override
    public void moveBy(int x, int y) {
        this.x += x;
        this.y += y;
    }

    @Override
    public void drop() {
        this.x = dx;
        this.y = dy;
    }

    @Override
    public boolean isInsideBounds(int x, int y) {
        return x > getX() && x < (getX() + getWidth()) &&
                y > getY() && y < (getY() + getHeight());
    }

    @Override
    public Color getColor() {
        return color;
    }

    @Override
    public void setColor(Color color) {
        this.color = color;
    }

    @Override
    public void select() {
        selected = true;
    }

    @Override
    public void unSelect() {
        selected = false;
    }

    @Override
    public boolean isSelected() {
        return selected;
    }

    void enableSelectionStyle(Graphics graphics) {
        graphics.setColor(Color.LIGHT_GRAY);

        Graphics2D g2 = (Graphics2D) graphics;
        float[] dash1 = {2.0f};
        g2.setStroke(new BasicStroke(1.0f,
                BasicStroke.CAP_BUTT,
                BasicStroke.JOIN_MITER,
                2.0f, dash1, 0.0f));
    }

    void disableSelectionStyle(Graphics graphics) {
        graphics.setColor(color);
        Graphics2D g2 = (Graphics2D) graphics;
        g2.setStroke(new BasicStroke());
    }

    @Override
    public void paint(Graphics graphics) {
        if (isSelected()) {
            enableSelectionStyle(graphics);
        }
        else {
            disableSelectionStyle(graphics);
        }

        // ...
    }
}
 shapes/Circle.java

package refactoring_guru.memento.example.shapes;

import java.awt.*;

public class Circle extends BaseShape {
    private int radius;

    public Circle(int x, int y, int radius, Color color) {
        super(x, y, color);
        this.radius = radius;
    }

    @Override
    public int getWidth() {
        return radius * 2;
    }

    @Override
    public int getHeight() {
        return radius * 2;
    }

    @Override
    public void paint(Graphics graphics) {
        super.paint(graphics);
        graphics.drawOval(x, y, getWidth() - 1, getHeight() - 1);
    }
}
 shapes/Dot.java

package refactoring_guru.memento.example.shapes;

import java.awt.*;

public class Dot extends BaseShape {
    private final int DOT_SIZE = 3;

    public Dot(int x, int y, Color color) {
        super(x, y, color);
    }

    @Override
    public int getWidth() {
        return DOT_SIZE;
    }

    @Override
    public int getHeight() {
        return DOT_SIZE;
    }

    @Override
    public void paint(Graphics graphics) {
        super.paint(graphics);
        graphics.fillRect(x - 1, y - 1, getWidth(), getHeight());
    }
}
 shapes/Rectangle.java

package refactoring_guru.memento.example.shapes;

import java.awt.*;

public class Rectangle extends BaseShape {
    private int width;
    private int height;

    public Rectangle(int x, int y, int width, int height, Color color) {
        super(x, y, color);
        this.width = width;
        this.height = height;
    }

    @Override
    public int getWidth() {
        return width;
    }

    @Override
    public int getHeight() {
        return height;
    }

    @Override
    public void paint(Graphics graphics) {
        super.paint(graphics);
        graphics.drawRect(x, y, getWidth() - 1, getHeight() - 1);
    }
}
 shapes/CompoundShape.java

package refactoring_guru.memento.example.shapes;

import java.awt.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class CompoundShape extends BaseShape {
    private List<Shape> children = new ArrayList<>();

    public CompoundShape(Shape... components) {
        super(0, 0, Color.BLACK);
        add(components);
    }

    public void add(Shape component) {
        children.add(component);
    }

    public void add(Shape... components) {
        children.addAll(Arrays.asList(components));
    }

    public void remove(Shape child) {
        children.remove(child);
    }

    public void remove(Shape... components) {
        children.removeAll(Arrays.asList(components));
    }

    public void clear() {
        children.clear();
    }

    @Override
    public int getX() {
        if (children.size() == 0) {
            return 0;
        }
        int x = children.get(0).getX();
        for (Shape child : children) {
            if (child.getX() < x) {
                x = child.getX();
            }
        }
        return x;
    }

    @Override
    public int getY() {
        if (children.size() == 0) {
            return 0;
        }
        int y = children.get(0).getY();
        for (Shape child : children) {
            if (child.getY() < y) {
                y = child.getY();
            }
        }
        return y;
    }

    @Override
    public int getWidth() {
        int maxWidth = 0;
        int x = getX();
        for (Shape child : children) {
            int childsRelativeX = child.getX() - x;
            int childWidth = childsRelativeX + child.getWidth();
            if (childWidth > maxWidth) {
                maxWidth = childWidth;
            }
        }
        return maxWidth;
    }

    @Override
    public int getHeight() {
        int maxHeight = 0;
        int y = getY();
        for (Shape child : children) {
            int childsRelativeY = child.getY() - y;
            int childHeight = childsRelativeY + child.getHeight();
            if (childHeight > maxHeight) {
                maxHeight = childHeight;
            }
        }
        return maxHeight;
    }

    @Override
    public void drag() {
        for (Shape child : children) {
            child.drag();
        }
    }

    @Override
    public void drop() {
        for (Shape child : children) {
            child.drop();
        }
    }

    @Override
    public void moveTo(int x, int y) {
        for (Shape child : children) {
            child.moveTo(x, y);
        }
    }

    @Override
    public void moveBy(int x, int y) {
        for (Shape child : children) {
            child.moveBy(x, y);
        }
    }

    @Override
    public boolean isInsideBounds(int x, int y) {
        for (Shape child : children) {
            if (child.isInsideBounds(x, y)) {
                return true;
            }
        }
        return false;
    }

    @Override
    public void setColor(Color color) {
        super.setColor(color);
        for (Shape child : children) {
            child.setColor(color);
        }
    }

    @Override
    public void unSelect() {
        super.unSelect();
        for (Shape child : children) {
            child.unSelect();
        }
    }

    public Shape getChildAt(int x, int y) {
        for (Shape child : children) {
            if (child.isInsideBounds(x, y)) {
                return child;
            }
        }
        return null;
    }

    public boolean selectChildAt(int x, int y) {
        Shape child = getChildAt(x,y);
        if (child != null) {
            child.select();
            return true;
        }
        return false;
    }

    public List<Shape> getSelected() {
        List<Shape> selected = new ArrayList<>();
        for (Shape child : children) {
            if (child.isSelected()) {
                selected.add(child);
            }
        }
        return selected;
    }

    @Override
    public void paint(Graphics graphics) {
        if (isSelected()) {
            enableSelectionStyle(graphics);
            graphics.drawRect(getX() - 1, getY() - 1, getWidth() + 1, getHeight() + 1);
            disableSelectionStyle(graphics);
        }

        for (Shape child : children) {
            child.paint(graphics);
        }
    }
}
 Demo.java: Initialization code

package refactoring_guru.memento.example;

import refactoring_guru.memento.example.editor.Editor;
import refactoring_guru.memento.example.shapes.Circle;
import refactoring_guru.memento.example.shapes.CompoundShape;
import refactoring_guru.memento.example.shapes.Dot;
import refactoring_guru.memento.example.shapes.Rectangle;

import java.awt.*;

public class Demo {
    public static void main(String[] args) {
        Editor editor = new Editor();
        editor.loadShapes(
                new Circle(10, 10, 10, Color.BLUE),

                new CompoundShape(
                        new Circle(110, 110, 50, Color.RED),
                        new Dot(160, 160, Color.RED)
                ),

                new CompoundShape(
                        new Rectangle(250, 250, 100, 100, Color.GREEN),
                        new Dot(240, 240, Color.GREEN),
                        new Dot(240, 360, Color.GREEN),
                        new Dot(360, 360, Color.GREEN),
                        new Dot(360, 240, Color.GREEN)
                )
        );
    }
}",Java,Memento,Refactoring Guru,https://refactoring.guru/design-patterns/memento/java/example#example-0,"[ 7.23691843e-03  2.14127712e-02 -2.18499918e-02 -2.43469384e-02
 -2.96578780e-02  2.77857855e-02  3.54757309e-02  7.08467960e-02
 -2.51495074e-02 -1.64582599e-02  3.29752415e-02 -3.98989692e-02
  5.14187515e-02 -4.51569147e-02 -2.00338988e-03 -1.94349941e-02
 -7.69933760e-02  7.06659481e-02 -8.26029852e-02 -2.57556643e-02
  4.54506576e-02 -9.89682674e-02  4.09662239e-02 -6.03838302e-02
 -5.27837267e-03  9.95223150e-02  5.81339113e-02 -4.03459743e-02
 -4.54361774e-02 -7.05818012e-02 -3.12780254e-02  2.77064536e-02
  8.16267636e-03  3.57181355e-02 -4.67745066e-02  4.80492599e-02
 -7.10855871e-02  6.56318590e-02 -5.52533790e-02 -5.15468158e-02
 -1.02862418e-01  4.66932505e-02  2.55780984e-02 -3.82674858e-02
  1.74664427e-02 -2.01849621e-02 -8.30377340e-02  7.15270825e-03
  3.18840593e-02 -2.69823405e-03 -3.30674797e-02 -3.92321497e-02
 -4.43942100e-02 -3.28517705e-03  1.56604685e-02  5.04034720e-02
  3.35828364e-02 -5.50041301e-03  1.71120409e-02 -2.10159943e-02
 -4.80316766e-03  2.22143973e-03 -9.87697672e-03 -1.35082146e-02
 -3.60871702e-02 -2.66032889e-02  5.19030914e-02 -3.62005085e-02
 -1.46753853e-02 -1.32577168e-02 -7.28498213e-03  4.15111110e-02
  5.27846664e-02  3.95416794e-03 -3.14284749e-02  1.05357608e-02
 -1.16105638e-02  5.45884594e-02 -3.18261869e-02 -9.51065868e-02
 -1.92599464e-02  1.01081114e-02  1.13219637e-02  5.60911894e-02
  8.97688568e-02  1.02372877e-01 -3.44355106e-02 -4.19851057e-02
  1.61184149e-03  9.19874385e-02 -4.62940931e-02  6.87430501e-02
  1.11635672e-02  4.48103100e-02 -1.45527488e-02 -2.93801334e-02
  9.25582089e-03 -1.15898848e-02 -7.31806457e-02  7.03261271e-02
  4.58378382e-02 -2.45803129e-02  1.50304521e-02  2.98311543e-02
  3.20041776e-02 -3.80888134e-02 -2.79345810e-02 -4.22599651e-02
 -4.42421213e-02  8.36737640e-03 -4.01731543e-02 -4.05028388e-02
 -2.08313987e-02  2.27319412e-02 -3.02526932e-02 -5.39981714e-03
  3.82246822e-02 -3.87285138e-03 -1.86264217e-02 -1.56429037e-02
  1.15026444e-01  1.19928084e-02 -5.74407876e-02 -2.82362979e-02
 -5.72321229e-02 -3.03236526e-02 -2.02638265e-02  5.40131169e-33
  1.17931934e-02 -7.64803365e-02 -4.66667581e-03  6.87907413e-02
 -7.44703645e-03  5.00941128e-02 -3.28211561e-02  6.47314638e-02
 -1.26770055e-02 -7.58912787e-02 -1.00159701e-02 -7.05833212e-02
 -1.59992743e-02  5.41155189e-02  7.29833022e-02 -1.01135492e-01
  6.79223537e-02  9.00974497e-02 -5.35361804e-02 -3.86134014e-02
 -1.78502016e-02  1.76012178e-03 -6.65350631e-02 -1.51072294e-02
 -3.15922312e-02  1.01871781e-01  7.38804508e-03  7.12324083e-02
 -5.07361703e-02  8.19878478e-04  2.19628140e-02 -2.19047759e-02
 -2.57892851e-02  4.44328301e-02 -3.17964368e-02 -2.01577544e-02
 -5.44940354e-03  4.33546584e-03  1.24178696e-02 -5.83512969e-02
 -7.33626485e-02 -7.20048398e-02  1.46488948e-02 -2.91933734e-02
  2.93471906e-02 -6.00788891e-02  2.20580027e-02  1.13280647e-01
 -9.56106260e-02  5.09829074e-02  1.29434057e-02  9.07990038e-02
  1.17938500e-02 -9.36022997e-02 -4.03379537e-02  9.83113796e-03
  2.44144048e-03  1.00063421e-01 -5.81139699e-02  5.75499646e-02
 -2.89205238e-02  1.14818126e-01 -2.84695104e-02  4.72303294e-02
 -2.63161846e-02  1.01282232e-01 -4.84674014e-02 -9.24269110e-02
  2.21415889e-02 -5.47701120e-02 -2.40457188e-02 -1.67010967e-02
  8.67704004e-02 -3.37198861e-02 -1.48405610e-02 -5.04424758e-02
  3.43874283e-03 -5.20408228e-02 -7.15865195e-02 -9.34319422e-02
 -6.78901002e-02  2.11899411e-02 -4.53820005e-02 -6.66622669e-02
  1.21879233e-02 -3.29955332e-02  9.97027159e-02  1.39176082e-02
  9.94705874e-03 -1.58588216e-02 -4.59638648e-02 -4.57031094e-02
  2.31301989e-02 -4.53308858e-02  4.56276536e-02 -5.58849373e-33
  5.74305803e-02  7.16178492e-02 -1.99963823e-02  9.35402885e-03
  1.30966846e-02  6.67836471e-03  1.84762049e-02  3.79793383e-02
 -6.52773827e-02 -6.36210293e-02 -6.86772838e-02  3.15079875e-02
 -3.61479372e-02  1.33496830e-02  1.54571673e-02  7.78838247e-02
  4.51520132e-03  3.98072600e-02 -5.51970564e-02 -9.26494319e-03
 -2.64487639e-02  4.93211672e-02  2.86759343e-02  3.18861306e-02
 -7.33688697e-02  3.01849321e-02  1.90535001e-02  8.16179737e-02
 -2.26693042e-03  4.09618467e-02  5.15770651e-02 -3.04907355e-02
 -6.72630593e-02  4.69312035e-02  8.54793936e-02 -1.47211507e-01
  9.72574111e-03 -1.54822515e-02 -2.58065201e-02  1.27496630e-01
  2.93389708e-02 -8.04899558e-02  2.00390182e-02  6.20480515e-02
  5.50532900e-03 -9.60684009e-03  2.76422338e-03  1.06395610e-01
 -2.04962958e-02 -4.41007204e-02 -2.88250726e-02 -7.66633451e-02
 -2.76026446e-02 -3.31383124e-02  6.24613240e-02  7.53463954e-02
  4.98986691e-02  3.58047411e-02  5.48318923e-02  1.41359251e-02
 -8.93767737e-03 -7.69892335e-02 -8.02904367e-03  5.40760830e-02
  1.44099146e-01 -8.88749212e-03  4.21910343e-04  6.40083244e-03
 -8.37091953e-02  5.10289632e-02  1.41193783e-02  8.57783109e-02
  1.46139385e-02 -9.13932100e-02  1.13790639e-01 -2.78339647e-02
  4.81020249e-02 -6.08226750e-03 -9.84578510e-04  2.15856894e-03
 -1.34995964e-03 -5.87662589e-03  5.29464260e-02 -2.28358451e-02
 -2.32976731e-02 -6.21796912e-03 -5.90900443e-02  2.82828044e-02
 -2.08289474e-02 -5.01725785e-02 -4.55897972e-02  4.84046340e-02
  1.18346661e-01  4.56921682e-02  1.07432296e-03 -5.69080854e-08
 -5.22776991e-02 -6.52970597e-02  9.63471532e-02  9.53302998e-03
  7.49288425e-02 -4.05806936e-02 -2.29562167e-02  1.86997876e-02
 -9.50698182e-03 -4.94108386e-02 -1.63113456e-02  5.82011081e-02
  5.07638492e-02  3.42785791e-02  5.73242754e-02 -1.07363693e-01
  9.56015941e-03 -1.42771751e-02 -5.51964082e-02  4.49357070e-02
 -1.65463965e-02 -6.39292002e-02 -1.21481959e-02  5.48691414e-02
  1.96472630e-02 -9.54732373e-02 -5.28641697e-03  2.90688481e-02
  6.84726164e-02  7.19791800e-02  1.00910524e-02  5.24082407e-02
  1.40216589e-01  4.26575691e-02 -4.38816398e-02 -5.72456904e-02
 -1.13777453e-02  8.14449787e-02 -1.25220465e-02  8.75117406e-02
 -1.48433971e-03 -8.70852917e-03 -3.92899327e-02  4.93801525e-03
  5.72175942e-02 -4.27141488e-02  5.40103130e-02 -2.68390961e-02
 -1.68367587e-02  2.33539920e-02 -1.79994300e-01  1.27916662e-02
  3.38020772e-02 -5.72849363e-02 -1.70716308e-02 -5.82207404e-02
  7.07230438e-03  4.22468819e-02  5.48122786e-02  1.13798909e-01
 -6.60918877e-02  2.25999076e-02 -3.65554802e-02 -4.00906010e-03]"
"states

 states/State.java: Common state interface

package refactoring_guru.state.example.states;

import refactoring_guru.state.example.ui.Player;

/**
 * Common interface for all states.
 */
public abstract class State {
    Player player;

    /**
     * Context passes itself through the state constructor. This may help a
     * state to fetch some useful context data if needed.
     */
    State(Player player) {
        this.player = player;
    }

    public abstract String onLock();
    public abstract String onPlay();
    public abstract String onNext();
    public abstract String onPrevious();
}
 states/LockedState.java

package refactoring_guru.state.example.states;

import refactoring_guru.state.example.ui.Player;

/**
 * Concrete states provide the special implementation for all interface methods.
 */
public class LockedState extends State {

    LockedState(Player player) {
        super(player);
        player.setPlaying(false);
    }

    @Override
    public String onLock() {
        if (player.isPlaying()) {
            player.changeState(new ReadyState(player));
            return ""Stop playing"";
        } else {
            return ""Locked..."";
        }
    }

    @Override
    public String onPlay() {
        player.changeState(new ReadyState(player));
        return ""Ready"";
    }

    @Override
    public String onNext() {
        return ""Locked..."";
    }

    @Override
    public String onPrevious() {
        return ""Locked..."";
    }
}
 states/ReadyState.java

package refactoring_guru.state.example.states;

import refactoring_guru.state.example.ui.Player;

/**
 * They can also trigger state transitions in the context.
 */
public class ReadyState extends State {

    public ReadyState(Player player) {
        super(player);
    }

    @Override
    public String onLock() {
        player.changeState(new LockedState(player));
        return ""Locked..."";
    }

    @Override
    public String onPlay() {
        String action = player.startPlayback();
        player.changeState(new PlayingState(player));
        return action;
    }

    @Override
    public String onNext() {
        return ""Locked..."";
    }

    @Override
    public String onPrevious() {
        return ""Locked..."";
    }
}
 states/PlayingState.java

package refactoring_guru.state.example.states;

import refactoring_guru.state.example.ui.Player;

public class PlayingState extends State {

    PlayingState(Player player) {
        super(player);
    }

    @Override
    public String onLock() {
        player.changeState(new LockedState(player));
        player.setCurrentTrackAfterStop();
        return ""Stop playing"";
    }

    @Override
    public String onPlay() {
        player.changeState(new ReadyState(player));
        return ""Paused..."";
    }

    @Override
    public String onNext() {
        return player.nextTrack();
    }

    @Override
    public String onPrevious() {
        return player.previousTrack();
    }
}
 ui

 ui/Player.java: Player primary code

package refactoring_guru.state.example.ui;

import refactoring_guru.state.example.states.ReadyState;
import refactoring_guru.state.example.states.State;

import java.util.ArrayList;
import java.util.List;

public class Player {
    private State state;
    private boolean playing = false;
    private List<String> playlist = new ArrayList<>();
    private int currentTrack = 0;

    public Player() {
        this.state = new ReadyState(this);
        setPlaying(true);
        for (int i = 1; i <= 12; i++) {
            playlist.add(""Track "" + i);
        }
    }

    public void changeState(State state) {
        this.state = state;
    }

    public State getState() {
        return state;
    }

    public void setPlaying(boolean playing) {
        this.playing = playing;
    }

    public boolean isPlaying() {
        return playing;
    }

    public String startPlayback() {
        return ""Playing "" + playlist.get(currentTrack);
    }

    public String nextTrack() {
        currentTrack++;
        if (currentTrack > playlist.size() - 1) {
            currentTrack = 0;
        }
        return ""Playing "" + playlist.get(currentTrack);
    }

    public String previousTrack() {
        currentTrack--;
        if (currentTrack < 0) {
            currentTrack = playlist.size() - 1;
        }
        return ""Playing "" + playlist.get(currentTrack);
    }

    public void setCurrentTrackAfterStop() {
        this.currentTrack = 0;
    }
}
 ui/UI.java: Player’s GUI

package refactoring_guru.state.example.ui;

import javax.swing.*;
import java.awt.*;

public class UI {
    private Player player;
    private static JTextField textField = new JTextField();

    public UI(Player player) {
        this.player = player;
    }

    public void init() {
        JFrame frame = new JFrame(""Test player"");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        JPanel context = new JPanel();
        context.setLayout(new BoxLayout(context, BoxLayout.Y_AXIS));
        frame.getContentPane().add(context);
        JPanel buttons = new JPanel(new FlowLayout(FlowLayout.CENTER));
        context.add(textField);
        context.add(buttons);

        // Context delegates handling user's input to a state object. Naturally,
        // the outcome will depend on what state is currently active, since all
        // states can handle the input differently.
        JButton play = new JButton(""Play"");
        play.addActionListener(e -> textField.setText(player.getState().onPlay()));
        JButton stop = new JButton(""Stop"");
        stop.addActionListener(e -> textField.setText(player.getState().onLock()));
        JButton next = new JButton(""Next"");
        next.addActionListener(e -> textField.setText(player.getState().onNext()));
        JButton prev = new JButton(""Prev"");
        prev.addActionListener(e -> textField.setText(player.getState().onPrevious()));
        frame.setVisible(true);
        frame.setSize(300, 100);
        buttons.add(play);
        buttons.add(stop);
        buttons.add(next);
        buttons.add(prev);
    }
}
 Demo.java: Initialization code

package refactoring_guru.state.example;

import refactoring_guru.state.example.ui.Player;
import refactoring_guru.state.example.ui.UI;

/**
 * Demo class. Everything comes together here.
 */
public class Demo {
    public static void main(String[] args) {
        Player player = new Player();
        UI ui = new UI(player);
        ui.init();
    }
}",Java,State,Refactoring Guru,https://refactoring.guru/design-patterns/state/java/example#example-0,"[-5.23571763e-03 -4.30262089e-02 -3.63883860e-02 -7.21525699e-02
 -8.00911263e-02  1.70477822e-01  7.68690705e-02  5.56270666e-02
 -2.69464571e-02  3.43549065e-02  1.27683319e-02 -9.42250155e-03
 -1.61220389e-03 -2.90166214e-03  4.66731237e-03 -3.15397717e-02
 -4.63482412e-03  4.58487719e-02 -3.50954756e-02 -4.18422930e-02
  6.86375350e-02 -5.25136031e-02  1.80502404e-02 -2.02388130e-02
 -5.36073856e-02  6.18279651e-02 -8.79637082e-04 -4.47360426e-02
 -7.07385242e-02  4.74779448e-03 -1.01064136e-02  3.70455999e-03
 -1.44456350e-03 -2.55637076e-02 -1.09078549e-01  8.70877970e-03
 -1.19808197e-01  3.73211130e-03 -6.65703714e-02 -5.60818687e-02
 -8.71777758e-02  1.08234130e-03 -1.68056246e-02 -2.55574938e-02
  1.63057242e-02 -2.40476597e-02 -9.88911092e-02  1.39364684e-02
  5.05893789e-02 -3.86471325e-03 -7.10216835e-02  4.70444039e-02
  4.03100438e-02 -2.07688697e-02  4.63127792e-02  4.51055057e-02
  7.53364190e-02  7.98392072e-02 -3.10862698e-02  3.50369476e-02
  3.03658675e-02 -1.18660741e-02  1.40760820e-02 -1.09468214e-02
  2.66518071e-02  2.69691995e-03  3.70045006e-02 -1.54850609e-03
  7.96266086e-03 -3.15117873e-02 -2.32955976e-03  5.23885749e-02
  7.97959194e-02  2.19847541e-02 -4.48772423e-02 -5.13685606e-02
 -2.01021899e-02  1.20025119e-02  5.79762552e-03  2.21523151e-05
 -2.02442259e-02 -5.67227788e-02 -2.04211976e-02 -5.42511269e-02
  1.84233319e-02 -1.84248444e-02 -1.72473453e-02 -4.38013449e-02
  1.52554121e-02  4.97211106e-02 -4.02353033e-02  4.78847586e-02
  4.67394479e-02  5.28445803e-02  2.54826248e-02  1.02509849e-01
 -6.05123416e-02  1.48052629e-02 -6.50449395e-02  5.85883148e-02
  4.13469337e-02  1.36956535e-02 -1.31822117e-02  4.00909372e-02
  4.72749509e-02 -5.55581637e-02  1.90541781e-02  8.26666504e-03
 -5.96939847e-02 -5.91128925e-03 -3.79672460e-03  2.55952589e-02
  1.80712738e-03  2.51523908e-02 -3.33296210e-02  4.59284931e-02
  1.06807902e-01  5.11741638e-02 -1.43651851e-02  1.50642730e-03
  1.04838178e-01  2.35317089e-03 -3.13461162e-02 -4.72630709e-02
 -9.07039270e-03  3.11255027e-02 -2.51335977e-03  4.44672872e-33
  6.69199415e-03 -1.30810201e-01 -4.18585129e-02  7.54086301e-02
 -7.69061968e-02  3.28826979e-02 -1.15140667e-03  3.49382237e-02
  2.58525048e-04 -2.07824428e-02  6.48748800e-02 -2.45917849e-02
  1.28186736e-02 -7.29355589e-03  3.56060565e-02 -1.59777313e-01
  1.45288678e-02 -7.13395048e-03  2.34354176e-02 -6.72542080e-02
  6.92619234e-02  8.26336036e-04 -3.03790602e-03 -4.64523211e-03
 -1.81941539e-02  8.41245875e-02  2.14905618e-03  6.67179236e-03
 -5.32162003e-02 -1.15118176e-02  6.27150014e-02 -7.78216869e-02
 -7.80901909e-02  4.19289581e-02  1.47753619e-02  1.03052352e-02
 -3.21329199e-02 -1.23510770e-02  1.10443141e-02 -1.57391459e-01
 -5.03428392e-02 -7.62942433e-02 -2.13069972e-02 -7.01813679e-03
 -3.58112785e-03 -1.17692463e-01 -6.56245574e-02  3.85820046e-02
 -6.71278983e-02  3.16682756e-02  1.01026548e-02  9.14920121e-02
 -2.79376423e-03 -1.14324421e-01 -4.55010682e-02  2.49151904e-02
 -8.45296681e-03  7.40320608e-02 -6.04908057e-02  4.55188341e-02
 -3.07454988e-02  9.62107349e-03 -3.63766849e-02  6.91469908e-02
 -7.05402121e-02  1.25810280e-01 -2.69429982e-02 -1.21792607e-01
  6.73450977e-02 -9.63745713e-02 -2.67613437e-02 -2.31440570e-02
  8.30618143e-02  2.65830476e-02 -4.66369763e-02  1.13736521e-02
 -5.68794273e-02 -6.35319874e-02 -7.59477019e-02 -1.09607093e-01
  6.37589628e-03 -4.20225337e-02 -9.42364484e-02  1.12150513e-01
  4.85011972e-02 -8.43889359e-03 -7.47110182e-03 -1.02434782e-02
  2.36829799e-02  5.64655438e-02 -4.60087694e-02  1.24523845e-02
  4.40972708e-02  3.52492630e-02  7.69790709e-02 -5.44493759e-33
  6.55370355e-02 -2.63949204e-02 -3.09806895e-02 -5.17137013e-02
  9.66218039e-02  3.71517357e-03  9.82048339e-04  7.27037191e-02
 -5.97262420e-02 -3.64199840e-02 -4.50226553e-02  2.75432388e-03
  5.83279005e-04  8.07365682e-03 -4.88266553e-04  4.07225490e-02
  5.90318479e-02  5.41117676e-02  4.15049754e-02  4.30028997e-02
 -2.45170780e-02  8.88534784e-02 -6.95294468e-03  8.87832884e-03
 -5.87931462e-02 -8.74612853e-03  2.91734263e-02  5.22611998e-02
 -1.21531822e-02  4.38244045e-02  1.12885781e-01 -7.79769421e-02
 -4.88267243e-02  3.68896574e-02  2.77124327e-02 -5.74719943e-02
  4.75168340e-02 -5.01788873e-03 -9.65749174e-02  5.75907417e-02
  7.82922134e-02 -5.70305288e-02 -1.37715219e-02  6.37481315e-03
  2.08538417e-02  2.12951172e-02 -1.66251920e-02  7.17931986e-02
 -6.56139180e-02 -2.57328879e-02 -3.73252179e-03 -8.53406787e-02
 -4.76820581e-02 -6.52558580e-02 -6.60078367e-03  4.74503338e-02
  5.30727655e-02 -6.11612126e-02  3.68112773e-02  5.01277298e-03
  4.19590175e-02 -8.29111263e-02  1.39050996e-02  1.58413649e-02
  1.35026813e-01  2.90498920e-02 -3.15905996e-02  5.80349825e-02
  1.79044101e-02  3.59249152e-02 -1.33388266e-02  5.87651320e-02
  1.23244459e-02 -3.68002132e-02  1.21299572e-01 -1.59094366e-03
 -4.60488684e-02 -1.81693016e-04  2.46151928e-02 -2.14210395e-02
  3.83194908e-02 -3.51065211e-02  2.86489283e-03 -6.60239980e-02
  2.97904033e-02  2.89379340e-02 -3.29317711e-02  2.04626452e-02
 -2.58933920e-02 -3.01216785e-02 -6.65501654e-02  5.44595085e-02
  1.08504649e-02 -8.54057074e-03 -3.70006785e-02 -4.96169328e-08
 -5.48803322e-02 -2.30391957e-02  6.49305955e-02  4.97606769e-02
  2.36907173e-02 -1.18287541e-02 -3.94990705e-02 -7.67049715e-02
 -3.39351073e-02 -6.11975007e-02  3.21805701e-02  7.02220201e-02
  1.00600585e-01  2.29133619e-03 -3.94071871e-03 -7.84343556e-02
 -2.59937830e-02 -2.74210181e-02 -5.15865013e-02  1.27695739e-01
  3.34405303e-02 -3.67038138e-02 -4.56978641e-02  5.23246005e-02
  4.93633822e-02 -2.87762731e-02  3.03624142e-02  4.02108543e-02
  4.85142134e-02  7.14593828e-02  3.83150578e-02  2.89481189e-02
  7.79726803e-02 -1.89305237e-03 -2.94512790e-02 -2.42622709e-03
  2.95712482e-02 -8.32726527e-03  4.45546843e-02  7.20638707e-02
 -1.01516452e-02 -4.89472635e-02 -7.93594271e-02  4.93503436e-02
  7.07970653e-03 -2.07651295e-02 -3.52587588e-02 -5.92342280e-02
  4.52501215e-02 -9.42786038e-03 -1.34524256e-01  5.23911603e-03
  2.31010169e-02 -5.57333864e-02  5.14163151e-02  3.23095471e-02
  5.00824526e-02  3.40373404e-02  3.45035791e-02  8.25826600e-02
 -1.68564543e-02  2.46232525e-02 -4.44635302e-02  3.52843925e-02]"
"networks

 networks/Network.java: Base social network class

package refactoring_guru.template_method.example.networks;

/**
 * Base class of social network.
 */
public abstract class Network {
    String userName;
    String password;

    Network() {}

    /**
     * Publish the data to whatever network.
     */
    public boolean post(String message) {
        // Authenticate before posting. Every network uses a different
        // authentication method.
        if (logIn(this.userName, this.password)) {
            // Send the post data.
            boolean result =  sendData(message.getBytes());
            logOut();
            return result;
        }
        return false;
    }

    abstract boolean logIn(String userName, String password);
    abstract boolean sendData(byte[] data);
    abstract void logOut();
}
 networks/Facebook.java: Concrete social network

package refactoring_guru.template_method.example.networks;

/**
 * Class of social network
 */
public class Facebook extends Network {
    public Facebook(String userName, String password) {
        this.userName = userName;
        this.password = password;
    }

    public boolean logIn(String userName, String password) {
        System.out.println(""\nChecking user's parameters"");
        System.out.println(""Name: "" + this.userName);
        System.out.print(""Password: "");
        for (int i = 0; i < this.password.length(); i++) {
            System.out.print(""*"");
        }
        simulateNetworkLatency();
        System.out.println(""\n\nLogIn success on Facebook"");
        return true;
    }

    public boolean sendData(byte[] data) {
        boolean messagePosted = true;
        if (messagePosted) {
            System.out.println(""Message: '"" + new String(data) + ""' was posted on Facebook"");
            return true;
        } else {
            return false;
        }
    }

    public void logOut() {
        System.out.println(""User: '"" + userName + ""' was logged out from Facebook"");
    }

    private void simulateNetworkLatency() {
        try {
            int i = 0;
            System.out.println();
            while (i < 10) {
                System.out.print(""."");
                Thread.sleep(500);
                i++;
            }
        } catch (InterruptedException ex) {
            ex.printStackTrace();
        }
    }
}
 networks/Twitter.java: One more social network

package refactoring_guru.template_method.example.networks;

/**
 * Class of social network
 */
public class Twitter extends Network {

    public Twitter(String userName, String password) {
        this.userName = userName;
        this.password = password;
    }

    public boolean logIn(String userName, String password) {
        System.out.println(""\nChecking user's parameters"");
        System.out.println(""Name: "" + this.userName);
        System.out.print(""Password: "");
        for (int i = 0; i < this.password.length(); i++) {
            System.out.print(""*"");
        }
        simulateNetworkLatency();
        System.out.println(""\n\nLogIn success on Twitter"");
        return true;
    }

    public boolean sendData(byte[] data) {
        boolean messagePosted = true;
        if (messagePosted) {
            System.out.println(""Message: '"" + new String(data) + ""' was posted on Twitter"");
            return true;
        } else {
            return false;
        }
    }

    public void logOut() {
        System.out.println(""User: '"" + userName + ""' was logged out from Twitter"");
    }

    private void simulateNetworkLatency() {
        try {
            int i = 0;
            System.out.println();
            while (i < 10) {
                System.out.print(""."");
                Thread.sleep(500);
                i++;
            }
        } catch (InterruptedException ex) {
            ex.printStackTrace();
        }
    }
}
 Demo.java: Client code

package refactoring_guru.template_method.example;

import refactoring_guru.template_method.example.networks.Facebook;
import refactoring_guru.template_method.example.networks.Network;
import refactoring_guru.template_method.example.networks.Twitter;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

/**
 * Demo class. Everything comes together here.
 */
public class Demo {
    public static void main(String[] args) throws IOException {
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        Network network = null;
        System.out.print(""Input user name: "");
        String userName = reader.readLine();
        System.out.print(""Input password: "");
        String password = reader.readLine();

        // Enter the message.
        System.out.print(""Input message: "");
        String message = reader.readLine();

        System.out.println(""\nChoose social network for posting message.\n"" +
                ""1 - Facebook\n"" +
                ""2 - Twitter"");
        int choice = Integer.parseInt(reader.readLine());

        // Create proper network object and send the message.
        if (choice == 1) {
            network = new Facebook(userName, password);
        } else if (choice == 2) {
            network = new Twitter(userName, password);
        }
        network.post(message);
    }
}",Java,Template Method,Refactoring Guru,https://refactoring.guru/design-patterns/template-method/java/example#example-0,"[ 5.59787313e-03  7.58493245e-02 -6.82546124e-02 -3.34746353e-02
 -6.53236806e-02  8.49469285e-03  3.19622643e-02  3.23115364e-02
 -4.56628948e-02 -1.57318637e-02  4.39379252e-02  7.14764930e-03
  8.35547969e-02 -9.88843888e-02 -2.33492441e-02 -5.88038452e-02
 -1.66935381e-02 -2.13512499e-03 -1.31219588e-02 -6.56165406e-02
  3.26776616e-02 -2.96821110e-02 -2.82664970e-02 -1.42582683e-02
  1.12308674e-02 -5.28157782e-03  2.54584402e-02 -5.35494238e-02
 -4.98942807e-02  5.77191710e-02  4.19219248e-02  5.88147759e-06
 -6.76572397e-02  3.24592218e-02 -2.62838509e-02  2.32728794e-02
 -3.23206410e-02  1.12145031e-02 -3.11363135e-02 -6.44758344e-02
 -8.90907943e-02 -3.21963839e-02 -1.06109232e-01 -7.16960663e-03
  4.63302992e-03 -3.77406813e-02 -7.44259953e-02  1.11625120e-02
 -6.43100729e-03 -2.44791619e-02 -6.70426562e-02 -8.60205293e-03
  2.17767395e-02 -1.58704594e-02  5.91677949e-02 -1.78562086e-02
  1.62092168e-02  5.86657226e-02 -3.34728844e-02 -5.62420711e-02
  5.32074273e-03  2.02638679e-03 -1.38749257e-02  2.25082505e-02
  3.70373875e-02 -2.99984924e-02  1.99355255e-03  5.54005094e-02
  7.36818537e-02 -1.75599921e-02 -6.55720010e-02  1.06704101e-01
 -7.30620474e-02  6.91217780e-02 -3.24000344e-02  1.02545992e-02
 -1.06943808e-02 -3.87083627e-02 -2.65403688e-02 -1.98040297e-03
  1.98566318e-02  1.83666330e-02 -2.12481376e-02  1.49956355e-02
  4.77522649e-02 -1.23986322e-02 -2.07487829e-02  1.07469829e-02
 -8.71402957e-03  7.60797337e-02 -1.90917272e-02  1.08509436e-01
 -4.01749164e-02  1.10862649e-03  5.02065988e-03  9.71313864e-02
 -7.47691989e-02  1.54548902e-02 -4.63423990e-02  1.13096938e-01
 -3.41329798e-02  1.76593978e-02  3.42580453e-02 -4.30600904e-02
  1.17644280e-01  1.72064028e-04  3.79244238e-02 -1.83000639e-02
  6.96084574e-02 -1.10367378e-02 -4.17014509e-02  1.38203492e-02
 -7.03909397e-02 -1.63824130e-02  6.30047321e-02 -3.33565585e-02
  9.43196788e-02  3.82870287e-02  4.63999389e-03  4.26352248e-02
  6.57335371e-02  7.25883571e-03 -1.25654610e-02 -4.53258343e-02
  3.40946279e-02 -1.31477980e-04 -2.10725684e-02  3.75778361e-33
  9.29217041e-03 -3.99539620e-02 -5.15871122e-02  9.74221453e-02
  7.59571092e-03  6.28701271e-03  2.99723893e-02  9.43603087e-03
 -8.35617818e-03 -5.67559190e-02 -7.93668255e-02 -8.30168352e-02
  1.04740471e-01 -3.27649824e-02  3.65598164e-02 -5.46231866e-02
  3.36358733e-02  3.69996764e-02  4.95242476e-02  7.86792487e-03
  7.50324801e-02 -8.68852139e-02  4.33228165e-02  1.32420603e-02
  4.29659477e-03  1.97002925e-02  1.78630501e-02  2.85436846e-02
 -3.83893065e-02  4.53964079e-04  8.07514414e-02 -3.28423418e-02
 -7.58993328e-02  4.60047796e-02  5.73454425e-02 -4.73591052e-02
  9.59093422e-02 -2.19876338e-02 -6.41946569e-02 -1.06754780e-01
 -6.30075186e-02 -5.10189384e-02  1.46619650e-02  2.37611495e-02
  9.76885576e-03 -6.21445812e-02 -1.02107033e-01  4.83589470e-02
 -2.48349062e-03  2.02851575e-02  2.10295580e-02  9.29934382e-02
  1.24652423e-02 -3.28496657e-02 -1.22093838e-02  2.40165573e-02
  6.88591693e-03  3.33890989e-02 -2.43528076e-02  4.97125387e-02
 -5.89575097e-02  2.86413115e-02 -4.12609167e-02  4.40189522e-03
  4.86964360e-02  6.32513920e-03 -2.38742139e-02 -1.06805898e-01
  5.11510260e-02 -8.20422247e-02 -3.22313383e-02 -5.11581898e-02
  5.04407249e-02  1.42438430e-02 -6.88578337e-02  4.13380861e-02
 -8.63395110e-02 -1.58373732e-02 -8.70808586e-02 -4.11727279e-02
  4.70999442e-02 -2.09942143e-02 -7.81884640e-02  9.30396933e-03
 -1.31969992e-02  2.90281195e-02  4.51689363e-02 -5.34214862e-02
  2.95047686e-02  5.91026731e-02 -2.94558089e-02  4.30755727e-02
  3.69725637e-02 -1.53300082e-02  2.08383594e-02 -4.51792658e-33
 -2.51663104e-02  6.25362471e-02 -4.29957546e-03 -5.45653515e-02
  6.44591600e-02  3.62609215e-02  2.74558377e-04  4.83653694e-03
 -1.05564617e-01  8.39454401e-03 -1.26895029e-02 -8.06505531e-02
 -8.46025348e-03  1.39768422e-02  9.04990286e-02  1.35267628e-02
  2.76519433e-02 -2.43276935e-02 -5.84489554e-02  3.18915285e-02
 -7.08531439e-02  9.93917808e-02  6.67320099e-03 -2.04903223e-02
 -8.17579497e-03  1.80039089e-02 -3.59311490e-03  4.78969775e-02
 -1.95190851e-02 -5.56597160e-03  4.18079421e-02  3.41873467e-02
 -3.35325748e-02  4.07094434e-02  5.39650582e-02 -1.81290917e-02
  3.98444794e-02  3.79398577e-02  1.00905653e-02  9.73849297e-02
  1.48850530e-01 -4.60216478e-02 -5.13009429e-02  4.37756861e-03
 -3.37153859e-03 -2.75945701e-02 -7.19433725e-02  3.64497975e-02
 -2.42549833e-02  3.34208459e-03  4.19808701e-02 -1.04782306e-01
  9.48406756e-03  1.59527473e-02  3.52315828e-02  5.16038388e-02
  7.52569512e-02 -2.17990763e-02  7.06994236e-02  2.61886716e-02
  8.38177744e-03 -1.57572076e-01  3.32314661e-03  5.85548133e-02
  9.50053856e-02 -5.69876097e-02  1.02489498e-02  3.59215401e-02
 -2.85036005e-02  4.90101799e-02 -2.42274310e-02  5.58954291e-02
  1.16334548e-02 -1.11345276e-02  1.35576501e-01 -4.16954979e-04
 -4.76288162e-02  1.23609500e-02 -5.75619340e-02  2.43222062e-02
  1.02008870e-02  1.41291032e-02 -3.72295529e-02 -5.12883179e-02
  7.19347745e-02 -1.13392361e-01  5.91448974e-03  5.02868704e-02
 -4.80005033e-02 -6.93653151e-02 -2.16943603e-02  6.00516684e-02
 -1.61227509e-02  2.83277165e-02 -1.80831552e-02 -4.88990288e-08
 -5.70340753e-02 -1.11229226e-01  8.79900251e-03  7.60264024e-02
  7.43179023e-02  7.27559850e-02 -2.05915757e-02 -1.11574806e-01
 -4.28633561e-04  1.74884722e-02 -8.36878791e-02  6.04919232e-02
  4.78767082e-02  2.20428277e-02  1.21760936e-02 -1.37722701e-01
 -5.25168367e-02 -1.27280623e-01 -3.80643792e-02  1.62963923e-02
  5.88254891e-02 -5.54587021e-02 -1.25593647e-01  7.31360540e-02
  5.16818315e-02  1.63444299e-02  4.93992008e-02  6.10872507e-02
 -1.36683937e-02  2.94690244e-02 -1.91135779e-02  5.61355278e-02
  4.19911966e-02 -1.69895981e-02 -4.61422578e-02  8.92192870e-02
  6.51737377e-02 -1.98019836e-02  1.52088599e-02  5.59451468e-02
  2.78080604e-03  2.14626305e-02  1.69702549e-03 -1.35216154e-02
  7.16205463e-02 -6.84885383e-02  4.59590275e-03  2.92491578e-02
  3.70913856e-02 -5.33287972e-03 -1.24082647e-01 -1.52716758e-02
  1.92126539e-02 -6.62965178e-02 -5.33991642e-02 -1.02219395e-01
  4.87498790e-02 -5.22829890e-02  4.89056744e-02  6.36631027e-02
  3.37267965e-02  8.98331590e-03 -6.06990531e-02 -5.18736243e-02]"
"commands

 commands/Command.java: Abstract base command

package refactoring_guru.command.example.commands;

import refactoring_guru.command.example.editor.Editor;

public abstract class Command {
    public Editor editor;
    private String backup;

    Command(Editor editor) {
        this.editor = editor;
    }

    void backup() {
        backup = editor.textField.getText();
    }

    public void undo() {
        editor.textField.setText(backup);
    }

    public abstract boolean execute();
}
 commands/CopyCommand.java: Copy selected text to clipboard

package refactoring_guru.command.example.commands;

import refactoring_guru.command.example.editor.Editor;

public class CopyCommand extends Command {

    public CopyCommand(Editor editor) {
        super(editor);
    }

    @Override
    public boolean execute() {
        editor.clipboard = editor.textField.getSelectedText();
        return false;
    }
}
 commands/PasteCommand.java: Paste text from clipboard

package refactoring_guru.command.example.commands;

import refactoring_guru.command.example.editor.Editor;

public class PasteCommand extends Command {

    public PasteCommand(Editor editor) {
        super(editor);
    }

    @Override
    public boolean execute() {
        if (editor.clipboard == null || editor.clipboard.isEmpty()) return false;

        backup();
        editor.textField.insert(editor.clipboard, editor.textField.getCaretPosition());
        return true;
    }
}
 commands/CutCommand.java: Cut text to clipboard

package refactoring_guru.command.example.commands;

import refactoring_guru.command.example.editor.Editor;

public class CutCommand extends Command {

    public CutCommand(Editor editor) {
        super(editor);
    }

    @Override
    public boolean execute() {
        if (editor.textField.getSelectedText().isEmpty()) return false;

        backup();
        String source = editor.textField.getText();
        editor.clipboard = editor.textField.getSelectedText();
        editor.textField.setText(cutString(source));
        return true;
    }

    private String cutString(String source) {
        String start = source.substring(0, editor.textField.getSelectionStart());
        String end = source.substring(editor.textField.getSelectionEnd());
        return start + end;
    }
}
 commands/CommandHistory.java: Command history

package refactoring_guru.command.example.commands;

import java.util.Stack;

public class CommandHistory {
    private Stack<Command> history = new Stack<>();

    public void push(Command c) {
        history.push(c);
    }

    public Command pop() {
        return history.pop();
    }

    public boolean isEmpty() { return history.isEmpty(); }
}
 editor

 editor/Editor.java: GUI of text editor

package refactoring_guru.command.example.editor;

import refactoring_guru.command.example.commands.*;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class Editor {
    public JTextArea textField;
    public String clipboard;
    private CommandHistory history = new CommandHistory();

    public void init() {
        JFrame frame = new JFrame(""Text editor (type & use buttons, Luke!)"");
        JPanel content = new JPanel();
        frame.setContentPane(content);
        frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        content.setLayout(new BoxLayout(content, BoxLayout.Y_AXIS));
        textField = new JTextArea();
        textField.setLineWrap(true);
        content.add(textField);
        JPanel buttons = new JPanel(new FlowLayout(FlowLayout.CENTER));
        JButton ctrlC = new JButton(""Ctrl+C"");
        JButton ctrlX = new JButton(""Ctrl+X"");
        JButton ctrlV = new JButton(""Ctrl+V"");
        JButton ctrlZ = new JButton(""Ctrl+Z"");
        Editor editor = this;
        ctrlC.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                executeCommand(new CopyCommand(editor));
            }
        });
        ctrlX.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                executeCommand(new CutCommand(editor));
            }
        });
        ctrlV.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                executeCommand(new PasteCommand(editor));
            }
        });
        ctrlZ.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                undo();
            }
        });
        buttons.add(ctrlC);
        buttons.add(ctrlX);
        buttons.add(ctrlV);
        buttons.add(ctrlZ);
        content.add(buttons);
        frame.setSize(450, 200);
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
    }

    private void executeCommand(Command command) {
        if (command.execute()) {
            history.push(command);
        }
    }

    private void undo() {
        if (history.isEmpty()) return;

        Command command = history.pop();
        if (command != null) {
            command.undo();
        }
    }
}
 Demo.java: Client code

package refactoring_guru.command.example;

import refactoring_guru.command.example.editor.Editor;

public class Demo {
    public static void main(String[] args) {
        Editor editor = new Editor();
        editor.init();
    }
}",Java,Command,Refactoring Guru,https://refactoring.guru/design-patterns/command/java/example#example-0,"[-1.62787288e-02 -5.43329194e-02 -3.44183072e-02  1.25363851e-02
 -8.23602527e-02  7.42824674e-02  1.08957393e-02  8.29769373e-02
 -6.08795136e-03  1.93319898e-02  3.96753997e-02 -6.04043677e-02
 -6.05433760e-03 -5.55775799e-02 -1.40600465e-03 -4.96982969e-02
 -3.78879085e-02  4.56126668e-02 -7.47545063e-02 -1.95813607e-02
  3.91036496e-02 -1.35992207e-02  8.73223320e-02 -2.88940258e-02
 -8.95686855e-04  4.63649891e-02  4.09977976e-03 -4.48823944e-02
 -6.31272942e-02  1.13982549e-02 -4.74185497e-03 -5.56045352e-03
  5.29260971e-02  4.66865348e-03 -4.40488458e-02  1.42307848e-01
 -7.35304207e-02  3.92329432e-02  4.04717081e-04 -8.02315399e-02
 -1.37493446e-01 -2.83288164e-03 -7.62828486e-03 -1.11391265e-02
  1.78325847e-02 -7.38625228e-02 -7.30604529e-02 -3.93297300e-02
  4.27684374e-02  2.27977298e-02 -2.28149407e-02  1.70663279e-02
 -1.64898429e-02 -5.78712821e-02 -3.62968966e-02  6.95648268e-02
  2.63561402e-02  3.58331576e-02 -1.27996597e-03  4.53111995e-03
  1.05510848e-02  1.39459120e-02 -2.23717932e-02 -1.37108350e-02
 -2.23352090e-02  3.15194507e-03  2.24251971e-02  2.04594843e-02
 -3.70247848e-03 -6.86326697e-02 -2.63313856e-02 -3.73154925e-03
 -5.33074401e-02  2.52709072e-02 -8.61179456e-02 -1.68967657e-02
 -5.00638853e-04  4.57218811e-02 -2.66979150e-02 -1.91156901e-02
  4.30181809e-02 -3.81679274e-02 -1.28974961e-02  3.54462788e-02
  5.67464754e-02  2.44149622e-02  4.09818109e-04 -1.30753648e-02
  6.54496402e-02  1.08589306e-01  1.98834166e-02 -2.12379321e-02
  6.17894419e-02  2.00249497e-02  1.30418371e-02  3.21622528e-02
 -4.21917364e-02  5.87339886e-02 -5.53085208e-02  5.50220497e-02
  7.46261096e-03  2.53971368e-02 -3.89094576e-02  1.34951631e-02
  9.40399468e-02 -1.81592815e-02  2.49938723e-02 -7.74350986e-02
 -5.26168756e-02 -2.42018495e-02 -4.51544635e-02  1.59273352e-02
 -3.33519429e-02 -2.86039021e-02  5.95152602e-02 -2.66524032e-02
  1.12649992e-01  1.03310542e-02 -1.20870629e-02  3.52896005e-02
  9.51991156e-02  3.40340175e-02 -8.54661018e-02  1.13109061e-02
  1.50530227e-02  8.06519482e-03  1.85108427e-02  5.23496895e-33
  8.95161405e-02 -4.32234444e-02 -6.21660100e-03  6.36555478e-02
 -1.56113869e-02  5.17743379e-02  1.51769854e-02  1.03443436e-01
 -1.43026551e-02 -6.79888278e-02  2.46560741e-02 -9.66493636e-02
  1.23653458e-02 -5.68693969e-04 -1.73487309e-02 -8.05973634e-02
  1.38672942e-03  2.92344280e-02  4.55710664e-03 -5.41312695e-02
  1.30502849e-05  7.93472398e-03 -7.01738335e-03  4.60340977e-02
  1.50364116e-02  5.02598435e-02  2.57630795e-02  5.57745583e-02
 -2.99070925e-02 -7.39140110e-03  1.50958570e-02 -8.84878039e-02
 -4.17969786e-02  4.47682142e-02 -3.77705768e-02  4.10728641e-02
 -2.68289261e-02  2.56025954e-03  4.04228196e-02 -6.64509907e-02
 -7.75085613e-02 -8.33639875e-02 -2.26989258e-02 -7.87037015e-02
  2.10898686e-02 -1.32571608e-01 -6.77315593e-02  1.27896547e-01
 -4.09954749e-02 -3.43081914e-03  4.24314179e-02  9.80279818e-02
  4.29372936e-02 -6.35569021e-02 -3.03805787e-02  3.57558206e-02
 -6.05274504e-03  1.03359699e-01 -5.93495090e-03  7.35133290e-02
 -4.90762331e-02  1.44346461e-01 -4.40474227e-02  9.97290909e-02
 -1.73012018e-02  9.06740576e-02 -3.12140398e-02 -1.00652605e-01
  2.10783705e-02 -7.95840546e-02 -5.12096621e-02 -3.68271098e-02
  4.18978371e-02 -1.37559390e-02  2.64730603e-02 -2.54717581e-02
 -1.02369599e-01 -9.34529752e-02 -3.29478681e-02 -7.18143880e-02
 -5.81437647e-02 -1.64389778e-02 -3.88784483e-02  1.05556557e-02
  8.42007250e-02  2.62048710e-02  3.57998796e-02  8.00944923e-04
  7.63595030e-02 -8.94063059e-03  1.35256699e-03 -1.11861750e-02
 -4.07168316e-03 -1.22757526e-02  9.73443463e-02 -5.50482866e-33
  7.70008489e-02  6.62407354e-02 -6.31268173e-02  1.89973842e-02
  2.68803611e-02  1.21461442e-02 -6.47703335e-02  1.18293185e-02
 -7.75803849e-02 -6.39198422e-02 -6.81878328e-02  2.36193761e-02
 -2.75033787e-02 -1.50053040e-03  2.73790900e-02  6.39405921e-02
  2.19084732e-02  2.79278494e-02 -4.79250811e-02 -1.77726727e-02
  3.21822986e-02  3.44445705e-02  6.87740967e-02  5.20079061e-02
 -5.10768294e-02 -6.31630346e-02  3.14633138e-02  1.06540911e-01
  4.23650891e-02 -2.74403556e-03  5.80600537e-02  2.54104566e-02
 -7.35929012e-02  1.23406528e-02  4.12759259e-02 -6.39842227e-02
  1.87960155e-02  6.67918622e-02 -1.27344429e-02  1.01033442e-01
  7.35103637e-02 -7.00802803e-02  3.89990173e-02  2.84453761e-02
  1.75502140e-03 -1.15068732e-02 -4.05720137e-02  6.35962263e-02
 -2.15962529e-02 -2.69660186e-02 -3.06760911e-02 -9.16282684e-02
 -5.81381172e-02 -3.56985144e-02  3.75142433e-02  3.93241048e-02
  5.52262850e-02 -1.97733641e-02  2.29989775e-02 -1.12030255e-02
 -1.21369176e-02 -7.19409585e-02  4.84011993e-02  2.21766606e-02
  1.43841311e-01 -1.84412263e-02  1.72230415e-02  9.96354818e-02
 -6.67582452e-02  2.91968230e-03  3.28014158e-02  1.48339923e-02
  2.80528944e-02 -4.19129096e-02  1.07596159e-01  2.50272043e-02
 -2.41012734e-04 -1.42524913e-02 -4.28964756e-03  1.73049867e-02
  9.74326581e-02  3.42021976e-03  3.83265987e-02 -7.77015686e-02
 -2.58709211e-02 -2.44363584e-02 -7.04637691e-02  6.06993213e-02
 -7.20047280e-02 -8.06121975e-02 -9.38435867e-02  1.96266659e-02
  6.66425452e-02  5.58757642e-03 -2.36152206e-02 -4.61696850e-08
 -5.49576059e-02 -5.55700585e-02  5.00878319e-02  3.91894244e-02
  4.01829779e-02 -3.86807099e-02 -7.29994476e-02 -3.66919376e-02
  2.50797719e-03 -8.16681758e-02  1.29552362e-02  4.66692373e-02
  2.26453561e-02  2.17010789e-02 -3.36439908e-02 -1.07379355e-01
  1.13350553e-02 -7.68314907e-03 -2.19686106e-02  4.95290644e-02
  4.98663001e-02 -6.98347241e-02 -5.07448521e-03  1.07870651e-02
  7.26440921e-02 -6.52484894e-02 -2.11415011e-02  5.95582537e-02
  1.09250546e-02  6.89504892e-02  4.67054397e-02  2.45992653e-02
  1.09511271e-01  2.91066952e-02 -6.38620630e-02 -3.25411595e-02
  1.12543434e-01 -4.74696159e-02 -9.97976679e-03  4.73188125e-02
  9.22145601e-03 -4.99885269e-02 -5.32222576e-02  1.02105580e-04
 -9.79123171e-03 -4.73270118e-02  4.43731695e-02  6.14762213e-03
  3.31321396e-02 -4.04830836e-02 -1.18677773e-01  1.63650103e-02
  7.38454163e-02 -5.90129569e-02 -2.67980080e-02  7.03815743e-03
  4.75055538e-02  8.57778545e-03  5.21039739e-02  6.50102049e-02
 -3.63107510e-02  2.10198574e-02 -5.11345826e-02 -1.57510992e-02]"
"components: Colleague classes

 components/Component.java

package refactoring_guru.mediator.example.components;

import refactoring_guru.mediator.example.mediator.Mediator;

/**
 * Common component interface.
 */
public interface Component {
    void setMediator(Mediator mediator);
    String getName();
}
 components/AddButton.java

package refactoring_guru.mediator.example.components;

import refactoring_guru.mediator.example.mediator.Mediator;
import refactoring_guru.mediator.example.mediator.Note;

import javax.swing.*;
import java.awt.event.ActionEvent;

/**
 * Concrete components don't talk with each other. They have only one
 * communication channel–sending requests to the mediator.
 */
public class AddButton extends JButton implements Component {
    private Mediator mediator;

    public AddButton() {
        super(""Add"");
    }

    @Override
    public void setMediator(Mediator mediator) {
        this.mediator = mediator;
    }

    @Override
    protected void fireActionPerformed(ActionEvent actionEvent) {
        mediator.addNewNote(new Note());
    }

    @Override
    public String getName() {
        return ""AddButton"";
    }
}
 components/DeleteButton.java

package refactoring_guru.mediator.example.components;

import refactoring_guru.mediator.example.mediator.Mediator;

import javax.swing.*;
import java.awt.event.ActionEvent;

/**
 * Concrete components don't talk with each other. They have only one
 * communication channel–sending requests to the mediator.
 */
public class DeleteButton extends JButton  implements Component {
    private Mediator mediator;

    public DeleteButton() {
        super(""Del"");
    }

    @Override
    public void setMediator(Mediator mediator) {
        this.mediator = mediator;
    }

    @Override
    protected void fireActionPerformed(ActionEvent actionEvent) {
        mediator.deleteNote();
    }

    @Override
    public String getName() {
        return ""DelButton"";
    }
}
 components/Filter.java

package refactoring_guru.mediator.example.components;

import refactoring_guru.mediator.example.mediator.Mediator;
import refactoring_guru.mediator.example.mediator.Note;

import javax.swing.*;
import java.awt.event.KeyEvent;
import java.util.ArrayList;

/**
 * Concrete components don't talk with each other. They have only one
 * communication channel–sending requests to the mediator.
 */
public class Filter extends JTextField implements Component {
    private Mediator mediator;
    private ListModel listModel;

    public Filter() {}

    @Override
    public void setMediator(Mediator mediator) {
        this.mediator = mediator;
    }

    @Override
    protected void processComponentKeyEvent(KeyEvent keyEvent) {
        String start = getText();
        searchElements(start);
    }

    public void setList(ListModel listModel) {
        this.listModel = listModel;
    }

    private void searchElements(String s) {
        if (listModel == null) {
            return;
        }

        if (s.equals("""")) {
            mediator.setElementsList(listModel);
            return;
        }

        ArrayList<Note> notes = new ArrayList<>();
        for (int i = 0; i < listModel.getSize(); i++) {
            notes.add((Note) listModel.getElementAt(i));
        }
        DefaultListModel<Note> listModel = new DefaultListModel<>();
        for (Note note : notes) {
            if (note.getName().contains(s)) {
                listModel.addElement(note);
            }
        }
        mediator.setElementsList(listModel);
    }

    @Override
    public String getName() {
        return ""Filter"";
    }
}
 components/List.java

package refactoring_guru.mediator.example.components;

import refactoring_guru.mediator.example.mediator.Mediator;
import refactoring_guru.mediator.example.mediator.Note;

import javax.swing.*;

/**
 * Concrete components don't talk with each other. They have only one
 * communication channel–sending requests to the mediator.
 */
@SuppressWarnings(""unchecked"")
public class List extends JList implements Component {
    private Mediator mediator;
    private final DefaultListModel LIST_MODEL;

    public List(DefaultListModel listModel) {
        super(listModel);
        this.LIST_MODEL = listModel;
        setModel(listModel);
        this.setLayoutOrientation(JList.VERTICAL);
        Thread thread = new Thread(new Hide(this));
        thread.start();
    }

    @Override
    public void setMediator(Mediator mediator) {
        this.mediator = mediator;
    }

    public void addElement(Note note) {
        LIST_MODEL.addElement(note);
        int index = LIST_MODEL.size() - 1;
        setSelectedIndex(index);
        ensureIndexIsVisible(index);
        mediator.sendToFilter(LIST_MODEL);
    }

    public void deleteElement() {
        int index = this.getSelectedIndex();
        try {
            LIST_MODEL.remove(index);
            mediator.sendToFilter(LIST_MODEL);
        } catch (ArrayIndexOutOfBoundsException ignored) {}
    }

    public Note getCurrentElement() {
        return (Note)getSelectedValue();
    }

    @Override
    public String getName() {
        return ""List"";
    }

    private class Hide implements Runnable {
        private List list;

        Hide(List list) {
            this.list = list;
        }

        @Override
        public void run() {
            while (true) {
                try {
                    Thread.sleep(300);
                } catch (InterruptedException ex) {
                    ex.printStackTrace();
                }
                if (list.isSelectionEmpty()) {
                    mediator.hideElements(true);
                } else {
                    mediator.hideElements(false);
                }
            }
        }
    }
}
 components/SaveButton.java

package refactoring_guru.mediator.example.components;

import refactoring_guru.mediator.example.mediator.Mediator;

import javax.swing.*;
import java.awt.event.ActionEvent;

/**
 * Concrete components don't talk with each other. They have only one
 * communication channel–sending requests to the mediator.
 */
public class SaveButton extends JButton implements Component {
    private Mediator mediator;

    public SaveButton() {
        super(""Save"");
    }

    @Override
    public void setMediator(Mediator mediator) {
        this.mediator = mediator;
    }

    @Override
    protected void fireActionPerformed(ActionEvent actionEvent) {
        mediator.saveChanges();
    }

    @Override
    public String getName() {
        return ""SaveButton"";
    }
}
 components/TextBox.java

package refactoring_guru.mediator.example.components;

import refactoring_guru.mediator.example.mediator.Mediator;

import javax.swing.*;
import java.awt.event.KeyEvent;

/**
 * Concrete components don't talk with each other. They have only one
 * communication channel–sending requests to the mediator.
 */
public class TextBox extends JTextArea implements Component {
    private Mediator mediator;

    @Override
    public void setMediator(Mediator mediator) {
        this.mediator = mediator;
    }

    @Override
    protected void processComponentKeyEvent(KeyEvent keyEvent) {
        mediator.markNote();
    }

    @Override
    public String getName() {
        return ""TextBox"";
    }
}
 components/Title.java

package refactoring_guru.mediator.example.components;

import refactoring_guru.mediator.example.mediator.Mediator;

import javax.swing.*;
import java.awt.event.KeyEvent;

/**
 * Concrete components don't talk with each other. They have only one
 * communication channel–sending requests to the mediator.
 */
public class Title extends JTextField implements Component {
    private Mediator mediator;

    @Override
    public void setMediator(Mediator mediator) {
        this.mediator = mediator;
    }

    @Override
    protected void processComponentKeyEvent(KeyEvent keyEvent) {
        mediator.markNote();
    }

    @Override
    public String getName() {
        return ""Title"";
    }
}
 mediator

 mediator/Mediator.java: Defines common mediator interface

package refactoring_guru.mediator.example.mediator;

import refactoring_guru.mediator.example.components.Component;

import javax.swing.*;

/**
 * Common mediator interface.
 */
public interface Mediator {
    void addNewNote(Note note);
    void deleteNote();
    void getInfoFromList(Note note);
    void saveChanges();
    void markNote();
    void clear();
    void sendToFilter(ListModel listModel);
    void setElementsList(ListModel list);
    void registerComponent(Component component);
    void hideElements(boolean flag);
    void createGUI();
}
 mediator/Editor.java: Concrete mediator

package refactoring_guru.mediator.example.mediator;

import refactoring_guru.mediator.example.components.*;
import refactoring_guru.mediator.example.components.Component;
import refactoring_guru.mediator.example.components.List;

import javax.swing.*;
import javax.swing.border.LineBorder;
import java.awt.*;

/**
 * Concrete mediator. All chaotic communications between concrete components
 * have been extracted to the mediator. Now components only talk with the
 * mediator, which knows who has to handle a request.
 */
public class Editor implements Mediator {
    private Title title;
    private TextBox textBox;
    private AddButton add;
    private DeleteButton del;
    private SaveButton save;
    private List list;
    private Filter filter;

    private JLabel titleLabel = new JLabel(""Title:"");
    private JLabel textLabel = new JLabel(""Text:"");
    private JLabel label = new JLabel(""Add or select existing note to proceed..."");
  
    /**
     * Here the registration of components by the mediator.
     */
    @Override
    public void registerComponent(Component component) {
        component.setMediator(this);
        switch (component.getName()) {
            case ""AddButton"":
                add = (AddButton)component;
                break;
            case ""DelButton"":
                del = (DeleteButton)component;
                break;
            case ""Filter"":
                filter = (Filter)component;
                break;
            case ""List"":
                list = (List)component;
                this.list.addListSelectionListener(listSelectionEvent -> {
                    Note note = (Note)list.getSelectedValue();
                    if (note != null) {
                        getInfoFromList(note);
                    } else {
                        clear();
                    }
                });
                break;
            case ""SaveButton"":
                save = (SaveButton)component;
                break;
            case ""TextBox"":
                textBox = (TextBox)component;
                break;
            case ""Title"":
                title = (Title)component;
                break;
        }
    }

    /**
     * Various methods to handle requests from particular components.
     */
    @Override
    public void addNewNote(Note note) {
        title.setText("""");
        textBox.setText("""");
        list.addElement(note);
    }

    @Override
    public void deleteNote() {
        list.deleteElement();
    }

    @Override
    public void getInfoFromList(Note note) {
        title.setText(note.getName().replace('*', ' '));
        textBox.setText(note.getText());
    }

    @Override
    public void saveChanges() {
        try {
            Note note = (Note) list.getSelectedValue();
            note.setName(title.getText());
            note.setText(textBox.getText());
            list.repaint();
        } catch (NullPointerException ignored) {}
    }

    @Override
    public void markNote() {
        try {
            Note note = list.getCurrentElement();
            String name = note.getName();
            if (!name.endsWith(""*"")) {
                note.setName(note.getName() + ""*"");
            }
            list.repaint();
        } catch (NullPointerException ignored) {}
    }

    @Override
    public void clear() {
        title.setText("""");
        textBox.setText("""");
    }

    @Override
    public void sendToFilter(ListModel listModel) {
        filter.setList(listModel);
    }

    @SuppressWarnings(""unchecked"")
    @Override
    public void setElementsList(ListModel list) {
        this.list.setModel(list);
        this.list.repaint();
    }

    @Override
    public void hideElements(boolean flag) {
        titleLabel.setVisible(!flag);
        textLabel.setVisible(!flag);
        title.setVisible(!flag);
        textBox.setVisible(!flag);
        save.setVisible(!flag);
        label.setVisible(flag);
    }

    @Override
    public void createGUI() {
        JFrame notes = new JFrame(""Notes"");
        notes.setSize(960, 600);
        notes.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        JPanel left = new JPanel();
        left.setBorder(new LineBorder(Color.BLACK));
        left.setSize(320, 600);
        left.setLayout(new BoxLayout(left, BoxLayout.Y_AXIS));
        JPanel filterPanel = new JPanel();
        filterPanel.add(new JLabel(""Filter:""));
        filter.setColumns(20);
        filterPanel.add(filter);
        filterPanel.setPreferredSize(new Dimension(280, 40));
        JPanel listPanel = new JPanel();
        list.setFixedCellWidth(260);
        listPanel.setSize(320, 470);
        JScrollPane scrollPane = new JScrollPane(list);
        scrollPane.setPreferredSize(new Dimension(275, 410));
        listPanel.add(scrollPane);
        JPanel buttonPanel = new JPanel();
        add.setPreferredSize(new Dimension(85, 25));
        buttonPanel.add(add);
        del.setPreferredSize(new Dimension(85, 25));
        buttonPanel.add(del);
        buttonPanel.setLayout(new FlowLayout());
        left.add(filterPanel);
        left.add(listPanel);
        left.add(buttonPanel);
        JPanel right = new JPanel();
        right.setLayout(null);
        right.setSize(640, 600);
        right.setLocation(320, 0);
        right.setBorder(new LineBorder(Color.BLACK));
        titleLabel.setBounds(20, 4, 50, 20);
        title.setBounds(60, 5, 555, 20);
        textLabel.setBounds(20, 4, 50, 130);
        textBox.setBorder(new LineBorder(Color.DARK_GRAY));
        textBox.setBounds(20, 80, 595, 410);
        save.setBounds(270, 535, 80, 25);
        label.setFont(new Font(""Verdana"", Font.PLAIN, 22));
        label.setBounds(100, 240, 500, 100);
        right.add(label);
        right.add(titleLabel);
        right.add(title);
        right.add(textLabel);
        right.add(textBox);
        right.add(save);
        notes.setLayout(null);
        notes.getContentPane().add(left);
        notes.getContentPane().add(right);
        notes.setResizable(false);
        notes.setLocationRelativeTo(null);
        notes.setVisible(true);
    }
}
 mediator/Note.java: A note’s class

package refactoring_guru.mediator.example.mediator;

/**
 * Note class.
 */
public class Note {
    private String name;
    private String text;

    public Note() {
        name = ""New note"";
    }

    public void setName(String name) {
        this.name = name;
    }

    public void setText(String text) {
        this.text = text;
    }

    public String getName() {
        return name;
    }

    public String getText() {
        return text;
    }

    @Override
    public String toString() {
        return name;
    }
}
 Demo.java: Initialization code

package refactoring_guru.mediator.example;

import refactoring_guru.mediator.example.components.*;
import refactoring_guru.mediator.example.mediator.Editor;
import refactoring_guru.mediator.example.mediator.Mediator;

import javax.swing.*;

/**
 * Demo class. Everything comes together here.
 */
public class Demo {
    public static void main(String[] args) {
        Mediator mediator = new Editor();

        mediator.registerComponent(new Title());
        mediator.registerComponent(new TextBox());
        mediator.registerComponent(new AddButton());
        mediator.registerComponent(new DeleteButton());
        mediator.registerComponent(new SaveButton());
        mediator.registerComponent(new List(new DefaultListModel()));
        mediator.registerComponent(new Filter());

        mediator.createGUI();
    }
}",Java,Mediator,Refactoring Guru,https://refactoring.guru/design-patterns/mediator/java/example#example-0,"[ 5.74154174e-03 -3.29636596e-02 -4.71326662e-03 -1.02253687e-02
 -3.84323560e-02  9.23793316e-02  8.72631446e-02  5.67921400e-02
  1.16273575e-03 -2.68896874e-02  2.47361045e-02 -1.97488014e-02
  2.60870233e-02 -4.26061600e-02 -4.91887983e-03 -7.14568049e-02
 -3.88069153e-02  1.91803705e-02 -7.02895075e-02 -2.18835436e-02
  8.23522657e-02 -4.04151715e-02  4.50085849e-02 -9.10052881e-02
 -1.48935569e-02  2.31771152e-02  5.19480258e-02 -5.41258603e-02
 -5.19800149e-02 -2.60542277e-02  5.62678352e-02  1.10058086e-02
 -4.46895091e-03 -3.98978638e-03 -5.90297990e-02  2.90842541e-02
 -1.08428761e-01  2.10919343e-02 -5.42090125e-02 -5.68029135e-02
 -7.67598078e-02  1.27812428e-02 -4.77943290e-03 -5.49461022e-02
 -2.24763192e-02 -6.24290556e-02 -6.62107021e-02 -4.88815233e-02
  1.88966580e-02 -2.16800552e-02 -6.58331290e-02  1.22087365e-02
  7.26294098e-03  1.28555605e-02 -1.73955318e-02 -4.21204092e-03
  1.24208657e-02  3.24606076e-02 -6.12345058e-03  1.09927487e-02
 -1.23443315e-03 -5.44075780e-02 -7.23259896e-03 -2.45624017e-02
  4.90946276e-03 -7.07089389e-03  4.99244630e-02  1.45925079e-02
 -1.06472068e-03 -4.96780835e-02 -2.58174222e-02  5.19292690e-02
  5.25372624e-02  3.19705009e-02 -3.85232754e-02 -5.02504036e-02
 -1.47898225e-02  2.55826041e-02  2.01139716e-03  5.18283062e-03
  3.64245772e-02 -3.48182209e-02 -3.65018770e-02 -3.11378054e-02
  4.74654883e-02  5.42969294e-02 -5.84435798e-02 -3.58425677e-02
  1.21762762e-02  1.97140500e-02 -5.04446737e-02  1.72699932e-02
  3.17961839e-03  7.12905824e-02  3.93217168e-04  3.56191359e-02
 -5.12284487e-02  2.73354463e-02 -5.10365628e-02  8.53039697e-02
  1.88839454e-02  9.97507945e-03 -3.52175422e-02  4.69978452e-02
  5.64313903e-02 -8.04153681e-02 -8.69192556e-03  9.61070601e-03
 -7.07731396e-02 -4.86998707e-02 -5.53378984e-02  3.19934152e-02
 -3.36562954e-02  2.25005602e-03 -8.54515284e-03 -2.76823249e-02
  1.16125077e-01  1.69032030e-02 -5.17840916e-03 -3.98760065e-02
  1.12842567e-01 -3.11956406e-02 -7.04495609e-02 -6.37152418e-02
  3.56850796e-04  3.60397398e-02 -3.21393386e-02  6.24487766e-33
  3.20081152e-02 -8.49043354e-02 -2.34868489e-02  7.07184970e-02
 -3.83987697e-03  2.07638573e-02  1.35194082e-02  8.66218805e-02
  2.37581972e-02 -5.98005950e-02  5.60582280e-02 -1.13201916e-01
 -2.26081796e-02 -2.72277519e-02 -1.18365902e-02 -1.13931179e-01
 -2.93131974e-02  7.43409395e-02  5.11331158e-03 -5.33084124e-02
  1.86931174e-02  1.51599962e-02 -1.39404926e-02  3.78367044e-02
 -2.47498602e-02  8.18824545e-02  2.46238783e-02  8.89511406e-03
 -8.27498436e-02 -1.85451042e-02  4.92499024e-02 -2.85722464e-02
 -7.04368483e-03  6.57211170e-02  2.39429288e-02 -1.95452329e-02
 -4.30001095e-02 -1.98196098e-02  3.77744064e-02 -7.84995556e-02
 -4.41628061e-02 -8.71707052e-02 -9.45405941e-03 -3.55088972e-02
  5.38600655e-03 -7.28776604e-02 -6.99725449e-02  9.36550945e-02
 -9.08753928e-03  3.25919017e-02  2.19245683e-02  1.00285150e-01
  2.38256175e-02 -4.83784527e-02 -6.05954789e-03  3.29296328e-02
 -1.45235248e-02  8.38743299e-02 -4.64181229e-02  5.08317687e-02
 -7.33190030e-02  8.71714801e-02 -2.90859155e-02  5.52019253e-02
 -3.61601380e-03  8.38370994e-02  7.26999715e-03 -1.26353845e-01
  4.39389646e-02 -1.22749515e-01 -1.47481598e-02 -5.32153361e-02
  8.99960175e-02 -3.29139573e-03  2.05860008e-02 -3.43478397e-02
 -7.84603879e-02 -2.62978636e-02 -4.19301502e-02 -7.12529346e-02
 -2.32284293e-02 -1.08931102e-02 -3.93925384e-02  8.43019411e-02
  2.84289140e-02 -1.08195012e-02  4.02975641e-02 -6.68696016e-02
  4.80008610e-02  1.16822904e-03 -3.36038470e-02  5.24684079e-02
  1.04375789e-02 -1.63430385e-02  5.93973547e-02 -6.51666150e-33
  5.71674965e-02  3.51419747e-02 -4.13099043e-02 -2.91272141e-02
  7.06862509e-02  4.31658737e-02  7.01363245e-03  3.11062858e-02
 -4.72699031e-02 -2.18419116e-02 -4.29172069e-02 -1.26486458e-03
 -4.77139056e-02 -3.27310152e-02 -2.13935226e-02  6.77120388e-02
  6.79415539e-02  4.86976327e-03 -2.48456188e-02 -2.12503299e-02
 -1.20400069e-02  9.56719071e-02  6.30178824e-02  2.94175502e-02
 -4.60099280e-02 -5.05918935e-02  3.65274549e-02  1.01961076e-01
  5.20565026e-02  7.67396670e-03  6.58672377e-02  2.12983554e-03
 -1.04942638e-02 -9.85087734e-03  8.89640525e-02 -9.69925523e-02
  4.74125221e-02  2.46449728e-02 -4.23780158e-02  1.04522526e-01
  7.23291561e-02 -6.56854883e-02  2.36171950e-02  2.99219172e-02
 -7.56704109e-03 -7.19556585e-02 -1.08815143e-02  3.42138708e-02
 -8.53581261e-03  1.14634801e-02 -1.34810992e-02 -1.27768308e-01
 -3.69851626e-02 -5.55396825e-02  4.44683768e-02  8.95247757e-02
  9.02029276e-02 -2.12937798e-02  6.65578470e-02  3.59652787e-02
  5.49626797e-02 -5.99398129e-02  2.19048485e-02  3.42858434e-02
  1.59798473e-01  2.13844273e-02  5.14558405e-02  4.69811261e-02
 -2.59971470e-02  4.41101231e-02 -2.70127784e-03  2.50712056e-02
  4.15602811e-02 -6.59003183e-02  1.53112262e-01  2.31483877e-02
 -4.48789187e-02 -2.51520108e-02 -2.10117102e-02 -3.87758501e-02
  1.98365171e-02 -5.00054890e-03  1.59119070e-02 -9.22981724e-02
  4.03968729e-02 -5.12909219e-02 -4.79695871e-02  1.88673697e-02
 -5.36316112e-02 -6.73991591e-02 -7.35011548e-02  1.53974686e-02
  1.01852283e-01 -5.06130280e-04 -2.47443188e-02 -5.59224773e-08
 -8.83652195e-02 -8.62402171e-02  1.18463794e-02 -4.20449972e-02
  4.50705294e-04 -6.94053099e-02 -2.66012438e-02 -2.82162018e-02
 -2.66429801e-02 -4.68184166e-02  4.14712168e-02  4.94898818e-02
  7.42076784e-02  3.36672142e-02  2.91301310e-02 -1.22769475e-01
  7.88519531e-03  3.78076211e-02 -7.84290060e-02  6.75241128e-02
  1.49878189e-02 -4.68619317e-02 -1.48441251e-02  2.68232841e-02
  7.03463033e-02 -2.85057463e-02  6.07517697e-02  7.00863972e-02
  7.71123320e-02  7.30254948e-02 -2.11103950e-02  2.79946811e-02
  8.85330215e-02  2.35736277e-02 -6.55541271e-02  1.53086400e-02
  1.53747033e-02 -4.16273922e-02  1.36090275e-02  1.37469441e-01
 -1.98565125e-02 -2.42841672e-02 -5.00870496e-02  5.35126515e-02
  6.53962865e-02 -1.14664976e-02 -2.52082087e-02 -1.51262004e-02
  3.12877968e-02  2.96788458e-02 -1.42742336e-01  4.28743772e-02
  2.56839264e-02 -1.04110435e-01 -2.77525950e-02 -1.83961224e-02
  7.49758258e-02  6.82862327e-02  6.77643344e-02  5.33937179e-02
 -1.67862643e-02  5.06072789e-02 -2.23152898e-02  2.70003360e-02]"
"publisher

 publisher/EventManager.java: Basic publisher

package refactoring_guru.observer.example.publisher;

import refactoring_guru.observer.example.listeners.EventListener;

import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EventManager {
    Map<String, List<EventListener>> listeners = new HashMap<>();

    public EventManager(String... operations) {
        for (String operation : operations) {
            this.listeners.put(operation, new ArrayList<>());
        }
    }

    public void subscribe(String eventType, EventListener listener) {
        List<EventListener> users = listeners.get(eventType);
        users.add(listener);
    }

    public void unsubscribe(String eventType, EventListener listener) {
        List<EventListener> users = listeners.get(eventType);
        users.remove(listener);
    }

    public void notify(String eventType, File file) {
        List<EventListener> users = listeners.get(eventType);
        for (EventListener listener : users) {
            listener.update(eventType, file);
        }
    }
}
 editor

 editor/Editor.java: Concrete publisher, tracked by other objects

package refactoring_guru.observer.example.editor;

import refactoring_guru.observer.example.publisher.EventManager;

import java.io.File;

public class Editor {
    public EventManager events;
    private File file;

    public Editor() {
        this.events = new EventManager(""open"", ""save"");
    }

    public void openFile(String filePath) {
        this.file = new File(filePath);
        events.notify(""open"", file);
    }

    public void saveFile() throws Exception {
        if (this.file != null) {
            events.notify(""save"", file);
        } else {
            throw new Exception(""Please open a file first."");
        }
    }
}
 listeners

 listeners/EventListener.java: Common observer interface

package refactoring_guru.observer.example.listeners;

import java.io.File;

public interface EventListener {
    void update(String eventType, File file);
}
 listeners/EmailNotificationListener.java: Sends emails upon receiving notification

package refactoring_guru.observer.example.listeners;

import java.io.File;

public class EmailNotificationListener implements EventListener {
    private String email;

    public EmailNotificationListener(String email) {
        this.email = email;
    }

    @Override
    public void update(String eventType, File file) {
        System.out.println(""Email to "" + email + "": Someone has performed "" + eventType + "" operation with the following file: "" + file.getName());
    }
}
 listeners/LogOpenListener.java: Writes a message to a log upon receiving notification

package refactoring_guru.observer.example.listeners;

import java.io.File;

public class LogOpenListener implements EventListener {
    private File log;

    public LogOpenListener(String fileName) {
        this.log = new File(fileName);
    }

    @Override
    public void update(String eventType, File file) {
        System.out.println(""Save to log "" + log + "": Someone has performed "" + eventType + "" operation with the following file: "" + file.getName());
    }
}
 Demo.java: Initialization code

package refactoring_guru.observer.example;

import refactoring_guru.observer.example.editor.Editor;
import refactoring_guru.observer.example.listeners.EmailNotificationListener;
import refactoring_guru.observer.example.listeners.LogOpenListener;

public class Demo {
    public static void main(String[] args) {
        Editor editor = new Editor();
        editor.events.subscribe(""open"", new LogOpenListener(""/path/to/log/file.txt""));
        editor.events.subscribe(""save"", new EmailNotificationListener(""admin@example.com""));

        try {
            editor.openFile(""test.txt"");
            editor.saveFile();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}",Java,Observer,Refactoring Guru,https://refactoring.guru/design-patterns/observer/java/example#example-0,"[-7.86563754e-03  7.71920546e-04 -1.28329881e-02 -1.42635554e-02
 -1.45396101e-03 -3.26548284e-03  5.58760725e-02  8.36110339e-02
  2.86657251e-02  6.65624440e-02  2.95121260e-02 -1.32222073e-02
  1.54293533e-02 -3.88192609e-02 -2.23825108e-02 -4.04647551e-02
 -1.00421883e-01  3.28447819e-02 -9.41553935e-02 -1.43717621e-02
  4.06440981e-02 -7.99173396e-03  3.99967767e-02 -2.85622478e-02
 -2.31713429e-02  1.85325241e-03  1.31451394e-02 -5.95965572e-02
 -1.00459568e-01 -3.71172535e-03  4.10043672e-02 -2.24035326e-02
 -2.64967475e-02 -1.72900539e-02  2.60410868e-02  8.19504187e-02
 -1.20318113e-02 -2.92392522e-02 -7.28407204e-02 -6.71985671e-02
 -4.93856557e-02  4.03883010e-02 -3.40193957e-02 -4.16263193e-02
 -1.47388335e-02 -1.18014939e-01 -3.98500413e-02 -5.39803058e-02
 -2.07325183e-02 -1.30464444e-02 -6.12349994e-02  1.20969061e-02
 -2.86379419e-02 -3.44751030e-02  5.99397793e-02  2.15559434e-02
  1.06795058e-02  1.60628706e-02 -3.89756002e-02 -5.11885025e-02
  9.37462610e-04 -1.48443170e-02 -6.58293366e-02 -5.36686108e-02
 -2.59379838e-02  1.99934207e-02  3.12967114e-02  6.43900782e-02
  6.92318529e-02 -5.36605157e-02 -8.72062370e-02  7.45991394e-02
 -4.34918813e-02  9.07368213e-03 -1.76814068e-02 -4.90669571e-02
 -7.68439705e-03  5.93787320e-02  9.39822663e-03 -7.62377232e-02
  1.32121863e-02 -5.97465597e-02  4.93794009e-02 -4.99030463e-02
  5.68875447e-02  3.27002257e-02  2.52648704e-02 -2.91498732e-02
  3.63868661e-02  6.87059760e-02 -8.98541510e-02  3.07207201e-02
 -3.02253570e-03  2.09754631e-02  4.15421501e-02  5.41746616e-02
 -3.46590430e-02  9.47850421e-02  3.51267331e-03  7.74029270e-02
  2.66745985e-02  8.43949318e-02 -5.49087897e-02  3.09170093e-02
  1.16631649e-01 -4.47852090e-02 -1.59558970e-02 -5.90784550e-02
 -5.92219234e-02 -4.04201150e-02 -2.16763541e-02 -5.28178513e-02
 -6.20051399e-02 -5.13182208e-02 -2.93418136e-03  1.97651815e-02
  4.03145291e-02  9.37405974e-02 -7.49164820e-02  8.00149143e-02
  1.08682245e-01 -7.76099786e-03 -4.38758507e-02 -3.44480313e-02
  1.84984412e-02 -3.69824581e-02  5.42804189e-02  5.12740167e-33
  2.47230642e-02 -8.38377923e-02 -2.68292706e-02  8.74619633e-02
  1.40854698e-02 -1.70603450e-02 -1.02896309e-02  4.39479724e-02
 -2.36961246e-02 -3.29989344e-02  5.78253623e-03 -3.21006216e-02
  1.56962406e-02 -1.50940092e-02  3.83320339e-02 -3.65764573e-02
 -5.39455563e-02  2.88590752e-02  5.37846563e-03 -3.55207026e-02
  5.48153603e-03  2.46336544e-03 -4.05360535e-02  4.84127663e-02
  7.30802957e-03  5.68539724e-02  4.09756005e-02 -5.02079166e-03
  1.68191735e-02 -1.04089901e-02  1.18226327e-01 -7.49565288e-02
  4.86152358e-02  3.26475278e-02 -2.14302465e-02 -2.92670857e-02
 -2.92715169e-02 -6.35774527e-03 -2.57535279e-02 -1.10400468e-01
 -1.53233623e-02 -6.28208593e-02 -3.53913978e-02 -1.09660169e-02
 -7.83517200e-04 -9.51441526e-02 -7.31247514e-02  8.01561847e-02
  3.85728478e-02 -5.70625402e-02  8.36282745e-02  9.48818102e-02
  6.64192811e-02 -2.96836719e-02  5.84580761e-04  5.51930964e-02
  4.87617403e-03  4.67702094e-03 -3.33038345e-02  3.40744145e-02
 -4.50309664e-02  7.68283680e-02 -1.35108819e-02  1.35684879e-02
  2.48172469e-02  1.69322435e-02  3.72618139e-02 -9.75842476e-02
  6.21150248e-02 -4.48077284e-02 -2.51219887e-02 -5.22139594e-02
  6.83224425e-02 -1.08832913e-02  2.57444903e-02  3.17864381e-02
 -5.44648841e-02 -1.39235575e-02 -9.39902365e-02 -5.50431274e-02
 -2.72680260e-02 -7.36914948e-02 -2.29730550e-02  4.83015776e-02
  6.15344988e-03  8.84566735e-03 -4.15863059e-02  2.77376249e-02
  3.52813229e-02  1.78656075e-02  1.58790313e-02  6.61888048e-02
  1.82916988e-02 -2.55715139e-02  5.54493256e-02 -5.63842763e-33
  6.27529323e-02  3.87792699e-02 -5.87770268e-02 -6.43307567e-02
  5.63481450e-02  5.26511855e-02 -1.94763038e-02 -1.16495797e-02
 -5.81008606e-02 -6.84880232e-03 -7.93796703e-02 -1.09141106e-02
  1.07738292e-02  9.24091227e-03 -1.45672180e-03  3.11505445e-03
  2.57767062e-03 -4.75164782e-03 -3.69181186e-02 -2.41701249e-02
  3.14555019e-02  7.28274882e-02  1.44090682e-01  5.69412783e-02
  2.19661444e-02 -2.87688281e-02  1.84443332e-02  9.89011005e-02
 -2.36000605e-02 -4.22278568e-02  1.18742744e-02 -9.60364286e-03
 -7.90427998e-02 -4.22562696e-02  8.62842649e-02 -1.19148515e-01
  4.02249619e-02  5.86654544e-02 -5.16884029e-03  8.66420567e-02
  4.96520139e-02 -1.57353729e-02  2.72158869e-02 -6.77698292e-03
  7.15680644e-02 -4.57776785e-02  2.02315077e-02  6.91282302e-02
 -1.07514451e-03 -5.64388447e-02 -1.32246483e-02 -1.00473881e-01
  2.19687670e-02 -3.55341360e-02  8.32262188e-02  1.16972871e-01
  1.10526375e-01 -8.11841339e-02  2.65324861e-03  3.98114845e-02
  3.25141661e-02 -1.27577052e-01  3.70795168e-02  5.03392480e-02
  7.64207765e-02  7.12884264e-03  3.66261862e-02  1.22433109e-02
 -1.26024764e-02  1.05877668e-02 -1.70227997e-02  1.96363404e-02
 -6.07399158e-02 -5.40186539e-02  1.08753838e-01  6.48119822e-02
  2.36852560e-03 -6.83063716e-02 -3.47537780e-03 -1.95140205e-02
  6.76610274e-03  6.47651171e-03 -8.86711385e-03 -3.72776277e-02
  2.69913040e-02 -4.50604558e-02  1.56467629e-03  1.29863294e-02
 -2.31073075e-03 -2.78694853e-02 -8.90590847e-02  9.20458660e-02
  4.40397151e-02 -4.31753583e-02 -5.87114617e-02 -4.85832743e-08
 -9.13277343e-02 -6.46553710e-02  6.88830577e-03  2.82413643e-02
  8.69572535e-02  6.22936757e-03 -3.71829644e-02 -3.93757634e-02
 -3.20200920e-02 -3.97258513e-02 -1.58490017e-02 -2.57199053e-02
  8.91615357e-03  3.29263583e-02  3.74008417e-02 -1.34834379e-01
  8.21379870e-02 -4.51899273e-03 -9.82730016e-02 -2.25646254e-02
  8.56211483e-02 -3.84660787e-04 -8.54449160e-03  3.32231224e-02
  6.07999153e-02 -2.22024322e-02  1.42045155e-01  2.22223569e-02
 -4.60409112e-02  2.20994148e-02 -1.34539669e-02 -1.05630364e-02
  7.14908689e-02 -2.64265086e-03 -1.32253289e-01  3.98130529e-02
  1.41703978e-01 -2.47694943e-02 -1.77094545e-02  3.62432674e-02
  3.02239638e-02  7.31372880e-03 -3.68991256e-04  3.68642174e-02
 -5.97873982e-03 -5.32227010e-02  1.71346834e-03 -1.62058286e-02
  4.78657335e-02  3.56088392e-02 -1.22330412e-01  8.97582714e-03
  5.17884083e-02 -4.50104699e-02 -6.34319186e-02 -8.94332491e-03
  1.09067224e-01 -6.01481497e-02  7.77904093e-02  3.43412682e-02
  3.32372487e-02 -4.23283642e-03 -1.05891600e-02  4.19214778e-02]"
"strategies

 strategies/PayStrategy.java: Common interface of payment methods

package refactoring_guru.strategy.example.strategies;

/**
 * Common interface for all strategies.
 */
public interface PayStrategy {
    boolean pay(int paymentAmount);
    void collectPaymentDetails();
}
 strategies/PayByPayPal.java: Payment via PayPal

package refactoring_guru.strategy.example.strategies;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.HashMap;
import java.util.Map;

/**
 * Concrete strategy. Implements PayPal payment method.
 */
public class PayByPayPal implements PayStrategy {
    private static final Map<String, String> DATA_BASE = new HashMap<>();
    private final BufferedReader READER = new BufferedReader(new InputStreamReader(System.in));
    private String email;
    private String password;
    private boolean signedIn;

    static {
        DATA_BASE.put(""amanda1985"", ""amanda@ya.com"");
        DATA_BASE.put(""qwerty"", ""john@amazon.eu"");
    }

    /**
     * Collect customer's data.
     */
    @Override
    public void collectPaymentDetails() {
        try {
            while (!signedIn) {
                System.out.print(""Enter the user's email: "");
                email = READER.readLine();
                System.out.print(""Enter the password: "");
                password = READER.readLine();
                if (verify()) {
                    System.out.println(""Data verification has been successful."");
                } else {
                    System.out.println(""Wrong email or password!"");
                }
            }
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }

    private boolean verify() {
        setSignedIn(email.equals(DATA_BASE.get(password)));
        return signedIn;
    }

    /**
     * Save customer data for future shopping attempts.
     */
    @Override
    public boolean pay(int paymentAmount) {
        if (signedIn) {
            System.out.println(""Paying "" + paymentAmount + "" using PayPal."");
            return true;
        } else {
            return false;
        }
    }

    private void setSignedIn(boolean signedIn) {
        this.signedIn = signedIn;
    }
}
 strategies/PayByCreditCard.java: Payment via credit card

package refactoring_guru.strategy.example.strategies;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

/**
 * Concrete strategy. Implements credit card payment method.
 */
public class PayByCreditCard implements PayStrategy {
    private final BufferedReader READER = new BufferedReader(new InputStreamReader(System.in));
    private CreditCard card;

    /**
     * Collect credit card data.
     */
    @Override
    public void collectPaymentDetails() {
        try {
            System.out.print(""Enter the card number: "");
            String number = READER.readLine();
            System.out.print(""Enter the card expiration date 'mm/yy': "");
            String date = READER.readLine();
            System.out.print(""Enter the CVV code: "");
            String cvv = READER.readLine();
            card = new CreditCard(number, date, cvv);

            // Validate credit card number...

        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }

    /**
     * After card validation we can charge customer's credit card.
     */
    @Override
    public boolean pay(int paymentAmount) {
        if (cardIsPresent()) {
            System.out.println(""Paying "" + paymentAmount + "" using Credit Card."");
            card.setAmount(card.getAmount() - paymentAmount);
            return true;
        } else {
            return false;
        }
    }

    private boolean cardIsPresent() {
        return card != null;
    }
}
 strategies/CreditCard.java: A credit card class

package refactoring_guru.strategy.example.strategies;

/**
 * Dummy credit card class.
 */
public class CreditCard {
    private int amount;
    private String number;
    private String date;
    private String cvv;

    CreditCard(String number, String date, String cvv) {
        this.amount = 100_000;
        this.number = number;
        this.date = date;
        this.cvv = cvv;
    }

    public void setAmount(int amount) {
        this.amount = amount;
    }

    public int getAmount() {
        return amount;
    }
}
 order/Order.java: Order class

package refactoring_guru.strategy.example.order;

import refactoring_guru.strategy.example.strategies.PayStrategy;

/**
 * Order class. Doesn't know the concrete payment method (strategy) user has
 * picked. It uses common strategy interface to delegate collecting payment data
 * to strategy object. It can be used to save order to database.
 */
public class Order {
    private int totalCost = 0;
    private boolean isClosed = false;

    public void processOrder(PayStrategy strategy) {
        strategy.collectPaymentDetails();
        // Here we could collect and store payment data from the strategy.
    }

    public void setTotalCost(int cost) {
        this.totalCost += cost;
    }

    public int getTotalCost() {
        return totalCost;
    }

    public boolean isClosed() {
        return isClosed;
    }

    public void setClosed() {
        isClosed = true;
    }
}
 Demo.java: Client code

package refactoring_guru.strategy.example;

import refactoring_guru.strategy.example.order.Order;
import refactoring_guru.strategy.example.strategies.PayByCreditCard;
import refactoring_guru.strategy.example.strategies.PayByPayPal;
import refactoring_guru.strategy.example.strategies.PayStrategy;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.HashMap;
import java.util.Map;

/**
 * World first console e-commerce application.
 */
public class Demo {
    private static Map<Integer, Integer> priceOnProducts = new HashMap<>();
    private static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
    private static Order order = new Order();
    private static PayStrategy strategy;

    static {
        priceOnProducts.put(1, 2200);
        priceOnProducts.put(2, 1850);
        priceOnProducts.put(3, 1100);
        priceOnProducts.put(4, 890);
    }

    public static void main(String[] args) throws IOException {
        while (!order.isClosed()) {
            int cost;

            String continueChoice;
            do {
                System.out.print(""Please, select a product:"" + ""\n"" +
                        ""1 - Mother board"" + ""\n"" +
                        ""2 - CPU"" + ""\n"" +
                        ""3 - HDD"" + ""\n"" +
                        ""4 - Memory"" + ""\n"");
                int choice = Integer.parseInt(reader.readLine());
                cost = priceOnProducts.get(choice);
                System.out.print(""Count: "");
                int count = Integer.parseInt(reader.readLine());
                order.setTotalCost(cost * count);
                System.out.print(""Do you wish to continue selecting products? Y/N: "");
                continueChoice = reader.readLine();
            } while (continueChoice.equalsIgnoreCase(""Y""));

            if (strategy == null) {
                System.out.println(""Please, select a payment method:"" + ""\n"" +
                        ""1 - PalPay"" + ""\n"" +
                        ""2 - Credit Card"");
                String paymentMethod = reader.readLine();

                // Client creates different strategies based on input from user,
                // application configuration, etc.
                if (paymentMethod.equals(""1"")) {
                    strategy = new PayByPayPal();
                } else {
                    strategy = new PayByCreditCard();
                }
            }

            // Order object delegates gathering payment data to strategy object,
            // since only strategies know what data they need to process a
            // payment.
            order.processOrder(strategy);

            System.out.print(""Pay "" + order.getTotalCost() + "" units or Continue shopping? P/C: "");
            String proceed = reader.readLine();
            if (proceed.equalsIgnoreCase(""P"")) {
                // Finally, strategy handles the payment.
                if (strategy.pay(order.getTotalCost())) {
                    System.out.println(""Payment has been successful."");
                } else {
                    System.out.println(""FAIL! Please, check your data."");
                }
                order.setClosed();
            }
        }
    }
}",Java,Strategy,Refactoring Guru,https://refactoring.guru/design-patterns/strategy/java/example#example-0,"[-2.91300728e-03  1.04180679e-01 -7.44267032e-02 -4.94056866e-02
 -1.19796216e-01  4.00843397e-02  4.39686216e-02  5.18718138e-02
 -3.96388285e-02  2.46395618e-02  3.41978185e-02 -4.40256521e-02
  6.95275068e-02 -8.98006707e-02 -1.84947774e-02 -8.92113373e-02
 -1.48789408e-02  4.58689639e-03  1.23457033e-02  7.46914791e-03
  4.43581417e-02 -2.89729405e-02  1.27687957e-02 -3.56145091e-02
 -2.85970476e-02  2.23756060e-02  5.05123474e-02 -2.51572356e-02
 -7.68016651e-02  2.22706911e-03  3.51619944e-02  4.29783389e-02
  8.37086886e-03  1.24453716e-02 -2.42325887e-02  1.48363430e-02
 -5.01291826e-02 -1.20566217e-02 -4.83085066e-02 -4.54773679e-02
 -1.02452680e-01  8.60458054e-03 -5.66383600e-02 -3.05140149e-02
  3.68520506e-02 -5.15182465e-02 -5.84411584e-02  4.05281782e-02
  4.95342463e-02  1.47958305e-02 -6.80577010e-02 -2.96441428e-02
 -3.32444510e-03 -2.39469986e-02 -2.50309473e-03  2.56510880e-02
  6.46266416e-02 -1.17298048e-02 -6.38053864e-02 -8.40523243e-02
  2.48883776e-02  1.74025893e-02 -3.20791453e-02 -4.57132794e-03
  6.65242318e-03 -3.47908325e-02  6.73342422e-02  4.95925844e-02
  8.21357314e-03 -4.22926843e-02  1.40560558e-02  4.11233716e-02
 -7.87150487e-03  8.74195155e-03 -6.47282228e-02  3.85017097e-02
 -1.23674860e-02 -2.88689137e-02  1.50018325e-02 -4.69333455e-02
 -5.22042066e-02 -3.06043066e-02 -2.61477828e-02  6.64994679e-03
  4.11744155e-02 -5.27207460e-03 -8.91406555e-03 -1.77211929e-02
  7.70961717e-02 -5.16753225e-03  8.07134621e-03  8.57719705e-02
  4.96671582e-03 -2.34410539e-02  5.26910536e-02  8.48432556e-02
 -3.42523158e-02 -2.53611989e-02 -2.60984041e-02  8.50652903e-02
  6.21729298e-03  6.32802695e-02  8.19887500e-04 -1.75426193e-02
  8.55463222e-02 -3.92036214e-02  4.31871489e-02  2.47475002e-02
  3.59804183e-02 -5.71801513e-02 -3.00399605e-02  1.26779675e-02
  1.44841429e-03 -1.66019090e-02 -2.38854922e-02  3.05727944e-02
  1.94008313e-02  5.03177568e-02 -4.38161083e-02  3.94798964e-02
  7.04133809e-02  5.93560562e-02 -4.48963232e-02 -3.52060013e-02
 -1.45993130e-02  1.64049212e-03  4.67985112e-04  4.39844493e-33
  8.36122036e-03 -1.11270681e-01  9.07146279e-03  3.14015374e-02
 -4.85705398e-02 -1.14191808e-02  5.19932583e-02  7.27251843e-02
 -2.22649034e-02  7.72428757e-04 -2.68192887e-02 -8.89987051e-02
  2.98180468e-02  2.29120553e-02  1.03683472e-02 -3.33651751e-02
  3.23808729e-03  3.39942761e-02  5.46229333e-02  1.73131377e-02
  5.01776673e-02 -6.52823597e-02  6.26750365e-02 -3.35713737e-02
  2.95526031e-02  6.84405267e-02 -2.72338353e-02  4.41141836e-02
 -3.15659530e-02  1.13331228e-02  1.40488088e-01 -1.07963853e-01
 -6.06498383e-02  6.55625314e-02  2.14283727e-02  1.73077676e-02
  2.04390418e-02 -7.55253900e-03 -1.81534775e-02 -1.18715964e-01
 -4.32740375e-02 -6.98332414e-02  3.60768400e-02  1.03642279e-02
 -9.90988314e-03 -4.92448397e-02 -5.85196838e-02  2.63637789e-02
  8.13620444e-03  1.02123037e-01 -1.04807001e-02  5.49930297e-02
  2.22642254e-02 -5.98109178e-02 -5.53351454e-02 -2.04277840e-02
 -4.37111966e-03  2.35466771e-02 -7.54333436e-02 -1.93378050e-02
 -9.22900364e-02 -1.97758935e-02 -4.23110835e-02 -1.99353043e-03
 -1.94990952e-02  8.66101012e-02 -7.96197504e-02 -1.47658333e-01
  4.86756787e-02 -3.30350026e-02 -7.03848302e-02 -8.47108290e-03
  1.10652007e-01  1.78010296e-02 -2.49063019e-02  2.60895211e-02
 -2.70312857e-02  1.11553222e-02 -7.54018724e-02 -7.43939131e-02
  9.44958010e-04  1.08537935e-02 -1.56876594e-02  6.93927407e-02
  7.99230766e-03  1.22046053e-01  7.11906627e-02 -2.75840405e-02
  8.51863995e-02  4.85888384e-02 -1.80514958e-02  2.86767222e-02
 -5.27533479e-02 -2.29378752e-02  1.40842885e-01 -5.07205645e-33
  9.92270652e-03  2.77321730e-02 -5.13310507e-02 -4.24894132e-02
  6.40557855e-02  2.51815724e-03 -2.95660589e-02 -3.05428430e-02
 -4.82715480e-02 -3.65434065e-02 -4.86329086e-02  1.52411661e-03
  2.21510371e-03  1.37242163e-02  8.01983625e-02 -2.58311909e-02
  4.25278135e-02 -2.21679825e-02  2.05882918e-02  3.96550186e-02
 -2.79500335e-02  1.00717738e-01  3.09499577e-02 -2.03351285e-02
  7.54110189e-03  1.92920528e-02 -5.93003035e-02  2.38617025e-02
 -3.44798118e-02  4.58340682e-02  7.53340647e-02 -5.33471778e-02
 -3.27654183e-02  2.42739823e-02  3.53737734e-02 -1.11089453e-01
  1.98069159e-02  4.52388525e-02 -1.31425569e-02  1.26134679e-01
  4.84206118e-02 -7.45578632e-02 -5.41898888e-03  3.85602168e-03
  3.86894643e-02 -9.92811918e-02  1.17130475e-02  3.33277285e-02
  1.01247504e-02 -2.91287787e-02 -8.74950737e-03 -5.84150590e-02
 -5.00955991e-02  3.77062918e-03  2.54100952e-02  1.17398240e-01
  1.24975942e-01 -1.67938210e-02  6.88985810e-02  1.84054230e-03
 -4.16275561e-02 -3.57905254e-02  4.60858978e-02  4.79962863e-02
  1.01796813e-01 -6.70206791e-04  3.62305976e-02  2.19151913e-03
  3.99469100e-02  4.97214310e-03 -6.03132807e-02  8.06526542e-02
  3.13396677e-02 -2.04650704e-02  1.18358366e-01  3.23141329e-02
 -8.05393755e-02 -1.32359192e-03 -1.76185817e-02  2.92563159e-02
  3.31798643e-02 -3.69736217e-02  2.77638920e-02  2.47167842e-03
  1.78366378e-02 -4.79108728e-02 -2.00114977e-02 -3.38835418e-02
 -9.45446938e-02 -5.45574054e-02 -5.44821098e-02  4.51483466e-02
  1.06007755e-02 -1.26139009e-02 -5.16457334e-02 -5.18860119e-08
 -4.37266976e-02 -4.90738489e-02  4.17613238e-02  9.67362896e-02
  8.63525867e-02 -5.07495850e-02 -4.21903841e-02 -4.68548797e-02
 -2.15246398e-02 -3.01731639e-02 -2.86743231e-03  7.37644285e-02
  3.15170549e-02 -3.36711220e-02  3.63977998e-02 -1.46384522e-01
  1.46051254e-02 -8.04554150e-02 -1.33897871e-01  3.75640467e-02
  3.61580737e-02 -5.80472015e-02 -7.84885362e-02  3.23177204e-02
  6.41214103e-02 -4.05628514e-03  1.19697951e-01  8.29626247e-02
  4.24689017e-02  7.09786415e-02  9.74831171e-03  4.69515063e-02
  6.35799691e-02 -1.50032891e-02 -2.30652150e-02  1.14957076e-02
  6.66447803e-02  3.20120789e-02  2.12883987e-02  9.07280222e-02
 -1.67834181e-02  6.09463779e-03 -5.35709485e-02 -5.80497831e-03
  6.57906532e-02 -4.31004055e-02 -2.81744618e-02 -5.60402349e-02
  3.56402844e-02 -3.58314142e-02 -1.53698608e-01  6.76650135e-03
  3.43002118e-02 -4.28183265e-02 -2.54868940e-02 -7.41881579e-02
  4.37542126e-02 -7.23685026e-02  6.82196638e-04  6.40810505e-02
  3.26322578e-02 -4.47715521e-02 -2.53970847e-02 -4.29605506e-02]"
"shapes

 shapes/Shape.java: Common shape interface

package refactoring_guru.visitor.example.shapes;

import refactoring_guru.visitor.example.visitor.Visitor;

public interface Shape {
    void move(int x, int y);
    void draw();
    String accept(Visitor visitor);
}
 shapes/Dot.java: A dot

package refactoring_guru.visitor.example.shapes;

import refactoring_guru.visitor.example.visitor.Visitor;

public class Dot implements Shape {
    private int id;
    private int x;
    private int y;

    public Dot() {
    }

    public Dot(int id, int x, int y) {
        this.id = id;
        this.x = x;
        this.y = y;
    }

    @Override
    public void move(int x, int y) {
        // move shape
    }

    @Override
    public void draw() {
        // draw shape
    }

    @Override
    public String accept(Visitor visitor) {
        return visitor.visitDot(this);
    }

    public int getX() {
        return x;
    }

    public int getY() {
        return y;
    }

    public int getId() {
        return id;
    }
}
 shapes/Circle.java: A circle

package refactoring_guru.visitor.example.shapes;

import refactoring_guru.visitor.example.visitor.Visitor;

public class Circle extends Dot {
    private int radius;

    public Circle(int id, int x, int y, int radius) {
        super(id, x, y);
        this.radius = radius;
    }

    @Override
    public String accept(Visitor visitor) {
        return visitor.visitCircle(this);
    }

    public int getRadius() {
        return radius;
    }
}
 shapes/Rectangle.java: A rectangle

package refactoring_guru.visitor.example.shapes;

import refactoring_guru.visitor.example.visitor.Visitor;

public class Rectangle implements Shape {
    private int id;
    private int x;
    private int y;
    private int width;
    private int height;

    public Rectangle(int id, int x, int y, int width, int height) {
        this.id = id;
        this.x = x;
        this.y = y;
        this.width = width;
        this.height = height;
    }

    @Override
    public String accept(Visitor visitor) {
        return visitor.visitRectangle(this);
    }

    @Override
    public void move(int x, int y) {
        // move shape
    }

    @Override
    public void draw() {
        // draw shape
    }

    public int getId() {
        return id;
    }

    public int getX() {
        return x;
    }

    public int getY() {
        return y;
    }

    public int getWidth() {
        return width;
    }

    public int getHeight() {
        return height;
    }
}
 shapes/CompoundShape.java: A compound shape

package refactoring_guru.visitor.example.shapes;

import refactoring_guru.visitor.example.visitor.Visitor;

import java.util.ArrayList;
import java.util.List;

public class CompoundShape implements Shape {
    public int id;
    public List<Shape> children = new ArrayList<>();

    public CompoundShape(int id) {
        this.id = id;
    }

    @Override
    public void move(int x, int y) {
        // move shape
    }

    @Override
    public void draw() {
        // draw shape
    }

    public int getId() {
        return id;
    }

    @Override
    public String accept(Visitor visitor) {
        return visitor.visitCompoundGraphic(this);
    }

    public void add(Shape shape) {
        children.add(shape);
    }
}
 visitor

 visitor/Visitor.java: Common visitor interface

package refactoring_guru.visitor.example.visitor;

import refactoring_guru.visitor.example.shapes.Circle;
import refactoring_guru.visitor.example.shapes.CompoundShape;
import refactoring_guru.visitor.example.shapes.Dot;
import refactoring_guru.visitor.example.shapes.Rectangle;

public interface Visitor {
    String visitDot(Dot dot);

    String visitCircle(Circle circle);

    String visitRectangle(Rectangle rectangle);

    String visitCompoundGraphic(CompoundShape cg);
}
 visitor/XMLExportVisitor.java: Concrete visitor, exports all shapes into XML

package refactoring_guru.visitor.example.visitor;

import refactoring_guru.visitor.example.shapes.*;

public class XMLExportVisitor implements Visitor {

    public String export(Shape... args) {
        StringBuilder sb = new StringBuilder();
        sb.append(""<?xml version=\""1.0\"" encoding=\""utf-8\""?>"" + ""\n"");
        for (Shape shape : args) {
            sb.append(shape.accept(this)).append(""\n"");
        }
        return sb.toString();
    }

    public String visitDot(Dot d) {
        return ""<dot>"" + ""\n"" +
                ""    <id>"" + d.getId() + ""</id>"" + ""\n"" +
                ""    <x>"" + d.getX() + ""</x>"" + ""\n"" +
                ""    <y>"" + d.getY() + ""</y>"" + ""\n"" +
                ""</dot>"";
    }

    public String visitCircle(Circle c) {
        return ""<circle>"" + ""\n"" +
                ""    <id>"" + c.getId() + ""</id>"" + ""\n"" +
                ""    <x>"" + c.getX() + ""</x>"" + ""\n"" +
                ""    <y>"" + c.getY() + ""</y>"" + ""\n"" +
                ""    <radius>"" + c.getRadius() + ""</radius>"" + ""\n"" +
                ""</circle>"";
    }

    public String visitRectangle(Rectangle r) {
        return ""<rectangle>"" + ""\n"" +
                ""    <id>"" + r.getId() + ""</id>"" + ""\n"" +
                ""    <x>"" + r.getX() + ""</x>"" + ""\n"" +
                ""    <y>"" + r.getY() + ""</y>"" + ""\n"" +
                ""    <width>"" + r.getWidth() + ""</width>"" + ""\n"" +
                ""    <height>"" + r.getHeight() + ""</height>"" + ""\n"" +
                ""</rectangle>"";
    }

    public String visitCompoundGraphic(CompoundShape cg) {
        return ""<compound_graphic>"" + ""\n"" +
                ""   <id>"" + cg.getId() + ""</id>"" + ""\n"" +
                _visitCompoundGraphic(cg) +
                ""</compound_graphic>"";
    }

    private String _visitCompoundGraphic(CompoundShape cg) {
        StringBuilder sb = new StringBuilder();
        for (Shape shape : cg.children) {
            String obj = shape.accept(this);
            // Proper indentation for sub-objects.
            obj = ""    "" + obj.replace(""\n"", ""\n    "") + ""\n"";
            sb.append(obj);
        }
        return sb.toString();
    }

}
 Demo.java: Client code

package refactoring_guru.visitor.example;

import refactoring_guru.visitor.example.shapes.*;
import refactoring_guru.visitor.example.visitor.XMLExportVisitor;

public class Demo {
    public static void main(String[] args) {
        Dot dot = new Dot(1, 10, 55);
        Circle circle = new Circle(2, 23, 15, 10);
        Rectangle rectangle = new Rectangle(3, 10, 17, 20, 30);

        CompoundShape compoundShape = new CompoundShape(4);
        compoundShape.add(dot);
        compoundShape.add(circle);
        compoundShape.add(rectangle);

        CompoundShape c = new CompoundShape(5);
        c.add(dot);
        compoundShape.add(c);

        export(circle, compoundShape);
    }

    private static void export(Shape... shapes) {
        XMLExportVisitor exportVisitor = new XMLExportVisitor();
        System.out.println(exportVisitor.export(shapes));
    }
}",Java,Visitor,Refactoring Guru,https://refactoring.guru/design-patterns/visitor/java/example#example-0,"[ 4.46609445e-02  4.28327434e-02 -2.76655089e-02 -6.26445655e-03
 -7.13372901e-02  6.96488190e-03  3.52080911e-02  1.02320880e-01
 -5.51992916e-02 -4.21357788e-02  1.16360309e-02 -6.56857938e-02
  8.78697187e-02 -3.44849452e-02  2.92237047e-02 -1.61399450e-02
 -4.55119722e-02  6.13587126e-02 -1.45196794e-02  5.55046974e-03
  3.58316377e-02 -4.04902212e-02  1.84591766e-02 -2.17378307e-02
 -7.27513048e-04  7.46647716e-02  7.37381652e-02 -2.04998571e-02
 -3.74103971e-02 -3.31247672e-02  3.58231133e-03  5.91119863e-02
 -3.86066064e-02  3.25908959e-02 -2.11878344e-02  9.89930257e-02
 -3.73944826e-02  4.88509797e-02  1.98609475e-02 -5.66408411e-02
 -9.71009582e-02  5.95127083e-02  7.20812976e-02 -1.37198288e-02
  3.99619713e-02 -4.39350493e-02 -8.49803686e-02 -8.06595851e-03
  4.44668867e-02 -1.72310993e-02 -4.83021885e-02 -5.52042089e-02
 -1.41947819e-02 -2.84070969e-02  4.40694913e-02  3.17576937e-02
  8.48887861e-03 -3.55908349e-02  1.04845734e-02 -6.61352277e-02
  2.57418770e-02 -2.81912666e-02  3.10883280e-02 -9.60795581e-03
 -7.29768276e-02 -7.09687024e-02 -3.93977910e-02 -1.61893182e-02
  2.08260454e-02 -6.78366348e-02 -6.36361018e-02  8.50448534e-02
  4.16136496e-02  3.58640738e-02 -4.75273728e-02 -2.45214044e-03
 -6.39150962e-02  2.22554263e-02  1.58017818e-02 -9.03687999e-02
 -1.56045742e-02  5.41777499e-02  4.09007035e-02  4.64119613e-02
  7.65534043e-02  4.42480519e-02  3.55937029e-03 -3.32133919e-02
 -3.34854349e-02  6.90566227e-02 -5.05873235e-03  6.66344017e-02
 -3.69439498e-02  1.18203303e-02  2.13726200e-02  4.12053987e-03
 -4.78420407e-02 -3.48812751e-02 -7.17048943e-02  1.04700655e-01
  3.47301625e-02  3.42825539e-02  1.57333817e-02  5.31565212e-03
 -1.24209533e-02 -2.31696479e-02 -1.09544059e-03 -1.85695272e-02
  1.37849536e-04 -5.46428375e-03 -4.75713834e-02 -4.57294211e-02
 -2.21065991e-02  8.83489288e-03 -4.91944253e-02 -2.66158357e-02
  2.68063620e-02 -4.79553565e-02 -3.06866765e-02 -2.44538952e-02
  1.15405262e-01  2.84967236e-02 -4.57913503e-02  7.51373218e-03
  2.33132616e-02 -2.70373877e-02 -2.82271765e-02  6.82171110e-33
 -5.76422513e-02 -1.97737906e-02 -6.72360137e-03  6.82043135e-02
  1.51086757e-02 -2.23372076e-02 -7.74050131e-03  3.72324623e-02
  6.79302886e-02 -5.94435744e-02 -6.45322874e-02 -6.05711080e-02
  1.25008114e-02  8.24217778e-03  4.69617508e-02 -5.71731403e-02
  4.71045934e-02  1.29143596e-01 -7.54587054e-02 -3.18375118e-02
 -1.13985920e-02 -5.52827716e-02 -2.89904252e-02  1.86535716e-02
 -2.25534718e-02  8.37786198e-02  1.06515572e-03  3.51105221e-02
 -5.39924838e-02 -1.64091755e-02  6.34221584e-02 -7.45043755e-02
 -2.37234533e-02  7.49403834e-02  1.20916748e-02 -4.38273884e-02
  2.94197686e-02 -3.36852893e-02 -5.09131839e-03 -7.69972578e-02
 -6.31518587e-02 -6.93665445e-02  4.60498855e-02  7.53139239e-03
  2.41790097e-02 -3.03357635e-02 -2.83340458e-02  8.07563290e-02
 -1.29334986e-01  5.59973381e-02  1.57725364e-02  1.01564012e-01
  2.56089419e-02 -6.95735812e-02 -4.63666804e-02 -2.57938933e-02
 -2.64182352e-02  7.09117725e-02 -7.40108415e-02  3.88342477e-02
 -6.20520376e-02  1.28638506e-01 -5.66470437e-02  3.45923752e-02
 -1.71836466e-02  2.13310383e-02 -1.30551802e-02 -1.20592304e-01
  1.53404614e-02 -1.02414424e-02  1.08891930e-02  1.73485056e-02
  6.20160252e-02 -3.31198005e-03 -3.46201472e-02 -4.78689037e-02
 -5.11745177e-02 -2.67794430e-02 -5.03529757e-02 -7.12397471e-02
 -5.96325733e-02  2.26892326e-02 -1.24323154e-02 -6.19564988e-02
  3.45209502e-02  1.31877395e-03  1.07302882e-01 -3.23778838e-02
  7.46645629e-02 -5.08803837e-02  2.64057913e-03 -3.22483666e-02
  1.10226579e-03 -2.80173142e-02  4.10313122e-02 -6.05932367e-33
  2.31003314e-02  3.33213918e-02  1.80909764e-02 -8.43159705e-02
  2.93217953e-02  2.56978441e-02 -4.83507663e-03 -1.98090598e-02
 -6.11638464e-02 -6.19858839e-02 -1.13764815e-01 -7.58633111e-03
 -4.73905802e-02  2.14189757e-02  9.25240070e-02  8.13111663e-02
  2.34677289e-02 -1.23289470e-02 -4.54724729e-02 -2.50905845e-02
 -3.25748846e-02  1.04042545e-01  1.18814185e-02 -1.22523233e-02
 -7.23881349e-02  5.04630618e-02  7.01373024e-03  2.54358333e-02
 -1.15155326e-02  4.70704623e-02  1.26052008e-03 -4.41558845e-02
 -3.52883749e-02  7.20606595e-02  6.33414537e-02 -1.00439057e-01
  3.00655384e-02 -9.66090156e-05  7.58939516e-03  6.98577836e-02
  3.40108164e-02 -7.18471855e-02  2.98262890e-02  2.91660875e-02
  2.73533594e-02 -5.37957624e-02 -1.82458181e-02  1.26797765e-01
 -3.36551405e-02 -3.20582539e-02 -5.14053553e-02 -3.56827192e-02
  8.19168577e-04 -3.86040322e-02  4.71491516e-02  8.18143636e-02
 -1.79489353e-03  1.52367568e-02  4.75557782e-02 -5.29251024e-02
 -4.20927517e-02 -9.74694043e-02  2.12848582e-03  9.11930948e-02
  1.03631921e-01  1.86134055e-02 -5.55843534e-03 -4.03354727e-02
 -1.05160274e-01  5.44613265e-02 -5.94346635e-02  9.55054238e-02
 -1.11233275e-02 -5.68187535e-02  1.07773140e-01 -6.17833715e-03
  7.04436079e-02  4.10289094e-02 -5.39719267e-03  4.22397479e-02
 -2.10926309e-03  2.03367639e-02  2.60908697e-02 -4.88842558e-03
  3.31730843e-02 -9.17728841e-02 -5.44536375e-02 -4.93465748e-04
 -5.03329001e-02 -2.50721350e-02 -5.79287484e-02  3.76336984e-02
  5.70997559e-02  4.78761829e-02  4.15811501e-02 -5.03327087e-08
 -1.10890903e-01 -2.54533775e-02  3.08598056e-02 -2.00930089e-02
  8.85171741e-02  3.10668489e-03 -5.43297976e-02  4.23178030e-03
 -1.89529471e-02 -4.00545001e-02 -5.57249552e-03  4.29443568e-02
  6.22815676e-02  2.02535409e-02  5.58903106e-02 -9.85284150e-02
  3.04086115e-02 -3.87249887e-02 -8.15084055e-02  2.52924357e-02
 -5.81722520e-03 -5.90934046e-02 -3.71329188e-02  7.87962973e-02
  5.19512370e-02 -1.00757308e-01 -7.96543900e-03 -1.91129092e-02
  4.00841646e-02  5.02292998e-02  1.35318832e-02  9.15923491e-02
  6.94730878e-02  4.02004384e-02  5.03260968e-03 -5.45215569e-02
  6.55329823e-02  7.10674599e-02  9.10792442e-04  1.01390868e-01
  2.78717782e-02  1.19873239e-02 -1.14215573e-03  1.84679050e-02
  8.88365805e-02 -4.95613888e-02  2.92721279e-02 -4.78571616e-02
  6.86176121e-02  2.83587035e-02 -1.25592396e-01 -1.69606076e-03
  5.12347780e-02 -9.80366394e-02 -4.39085923e-02 -2.79365182e-02
 -1.09538808e-02  1.76987313e-02  3.75223272e-02  1.43815979e-01
 -6.15826696e-02  5.60437962e-02  2.39435490e-02 -2.99189221e-02]"
"/**
 * The Abstract Factory interface declares a set of methods that return
 * different abstract products. These products are called a family and are
 * related by a high-level theme or concept. Products of one family are usually
 * able to collaborate among themselves. A family of products may have several
 * variants, but the products of one variant are incompatible with products of
 * another.
 */
interface AbstractFactory {
    createProductA(): AbstractProductA;

    createProductB(): AbstractProductB;
}

/**
 * Concrete Factories produce a family of products that belong to a single
 * variant. The factory guarantees that resulting products are compatible. Note
 * that signatures of the Concrete Factory's methods return an abstract product,
 * while inside the method a concrete product is instantiated.
 */
class ConcreteFactory1 implements AbstractFactory {
    public createProductA(): AbstractProductA {
        return new ConcreteProductA1();
    }

    public createProductB(): AbstractProductB {
        return new ConcreteProductB1();
    }
}

/**
 * Each Concrete Factory has a corresponding product variant.
 */
class ConcreteFactory2 implements AbstractFactory {
    public createProductA(): AbstractProductA {
        return new ConcreteProductA2();
    }

    public createProductB(): AbstractProductB {
        return new ConcreteProductB2();
    }
}

/**
 * Each distinct product of a product family should have a base interface. All
 * variants of the product must implement this interface.
 */
interface AbstractProductA {
    usefulFunctionA(): string;
}

/**
 * These Concrete Products are created by corresponding Concrete Factories.
 */
class ConcreteProductA1 implements AbstractProductA {
    public usefulFunctionA(): string {
        return 'The result of the product A1.';
    }
}

class ConcreteProductA2 implements AbstractProductA {
    public usefulFunctionA(): string {
        return 'The result of the product A2.';
    }
}

/**
 * Here's the the base interface of another product. All products can interact
 * with each other, but proper interaction is possible only between products of
 * the same concrete variant.
 */
interface AbstractProductB {
    /**
     * Product B is able to do its own thing...
     */
    usefulFunctionB(): string;

    /**
     * ...but it also can collaborate with the ProductA.
     *
     * The Abstract Factory makes sure that all products it creates are of the
     * same variant and thus, compatible.
     */
    anotherUsefulFunctionB(collaborator: AbstractProductA): string;
}

/**
 * These Concrete Products are created by corresponding Concrete Factories.
 */
class ConcreteProductB1 implements AbstractProductB {

    public usefulFunctionB(): string {
        return 'The result of the product B1.';
    }

    /**
     * The variant, Product B1, is only able to work correctly with the variant,
     * Product A1. Nevertheless, it accepts any instance of AbstractProductA as
     * an argument.
     */
    public anotherUsefulFunctionB(collaborator: AbstractProductA): string {
        const result = collaborator.usefulFunctionA();
        return `The result of the B1 collaborating with the (${result})`;
    }
}

class ConcreteProductB2 implements AbstractProductB {

    public usefulFunctionB(): string {
        return 'The result of the product B2.';
    }

    /**
     * The variant, Product B2, is only able to work correctly with the variant,
     * Product A2. Nevertheless, it accepts any instance of AbstractProductA as
     * an argument.
     */
    public anotherUsefulFunctionB(collaborator: AbstractProductA): string {
        const result = collaborator.usefulFunctionA();
        return `The result of the B2 collaborating with the (${result})`;
    }
}

/**
 * The client code works with factories and products only through abstract
 * types: AbstractFactory and AbstractProduct. This lets you pass any factory or
 * product subclass to the client code without breaking it.
 */
function clientCode(factory: AbstractFactory) {
    const productA = factory.createProductA();
    const productB = factory.createProductB();

    console.log(productB.usefulFunctionB());
    console.log(productB.anotherUsefulFunctionB(productA));
}

/**
 * The client code can work with any concrete factory class.
 */
console.log('Client: Testing client code with the first factory type...');
clientCode(new ConcreteFactory1());

console.log('');

console.log('Client: Testing the same client code with the second factory type...');
clientCode(new ConcreteFactory2());",TypeScript,Abstract Factory,Refactoring Guru,https://refactoring.guru/design-patterns/abstract-factory/typescript/example#example-0,"[-8.91502798e-02 -6.26790756e-03 -5.91450650e-03 -6.33176342e-02
 -4.41044345e-02  5.75702749e-02  2.59183906e-02  5.14903367e-02
 -8.43964592e-02 -8.44117329e-02  4.43254374e-02 -6.61059022e-02
  2.28584651e-02 -1.07634896e-02  8.77755880e-02  6.52346238e-02
  3.19713615e-02 -9.12986510e-03 -5.12993149e-02  3.21047865e-02
  7.50428289e-02 -6.46144599e-02 -3.96251827e-02 -3.61227710e-03
 -8.43383893e-02  8.10575765e-03  2.58223731e-02 -3.98988649e-02
  2.98358314e-02 -2.90223025e-02  1.93981603e-02  1.11893833e-01
 -9.33946446e-02  1.21302493e-02 -1.29925888e-02  3.28829661e-02
  5.44932066e-03 -2.41613016e-02  1.32150641e-02 -6.37843907e-02
  1.43945664e-02  5.39918132e-02 -6.28941059e-02 -2.57381257e-02
  7.04833120e-02 -2.79498044e-02 -3.43256928e-02 -7.89265428e-03
  1.12141492e-02 -4.77763750e-02 -3.73592153e-02  1.05732009e-02
 -2.55692843e-02 -2.11362052e-03  3.49943265e-02 -1.73033159e-02
 -1.32567864e-02  6.65841177e-02 -7.01973739e-04  5.65615073e-02
  3.00040767e-02 -2.20347214e-02  4.57070069e-03 -3.79527174e-02
  1.03919849e-01  4.14268114e-03 -8.79652798e-03 -3.56407128e-02
 -5.56476302e-02  1.78136490e-02 -2.95679849e-02 -2.26504132e-02
 -3.49301621e-02  3.59102339e-02 -3.53498682e-02  5.97063936e-02
  8.25313479e-03  4.63457964e-02 -1.78681575e-02 -9.34307799e-02
 -2.25615297e-02  5.31334504e-02 -2.99650859e-02 -2.83404216e-02
  4.58378233e-02  7.32237250e-02 -3.86034651e-03 -5.24897128e-02
  1.77720021e-02  6.79700524e-02 -6.11502938e-02 -3.90576720e-02
 -2.48785783e-02  8.16460047e-03  1.61795020e-02 -3.51089798e-02
  7.19252182e-03 -1.11889932e-02  1.75870378e-02  7.60499611e-02
 -7.25504383e-02  1.80462580e-02  3.15223597e-02 -4.20497507e-02
  2.56890478e-03  5.03999889e-02 -1.22589223e-01 -4.87733148e-02
  3.09039131e-02  2.59024650e-02 -3.88269350e-02 -2.56908443e-02
 -4.62497137e-02  1.55015080e-03 -8.29516426e-02 -1.10118585e-02
  2.81684082e-02 -5.43016344e-02 -2.47009639e-02  3.19290087e-02
  2.29771826e-02  5.98781789e-03  9.51395854e-02  1.13637857e-02
 -6.66594924e-03 -3.07912915e-03  1.69592513e-05  4.38084190e-33
 -3.70709131e-05 -5.90344705e-02 -7.07466379e-02  9.93507877e-02
  3.54138240e-02  1.20559242e-02  5.95847294e-02  8.37230533e-02
 -6.23843931e-02 -3.99916694e-02  1.48595558e-04  1.15307688e-03
 -5.38331531e-02  2.54935212e-02  8.22736397e-02 -4.68909927e-03
  2.41937172e-02 -4.12005708e-02  3.30613591e-02 -7.84957595e-03
 -2.05329061e-02  9.22692120e-02 -1.11028310e-02  1.33340545e-02
  1.54420352e-02  1.51963215e-02  7.52841085e-02  1.48350084e-02
 -6.45658076e-02  1.18765142e-02  3.90895009e-02 -7.86571763e-03
 -1.72767956e-02  5.56148738e-02 -5.15164174e-02 -7.97825679e-03
 -4.17617336e-02 -6.41320869e-02 -4.61961292e-02 -7.02061802e-02
 -1.05322571e-02  8.62518698e-03 -2.45474745e-03  1.76816154e-02
  5.38470410e-02 -9.43120420e-02 -6.79405704e-02  3.36110219e-02
  4.54073995e-02 -7.61325434e-02 -3.40890288e-02  1.03054591e-01
  6.53261617e-02 -5.74840009e-02  3.95331755e-02 -4.04009670e-02
 -8.97820480e-03  4.69413102e-02  1.06841419e-02  9.64135900e-02
 -1.08052425e-01  1.02393374e-01 -7.73312151e-02  5.88559657e-02
 -1.18078955e-01  9.52413306e-02 -6.75457790e-02 -7.17292204e-02
  7.35646561e-02  1.47331515e-02  5.69409244e-02 -7.39810336e-03
 -8.45774822e-03  1.97622664e-02 -1.79012772e-02 -2.00188700e-02
 -3.78692560e-02 -1.55958242e-03 -1.34524237e-02 -7.24495277e-02
 -3.14610042e-02  6.31540641e-02  4.42895759e-03  9.27815959e-02
 -1.11770116e-01  4.47282381e-03  7.98049569e-03  6.58295723e-03
  2.72878613e-02  1.45049114e-02 -1.57644358e-02  2.48710457e-02
 -1.45850396e-02 -1.45430323e-02  1.08909175e-01 -5.97029834e-33
  1.85815431e-02  3.38831916e-02  1.94911696e-02 -2.58030612e-02
  5.01271617e-03 -8.29858985e-03 -1.79995690e-02 -8.80809724e-02
 -1.07824765e-01  1.08454265e-01 -2.89104953e-02 -2.15684846e-02
  9.37366635e-02 -2.55417340e-02 -4.20004576e-02  1.35122808e-02
 -4.67424504e-02 -7.10663497e-02  3.41039225e-02  8.56684148e-03
  2.50427201e-02  7.76820108e-02  5.02152592e-02 -1.58967059e-02
 -1.40075954e-02 -6.79567675e-05 -8.47405568e-02  1.35089219e-01
  5.26678264e-02 -3.92078571e-02  2.29269210e-02 -5.35030104e-02
 -2.08827779e-02 -4.73527573e-02  8.21548924e-02 -6.65316656e-02
  1.90827698e-02  4.93465140e-02  2.55849957e-02 -7.89009482e-02
  7.88475480e-03 -6.59499392e-02 -6.39304891e-02  3.15041691e-02
  1.08053051e-02 -7.93871284e-02 -6.52755203e-04 -7.90095180e-02
  6.10138960e-02 -1.93309244e-02  3.89730111e-02  2.44657528e-02
 -2.85940804e-02 -4.20737714e-02 -1.01564839e-01  4.31965757e-03
  1.03777848e-01 -6.77865222e-02 -2.95720324e-02  5.63612469e-02
  8.16345215e-02 -3.03790495e-02  8.97413269e-02  5.90967759e-02
  4.82911430e-02 -6.55887574e-02  4.58078226e-03 -5.71965985e-02
  4.10505347e-02  3.53205986e-02 -2.51238868e-02  8.57501775e-02
 -1.38979522e-03 -1.16014248e-02  8.67465064e-02  7.28037674e-03
  7.26153934e-03  2.35546194e-02  5.98822087e-02 -4.51280475e-02
 -5.84941879e-02 -5.07515371e-02  8.45314413e-02  3.19065638e-02
 -8.45144875e-03 -6.33459315e-02  2.22693719e-02  3.15997861e-02
 -1.48297520e-02  1.03333043e-02 -6.96995482e-03  4.29883078e-02
 -8.83885100e-02  2.97537670e-02  2.65995134e-02 -5.05970590e-08
 -3.84022705e-02 -7.94272348e-02 -1.60422698e-02  2.66240891e-02
 -2.42346320e-02 -8.28560367e-02 -7.26049617e-02  3.02718021e-03
 -1.57134011e-02 -3.54330689e-02 -8.88266191e-02  6.71057925e-02
 -1.05808992e-02  4.77819964e-02  4.71999533e-02 -2.51317471e-02
 -7.13584386e-03 -2.66546179e-02 -7.60550648e-02  4.68227677e-02
  2.21911110e-02 -1.05844242e-02  2.75605340e-02 -4.00324527e-04
 -9.45031270e-02 -6.91963136e-02  3.68273109e-02  7.65683800e-02
  6.30094670e-04  8.39793533e-02 -3.62350903e-02  2.31973510e-02
 -4.20322791e-02  5.05055301e-03  3.65731642e-02 -2.75454875e-02
  4.57552560e-02  2.82401778e-02 -4.61965241e-02  7.30155781e-02
  7.05246553e-02 -3.95229198e-02 -9.26053524e-02  4.14844938e-02
  1.33949548e-01 -6.40339553e-02 -1.22806132e-02 -8.47257674e-02
  9.47166327e-03  1.06245942e-01 -2.56286375e-02  2.68832985e-02
 -4.14487571e-02 -2.73187105e-02 -5.92866354e-02  1.07249646e-02
 -2.26492099e-02 -1.02222204e-01  2.99107712e-02 -4.91700843e-02
  7.08049210e-03  1.10135023e-02  1.40274525e-01  1.39641529e-02]"
"/**
 * The Builder interface specifies methods for creating the different parts of
 * the Product objects.
 */
interface Builder {
    producePartA(): void;
    producePartB(): void;
    producePartC(): void;
}

/**
 * The Concrete Builder classes follow the Builder interface and provide
 * specific implementations of the building steps. Your program may have several
 * variations of Builders, implemented differently.
 */
class ConcreteBuilder1 implements Builder {
    private product: Product1;

    /**
     * A fresh builder instance should contain a blank product object, which is
     * used in further assembly.
     */
    constructor() {
        this.reset();
    }

    public reset(): void {
        this.product = new Product1();
    }

    /**
     * All production steps work with the same product instance.
     */
    public producePartA(): void {
        this.product.parts.push('PartA1');
    }

    public producePartB(): void {
        this.product.parts.push('PartB1');
    }

    public producePartC(): void {
        this.product.parts.push('PartC1');
    }

    /**
     * Concrete Builders are supposed to provide their own methods for
     * retrieving results. That's because various types of builders may create
     * entirely different products that don't follow the same interface.
     * Therefore, such methods cannot be declared in the base Builder interface
     * (at least in a statically typed programming language).
     *
     * Usually, after returning the end result to the client, a builder instance
     * is expected to be ready to start producing another product. That's why
     * it's a usual practice to call the reset method at the end of the
     * `getProduct` method body. However, this behavior is not mandatory, and
     * you can make your builders wait for an explicit reset call from the
     * client code before disposing of the previous result.
     */
    public getProduct(): Product1 {
        const result = this.product;
        this.reset();
        return result;
    }
}

/**
 * It makes sense to use the Builder pattern only when your products are quite
 * complex and require extensive configuration.
 *
 * Unlike in other creational patterns, different concrete builders can produce
 * unrelated products. In other words, results of various builders may not
 * always follow the same interface.
 */
class Product1 {
    public parts: string[] = [];

    public listParts(): void {
        console.log(`Product parts: ${this.parts.join(', ')}\n`);
    }
}

/**
 * The Director is only responsible for executing the building steps in a
 * particular sequence. It is helpful when producing products according to a
 * specific order or configuration. Strictly speaking, the Director class is
 * optional, since the client can control builders directly.
 */
class Director {
    private builder: Builder;

    /**
     * The Director works with any builder instance that the client code passes
     * to it. This way, the client code may alter the final type of the newly
     * assembled product.
     */
    public setBuilder(builder: Builder): void {
        this.builder = builder;
    }

    /**
     * The Director can construct several product variations using the same
     * building steps.
     */
    public buildMinimalViableProduct(): void {
        this.builder.producePartA();
    }

    public buildFullFeaturedProduct(): void {
        this.builder.producePartA();
        this.builder.producePartB();
        this.builder.producePartC();
    }
}

/**
 * The client code creates a builder object, passes it to the director and then
 * initiates the construction process. The end result is retrieved from the
 * builder object.
 */
function clientCode(director: Director) {
    const builder = new ConcreteBuilder1();
    director.setBuilder(builder);

    console.log('Standard basic product:');
    director.buildMinimalViableProduct();
    builder.getProduct().listParts();

    console.log('Standard full featured product:');
    director.buildFullFeaturedProduct();
    builder.getProduct().listParts();

    // Remember, the Builder pattern can be used without a Director class.
    console.log('Custom product:');
    builder.producePartA();
    builder.producePartC();
    builder.getProduct().listParts();
}

const director = new Director();
clientCode(director);",TypeScript,Builder,Refactoring Guru,https://refactoring.guru/design-patterns/builder/typescript/example#example-0,"[-1.04444221e-01  1.35790333e-02  2.94720922e-02  1.27763506e-02
 -1.69368032e-02  2.78707352e-02 -1.41746905e-02  8.32705125e-02
 -3.33582871e-02 -6.82488605e-02  1.09680463e-02 -3.39314044e-02
  5.51612722e-03 -3.07515580e-02  1.94178112e-02  7.93002732e-03
  3.20091471e-02  3.18720266e-02  5.85919432e-03  9.79053229e-03
  4.79892679e-02 -1.88787759e-03  1.68661457e-02 -3.60906161e-02
  4.14792374e-02 -4.40883227e-02  3.52473296e-02 -8.55637565e-02
  4.84256074e-02 -1.86297484e-02  2.02458259e-02  4.88255844e-02
 -5.68648465e-02  4.33688387e-02 -1.47778997e-02  5.44246957e-02
  4.38609123e-02  1.32323836e-03 -6.49440140e-02 -4.91277762e-02
  2.80043557e-02  6.89140409e-02 -7.56553337e-02 -2.18357686e-02
  8.46168026e-03  8.19462910e-03 -3.62239219e-02 -3.98037396e-02
  6.81205839e-03 -4.74142917e-02 -5.77977821e-02  2.14797128e-02
 -2.84788720e-02 -2.45892163e-02  1.74267925e-02  3.49625275e-02
  3.20672691e-02  4.24781181e-02 -4.60352004e-03  4.69618626e-02
  6.99566975e-02 -1.91359129e-02 -1.89236868e-02 -8.05398002e-02
  8.19143206e-02 -3.16892490e-02  1.86268184e-02  2.70044468e-02
 -6.47635609e-02 -3.23243998e-02  8.08000490e-02  4.20311391e-02
 -2.28544581e-03  2.58120093e-02 -3.07282992e-02  3.08444677e-03
  3.66274752e-02  4.78323102e-02  1.30736642e-02 -4.46962491e-02
 -1.26302429e-03  7.11838808e-03 -6.64265603e-02 -4.75895591e-02
  1.92037225e-02  9.19488966e-02  5.70457466e-02  3.91223878e-02
 -2.61034863e-03  4.04507704e-02 -7.76436031e-02 -4.84623723e-02
 -4.23612297e-02  2.33057663e-02  3.98290111e-03  2.20549628e-02
  8.90017673e-03  5.41003570e-02  7.32598826e-03  3.16956416e-02
 -7.85441548e-02  1.18023846e-02  1.07036214e-02 -4.33859192e-02
 -5.94303310e-02 -7.57639203e-03 -1.15095064e-01  9.96667705e-03
 -3.72910388e-02  1.15871418e-03 -6.50910363e-02  2.45131720e-02
 -6.12399094e-02 -3.73453274e-02 -1.65248942e-02 -8.53083357e-02
 -2.40732878e-02 -3.75776179e-02 -1.62984449e-02  7.70276487e-02
  9.80681032e-02  5.78972232e-03  5.61932512e-02  4.24335450e-02
 -4.72100601e-02 -4.48694937e-02 -1.99384652e-02 -7.81983153e-35
  4.10709642e-02 -8.33152011e-02 -5.80565725e-03  9.26086977e-02
  2.48124264e-02  1.65444780e-02  9.20642018e-02  1.02556273e-01
 -5.93320839e-02 -3.81437354e-02 -2.68560322e-03 -1.09978840e-01
 -6.04552925e-02  6.00995533e-02  2.57868301e-02 -6.97974041e-02
  1.93829332e-02 -1.35507351e-02 -2.58158036e-02 -5.17928787e-02
 -2.19053663e-02  8.97555053e-02 -4.23087664e-02  3.23227569e-02
  3.01833497e-03 -6.37573302e-02  2.17843074e-02  6.92987740e-02
 -8.20590630e-02  2.13033445e-02  3.64024527e-02  2.38069333e-02
  1.93983726e-02  5.42503707e-02 -7.00645670e-02 -3.17815579e-02
 -6.49774671e-02 -3.79647911e-02 -6.76062703e-02 -6.58957362e-02
  3.04268785e-02 -1.35388281e-02 -1.37677509e-02  1.47055173e-02
 -3.91295031e-02 -6.34402931e-02 -7.57600963e-02  1.35313962e-02
  1.36189908e-02  7.39219273e-03 -4.29437645e-02  1.32109419e-01
  8.39402750e-02 -1.46185681e-02  2.03618184e-02 -1.56472400e-02
 -1.35871291e-04 -2.64163315e-02 -6.31451420e-03  7.54673872e-03
 -9.41840336e-02  1.62707865e-01 -6.14817776e-02  1.58293061e-02
 -1.38095811e-01  7.18549863e-02  3.08310427e-03 -6.96194768e-02
  3.63064930e-02 -1.94110479e-02 -3.66930291e-02 -1.31430747e-02
 -4.75729629e-03 -4.38672639e-02 -5.58896502e-03  9.22753103e-03
 -8.22327808e-02 -2.27304492e-02 -8.29043388e-02 -1.19023226e-01
 -4.12200801e-02  1.17241204e-01  1.09004416e-03  1.04033507e-01
  1.66474506e-02  2.74641328e-02 -2.13938467e-02  3.28674577e-02
  5.09011261e-02  5.52548915e-02  4.79412116e-02 -5.10374904e-02
 -8.56175367e-03  1.68810245e-02  5.87839969e-02 -2.95775519e-33
  3.35619301e-02 -1.29558817e-02  1.43861379e-02 -9.05027092e-02
 -2.74429712e-02 -4.83249165e-02 -5.47290519e-02 -6.88996166e-02
 -6.36322498e-02  7.31258094e-02 -3.42055261e-02 -2.70179240e-03
  3.33511345e-02 -8.83317180e-03 -2.90531013e-02  4.38957773e-02
  5.67870354e-03 -5.86948656e-02  7.46794716e-02 -3.24480943e-02
  1.16818585e-02  8.36964175e-02  1.11405432e-01 -8.05764571e-02
 -1.78823918e-02 -2.99484488e-02 -5.54127544e-02  1.14169784e-01
  1.14171013e-01 -5.87978028e-02  5.75651713e-02 -6.90905452e-02
 -5.65530248e-02  6.63512899e-03 -2.72064656e-02 -6.03234880e-02
 -3.43334163e-03  4.41086516e-02  7.98911825e-02 -6.55561164e-02
  3.94976996e-02 -5.77172376e-02  8.58657435e-03  6.51264936e-02
  4.18137312e-02 -1.34579614e-01  9.68025103e-02 -6.06736094e-02
  4.66749147e-02  4.96649090e-03  4.69207466e-02  1.15032960e-02
 -2.27170009e-02 -2.20216606e-02  1.00190360e-02  2.72047836e-02
  8.12287405e-02 -4.21997458e-02  9.23797339e-02  6.47863224e-02
  1.83216408e-02 -2.11653803e-02  7.07657561e-02 -1.50749218e-02
  1.43257463e-02 -5.30156791e-02 -4.74195108e-02  2.75338832e-02
  6.08508363e-02 -5.91522129e-03 -5.45768477e-02  9.15867984e-02
 -2.15097647e-02 -1.10219140e-03  3.59079204e-02 -2.65799817e-02
 -5.82960397e-02  4.68468964e-02  3.31590585e-02 -2.77928635e-03
 -4.72924635e-02 -2.11763028e-02  6.70365337e-03 -1.95255522e-02
  5.00825681e-02 -8.40670466e-02  3.68598178e-02  4.05355953e-02
  5.94227128e-02 -3.12424842e-02 -3.48365679e-02  7.59047344e-02
  2.02089641e-02  2.22138762e-02  3.87194729e-03 -5.06948084e-08
 -7.14852959e-02 -9.28254873e-02 -2.67555285e-02 -1.57579686e-02
  3.21635902e-02 -1.04990326e-01 -4.25648428e-02  4.82544340e-02
  8.89454689e-03  2.12431494e-02  3.18416543e-02  1.67888906e-02
  2.02977024e-02  9.95472260e-03  3.47153693e-02 -7.80574977e-02
  2.74761785e-02  2.15715542e-02 -5.21548353e-02 -3.06603312e-03
 -1.20676681e-02 -4.30001989e-02  2.29481999e-02  7.20019415e-02
 -3.94508876e-02 -1.09982513e-01  8.15632269e-02 -1.16417343e-02
 -1.24920420e-02  5.40354103e-02 -5.50352074e-02  6.87736794e-02
  1.75502580e-02  8.04301351e-03  1.45737045e-02  1.26931276e-02
  9.02300328e-03  2.96858642e-02  2.82988027e-02  6.94514439e-02
  2.52080001e-02 -6.40405854e-03 -3.22153755e-02  6.66293800e-02
  1.24153279e-01 -3.74222845e-02 -5.36111444e-02 -5.64574376e-02
  7.51246605e-03  1.94733646e-02 -9.59602073e-02  2.49783304e-02
 -8.43548104e-02 -3.45336534e-02  4.98647476e-03 -8.04886874e-03
 -5.31498194e-02 -1.03081569e-01  9.22709256e-02 -2.66091917e-02
 -2.83311568e-02  6.31587133e-02  6.23239987e-02  5.25945798e-02]"
"/**
 * The Creator class declares the factory method that is supposed to return an
 * object of a Product class. The Creator's subclasses usually provide the
 * implementation of this method.
 */
abstract class Creator {
    /**
     * Note that the Creator may also provide some default implementation of the
     * factory method.
     */
    public abstract factoryMethod(): Product;

    /**
     * Also note that, despite its name, the Creator's primary responsibility is
     * not creating products. Usually, it contains some core business logic that
     * relies on Product objects, returned by the factory method. Subclasses can
     * indirectly change that business logic by overriding the factory method
     * and returning a different type of product from it.
     */
    public someOperation(): string {
        // Call the factory method to create a Product object.
        const product = this.factoryMethod();
        // Now, use the product.
        return `Creator: The same creator's code has just worked with ${product.operation()}`;
    }
}

/**
 * Concrete Creators override the factory method in order to change the
 * resulting product's type.
 */
class ConcreteCreator1 extends Creator {
    /**
     * Note that the signature of the method still uses the abstract product
     * type, even though the concrete product is actually returned from the
     * method. This way the Creator can stay independent of concrete product
     * classes.
     */
    public factoryMethod(): Product {
        return new ConcreteProduct1();
    }
}

class ConcreteCreator2 extends Creator {
    public factoryMethod(): Product {
        return new ConcreteProduct2();
    }
}

/**
 * The Product interface declares the operations that all concrete products must
 * implement.
 */
interface Product {
    operation(): string;
}

/**
 * Concrete Products provide various implementations of the Product interface.
 */
class ConcreteProduct1 implements Product {
    public operation(): string {
        return '{Result of the ConcreteProduct1}';
    }
}

class ConcreteProduct2 implements Product {
    public operation(): string {
        return '{Result of the ConcreteProduct2}';
    }
}

/**
 * The client code works with an instance of a concrete creator, albeit through
 * its base interface. As long as the client keeps working with the creator via
 * the base interface, you can pass it any creator's subclass.
 */
function clientCode(creator: Creator) {
    // ...
    console.log('Client: I\'m not aware of the creator\'s class, but it still works.');
    console.log(creator.someOperation());
    // ...
}

/**
 * The Application picks a creator's type depending on the configuration or
 * environment.
 */
console.log('App: Launched with the ConcreteCreator1.');
clientCode(new ConcreteCreator1());
console.log('');

console.log('App: Launched with the ConcreteCreator2.');
clientCode(new ConcreteCreator2());",TypeScript,Factory Method,Refactoring Guru,https://refactoring.guru/design-patterns/factory-method/typescript/example#example-0,"[-1.30167350e-01 -7.26116216e-03  1.17116412e-02 -1.39305238e-02
 -3.87314819e-02 -1.00881886e-03  5.31829149e-02  4.71323766e-02
 -4.11930941e-02 -7.19712451e-02 -2.54752748e-02 -4.85607721e-02
  2.21147109e-03 -1.68875586e-02  5.22779860e-02  7.97470734e-02
  1.54688209e-02 -4.73345676e-03 -1.22633232e-02  3.05888355e-02
  1.03524633e-01 -6.80770651e-02 -3.90065908e-02 -1.73981823e-02
 -6.44967109e-02 -3.21295932e-02  3.13829863e-03 -2.38561705e-02
  7.52773881e-02 -4.45075659e-03  2.03837492e-02  3.44906934e-02
 -4.57083806e-02  2.96865553e-02 -9.14288908e-02  6.52559847e-02
  4.65070978e-02  1.12834992e-02 -7.99804833e-03 -3.25901583e-02
  2.94551253e-02  3.46923470e-02 -7.98374042e-02 -8.67372728e-04
  5.59883825e-02 -3.53519879e-02 -4.98965792e-02 -5.04765622e-02
 -2.60167550e-02 -4.77775410e-02 -1.99001450e-02  8.73048324e-03
  3.28330807e-02  9.23699886e-03  1.97787350e-03  2.07935553e-02
  1.65407378e-02  9.66948122e-02  3.53527889e-02  4.40117605e-02
  1.25441495e-02  2.87397355e-02  2.77989116e-02 -3.14395428e-02
  9.82414857e-02  3.44638713e-03 -4.96329069e-02 -3.91345918e-02
 -4.16823216e-02 -2.53050607e-02  1.80680398e-03 -4.24999557e-02
 -1.89597830e-02  2.27661915e-02 -2.98188142e-02 -3.05962544e-02
 -8.79344158e-03  7.27151930e-02 -3.58746275e-02 -5.73052838e-02
  4.43505011e-02  6.47397265e-02 -1.50208836e-02 -8.33897199e-03
  1.99570432e-02  1.05478600e-01  6.41913787e-02  2.37552758e-05
  2.35994793e-02  1.08358391e-01 -7.96683729e-02 -4.55015600e-02
 -3.26326229e-02 -1.61032565e-02  6.62847713e-04 -2.21015327e-02
 -4.82126651e-03 -3.02142575e-02 -3.14069390e-02  9.83344465e-02
 -8.53924602e-02  1.30235264e-02  2.81223375e-02 -2.23527253e-02
  7.00909123e-02  4.74834926e-02 -9.41812992e-02 -5.00056706e-02
  1.72722118e-03  6.62569851e-02 -2.23112889e-02  1.36054037e-02
 -6.35214821e-02  4.55937767e-03 -6.93518110e-03  7.10608438e-02
  3.88168055e-03 -1.30350124e-02 -1.61849298e-02  5.25494255e-02
  2.49414239e-02  1.30201289e-02  7.97967985e-02  2.09981818e-02
 -3.17875519e-02  1.51835121e-02  6.82360306e-03 -1.51826678e-34
  1.49914138e-02 -3.85104045e-02 -5.02471477e-02  1.11246213e-01
  3.60028334e-02 -7.46787479e-03  7.46309161e-02  1.08225718e-01
 -3.59781347e-02 -2.99763586e-02  1.64428186e-02 -4.10122797e-03
 -2.05527339e-02  6.92245811e-02  9.22505185e-02  4.39651636e-03
  1.08550889e-02 -3.93648036e-02  3.09131555e-02 -6.42644539e-02
 -3.67309786e-02  8.61532539e-02 -1.12378085e-02  1.10605026e-04
 -1.68672167e-02  2.86051426e-02  1.75352104e-03  3.95278912e-03
 -6.37502000e-02  9.34280179e-05  3.52368434e-03 -4.86889621e-03
 -2.93218857e-03  6.66779131e-02 -4.13766280e-02  1.44629776e-02
 -4.11280505e-02 -4.37492914e-02 -3.58706005e-02 -8.23896527e-02
  1.11302892e-02 -1.51977409e-02 -2.66503729e-03  7.12819956e-03
 -1.29357334e-02 -9.16898698e-02 -3.53138112e-02  6.87879790e-03
  5.97715788e-02 -2.94814799e-02 -3.61125134e-02  9.44419354e-02
  4.73160744e-02 -4.27968130e-02  5.62870838e-02 -4.63614948e-02
 -1.94734579e-03  1.58490892e-02  2.13814117e-02  8.51061661e-03
 -6.71024099e-02  5.98008707e-02 -4.75786105e-02  1.15294985e-01
 -1.20949082e-01  7.25310221e-02 -5.77177443e-02 -8.42836946e-02
  8.24164078e-02 -8.34530219e-03 -2.10096431e-03  4.05955389e-02
 -7.88642317e-02  1.60158593e-02 -2.31227353e-02  9.76067875e-03
 -6.50819242e-02  7.28280749e-04 -2.78424770e-02 -7.66769378e-03
 -2.82252282e-02  8.99858698e-02  8.52486957e-03  8.35345015e-02
 -1.19316101e-01  1.28056435e-02  1.37779675e-02  3.13309394e-02
  4.93887812e-02  4.74933982e-02 -1.36350207e-02 -5.56208752e-02
 -1.05726055e-03 -2.23230738e-02  4.29918207e-02 -2.56888568e-33
  2.04298203e-03  3.37320473e-03 -4.56909314e-02 -4.84098755e-02
 -3.69882546e-02 -3.06498352e-02 -6.29683807e-02 -2.98318416e-02
 -1.20104842e-01  6.43970147e-02 -1.42889377e-02  2.06777081e-02
  1.01468965e-01 -4.41416446e-03 -2.13242266e-02 -1.40024489e-02
 -9.19812247e-02 -7.44150430e-02  4.69736150e-03 -5.02560101e-02
  8.55950266e-03  9.98323858e-02  6.78652376e-02 -4.65115458e-02
 -1.32036032e-02  1.04629416e-02 -5.10218069e-02  1.86441526e-01
  7.17604160e-02 -7.46616796e-02 -3.94510105e-03 -3.17170620e-02
  2.61787383e-04 -3.56047675e-02  6.10718653e-02 -1.72184017e-02
 -3.26395594e-02  7.11310059e-02  3.25647853e-02 -9.67278108e-02
  4.24571447e-02 -9.29148048e-02 -7.21055046e-02  3.67139652e-02
  1.10745039e-02 -5.52888177e-02 -3.21366452e-03 -6.89688548e-02
  7.57342577e-02  4.82123438e-03  1.54310828e-02  5.63161680e-04
 -1.56934224e-02 -6.86538145e-02 -5.99161834e-02  2.95749400e-02
  1.03249602e-01 -4.80422713e-02 -1.49365505e-02  5.32441474e-02
  6.75264373e-02 -3.58931310e-02  6.05917685e-02  9.49943736e-02
 -7.86212645e-03 -4.87650409e-02  2.91699208e-02 -3.05991694e-02
  1.76964724e-03  3.47219668e-02  1.22258924e-02  5.58268055e-02
  6.64989371e-03 -3.92610095e-02  4.77143638e-02  2.45513022e-02
  1.75657272e-02  3.17286998e-02  1.80408061e-02 -9.40255672e-02
 -6.92242160e-02 -5.98302111e-02  7.08961338e-02  1.75545681e-02
  5.17430576e-03 -1.17636822e-01 -3.13301687e-03 -6.40995940e-03
 -5.71537938e-04 -2.00167391e-02  9.13283508e-03  6.88829795e-02
 -1.39006168e-01  6.69069728e-03  1.52852843e-02 -5.41517267e-08
 -3.51443961e-02 -3.37263346e-02 -3.28505263e-02  3.06493714e-02
 -2.53064223e-02 -6.02105595e-02 -3.94151956e-02 -6.47481158e-02
 -1.62213687e-02 -1.31647801e-02 -9.63966101e-02  4.46781181e-02
  1.50029594e-02  5.78346080e-04  5.73615059e-02 -3.59923244e-02
  3.56171876e-02  5.33934822e-03 -6.66076615e-02  1.57997869e-02
 -2.30455250e-02 -5.73363826e-02  2.32743118e-02 -3.16490978e-02
 -8.68720263e-02 -6.87944070e-02  2.80017406e-02  6.17008805e-02
 -5.67002892e-02  1.06649280e-01 -4.72796522e-02  9.07400846e-02
 -2.28150450e-02  7.65295550e-02  1.35122202e-02  2.83346232e-02
 -3.69486660e-02  8.62515438e-03 -2.56743599e-02  5.62786683e-02
  8.36348161e-02 -1.90573987e-02 -8.70917141e-02  1.56692183e-03
  6.91755563e-02  1.15441913e-02 -5.22861769e-03 -8.57937038e-02
  6.30307347e-02  1.20131299e-01 -3.15575413e-02  3.93971503e-02
 -1.51806707e-02 -5.76164275e-02 -1.64273251e-02  4.05423678e-02
 -1.14202071e-02 -7.89119676e-02  2.05323994e-02 -3.89027707e-02
 -4.14120071e-02 -1.34050043e-03  1.66064873e-01  2.37344648e-03]"
"/**
 * The example class that has cloning ability. We'll see how the values of field
 * with different types will be cloned.
 */
class Prototype {
    public primitive: any;
    public component: object;
    public circularReference: ComponentWithBackReference;

    public clone(): this {
        const clone = Object.create(this);

        clone.component = Object.create(this.component);

        // Cloning an object that has a nested object with backreference
        // requires special treatment. After the cloning is completed, the
        // nested object should point to the cloned object, instead of the
        // original object. Spread operator can be handy for this case.
        clone.circularReference = {
            ...this.circularReference,
            prototype: { ...this },
        };

        return clone;
    }
}

class ComponentWithBackReference {
    public prototype;

    constructor(prototype: Prototype) {
        this.prototype = prototype;
    }
}

/**
 * The client code.
 */
function clientCode() {
    const p1 = new Prototype();
    p1.primitive = 245;
    p1.component = new Date();
    p1.circularReference = new ComponentWithBackReference(p1);

    const p2 = p1.clone();
    if (p1.primitive === p2.primitive) {
        console.log('Primitive field values have been carried over to a clone. Yay!');
    } else {
        console.log('Primitive field values have not been copied. Booo!');
    }
    if (p1.component === p2.component) {
        console.log('Simple component has not been cloned. Booo!');
    } else {
        console.log('Simple component has been cloned. Yay!');
    }

    if (p1.circularReference === p2.circularReference) {
        console.log('Component with back reference has not been cloned. Booo!');
    } else {
        console.log('Component with back reference has been cloned. Yay!');
    }

    if (p1.circularReference.prototype === p2.circularReference.prototype) {
        console.log('Component with back reference is linked to original object. Booo!');
    } else {
        console.log('Component with back reference is linked to the clone. Yay!');
    }
}

clientCode();",TypeScript,Prototype,Refactoring Guru,https://refactoring.guru/design-patterns/prototype/typescript/example#example-0,"[-4.54526767e-02  2.99234362e-03  1.31493686e-02  1.58649441e-02
  5.09091541e-02 -1.37115922e-02  2.24004481e-02 -1.82806235e-02
  8.88596028e-02 -3.47323455e-02 -2.02229177e-03  2.66894232e-02
 -1.35414125e-02 -4.44322936e-02  3.73001546e-02  1.64924935e-02
 -2.34174207e-02  3.09391133e-02  1.87109280e-02  2.63910815e-02
  3.72851118e-02 -1.08227491e-01 -6.21368885e-02  4.71725455e-03
  4.65366691e-02  5.44012152e-02  8.92730951e-02 -4.27232496e-02
  1.10859480e-02 -5.21138720e-02 -7.61535838e-02  5.85756712e-02
 -1.93313569e-01 -4.62747365e-02 -6.38465807e-02  1.03247717e-01
 -4.82325554e-02 -1.98078714e-03  5.17478697e-02 -4.45685200e-02
 -8.27726629e-03  4.83167619e-02 -5.25785387e-02 -2.56905183e-02
  5.48819192e-02  1.66084822e-02 -5.04928455e-02  5.80264144e-02
  9.34931822e-03 -9.87844542e-03  3.12649496e-02 -2.72245016e-02
 -1.62619408e-02 -2.02253158e-03  3.71191800e-02  1.93235409e-02
  4.05278504e-02  2.11554207e-03  2.96492334e-02  6.97790235e-02
  3.94595700e-04  2.94880047e-02  5.51698692e-02 -1.26110790e-02
  1.13555394e-01 -4.48544100e-02 -8.01610872e-02 -3.98726156e-03
 -5.22230044e-02  7.36232921e-02  6.39257506e-02  1.08141787e-02
  8.83872285e-02 -2.57197060e-02  5.04324492e-03  2.29965872e-03
 -1.20098675e-02  8.66397470e-02 -2.67922934e-02 -1.15189319e-02
  1.24599074e-03 -4.49858792e-02 -2.89242081e-02  8.05074442e-03
  2.45882068e-02  9.13345590e-02  9.86132119e-03  4.25265878e-02
 -4.46095318e-02 -9.10125393e-03 -3.97686474e-02  1.58322987e-03
  2.73898672e-02  2.21790019e-02  8.62409826e-03 -2.31929193e-03
 -3.79636372e-03  6.93943119e-03  1.77855901e-02  2.14443989e-02
 -4.20125835e-02  4.51220907e-02  1.27241656e-01 -1.38641875e-02
  2.64368765e-02 -8.09055101e-03 -4.82896380e-02 -8.27132463e-02
  4.25695926e-02 -1.75887868e-02 -4.07578759e-02  8.58937204e-02
 -1.37290256e-02  2.38662176e-02  2.55746935e-02 -5.61600514e-02
  5.77569120e-02 -1.40663721e-02 -1.42802931e-02  8.64573231e-04
  7.09128529e-02  7.44094476e-02  8.50188062e-02  3.48209590e-02
  1.46136833e-02 -6.93356693e-02  1.81428827e-02  3.39736648e-34
  9.68213752e-02  5.26410043e-02 -2.67881583e-02  1.01274559e-02
  3.62807997e-02  5.91822015e-03  5.73831983e-02  7.49596134e-02
 -1.01969987e-01  4.69046086e-03 -1.38648367e-02  1.52355451e-02
 -2.04761866e-02 -1.63320880e-02 -1.84786450e-02 -3.62603515e-02
  2.74443477e-02  4.13830355e-02 -4.28748205e-02 -4.80723754e-02
 -9.53623652e-03 -1.50763337e-02 -5.21671101e-02  8.44523832e-02
  4.84363288e-02  1.51691225e-03 -4.25426029e-02  6.60934439e-03
 -8.87946710e-02 -1.98326800e-02  7.39517137e-02  3.90899479e-02
  8.33486952e-03  3.69715579e-02 -9.39078443e-03 -5.71024008e-02
 -9.70686972e-03 -3.71139646e-02 -7.89272115e-02 -1.04979925e-01
  8.87454078e-02 -4.98163253e-02 -4.59646769e-02 -5.06131053e-02
  1.12202391e-02 -1.60646290e-01 -2.06773188e-02  1.48786623e-02
  4.75960746e-02 -5.17381355e-02  5.58588328e-03  6.73500970e-02
  6.30447082e-03 -5.60361072e-02  2.39926558e-02 -3.05355825e-02
  1.03198439e-02  1.68684088e-02  1.13558408e-03  2.24606432e-02
  8.17346722e-02  8.98175128e-03 -8.24496001e-02 -4.49492550e-03
 -6.79957718e-02  4.70088385e-02 -6.01280481e-02 -7.23966658e-02
  6.98091164e-02 -3.44964489e-02  2.87946276e-02 -3.45563218e-02
 -9.56871510e-02 -2.37129107e-02  1.11665018e-02 -4.35223877e-02
 -1.60205260e-01  1.21870581e-02  1.60934031e-02 -7.44722560e-02
 -1.25389308e-01  5.63040785e-02 -9.32027549e-02  8.75641704e-02
  4.35648486e-02  2.39297990e-02 -7.69639201e-03 -2.26078890e-02
 -5.15731722e-02  1.51225552e-01 -1.62422024e-02 -2.85843927e-02
 -5.53793311e-02 -5.41067086e-02  3.35281752e-02 -2.49935537e-33
 -3.45984586e-02 -2.67859269e-02  7.46874660e-02  3.85495611e-02
 -5.98421693e-02 -5.22775054e-02 -5.04997112e-02  1.34966790e-03
 -6.86421096e-02  2.94726882e-02  2.49353759e-02 -4.96801138e-02
  1.48970624e-02  1.01126321e-02 -4.29456867e-02  1.14801168e-01
 -7.33370110e-02 -1.33779980e-02  2.57820394e-02 -4.20672894e-02
  1.10587001e-01  2.44503878e-02  1.24851480e-01 -8.77823494e-03
 -5.54099604e-02 -3.47083881e-02  2.80645862e-02  2.04984713e-02
  6.15020506e-02 -8.08557346e-02 -4.65010712e-03  1.67631861e-02
 -8.05036817e-03  1.02416286e-02  3.41402888e-02 -1.87840518e-02
  4.71378230e-02  4.92599383e-02 -2.00570710e-02 -6.16772473e-02
  3.22393216e-02 -4.85457517e-02 -8.70214403e-02 -2.29957839e-03
 -1.61483116e-03 -8.93742219e-02  1.43781882e-02  4.52073514e-02
  1.30073994e-01 -1.15543026e-02  4.74625354e-04 -6.49692118e-02
 -1.46768300e-03 -3.53483073e-02 -1.00389063e-01 -1.72098130e-02
  7.01760948e-02 -2.72527821e-02  1.24654718e-01  3.09133474e-02
  5.32223172e-02 -1.06890924e-01  7.05300495e-02  7.51471613e-03
  1.48392317e-03 -6.67214766e-02 -1.83092281e-02  9.45208594e-02
  8.31866413e-02 -2.13910686e-03  2.36594938e-02  9.84610319e-02
  2.02192534e-02 -2.16652825e-02  8.76137149e-03 -2.29145233e-02
  1.79943876e-04 -5.24408147e-02  6.89367726e-02 -5.21717370e-02
 -2.02037189e-02 -1.67412255e-02 -3.01690884e-02  1.34789934e-02
  1.73965488e-02 -2.58112494e-02  4.05740179e-02 -7.68889207e-03
 -5.62315583e-02 -2.93844808e-02 -5.93608953e-02  6.71889707e-02
 -7.81765357e-02 -2.07150411e-02  1.12969223e-02 -4.08856131e-08
 -5.98166399e-02  2.80259433e-03 -1.37205413e-02 -3.63509245e-02
 -1.24974223e-02 -6.81871772e-02 -1.74716767e-02 -9.88703803e-04
 -6.34512752e-02 -6.02957271e-02 -5.74811548e-02  7.65722394e-02
  5.60240597e-02  1.85622703e-02  4.39163819e-02 -5.60067361e-03
 -1.09494105e-02 -2.60847230e-02  1.84888369e-03  4.52426299e-02
  6.07638061e-03 -2.16047224e-02  1.25456220e-02  1.18229680e-01
  1.46071361e-02 -4.68892157e-02  2.95770653e-02  1.80067755e-02
  5.64357154e-02 -8.44256673e-03 -1.72384754e-02  6.66556805e-02
 -7.46040791e-03 -7.26496056e-03 -6.70729624e-03  1.36900395e-02
  6.11003395e-03 -9.56328865e-03  1.91401113e-02  6.90411851e-02
  1.05973065e-01 -3.91163193e-02 -9.21535045e-02  4.84000007e-03
  4.35364209e-02  5.45518240e-03  2.71330290e-02 -5.75813763e-02
 -3.17795016e-02 -5.46501055e-02 -3.71305794e-02 -3.02230138e-02
 -4.06354256e-02 -5.50914407e-02 -5.67091852e-02  1.94919910e-02
  4.34552282e-02  5.68340067e-03  6.05785474e-02  5.85813541e-03
  2.90675070e-02  7.10396543e-02  4.75899801e-02 -5.51867224e-02]"
"/**
 * The Singleton class defines the `getInstance` method that lets clients access
 * the unique singleton instance.
 */
class Singleton {
    private static instance: Singleton;

    /**
     * The Singleton's constructor should always be private to prevent direct
     * construction calls with the `new` operator.
     */
    private constructor() { }

    /**
     * The static method that controls the access to the singleton instance.
     *
     * This implementation let you subclass the Singleton class while keeping
     * just one instance of each subclass around.
     */
    public static getInstance(): Singleton {
        if (!Singleton.instance) {
            Singleton.instance = new Singleton();
        }

        return Singleton.instance;
    }

    /**
     * Finally, any singleton should define some business logic, which can be
     * executed on its instance.
     */
    public someBusinessLogic() {
        // ...
    }
}

/**
 * The client code.
 */
function clientCode() {
    const s1 = Singleton.getInstance();
    const s2 = Singleton.getInstance();

    if (s1 === s2) {
        console.log('Singleton works, both variables contain the same instance.');
    } else {
        console.log('Singleton failed, variables contain different instances.');
    }
}

clientCode();",TypeScript,Singleton,Refactoring Guru,https://refactoring.guru/design-patterns/singleton/typescript/example#example-0,"[-1.09929003e-01 -2.53887083e-02  8.47897306e-03  6.50679925e-03
 -2.88638603e-02 -3.14977095e-02  8.07380229e-02 -2.88655469e-03
 -2.84803323e-02 -8.55830759e-02 -2.80300844e-02  3.41491848e-02
  2.44830903e-02  3.89358867e-03  8.70093405e-02 -2.70564146e-02
  1.21533750e-02 -2.22447049e-02  1.66443586e-02  1.00357858e-02
  6.82822242e-02 -3.13856043e-02 -1.15023538e-01  2.87286248e-02
 -9.36387926e-02 -4.80585732e-02  5.20746282e-04 -7.57758738e-03
  1.03046104e-01  2.48371195e-02  7.00070709e-02 -1.48838945e-02
 -1.26896769e-01  4.66320403e-02 -8.30708351e-03  5.69486730e-02
 -1.49746090e-02  5.58385719e-03 -4.51795943e-03  5.15388213e-02
 -4.85839397e-02  3.61738019e-02 -8.71598944e-02 -3.84245180e-02
  4.89767790e-02 -5.74600622e-02 -9.00544673e-02  2.84693707e-02
  4.36035618e-02 -5.61951175e-02  2.47459672e-02  1.52379530e-03
 -2.61458643e-02 -3.45330834e-02  7.48159140e-02  2.00162362e-02
  4.67034802e-02  1.56835727e-02  1.44190155e-03 -1.81080736e-02
 -6.22074911e-03  2.15745810e-02  8.22223499e-02 -4.88237385e-03
  4.89755571e-02 -5.78150200e-03 -3.83412242e-02  8.31879452e-02
  4.62613292e-02  1.47854388e-02  2.12814081e-02 -3.18840221e-02
  2.49082204e-02  4.77434248e-02 -6.18370511e-02 -5.04193455e-02
 -4.69848998e-02  4.39477526e-02  1.39241936e-02 -8.06764048e-03
 -5.24542518e-02  2.76330374e-02 -7.63035286e-03 -1.53760528e-02
  2.22077202e-02 -1.70263145e-02  6.32486939e-02  2.63760816e-02
  2.69181095e-02  2.80331001e-02 -6.49858117e-02  3.42108533e-02
 -6.88780248e-02  9.31062736e-03 -7.49861542e-03 -1.42842736e-02
 -5.01006134e-02  1.05531272e-02  5.20384647e-02  8.61269087e-02
 -2.45629624e-02  4.55046557e-02  6.19510189e-02  3.48696671e-02
  7.00108893e-03 -7.15291919e-03 -8.01670104e-02 -8.84362161e-02
  4.27334309e-02 -2.67947633e-02 -3.43654230e-02  5.90535551e-02
 -3.04130558e-02  3.00320294e-02 -2.04217825e-02  3.85012515e-02
  5.32753542e-02 -9.19366628e-03  4.03653160e-02  1.48588106e-01
  3.09947059e-02  1.74752288e-02  8.44706073e-02 -3.49808042e-03
 -1.44134520e-03  2.05116309e-02  1.78142991e-02  2.86227970e-33
  2.99378522e-02 -3.60946245e-02 -1.79112572e-02  8.11112970e-02
  3.44716036e-03 -4.98327706e-03 -3.41032632e-02  8.42936784e-02
 -8.90858397e-02  5.40782437e-02  3.85848209e-02  6.01790249e-02
  6.88567013e-03  6.22540247e-03  1.19656706e-02  1.57853700e-02
  1.31966129e-01 -3.10033709e-02  8.05790275e-02 -6.08555041e-02
 -2.46377680e-02 -8.42975453e-03 -2.41909735e-02  2.35521290e-02
 -7.55210640e-05 -1.76042058e-02  1.56138679e-02  4.76730838e-02
  5.17030386e-03  2.79267468e-02  1.05644941e-01  2.56438218e-02
 -6.07774742e-02  1.18861206e-01 -3.72086167e-02 -2.20839903e-02
 -2.36660708e-02  3.49517725e-02 -5.02517261e-02 -1.66328296e-01
 -2.50231270e-02 -2.10975967e-02  2.26803366e-02 -1.96697190e-02
  1.05199600e-02 -3.50983255e-02 -1.04018681e-01 -3.93037274e-02
  2.36451551e-02 -5.41386753e-02 -3.31720859e-02  5.88981360e-02
  3.56620178e-02  6.20531989e-03 -3.08856927e-02 -6.44726902e-02
 -1.42010134e-02 -1.83849912e-02 -1.54791074e-02 -1.73426289e-02
  2.36832257e-02 -3.90054546e-02 -7.07361475e-02  4.90856171e-03
 -2.78755520e-02  2.58754268e-02 -5.64274453e-02 -2.01754738e-02
 -2.05184948e-02 -1.78227536e-02  1.16547628e-03  4.56973836e-02
 -2.07737032e-02 -8.33060667e-02  4.65912744e-05  2.43375227e-02
  4.87253629e-02  2.83768475e-02 -8.85729566e-02 -6.10469952e-02
 -8.99091586e-02  8.53476599e-02  5.64477360e-03  1.11147836e-01
 -6.51415512e-02  1.11528784e-01  3.67253125e-02  3.76011319e-02
  4.04042043e-02  1.25532031e-01  4.21062624e-03 -1.92910638e-02
 -4.41450290e-02 -7.29774013e-02  9.73427948e-03 -5.42902690e-33
 -1.84535291e-02  3.41677330e-02 -7.82516748e-02 -8.14609677e-02
 -8.39824090e-04  2.18618456e-02 -4.89035472e-02  1.05854159e-03
 -1.42156988e-01  2.48639155e-02 -3.46725173e-02  2.14708261e-02
 -2.84234353e-04  2.13280097e-02 -7.57960305e-02  5.92391640e-02
 -5.01549654e-02  7.79921887e-03 -4.18959232e-03  5.39120547e-02
  3.47990450e-03  2.49808654e-02  6.56165108e-02 -7.97129795e-02
  2.45466586e-02  4.03903499e-02 -1.20314971e-01  7.57120177e-02
  2.64877155e-02 -1.53508903e-02 -2.76424419e-02  1.34704877e-02
 -2.72762384e-02 -4.48536873e-02  3.49665503e-03 -4.41621691e-02
 -3.06350924e-02  2.99769547e-02  1.18078999e-02 -2.22493540e-02
 -2.69087777e-03 -6.31555170e-02 -2.68510897e-02 -2.75741313e-02
  8.25868547e-02 -6.14037784e-03  2.75584497e-02 -1.35991164e-02
 -3.03753782e-02 -1.82388176e-03 -8.99725109e-02 -5.15781902e-02
 -6.35095984e-02  1.29553964e-02 -4.41204831e-02 -5.24557056e-03
  3.49922106e-02  1.19587115e-03 -7.02754408e-03  4.24616560e-02
  9.16194245e-02 -8.07539225e-02 -1.05979346e-01  1.46090969e-01
 -6.62163049e-02 -1.10058755e-01  1.14100985e-02 -2.04568915e-02
  2.33496167e-02  1.48667656e-02 -1.08231455e-02  6.63691163e-02
 -2.24129837e-02 -6.83194920e-02 -1.53553244e-02  9.11198929e-02
 -3.42385881e-02 -9.26714838e-02 -4.77751084e-02 -1.87786180e-04
  1.16366427e-02 -2.34659929e-02 -5.24681918e-02 -1.50949927e-02
 -6.71235472e-02 -3.96055430e-02  1.02981478e-01 -4.75801667e-03
 -2.54938076e-03 -2.15457026e-02 -7.85742030e-02  5.77100888e-02
 -1.18192442e-01 -5.26974723e-02 -7.74230137e-02 -6.38716244e-08
 -8.48774612e-03 -2.16986630e-02  4.52144295e-02  2.58145928e-02
  5.49643114e-03 -7.19833747e-02  1.13738794e-02  7.11670495e-04
 -8.68335459e-03  5.97728342e-02 -3.97545360e-02  1.79747529e-02
  5.96008077e-02  4.80155274e-03 -5.37109487e-02  4.76570912e-02
  6.77509978e-03 -2.99408846e-02 -2.39563249e-02  4.30576243e-02
 -2.41474528e-02 -3.11627798e-02  9.64519158e-02  5.97722083e-02
 -7.56741464e-02 -5.92551343e-02  5.89357950e-02  1.33794500e-02
  9.08191036e-03 -4.19500396e-02 -9.49130058e-02  5.98065630e-02
  2.55232956e-02  2.86845323e-02 -6.21003583e-02  4.78513129e-02
 -1.24898203e-01  5.99025376e-02  2.52432339e-02 -6.35906355e-03
  7.75377527e-02 -5.63238971e-02 -2.45626681e-02  6.77386448e-02
  7.46019930e-02  5.18412590e-02  6.71810359e-02 -2.74996590e-02
  3.33424136e-02  2.71097366e-02 -6.36025742e-02  3.94784734e-02
 -8.15617852e-03  3.22167575e-02 -1.25212697e-02  1.64825227e-02
  1.50480382e-02 -4.12120745e-02  7.17650056e-02  6.42563589e-03
 -9.37736630e-02  5.46854325e-02 -9.68419947e-03 -2.08987314e-02]"
"/**
 * The Target defines the domain-specific interface used by the client code.
 */
class Target {
    public request(): string {
        return 'Target: The default target\'s behavior.';
    }
}

/**
 * The Adaptee contains some useful behavior, but its interface is incompatible
 * with the existing client code. The Adaptee needs some adaptation before the
 * client code can use it.
 */
class Adaptee {
    public specificRequest(): string {
        return '.eetpadA eht fo roivaheb laicepS';
    }
}

/**
 * The Adapter makes the Adaptee's interface compatible with the Target's
 * interface.
 */
class Adapter extends Target {
    private adaptee: Adaptee;

    constructor(adaptee: Adaptee) {
        super();
        this.adaptee = adaptee;
    }

    public request(): string {
        const result = this.adaptee.specificRequest().split('').reverse().join('');
        return `Adapter: (TRANSLATED) ${result}`;
    }
}

/**
 * The client code supports all classes that follow the Target interface.
 */
function clientCode(target: Target) {
    console.log(target.request());
}

console.log('Client: I can work just fine with the Target objects:');
const target = new Target();
clientCode(target);

console.log('');

const adaptee = new Adaptee();
console.log('Client: The Adaptee class has a weird interface. See, I don\'t understand it:');
console.log(`Adaptee: ${adaptee.specificRequest()}`);

console.log('');

console.log('Client: But I can work with it via the Adapter:');
const adapter = new Adapter(adaptee);
clientCode(adapter);",TypeScript,Adapter,Refactoring Guru,https://refactoring.guru/design-patterns/adapter/typescript/example#example-0,"[-5.22751212e-02  4.14707884e-02  4.51762676e-02 -2.96446718e-02
  6.44882396e-02  2.40280852e-03  2.12498531e-02 -1.59243438e-02
  4.31965897e-03 -6.08938783e-02  3.80297117e-02 -8.54528546e-02
 -2.77303308e-02 -1.87385059e-03  1.10451788e-01 -8.40265863e-03
  8.34309496e-03 -2.60739382e-02 -3.16319279e-02  6.06580414e-02
  1.15019500e-01  6.68506743e-03 -2.85456218e-02 -2.78376434e-02
 -7.70756751e-02 -3.89329530e-02  7.22994283e-02 -3.30750309e-02
 -1.36802886e-02 -3.07558458e-02  4.15239111e-02  3.24880369e-02
 -1.97688684e-01  3.73100713e-02 -1.38665438e-01  2.72520967e-02
 -6.94268988e-03 -7.60052130e-02 -1.89147685e-02 -2.46403534e-02
  4.16655019e-02  6.10783249e-02 -1.51197249e-02 -9.87911597e-02
  1.03560664e-01 -6.17545135e-02 -5.01339436e-02 -4.37844582e-02
 -5.52470833e-02 -6.25395626e-02  2.33445689e-02 -3.48536186e-02
 -2.56709335e-03  1.10168727e-02 -1.36955315e-03  1.99034084e-02
 -2.06088182e-02  9.68013853e-02  3.71432751e-02  2.57717576e-02
 -1.41099775e-02 -7.80144930e-02  5.41210286e-02 -1.53794205e-02
 -1.19669354e-02 -7.00226203e-02 -2.79411785e-02  1.26237646e-04
 -8.01595300e-02  2.16472391e-02 -7.77539611e-02 -1.93118453e-02
 -1.57978982e-02  2.13715229e-02  5.64956255e-02  1.37495305e-02
 -2.30357870e-02  2.45671403e-02  3.31054777e-02 -2.15787329e-02
  5.61924390e-02  1.17387734e-02 -4.78548706e-02  2.31629815e-02
  7.83226863e-02  7.63632879e-02 -1.52937286e-02 -5.54673113e-02
 -2.45772232e-03  1.14346854e-02 -2.72015631e-02 -4.18064557e-02
 -7.34748542e-02  5.40831983e-02  8.78314003e-02  2.12727897e-02
 -3.13299559e-02 -1.36272525e-02 -4.34822142e-02  9.34939757e-02
 -3.42055596e-02  6.12476543e-02  2.91665401e-02  1.20831663e-02
 -3.22767459e-02 -3.13477516e-02 -6.49449825e-02  8.54176562e-03
 -4.60150987e-02  6.61639217e-03 -2.10329033e-02 -1.35833155e-02
 -2.00346503e-02 -4.18678932e-02 -6.17229268e-02  1.23105077e-02
  3.03780641e-02 -6.61663115e-02 -3.19842808e-02  4.78633866e-02
  7.57993152e-03 -7.83345662e-03  2.66390275e-02  5.54399900e-02
  1.57809760e-02  1.74250770e-02  4.29158062e-02  4.67545788e-33
  2.26719975e-02 -3.60117480e-02 -6.84014261e-02 -4.94042318e-03
 -5.20494614e-05 -3.51818651e-02  4.94006574e-02  9.65561569e-02
 -3.81390564e-02 -2.72563267e-02  2.91034626e-03  5.96082695e-02
  2.49870159e-02  4.43750508e-02  2.61091813e-02  5.44978008e-02
  5.78327924e-02  9.84073803e-02  7.50768781e-02  3.45048532e-02
  5.09834103e-02  3.69085595e-02  3.25521789e-02 -3.03704627e-02
 -2.88055139e-03  5.93998283e-02 -7.18667358e-02 -5.47363004e-03
 -5.78066930e-02 -1.26446895e-02  6.56341612e-02 -7.80466897e-03
  2.57171225e-02 -2.29363106e-02  8.54798313e-03 -4.16064970e-02
 -3.40619427e-03 -1.23450961e-02 -1.78758815e-01 -6.84755966e-02
  4.72384766e-02  1.38788763e-02 -1.85075495e-02  1.54626332e-02
  3.61399613e-02 -4.59214225e-02  5.23990095e-02 -3.84308398e-02
  3.70379426e-02  3.86146782e-03 -7.73812532e-02  1.26863401e-02
 -3.33130136e-02 -7.12368861e-02  1.12352453e-01  2.81264558e-02
 -1.21121155e-02  6.80445284e-02 -1.34640159e-02 -4.70858850e-02
 -7.53437057e-02 -3.03263627e-02 -4.30772491e-02  1.70808714e-02
  4.47789236e-04  8.35922062e-02 -2.98626442e-02 -4.64920029e-02
  4.03091731e-03 -8.99171010e-02  1.75676662e-02 -4.54049883e-03
 -6.21497370e-02  4.38114405e-02  2.64078602e-02 -2.50575040e-02
 -8.42165276e-02  3.43421176e-02  4.93118167e-02 -7.17311054e-02
 -6.50356784e-02 -2.07171421e-02 -5.75905629e-02  1.14968173e-01
 -4.63719629e-02  2.05580965e-02  6.12275563e-02 -2.68106861e-03
  7.93344826e-02  2.32039522e-02 -2.95395934e-04  1.93880424e-02
 -8.38363320e-02 -4.48415242e-02  7.85169601e-02 -6.49845309e-33
  3.09214965e-02 -1.95442153e-05 -9.43699181e-02 -5.83379949e-03
  1.05528319e-02 -3.93000199e-03  4.81835902e-02  5.73038347e-02
 -3.50471959e-02 -1.08918184e-02 -2.15996313e-03 -2.20152810e-02
  1.14340924e-01 -6.14394359e-02 -7.66493846e-03  3.29781324e-02
 -1.05120435e-01 -1.55395661e-02  3.02735288e-02  2.13452168e-02
 -3.75788542e-03  7.62839839e-02  1.18392348e-01 -7.78293461e-02
  2.31341999e-02  3.80549245e-02 -2.86718737e-02  4.02397066e-02
 -3.83388717e-03 -5.13451546e-02  9.18857846e-03  7.89860822e-03
 -2.80109048e-02  7.12065324e-02  3.30701955e-02  4.45508063e-02
 -1.10884672e-02  8.94471258e-02 -4.24439553e-03 -3.35627347e-02
  4.83980700e-02 -7.39915669e-02 -8.55132341e-02  1.72373336e-02
 -3.21666943e-03 -1.16425984e-01  3.69615946e-03  2.89500151e-02
  5.30105010e-02 -2.45162006e-03 -1.17105301e-02 -3.04897968e-02
 -7.16511235e-02 -2.46399101e-02  2.47465614e-02  2.19628755e-02
  1.21947572e-01 -6.86310530e-02  1.70538276e-02 -8.74157716e-03
  4.16555181e-02 -1.06550969e-01  2.49637980e-02  7.44161829e-02
  4.41715308e-02 -8.24281201e-02 -2.95962766e-02  2.16712011e-03
  1.07545890e-01  1.98622886e-02  2.92195287e-02  1.06202392e-02
  3.16677168e-02 -5.44236489e-02  4.45062108e-02 -1.88809652e-02
  5.56148589e-02  4.06476632e-02  5.14781922e-02  2.35329638e-03
 -1.19546652e-01 -1.62865855e-02  3.65697891e-02  2.01502070e-02
  3.76419723e-02 -3.41659188e-02 -3.25724222e-02  2.82102246e-02
 -1.56293977e-02 -1.77421626e-02 -2.31293961e-02  1.42814424e-02
 -6.73796013e-02  4.64874543e-02  3.21035162e-02 -5.86651332e-08
 -8.75393152e-02 -2.70021614e-03 -7.13831484e-02  8.20571277e-03
 -5.67653496e-03 -3.67848240e-02 -8.03529173e-02 -4.72924002e-02
 -4.47379574e-02  4.22309153e-02 -7.75015429e-02  6.99964017e-02
  4.30355296e-02  2.02395301e-02  6.29991889e-02 -5.91049120e-02
  2.81654540e-02  1.66728832e-02 -7.85337016e-02  5.63989095e-02
 -7.28328452e-02  3.88366543e-03 -5.87380200e-04 -7.86433145e-02
  5.26807308e-02  1.71331596e-02  9.66959051e-04  3.57971936e-02
 -3.05037610e-02  8.35755561e-03 -2.87739467e-02  6.76436871e-02
 -4.83860932e-02  6.66369859e-04 -4.03370224e-02  2.32675299e-02
 -3.45076099e-02  1.53893260e-02 -1.10271554e-02  1.15689762e-01
  7.89052024e-02 -4.02152725e-02 -7.60076195e-02 -2.48298165e-03
  6.21464066e-02  2.76646968e-02  1.81201547e-02 -4.40535247e-02
  9.34642553e-02  7.95606747e-02 -1.05741002e-01 -4.03191335e-02
 -5.98808974e-02 -1.84566211e-02 -2.55447365e-02 -9.47100483e-03
 -7.96586052e-02 -5.53163327e-02  2.48964652e-02 -4.57722656e-02
  7.52975792e-02  4.80086729e-02  3.07075251e-02  1.42895123e-02]"
"/**
 * The Abstraction defines the interface for the ""control"" part of the two class
 * hierarchies. It maintains a reference to an object of the Implementation
 * hierarchy and delegates all of the real work to this object.
 */
class Abstraction {
    protected implementation: Implementation;

    constructor(implementation: Implementation) {
        this.implementation = implementation;
    }

    public operation(): string {
        const result = this.implementation.operationImplementation();
        return `Abstraction: Base operation with:\n${result}`;
    }
}

/**
 * You can extend the Abstraction without changing the Implementation classes.
 */
class ExtendedAbstraction extends Abstraction {
    public operation(): string {
        const result = this.implementation.operationImplementation();
        return `ExtendedAbstraction: Extended operation with:\n${result}`;
    }
}

/**
 * The Implementation defines the interface for all implementation classes. It
 * doesn't have to match the Abstraction's interface. In fact, the two
 * interfaces can be entirely different. Typically the Implementation interface
 * provides only primitive operations, while the Abstraction defines higher-
 * level operations based on those primitives.
 */
interface Implementation {
    operationImplementation(): string;
}

/**
 * Each Concrete Implementation corresponds to a specific platform and
 * implements the Implementation interface using that platform's API.
 */
class ConcreteImplementationA implements Implementation {
    public operationImplementation(): string {
        return 'ConcreteImplementationA: Here\'s the result on the platform A.';
    }
}

class ConcreteImplementationB implements Implementation {
    public operationImplementation(): string {
        return 'ConcreteImplementationB: Here\'s the result on the platform B.';
    }
}

/**
 * Except for the initialization phase, where an Abstraction object gets linked
 * with a specific Implementation object, the client code should only depend on
 * the Abstraction class. This way the client code can support any abstraction-
 * implementation combination.
 */
function clientCode(abstraction: Abstraction) {
    // ..

    console.log(abstraction.operation());

    // ..
}

/**
 * The client code should be able to work with any pre-configured abstraction-
 * implementation combination.
 */
let implementation = new ConcreteImplementationA();
let abstraction = new Abstraction(implementation);
clientCode(abstraction);

console.log('');

implementation = new ConcreteImplementationB();
abstraction = new ExtendedAbstraction(implementation);
clientCode(abstraction);",TypeScript,Bridge,Refactoring Guru,https://refactoring.guru/design-patterns/bridge/typescript/example#example-0,"[-4.87345234e-02  2.83246357e-02  2.84441914e-02  4.05146228e-03
 -6.42861426e-02  1.59181599e-02  3.28992233e-02  2.07684822e-02
 -4.94952276e-02 -9.45099369e-02 -1.21138571e-02 -3.62849720e-02
 -2.86165960e-02  2.46088784e-02  1.29114360e-01  6.42644316e-02
  3.49884182e-02  1.75013777e-03 -4.94766161e-02 -1.37772663e-02
  7.65608847e-02 -5.14925532e-02 -8.56830180e-02  1.84748955e-02
  4.93296608e-03 -1.99151295e-03 -6.53483123e-02 -9.01028961e-02
  9.36655626e-02  6.07112981e-02  2.60265283e-02 -1.68400872e-02
 -3.55310440e-02  6.98595941e-02 -8.18825439e-02  5.28505072e-02
  1.40023455e-02 -6.94649890e-02 -2.29896214e-02 -4.45826575e-02
 -6.49170429e-02  8.54934007e-02 -3.82500738e-02 -1.51529498e-02
  3.88045870e-02 -5.91239221e-02 -7.21751377e-02 -4.96570021e-02
 -4.80948426e-02 -3.33533771e-02 -2.61687785e-02  1.52977677e-02
  1.67164486e-02 -1.64108556e-02  5.13718873e-02  3.08485702e-02
 -2.90594604e-02  8.25305879e-02  3.80237177e-02  1.01576420e-02
 -6.26638085e-02 -2.61356365e-02  5.85254747e-03  1.72435176e-02
  6.52399063e-02 -1.48365926e-02  1.53295388e-02 -5.29338568e-02
  1.76720433e-02 -2.18926482e-02 -1.36173619e-02 -5.10513224e-02
  9.34222620e-03 -2.44055525e-03 -2.22150907e-02 -2.52915509e-02
  1.81020182e-02  1.19636856e-01  2.31090747e-03 -7.52134919e-02
  1.38141857e-02  1.30137580e-03 -1.73695497e-02  5.22642583e-02
  4.39008437e-02  4.86919805e-02 -3.10512148e-02 -2.64186114e-02
 -3.57438400e-02  7.24319443e-02 -3.15893721e-03 -8.49934444e-02
 -1.22261412e-01  2.07721870e-02  2.34821718e-02 -5.97479343e-02
 -1.71104874e-02 -6.32572323e-02 -4.90998439e-02  6.94344491e-02
 -9.50145721e-02  3.22268270e-02  5.68183139e-03 -2.97438279e-02
  2.97736172e-02  1.62770525e-02 -5.10692410e-02 -8.54450241e-02
 -3.63458470e-02 -6.47041854e-03 -1.54396472e-03 -1.27224755e-02
  5.58031816e-03  3.80605385e-02 -3.67837735e-02  5.46804219e-02
  2.26796344e-02 -6.70140088e-02  4.63716201e-02  5.02011143e-02
  5.50825559e-02 -7.56369205e-03  5.74325360e-02  2.86615435e-02
 -2.82850396e-02 -3.86139676e-02 -2.75333109e-03  2.46454035e-33
 -3.38890292e-02 -7.29618296e-02 -6.55689836e-02  8.47898126e-02
  2.40988731e-02 -1.05533097e-02  3.43644917e-02  1.63243003e-02
 -8.51577893e-02 -4.97051328e-02  8.68222043e-02  3.54352333e-02
 -9.59185325e-03  7.67725483e-02  1.03408478e-01 -6.44293278e-02
  1.13288134e-01  4.03703637e-02  3.89625654e-02  2.91083963e-03
 -2.69596744e-02  7.39674121e-02 -3.85753773e-02  4.10027616e-03
 -4.07247059e-02  4.26653661e-02  1.29563436e-02 -2.65841186e-02
 -1.01511165e-01  1.87115595e-02  2.23560464e-02  1.59085728e-02
 -3.63082662e-02  6.60336837e-02 -3.40777785e-02 -8.79166182e-03
  3.23127471e-02 -4.02347371e-02 -1.62745398e-02 -8.33699256e-02
 -3.72476950e-02 -1.08522717e-02 -2.68834122e-02 -2.05048244e-03
  5.74460588e-02 -5.48803434e-02 -7.26799518e-02  3.33694974e-03
  6.39322847e-02 -2.97758952e-02 -2.15319078e-02  9.56309512e-02
 -1.17679741e-02 -4.05923314e-02  1.00202776e-01 -3.10873426e-02
 -2.50403713e-02  4.11482342e-02 -7.52258056e-04  1.11459956e-01
 -5.59123568e-02  1.27238231e-02 -8.54182020e-02  3.35336328e-02
 -5.81766814e-02  2.48144288e-02 -1.13610491e-01 -3.69560421e-02
  7.35790208e-02  7.46104401e-03  9.80942161e-04  3.52472588e-02
  3.18096718e-03  9.94746536e-02 -2.08118502e-02 -3.71971652e-02
 -6.04349263e-02 -3.23039256e-02 -3.48041281e-02 -7.05710202e-02
 -6.17842004e-02  9.27074030e-02  5.85808977e-02  1.04024544e-01
 -1.41755668e-02  4.22899164e-02  3.83944474e-02  3.80658507e-02
  5.06720133e-02  1.96843036e-02 -7.99585581e-02 -3.20702270e-02
  1.81297157e-02 -6.50353655e-02  7.04773888e-03 -4.51254612e-33
  6.86716139e-02  7.05696717e-02 -7.63351470e-02 -7.98968077e-02
 -2.60690600e-02 -2.36813203e-02 -7.32116261e-03 -8.63247961e-02
 -5.44784777e-02  6.03692606e-02 -5.72037511e-02  5.93729131e-03
  8.43633935e-02  8.62251408e-03 -7.21354969e-03  1.70489661e-02
 -1.10277578e-01 -9.21643451e-02  3.12804990e-02  9.40951426e-03
  1.72034167e-02 -6.74922345e-03  5.15608862e-02 -1.26816062e-02
  7.94911608e-02  6.03792910e-03 -9.53709483e-02  1.33260310e-01
  1.26162052e-01 -3.68996635e-02 -5.18838726e-02 -3.58111747e-02
 -3.59905511e-02 -4.90444712e-03  5.96979931e-02  4.16029291e-03
  5.25327399e-03  7.06918016e-02 -1.53410435e-02 -9.38752070e-02
  5.06036207e-02 -9.90204513e-02 -9.36296135e-02  2.88988221e-02
  4.74962667e-02  3.84258543e-04 -4.07005921e-02  2.45317053e-02
 -1.46712307e-02 -1.83764882e-02  5.69834486e-02 -1.38579570e-02
 -3.20797823e-02  2.96711903e-02 -6.07785210e-02  1.16747599e-02
  1.17108397e-01 -5.97995296e-02  8.87160003e-03 -1.35233402e-02
  6.49677962e-02 -3.51144709e-02  6.18571714e-02  5.32039329e-02
  4.85154837e-02 -4.63464148e-02 -2.65164487e-02 -4.96811792e-02
 -2.65033945e-04  2.89368927e-02 -7.53219984e-03  5.18064611e-02
 -2.29927320e-02 -2.44686268e-02  9.41144526e-02  6.90755472e-02
  5.30783646e-02 -3.15727964e-02  7.06084594e-02 -1.40610011e-02
 -1.09890729e-01  1.71548650e-02  3.74927483e-02  8.34878441e-03
  3.71702574e-02 -2.97695808e-02 -1.51996538e-02  6.00956306e-02
 -2.87800953e-02  2.55960249e-03  1.06887128e-02  3.54482569e-02
 -1.02139555e-01 -4.50336095e-03 -1.93581600e-02 -4.55726443e-08
 -5.45944199e-02 -5.50115183e-02 -4.61326391e-02  2.57230690e-03
  2.99411528e-02 -1.42742889e-02 -6.53464161e-03 -2.44532656e-02
 -3.75559703e-02 -8.87093917e-02 -5.37309758e-02  4.73623462e-02
  2.93666869e-02 -3.79120256e-03  1.46606490e-02 -5.95860463e-03
  2.06409171e-02 -4.20371033e-02 -4.46143746e-02  7.85913989e-02
 -4.74144891e-02 -3.30638178e-02 -4.41900194e-02 -3.45411040e-02
 -7.45717660e-02 -4.30530831e-02 -7.10105151e-03  1.33840516e-01
 -4.21855599e-02  8.27182308e-02 -3.11467908e-02  6.08394183e-02
 -1.26925828e-02 -9.77490284e-03  3.63180637e-02 -2.42246571e-03
  3.52057628e-02 -1.13415830e-02  9.32303164e-03  5.63985556e-02
  5.11539541e-02 -2.12170314e-02 -1.11551788e-02  4.93544452e-02
  1.11222796e-01 -2.16287393e-02 -1.34081244e-02 -3.72943282e-02
  3.02496757e-02  4.91928570e-02 -6.40996024e-02  9.40910075e-03
 -2.63331439e-02 -1.43365853e-03 -8.02175924e-02  4.50016782e-02
 -1.13038709e-02 -7.58866295e-02  1.05564424e-03  2.01388933e-02
 -6.63534831e-03 -9.41815437e-04  1.18143886e-01  1.60834622e-02]"
"/**
 * The base Component class declares common operations for both simple and
 * complex objects of a composition.
 */
abstract class Component {
    protected parent!: Component | null;

    /**
     * Optionally, the base Component can declare an interface for setting and
     * accessing a parent of the component in a tree structure. It can also
     * provide some default implementation for these methods.
     */
    public setParent(parent: Component | null) {
        this.parent = parent;
    }

    public getParent(): Component | null {
        return this.parent;
    }

    /**
     * In some cases, it would be beneficial to define the child-management
     * operations right in the base Component class. This way, you won't need to
     * expose any concrete component classes to the client code, even during the
     * object tree assembly. The downside is that these methods will be empty
     * for the leaf-level components.
     */
    public add(component: Component): void { }

    public remove(component: Component): void { }

    /**
     * You can provide a method that lets the client code figure out whether a
     * component can bear children.
     */
    public isComposite(): boolean {
        return false;
    }

    /**
     * The base Component may implement some default behavior or leave it to
     * concrete classes (by declaring the method containing the behavior as
     * ""abstract"").
     */
    public abstract operation(): string;
}

/**
 * The Leaf class represents the end objects of a composition. A leaf can't have
 * any children.
 *
 * Usually, it's the Leaf objects that do the actual work, whereas Composite
 * objects only delegate to their sub-components.
 */
class Leaf extends Component {
    public operation(): string {
        return 'Leaf';
    }
}

/**
 * The Composite class represents the complex components that may have children.
 * Usually, the Composite objects delegate the actual work to their children and
 * then ""sum-up"" the result.
 */
class Composite extends Component {
    protected children: Component[] = [];

    /**
     * A composite object can add or remove other components (both simple or
     * complex) to or from its child list.
     */
    public add(component: Component): void {
        this.children.push(component);
        component.setParent(this);
    }

    public remove(component: Component): void {
        const componentIndex = this.children.indexOf(component);
        this.children.splice(componentIndex, 1);

        component.setParent(null);
    }

    public isComposite(): boolean {
        return true;
    }

    /**
     * The Composite executes its primary logic in a particular way. It
     * traverses recursively through all its children, collecting and summing
     * their results. Since the composite's children pass these calls to their
     * children and so forth, the whole object tree is traversed as a result.
     */
    public operation(): string {
        const results = [];
        for (const child of this.children) {
            results.push(child.operation());
        }

        return `Branch(${results.join('+')})`;
    }
}

/**
 * The client code works with all of the components via the base interface.
 */
function clientCode(component: Component) {
    // ...

    console.log(`RESULT: ${component.operation()}`);

    // ...
}

/**
 * This way the client code can support the simple leaf components...
 */
const simple = new Leaf();
console.log('Client: I\'ve got a simple component:');
clientCode(simple);
console.log('');

/**
 * ...as well as the complex composites.
 */
const tree = new Composite();
const branch1 = new Composite();
branch1.add(new Leaf());
branch1.add(new Leaf());
const branch2 = new Composite();
branch2.add(new Leaf());
tree.add(branch1);
tree.add(branch2);
console.log('Client: Now I\'ve got a composite tree:');
clientCode(tree);
console.log('');

/**
 * Thanks to the fact that the child-management operations are declared in the
 * base Component class, the client code can work with any component, simple or
 * complex, without depending on their concrete classes.
 */
function clientCode2(component1: Component, component2: Component) {
    // ...

    if (component1.isComposite()) {
        component1.add(component2);
    }
    console.log(`RESULT: ${component1.operation()}`);

    // ...
}

console.log('Client: I don\'t need to check the components classes even when managing the tree:');
clientCode2(tree, simple);",TypeScript,Composite,Refactoring Guru,https://refactoring.guru/design-patterns/composite/typescript/example#example-0,"[-1.70949548e-02  3.68189290e-02  2.64727492e-02  6.92388192e-02
 -5.62508940e-04 -1.88074354e-02 -1.30797289e-02  1.89640038e-02
  3.51436883e-02  2.61299983e-02 -2.13072915e-03  2.02628132e-03
 -2.21525095e-02  2.88760178e-02  8.80307332e-02 -3.64368991e-03
 -2.46026684e-02  5.24269007e-02 -1.12449732e-02 -5.69596589e-02
  7.27526397e-02 -6.55529201e-02 -6.81899562e-02 -4.34130915e-02
 -1.30899036e-02  1.61356274e-02 -2.05156915e-02 -6.83607161e-02
  4.20645699e-02  2.35172547e-03 -1.11436211e-02  7.31255859e-02
 -4.92893942e-02  7.42325187e-02 -1.32479906e-01  6.81021735e-02
  2.12572701e-02 -2.12775487e-02 -1.02050612e-02 -4.35945243e-02
  4.74929810e-02  1.09268144e-01 -5.77667877e-02 -9.53644142e-02
  5.97182885e-02 -3.80346589e-02 -9.94384214e-02 -5.87111339e-02
 -4.89705093e-02 -7.95125887e-02  4.43785265e-03 -7.79995183e-03
 -1.35948770e-02  6.17619567e-02  1.35832746e-02  2.77157314e-02
  1.12135923e-02  9.17105470e-03  3.41427028e-02  3.84862125e-02
 -7.18550803e-03 -4.15132679e-02  6.21407805e-03 -4.59094197e-02
  5.90989999e-02  7.49144750e-03 -1.29130334e-02  1.42012862e-02
 -6.26108190e-03  2.49455515e-02  1.48766739e-02 -1.47173600e-02
  1.05723776e-02  2.24067755e-02 -2.15867367e-02  1.32462205e-02
  8.42918828e-03  5.92682287e-02 -2.26515625e-02 -5.27808145e-02
  1.03214080e-03  5.39549701e-02 -4.48053405e-02 -3.39731500e-02
  3.33014838e-02  1.17181495e-01 -2.78045423e-03 -2.94608567e-02
 -2.27514319e-02  2.39369068e-02 -4.99586277e-02 -1.47391334e-02
  3.01513057e-02  1.92202218e-02  3.86557132e-02  2.15851571e-02
  5.25928801e-03 -3.86557047e-04 -3.42261270e-02  5.39532788e-02
 -5.95501326e-02  1.25251152e-02  4.18614522e-02 -8.05542693e-02
 -5.94514497e-02  2.03619953e-02 -8.18342716e-02 -6.95923865e-02
 -1.13658858e-02 -2.12004948e-02 -4.03150022e-02  3.52596045e-02
 -3.29645649e-02 -2.87654940e-02 -6.51351959e-02 -1.52821178e-02
  1.07064538e-01 -2.28470787e-02  2.86485013e-02  5.54860421e-02
  8.91426057e-02 -2.15209667e-02  6.68876618e-02  3.61820497e-02
  7.04654977e-02 -8.33239704e-02 -2.51106657e-02  1.60276249e-33
  1.19746579e-02 -3.18819948e-04 -5.69518991e-02  6.98028654e-02
  5.57637773e-02  2.54211798e-02  6.98799491e-02  2.21591368e-02
 -2.66335253e-02  2.82210130e-02 -2.24518590e-02 -1.78262144e-02
 -4.53955606e-02  7.67868618e-03  9.24606174e-02  1.36323273e-03
  5.93453608e-02 -2.32385751e-03  2.00918559e-02 -2.25831401e-02
  2.29301099e-02  7.21710324e-02 -5.45871966e-02  4.72160317e-02
  9.33708474e-02 -7.57332612e-03 -1.52426036e-02 -8.13839771e-03
 -9.57309604e-02 -2.37330087e-02  1.16297334e-01  1.07980417e-02
 -3.60328630e-02  7.93714374e-02 -1.82338338e-02  5.28041134e-03
 -1.41885784e-02 -4.85968105e-02 -4.71713543e-02 -1.20052166e-01
 -2.70157903e-02 -3.58877517e-02 -2.01211199e-02  2.29319409e-02
  1.38496216e-02 -5.40842488e-02 -8.52890760e-02 -1.23504372e-02
  5.44248521e-02 -1.46711608e-02  1.93771552e-02  1.49825156e-01
  5.60775027e-02 -2.85131652e-02  3.06622572e-02  8.15109760e-02
  4.79818657e-02  8.33020732e-02  5.25920503e-02  7.27229565e-02
 -2.78111957e-02 -2.84247417e-02 -9.99691486e-02  2.05044970e-02
 -1.00252263e-01  8.47011283e-02 -1.01376362e-01 -4.77021262e-02
  6.16696328e-02 -5.91845661e-02 -2.40946119e-03  3.03680860e-02
 -3.66983786e-02 -1.34813720e-02  4.72015850e-02 -3.63406390e-02
 -6.88080713e-02 -4.13451605e-02 -5.09682372e-02 -6.22866824e-02
 -8.27722251e-02  6.97020218e-02  5.36796972e-02  1.54780015e-01
  6.33974150e-02 -2.69530490e-02  8.87716829e-04  4.02297825e-02
 -1.33059490e-02  4.43943664e-02 -1.87289752e-02 -3.86275612e-02
 -1.92005280e-02 -2.00548228e-02  8.71127993e-02 -3.58928714e-33
 -5.75962476e-03  2.94380952e-02 -2.98932707e-03 -2.61752326e-02
 -7.06066489e-02 -5.82778901e-02 -8.64235982e-02 -1.01040430e-01
 -1.07978806e-01  4.91756387e-02 -6.33407291e-03  3.38322595e-02
  3.11246477e-02 -1.44126108e-02 -5.42175509e-02  1.05633989e-01
 -6.35038391e-02 -4.96731363e-02  7.53115416e-02  1.68770179e-02
  3.23743112e-02  9.13336053e-02  1.02593556e-01 -2.19453368e-02
  6.18313206e-03 -1.94551535e-02 -1.37281623e-02  7.99253434e-02
  6.32715374e-02 -7.22616306e-03 -1.42895449e-02 -2.30285283e-02
  2.37775594e-02 -6.06903359e-02  1.36445276e-02 -7.69801140e-02
 -1.20931966e-02  4.88124192e-02 -6.83942763e-03 -3.93995456e-03
  1.32712536e-02 -6.26191646e-02 -5.74312061e-02  2.54775994e-02
 -3.75969149e-02 -1.05818979e-01  4.55272868e-02  6.72463775e-02
  1.51652815e-02  2.24367641e-02 -1.09607717e-02 -5.96491992e-02
 -2.58834809e-02  1.54166818e-02  1.84657313e-02  1.10504217e-02
  8.23414773e-02 -4.37008776e-02  7.38532245e-02 -2.59830784e-02
  1.81732178e-02 -6.97793290e-02 -1.35698877e-02  4.10332717e-02
  3.63951921e-02 -6.11150451e-02 -6.93153664e-02 -7.58513249e-03
  2.16295905e-02 -5.87750785e-03  3.79811525e-02  2.64750998e-02
 -1.55562954e-02 -2.80218162e-02  4.30355556e-02 -7.83107895e-03
  3.36104408e-02  5.35798334e-02  5.62681332e-02  1.56400388e-03
 -8.58011842e-02 -4.51123081e-02 -1.93129070e-02 -5.39928190e-02
  4.72949352e-03 -6.77761361e-02  2.41928715e-02  1.77057721e-02
 -4.61659860e-03 -5.16474014e-03 -3.89838368e-02  7.88642839e-02
 -9.62224230e-03 -5.40363304e-02 -3.82106658e-03 -5.70413370e-08
 -4.03383039e-02 -9.03874710e-02 -6.00497313e-02 -7.29665831e-02
  3.37820128e-02 -1.25579908e-01 -2.73451153e-02  4.03697975e-02
 -9.22552049e-02  1.76083352e-02 -1.34719471e-02  5.98932914e-02
  2.42165681e-02 -2.94527188e-02  7.37364665e-02  2.21370650e-03
  1.83209721e-02  2.51867948e-03 -8.35752860e-02  1.08501934e-01
 -1.82446297e-02  4.73963097e-03 -9.63332714e-04  1.08226858e-01
 -1.65752787e-02 -8.50310773e-02  9.94108543e-02  3.05517036e-02
  1.28408475e-02  4.95542251e-02 -5.54793887e-02  8.16456899e-02
 -6.29185326e-03  4.66215312e-02 -5.76432347e-02  3.93945016e-02
 -1.71175953e-02  3.81649919e-02  6.63483981e-03  8.02922919e-02
  4.37051877e-02 -7.06594288e-02 -2.17859019e-02  3.15925144e-02
  5.61298057e-02 -7.33130751e-03 -3.55474353e-02 -1.30099372e-03
  8.39051381e-02  3.50672379e-03 -1.09521225e-01  1.42391203e-02
 -1.08169645e-01 -4.56572957e-02 -5.20148873e-02  2.62130145e-03
 -6.23671710e-03 -2.13507283e-02  9.21143591e-02 -1.63340336e-03
 -1.00976825e-02 -4.54030652e-03  6.74115047e-02 -5.01815751e-02]"
"/**
 * The base Component interface defines operations that can be altered by
 * decorators.
 */
interface Component {
    operation(): string;
}

/**
 * Concrete Components provide default implementations of the operations. There
 * might be several variations of these classes.
 */
class ConcreteComponent implements Component {
    public operation(): string {
        return 'ConcreteComponent';
    }
}

/**
 * The base Decorator class follows the same interface as the other components.
 * The primary purpose of this class is to define the wrapping interface for all
 * concrete decorators. The default implementation of the wrapping code might
 * include a field for storing a wrapped component and the means to initialize
 * it.
 */
class Decorator implements Component {
    protected component: Component;

    constructor(component: Component) {
        this.component = component;
    }

    /**
     * The Decorator delegates all work to the wrapped component.
     */
    public operation(): string {
        return this.component.operation();
    }
}

/**
 * Concrete Decorators call the wrapped object and alter its result in some way.
 */
class ConcreteDecoratorA extends Decorator {
    /**
     * Decorators may call parent implementation of the operation, instead of
     * calling the wrapped object directly. This approach simplifies extension
     * of decorator classes.
     */
    public operation(): string {
        return `ConcreteDecoratorA(${super.operation()})`;
    }
}

/**
 * Decorators can execute their behavior either before or after the call to a
 * wrapped object.
 */
class ConcreteDecoratorB extends Decorator {
    public operation(): string {
        return `ConcreteDecoratorB(${super.operation()})`;
    }
}

/**
 * The client code works with all objects using the Component interface. This
 * way it can stay independent of the concrete classes of components it works
 * with.
 */
function clientCode(component: Component) {
    // ...

    console.log(`RESULT: ${component.operation()}`);

    // ...
}

/**
 * This way the client code can support both simple components...
 */
const simple = new ConcreteComponent();
console.log('Client: I\'ve got a simple component:');
clientCode(simple);
console.log('');

/**
 * ...as well as decorated ones.
 *
 * Note how decorators can wrap not only simple components but the other
 * decorators as well.
 */
const decorator1 = new ConcreteDecoratorA(simple);
const decorator2 = new ConcreteDecoratorB(decorator1);
console.log('Client: Now I\'ve got a decorated component:');
clientCode(decorator2);",TypeScript,Decorator,Refactoring Guru,https://refactoring.guru/design-patterns/decorator/typescript/example#example-0,"[-5.00451326e-02  7.62153193e-02  4.67983559e-02  6.56025708e-02
 -4.92799990e-02 -7.93610641e-04  1.22742625e-02  4.56494017e-04
 -2.78704353e-02 -2.26309281e-02  1.58482734e-02 -1.11042326e-02
 -6.38325885e-02  3.91731448e-02  8.73402208e-02  2.38237157e-02
 -4.39444445e-02  1.83548834e-02 -7.30550215e-02  4.49813567e-02
  7.42115602e-02 -7.31272325e-02 -8.29223767e-02 -2.08374877e-02
  2.89991517e-02 -3.92577291e-04  2.67275907e-02 -4.48104441e-02
  7.25634769e-02 -6.56498503e-03  4.76755798e-02 -7.17650820e-03
 -1.68458536e-01  5.02465256e-02 -1.20115057e-01  7.46877864e-02
  2.49293335e-02 -1.80641341e-03  6.13479735e-03 -5.25724627e-02
  2.38133371e-02  7.14750215e-02 -9.07002613e-02  7.05091935e-03
  7.61700422e-02 -2.56184768e-02 -2.60861721e-02 -7.50387013e-02
 -6.15938045e-02 -1.03831753e-01 -3.09985480e-03  5.82901686e-02
  3.16359513e-02  5.43394350e-02 -2.76737399e-02  3.09218038e-02
  1.33921830e-02  2.85680331e-02  4.47051898e-02  6.15990944e-02
 -6.38139769e-02 -1.49241081e-02  4.31550965e-02  2.44370475e-02
  3.67680788e-02 -6.18985184e-02  1.49121862e-02  2.72361692e-02
 -7.80876726e-03  3.00101228e-02 -3.60320434e-02 -2.61973497e-02
  2.06984114e-02  4.12975159e-03  1.89383775e-02 -3.25849466e-03
 -6.21985197e-02  9.18923020e-02 -1.61821314e-03 -4.07632925e-02
  4.04298976e-02  1.19010545e-02 -4.83754575e-02  2.97956914e-02
  3.40511464e-02  1.22029595e-01 -1.96967069e-02 -3.98799665e-02
 -1.67254303e-02  3.49740088e-02  4.49837074e-02 -2.93908902e-02
  7.66631030e-03  4.22762372e-02 -3.63700092e-02 -1.91671122e-02
 -8.35320447e-03  1.10109393e-02 -6.24060892e-02  7.60906786e-02
 -3.04884575e-02 -1.01614641e-02  9.40507185e-03 -3.58341075e-03
 -2.90152226e-02 -6.88045658e-03 -1.01937942e-01 -3.21697332e-02
 -2.81627234e-02 -1.01563800e-02  2.48721875e-02  4.92282324e-02
 -6.46550432e-02 -3.74095514e-02  9.85855516e-03  2.66358331e-02
  2.17107199e-02 -3.94983478e-02  7.14628547e-02  1.05501875e-01
  8.59826729e-02 -2.76141707e-02  4.00979258e-02  2.34212447e-02
  1.47062968e-02 -2.13971902e-02  2.67061628e-02  4.89573671e-33
  3.19387205e-02 -2.35160235e-02 -7.78081417e-02  1.07697763e-01
  1.47375008e-02 -4.48842859e-03 -4.43801889e-03  7.22243562e-02
 -5.84873259e-02  5.29768616e-02  2.32727546e-02 -2.31552478e-02
 -2.31368802e-02  1.49020348e-02  2.85029877e-02 -7.39444094e-03
  2.13067979e-02  2.49513984e-03 -8.09443649e-03 -1.49765844e-02
 -1.33558894e-02  7.34044164e-02  5.54747740e-03 -3.09808017e-03
 -1.17470678e-02  5.28042996e-03 -1.70789808e-02 -1.62791535e-02
 -9.16173160e-02 -1.76540129e-02  1.02589987e-01 -4.26634848e-02
  4.21160720e-02  9.99761075e-02 -3.48253362e-02 -1.52595751e-02
  9.12838033e-04 -5.26283048e-02 -5.62154837e-02 -9.59362984e-02
 -6.34499863e-02 -1.44547978e-02 -2.36022775e-03  1.69429183e-02
  4.13126685e-02 -2.41003036e-02 -7.13640498e-03  4.28194441e-02
  3.98284420e-02 -5.98913878e-02  1.69735532e-02  1.69553936e-01
  6.41150400e-02  3.86545919e-02  1.17287181e-01  6.14752285e-02
  6.42513037e-02 -4.61656181e-03  1.31940637e-02 -1.00900717e-02
 -3.90224606e-02  6.32267520e-02 -9.39632133e-02 -1.46851726e-02
 -8.01035613e-02  5.23917936e-02  4.71119332e-04 -1.03690885e-02
  6.70369342e-03 -2.61968691e-02 -3.09194848e-02  3.53990085e-02
 -8.69939029e-02  1.75438337e-02  4.59681712e-02 -6.23402838e-03
 -8.40834975e-02 -3.03781149e-03 -7.51996320e-03 -1.04222126e-01
 -7.78435618e-02  3.86389606e-02  3.76036111e-03  1.48981944e-01
 -8.64010677e-03 -1.99356172e-02  4.44317088e-02  2.96839885e-02
  1.78834479e-02  3.77951860e-02  1.34245865e-02 -3.95001918e-02
  2.37502129e-04 -9.56351683e-02  2.01352779e-03 -6.82008892e-33
 -6.89666905e-03  3.63977998e-02 -1.85034927e-02 -9.27103683e-03
 -4.83161546e-02 -5.95578179e-02 -8.07753503e-02 -1.34487525e-02
 -5.80735914e-02  2.33913623e-02 -2.01375205e-02  5.41942976e-02
  5.48463576e-02  1.77416429e-02  3.96394357e-03  9.02866274e-02
 -1.13545276e-01 -2.79910136e-02  8.59475508e-02 -6.20189495e-02
  2.36393809e-02  7.72738084e-02  2.95460522e-02 -1.54272951e-02
 -4.33096439e-02 -1.00706602e-02 -2.07803939e-02  9.58823115e-02
  1.08148381e-01 -3.86522263e-02  2.51978058e-02 -5.96267357e-02
 -1.24604553e-02  6.10123156e-03 -6.59861648e-03 -3.59020643e-02
 -1.73595194e-02  7.16342628e-02 -2.92662457e-02 -5.16709983e-02
 -5.38826967e-03 -5.93995750e-02 -2.56974529e-02  5.92217259e-02
 -6.43145517e-02 -1.17284976e-01 -8.78847092e-02 -2.98943557e-03
  4.96132299e-02  3.02154943e-02 -2.31393110e-02 -5.51052876e-02
 -1.84815861e-02 -4.46702503e-02 -3.15370075e-02 -6.54719211e-03
  3.92006896e-02 -6.76893741e-02  3.19964774e-02  5.56887574e-02
  5.85506707e-02 -8.22577477e-02  4.48631272e-02 -1.85554735e-02
  2.71348916e-02 -4.78213876e-02 -2.78719608e-02 -7.08695427e-02
 -7.03479396e-04  1.48767419e-02  1.09009564e-01  6.63781613e-02
 -8.67125914e-02 -1.04760639e-02  8.04749131e-02  2.24130303e-02
  3.35456058e-02 -3.31404135e-02  5.55989221e-02 -3.28671485e-02
 -3.79544571e-02 -6.08641878e-02  4.37966344e-04 -6.40009791e-02
  9.51517932e-03 -9.99158844e-02  2.10497715e-02  1.33718997e-02
  2.24164855e-02 -2.82859020e-02 -2.76808273e-02  1.18799433e-01
 -4.27218452e-02 -2.69483402e-02 -6.58480730e-03 -5.31065005e-08
 -6.06830791e-02 -6.79833069e-02 -6.92650750e-02 -9.57950726e-02
 -3.10997628e-02 -4.36471514e-02  1.64546240e-02 -3.98171917e-02
 -1.06627919e-01 -3.91222984e-02  1.62816867e-02  5.23635186e-02
  1.10477000e-03 -1.91088077e-02  2.22024452e-02  1.41566247e-02
 -4.29160856e-02 -2.24305950e-02 -9.21806544e-02  1.77162495e-02
 -4.21638712e-02  1.48728164e-02 -1.90860629e-02  4.94772429e-03
 -1.92179158e-02 -4.18207683e-02  4.76156287e-02  9.27246138e-02
 -5.93965873e-03  5.76434471e-02 -4.36548516e-02  5.17699718e-02
  4.47860919e-02  1.23745976e-02 -4.39965911e-02  8.61591250e-02
 -3.32900211e-02 -5.14530614e-02  5.46437539e-02  1.03218816e-01
  5.37020378e-02 -8.57824162e-02 -2.91290730e-02  5.87698407e-02
  5.45473546e-02 -1.19384704e-02 -4.00606394e-02 -1.46559821e-02
  5.67896701e-02  4.43115756e-02 -2.39385385e-02 -2.04813555e-02
 -1.05761759e-01 -2.68844981e-02 -9.36735049e-02 -9.31903906e-03
 -2.81874253e-03  3.47353928e-02  6.26844168e-02 -2.15175562e-02
 -7.22862482e-02  3.20032313e-02  8.50011036e-02 -2.78321374e-02]"
"/**
 * The Facade class provides a simple interface to the complex logic of one or
 * several subsystems. The Facade delegates the client requests to the
 * appropriate objects within the subsystem. The Facade is also responsible for
 * managing their lifecycle. All of this shields the client from the undesired
 * complexity of the subsystem.
 */
class Facade {
    protected subsystem1: Subsystem1;

    protected subsystem2: Subsystem2;

    /**
     * Depending on your application's needs, you can provide the Facade with
     * existing subsystem objects or force the Facade to create them on its own.
     */
    constructor(subsystem1?: Subsystem1, subsystem2?: Subsystem2) {
        this.subsystem1 = subsystem1 || new Subsystem1();
        this.subsystem2 = subsystem2 || new Subsystem2();
    }

    /**
     * The Facade's methods are convenient shortcuts to the sophisticated
     * functionality of the subsystems. However, clients get only to a fraction
     * of a subsystem's capabilities.
     */
    public operation(): string {
        let result = 'Facade initializes subsystems:\n';
        result += this.subsystem1.operation1();
        result += this.subsystem2.operation1();
        result += 'Facade orders subsystems to perform the action:\n';
        result += this.subsystem1.operationN();
        result += this.subsystem2.operationZ();

        return result;
    }
}

/**
 * The Subsystem can accept requests either from the facade or client directly.
 * In any case, to the Subsystem, the Facade is yet another client, and it's not
 * a part of the Subsystem.
 */
class Subsystem1 {
    public operation1(): string {
        return 'Subsystem1: Ready!\n';
    }

    // ...

    public operationN(): string {
        return 'Subsystem1: Go!\n';
    }
}

/**
 * Some facades can work with multiple subsystems at the same time.
 */
class Subsystem2 {
    public operation1(): string {
        return 'Subsystem2: Get ready!\n';
    }

    // ...

    public operationZ(): string {
        return 'Subsystem2: Fire!';
    }
}

/**
 * The client code works with complex subsystems through a simple interface
 * provided by the Facade. When a facade manages the lifecycle of the subsystem,
 * the client might not even know about the existence of the subsystem. This
 * approach lets you keep the complexity under control.
 */
function clientCode(facade: Facade) {
    // ...

    console.log(facade.operation());

    // ...
}

/**
 * The client code may have some of the subsystem's objects already created. In
 * this case, it might be worthwhile to initialize the Facade with these objects
 * instead of letting the Facade create new instances.
 */
const subsystem1 = new Subsystem1();
const subsystem2 = new Subsystem2();
const facade = new Facade(subsystem1, subsystem2);
clientCode(facade);",TypeScript,Facade,Refactoring Guru,https://refactoring.guru/design-patterns/facade/typescript/example#example-0,"[-4.54781651e-02  3.56369652e-02 -4.50130701e-02  9.80341248e-03
 -1.11043207e-01 -8.83866921e-02 -6.71280026e-02  5.75104803e-02
 -4.29584794e-02  5.09244855e-03 -4.02564481e-02 -3.49768996e-02
  3.26741822e-02 -7.32282503e-03  1.14436843e-01 -1.11226342e-03
  1.25384713e-02 -4.69113030e-02 -2.27155862e-03  2.85641495e-02
  9.22916532e-02 -7.24490061e-02 -4.90101315e-02 -4.65240292e-02
 -5.27460799e-02 -3.58381867e-02 -4.59919758e-02 -9.27258004e-03
  2.74085794e-02  1.39262844e-02  5.65693192e-02 -1.90548729e-02
 -9.23166126e-02  4.93262969e-02 -7.85146561e-03  9.09766704e-02
  8.47720355e-02 -1.89161710e-02 -1.12113953e-02  3.59233767e-02
 -2.53454391e-02  3.93909626e-02 -9.37123299e-02 -5.67663983e-02
  4.44152914e-02 -8.73285532e-02 -9.65409130e-02 -1.98967941e-02
 -2.96823345e-02 -6.89545795e-02 -5.68173639e-02 -2.31076516e-02
 -2.65677758e-02  3.17669511e-02  5.06398529e-02  6.20779395e-03
  5.45201171e-03  4.44149673e-02 -2.24830192e-02 -1.91797409e-02
 -9.27545782e-03 -1.51507929e-02 -3.12450603e-02 -2.74233464e-02
  3.84392329e-02  3.67415063e-02 -1.71078797e-02  6.37224456e-03
 -9.16809402e-03  2.74374858e-02 -4.39377502e-03 -3.22572254e-02
  1.18981190e-02  3.28816734e-02 -6.44013807e-02 -3.25316526e-02
  1.62400603e-02  4.00696434e-02 -3.64062712e-02 -1.19739883e-01
  9.23226252e-02  4.84478883e-02 -1.12986520e-01  2.96686478e-02
  2.06367970e-02  5.85845821e-02 -2.87200809e-02 -2.73877792e-02
  1.32867722e-02  3.96292880e-02 -2.42872927e-02 -7.76646286e-02
 -1.73723213e-02 -1.98544078e-02  6.36296868e-02 -4.32640128e-03
 -4.28085439e-02 -3.02620679e-02  4.86051477e-02  4.21089903e-02
 -9.53927338e-02 -4.10886668e-02  7.47368634e-02  1.53545977e-03
 -2.61191325e-03  4.73216362e-02 -4.88279536e-02 -1.61004439e-02
 -2.97252033e-02 -2.69999895e-02 -5.30259609e-02  7.10703954e-02
 -2.78615355e-02 -1.06277235e-03  1.30163534e-02  1.27054397e-02
  6.20057732e-02 -3.21601629e-02  1.24777136e-02  8.04423988e-02
  9.86199751e-02  1.54415090e-02  1.06598906e-01  3.20364721e-02
  5.07407896e-02 -3.61211076e-02  1.72800496e-02  4.96209557e-33
 -1.67960245e-02 -3.61059494e-02 -3.46184745e-02  1.17008105e-01
  5.55930696e-02  3.42860632e-02  5.95146008e-02  6.84492588e-02
 -3.08326241e-02  7.29735568e-02 -2.18078960e-02 -2.35391650e-02
 -6.18846063e-03 -2.77548265e-02  8.51256549e-02 -3.76446322e-02
  1.06022291e-01  1.48935737e-02 -1.99299492e-02 -1.13793993e-02
  6.56608418e-02  6.16700649e-02 -1.42983664e-02 -2.15194058e-02
  2.62839980e-02 -3.79257873e-02  6.84590172e-03  3.81476767e-02
 -8.35175216e-02 -1.25154387e-02  1.10380530e-01 -1.00039560e-02
 -2.46960782e-02  9.67132002e-02 -3.19523700e-02  2.24810448e-02
  5.20588756e-02 -1.40934717e-02  1.69473160e-02 -1.21483251e-01
 -6.99993595e-02 -3.08796745e-02 -6.00002590e-04  4.74243276e-02
 -6.00082241e-03 -5.45195416e-02 -1.02497794e-01 -2.33039930e-02
 -5.13756601e-03 -6.51577339e-02  6.40585274e-02  1.08684443e-01
  5.71983913e-03  7.36674340e-03  4.24504355e-02  2.79572494e-02
 -2.54117921e-02 -1.40711311e-02  8.32674559e-03  1.50987031e-02
 -7.13477507e-02 -2.49760225e-02 -7.65886605e-02  2.47602239e-02
 -1.98443942e-02 -2.23902147e-03 -6.52241930e-02 -4.46963906e-02
  4.17557620e-02 -1.88554209e-02 -4.70650941e-02  1.51531203e-02
 -5.78167699e-02  3.58045474e-02  2.85303174e-03 -4.57082922e-03
  3.49926613e-02 -1.90524030e-02 -4.35295962e-02 -4.91639748e-02
 -6.20779619e-02  6.04323074e-02 -2.45471317e-02  1.11659363e-01
  6.26037270e-02  6.87762126e-02  2.45582331e-02 -1.97208356e-02
 -6.32669497e-03  6.01621829e-02 -4.37347405e-02 -7.30682686e-02
 -1.20810373e-02 -7.34214708e-02  6.29884452e-02 -7.08209265e-33
  6.34128898e-02  4.37608734e-03 -8.88560861e-02 -6.86397105e-02
 -6.00576624e-02 -2.36476120e-02 -5.47641143e-02 -7.06942901e-02
 -1.68133646e-01  7.31703043e-02 -5.59384413e-02  5.57648055e-02
  6.67879581e-02 -4.10097130e-02  3.03736958e-03  4.51544449e-02
 -1.63363423e-02 -9.17277262e-02  8.28219056e-02  1.26328031e-02
 -3.74978855e-02  1.07795976e-01  2.96833310e-02 -4.57686223e-02
 -2.89046019e-02  3.56922895e-02 -8.13225433e-02  1.00684807e-01
  1.01047568e-01 -6.79818634e-03 -4.00393680e-02 -2.58385930e-02
  3.29842828e-02  2.29439093e-03  6.76057935e-02  2.73497943e-02
 -2.03818735e-03  5.84971942e-02  3.05989967e-03 -3.76852080e-02
  5.00885099e-02 -9.18939188e-02 -4.63666171e-02 -2.49416009e-02
  4.45636436e-02 -2.27730013e-02 -1.65297687e-02  2.55273916e-02
 -8.32209662e-02  6.62473543e-03 -4.37918343e-02 -3.93526629e-02
 -9.17385370e-02 -5.69236418e-03  9.95148905e-03 -1.90960569e-03
  2.11542435e-02 -4.13357913e-02  3.95866893e-02  2.68257521e-02
  1.05041504e-01 -5.40066659e-02  2.48722150e-03  5.79298958e-02
  4.19357754e-02 -6.19651750e-02 -6.62717223e-02 -6.39224201e-02
  1.98209397e-02  2.66537964e-02 -4.17880677e-02  5.17062843e-02
 -5.77239171e-02 -1.39974849e-02  5.40675446e-02 -2.27405708e-02
 -6.30308390e-02 -1.72870010e-02  3.36684436e-02  6.29960746e-02
 -7.88925514e-02  4.38536257e-02 -4.14144620e-02  3.26500237e-02
 -6.36822209e-02 -7.66026378e-02  6.26840815e-02  2.15241630e-02
 -2.67761685e-02 -6.17063716e-02 -8.25003348e-03  4.76212651e-02
  1.20573444e-02 -2.69445684e-02 -1.95776429e-02 -5.57940325e-08
  2.41177808e-03 -1.10141877e-02  1.98280718e-02  1.21039245e-03
 -4.41788100e-02 -8.22006464e-02 -8.16867724e-02 -3.75089236e-02
  4.52802191e-03 -1.84258074e-02 -6.64499775e-02  7.54777491e-02
  7.11956024e-02  1.27292192e-02 -2.14445740e-02 -3.65052745e-03
  2.97989622e-02 -6.55751675e-02 -5.84684014e-02  2.26308014e-02
  7.45615549e-03 -9.87144886e-05 -1.12796370e-02  7.08608627e-02
 -4.08173352e-03 -1.90752223e-02  3.63183022e-02 -2.64773984e-02
 -1.54008130e-02  5.03075346e-02 -2.03361809e-02  6.57090843e-02
  5.00369631e-03  1.17158569e-01  1.73455663e-02  1.88417621e-02
  3.88794579e-03  5.07774577e-02  6.03042357e-02 -7.07176933e-03
  1.12568676e-01 -5.23557775e-02  7.35225808e-03  6.48574457e-02
  5.99916391e-02  1.72811523e-02  5.29731764e-03 -1.56282168e-02
  1.01020776e-01  2.11815052e-02 -1.05308063e-01  5.30859083e-03
 -2.92363428e-02  3.72913852e-02 -7.37036541e-02  1.00053698e-02
 -1.33528216e-02 -5.97214662e-02  1.17002428e-01  4.29156050e-02
 -4.05687690e-02  4.62742373e-02  3.89053151e-02 -3.95118520e-02]"
"/**
 * The Flyweight stores a common portion of the state (also called intrinsic
 * state) that belongs to multiple real business entities. The Flyweight accepts
 * the rest of the state (extrinsic state, unique for each entity) via its
 * method parameters.
 */
class Flyweight {
    private sharedState: any;

    constructor(sharedState: any) {
        this.sharedState = sharedState;
    }

    public operation(uniqueState): void {
        const s = JSON.stringify(this.sharedState);
        const u = JSON.stringify(uniqueState);
        console.log(`Flyweight: Displaying shared (${s}) and unique (${u}) state.`);
    }
}

/**
 * The Flyweight Factory creates and manages the Flyweight objects. It ensures
 * that flyweights are shared correctly. When the client requests a flyweight,
 * the factory either returns an existing instance or creates a new one, if it
 * doesn't exist yet.
 */
class FlyweightFactory {
    private flyweights: {[key: string]: Flyweight} = <any>{};

    constructor(initialFlyweights: string[][]) {
        for (const state of initialFlyweights) {
            this.flyweights[this.getKey(state)] = new Flyweight(state);
        }
    }

    /**
     * Returns a Flyweight's string hash for a given state.
     */
    private getKey(state: string[]): string {
        return state.join('_');
    }

    /**
     * Returns an existing Flyweight with a given state or creates a new one.
     */
    public getFlyweight(sharedState: string[]): Flyweight {
        const key = this.getKey(sharedState);

        if (!(key in this.flyweights)) {
            console.log('FlyweightFactory: Can\'t find a flyweight, creating new one.');
            this.flyweights[key] = new Flyweight(sharedState);
        } else {
            console.log('FlyweightFactory: Reusing existing flyweight.');
        }

        return this.flyweights[key];
    }

    public listFlyweights(): void {
        const count = Object.keys(this.flyweights).length;
        console.log(`\nFlyweightFactory: I have ${count} flyweights:`);
        for (const key in this.flyweights) {
            console.log(key);
        }
    }
}

/**
 * The client code usually creates a bunch of pre-populated flyweights in the
 * initialization stage of the application.
 */
const factory = new FlyweightFactory([
    ['Chevrolet', 'Camaro2018', 'pink'],
    ['Mercedes Benz', 'C300', 'black'],
    ['Mercedes Benz', 'C500', 'red'],
    ['BMW', 'M5', 'red'],
    ['BMW', 'X6', 'white'],
    // ...
]);
factory.listFlyweights();

// ...

function addCarToPoliceDatabase(
    ff: FlyweightFactory, plates: string, owner: string,
    brand: string, model: string, color: string,
) {
    console.log('\nClient: Adding a car to database.');
    const flyweight = ff.getFlyweight([brand, model, color]);

    // The client code either stores or calculates extrinsic state and passes it
    // to the flyweight's methods.
    flyweight.operation([plates, owner]);
}

addCarToPoliceDatabase(factory, 'CL234IR', 'James Doe', 'BMW', 'M5', 'red');

addCarToPoliceDatabase(factory, 'CL234IR', 'James Doe', 'BMW', 'X1', 'red');

factory.listFlyweights();",TypeScript,Flyweight,Refactoring Guru,https://refactoring.guru/design-patterns/flyweight/typescript/example#example-0,"[-3.23855579e-02  7.33736977e-02 -2.89515760e-02  7.63454288e-02
 -1.08086625e-02  3.43420878e-02  1.05499513e-01 -1.57464202e-02
 -9.71277710e-03 -2.63924841e-02  4.11979929e-02 -5.43711074e-02
  5.90814510e-03 -2.80881226e-02  2.11435407e-02  5.08017503e-02
 -4.76448499e-02 -7.05473730e-03 -1.31546259e-01 -1.79309808e-02
  1.10489488e-01 -3.55545320e-02 -2.66888980e-02  1.09895738e-02
 -5.27659655e-02  9.24569613e-04 -3.09396069e-02 -2.40261108e-03
 -1.89900231e-02 -4.42180298e-02 -1.25209540e-02  4.16309712e-03
 -7.81410411e-02  4.14359458e-02 -6.23587780e-02  9.92361363e-03
 -6.20334642e-03 -2.74064578e-02 -1.19160507e-02 -7.01991096e-02
  5.91234630e-03  6.31811097e-02 -2.63849143e-02 -1.95136089e-02
  2.32469272e-02  3.27932239e-02 -5.97505346e-02  6.92745820e-02
  5.36543503e-02 -1.42788161e-02 -5.83670922e-02 -9.90460813e-03
 -1.29988184e-02  5.04914448e-02  9.21123847e-02  2.82416213e-02
 -3.67368422e-02 -4.08960581e-02 -7.74368346e-02 -1.20943107e-01
  2.28518136e-02 -1.23387510e-02  5.14082499e-02  1.24545395e-02
  7.11148977e-02 -4.66297753e-02 -2.97325663e-02 -2.42385436e-02
  1.23579800e-02  1.50326965e-02  5.37418388e-02  6.04968099e-03
 -6.50467630e-03  2.34445967e-02 -5.04252836e-02  5.12435213e-02
  2.21375152e-02 -4.79145572e-02 -7.95509294e-03  2.16539148e-02
 -7.48393163e-02 -7.31551554e-03 -6.39573336e-02 -2.71862708e-02
  9.65337381e-02  1.39770629e-02 -2.06942484e-02 -5.34935109e-02
 -2.92243902e-02  3.40069383e-02 -9.53774527e-02  8.53047986e-03
  9.94741451e-03  7.09286705e-02  2.63197236e-02  8.62485319e-02
  3.46414298e-02 -7.87205324e-02 -2.16023605e-02  9.40087512e-02
 -6.10306673e-02 -1.78273791e-03  1.01580650e-01  4.90861237e-02
 -5.41007482e-02 -2.86358111e-02  1.53898606e-02 -2.91379057e-02
 -6.71420544e-02 -1.09760463e-03 -4.08127438e-03  1.13804407e-01
 -1.95918069e-03  5.22352792e-02 -1.01359047e-01  1.43412771e-02
  1.85442287e-02 -6.93260431e-02 -6.53581601e-03  6.67428151e-02
  4.82729748e-02 -1.67131890e-02  3.89886573e-02 -6.81038853e-03
  1.35910790e-02 -2.29096077e-02 -7.73437992e-02  2.67915183e-33
 -1.57245807e-02 -6.92658797e-02  1.36651956e-02  3.62129249e-02
 -7.62451999e-03 -1.91325583e-02  1.15893325e-02  7.59641007e-02
 -6.33151159e-02  2.95903459e-02 -1.73018500e-02  2.81633232e-02
  3.21691260e-02 -2.82028634e-02  4.52168286e-02 -4.93585244e-02
  4.94240969e-02 -1.22714764e-03  4.47191708e-02 -4.07972410e-02
  2.75792200e-02 -7.61937676e-03 -7.46859238e-03 -3.72072756e-02
  3.35314833e-02  3.28082591e-02 -3.95464934e-02  2.62016319e-02
 -1.22676790e-01  3.13621052e-02  1.17508255e-01  2.42380574e-02
 -6.14079311e-02  6.22529397e-03  2.38681491e-03 -1.41015518e-02
  2.97812950e-02 -5.27783036e-02 -1.03961572e-01 -9.65084732e-02
  7.75079951e-02 -2.04967204e-02 -1.03531685e-02 -2.76139956e-02
 -7.91617036e-02 -2.80605629e-02 -3.33882384e-02  6.47959765e-03
 -1.32900346e-02  1.62521433e-02 -3.48454602e-02  4.06757966e-02
  2.57666223e-02 -4.66765575e-02  3.72951268e-03  1.42748235e-02
  2.55701710e-02 -2.09883973e-03  1.83900334e-02  1.81701630e-02
 -6.61503524e-02  3.63913216e-02 -4.59589735e-02  2.74209138e-02
  5.79364896e-02  6.90687895e-02 -1.73545014e-02 -1.50423264e-02
  5.14310934e-02 -5.23503385e-02  3.94840091e-02 -2.93680802e-02
  1.01786386e-02  1.02794059e-02  7.27385050e-03 -3.28903086e-02
 -3.06333080e-02 -9.95990336e-02 -6.38453811e-02 -6.77779317e-02
  3.73954885e-02  3.94029804e-02 -7.24541843e-02  9.28202868e-02
 -1.28982961e-02  3.03189848e-02 -4.45228592e-02 -2.02241614e-02
  6.35151612e-03  6.32909685e-02 -6.53079972e-02  8.90381914e-03
  6.67528389e-03 -9.51137096e-02 -3.81808542e-02 -3.51284695e-33
 -1.20739965e-02 -2.33107191e-02 -2.30488906e-04  2.19766311e-02
  9.14348811e-02 -6.12272657e-02 -1.42323943e-02 -5.82097806e-02
 -7.78335407e-02 -1.23228850e-02 -4.68713231e-02 -2.16866527e-02
  1.53748160e-02 -2.64478638e-03  7.98608288e-02  6.12874217e-02
 -5.43302707e-02 -8.45555663e-02  3.31651233e-02 -3.26389112e-02
  1.81308519e-02  7.93321729e-02  2.57194135e-03  3.48389037e-02
 -7.75012448e-02  3.53536010e-02 -5.23842424e-02  9.31715742e-02
 -1.76910441e-02 -5.04503921e-02  2.20554657e-02 -4.70129177e-02
 -4.08631517e-03  4.82537448e-02  2.56157108e-03 -9.03037861e-02
  5.31370305e-02  9.70388651e-02 -1.98340900e-02  6.45963922e-02
  1.74947716e-02 -7.23813474e-02 -1.82192884e-02 -3.77479084e-02
  2.06917394e-02 -1.18331566e-01  5.06103560e-02  3.21539529e-02
  1.03379108e-01 -2.65165865e-02  5.14953770e-02 -6.90099448e-02
 -1.29374966e-01  5.90376630e-02  1.72277894e-02  1.14929760e-02
  8.28756094e-02 -6.03649244e-02  1.05287008e-01 -7.07790069e-03
 -4.26597036e-02 -7.78431967e-02  6.25813985e-03  8.75052214e-02
  2.41704490e-02 -1.10038623e-01  9.84789152e-03 -6.96134791e-02
  5.59685156e-02  3.03312317e-02 -1.16953932e-01  5.75258248e-02
  6.47445396e-02 -1.83904935e-02  2.61898246e-02 -4.46284190e-02
  3.33365165e-02  7.57501321e-03  1.11284070e-01 -2.12995261e-02
 -2.18812060e-02 -9.89113003e-02  9.51125547e-02  1.87202189e-02
  1.14470227e-02 -4.82225651e-03  1.52303055e-02 -1.19751692e-02
 -4.97117117e-02  4.27051634e-03 -7.01524410e-03  5.78879602e-02
 -3.80964503e-02 -1.31951170e-02 -2.94548199e-02 -5.15238980e-08
 -6.90936148e-02 -2.32841191e-03 -2.09184121e-02  6.82053417e-02
  1.53761106e-02 -4.99497876e-02  7.10404590e-02 -7.27115525e-03
 -3.10018137e-02 -1.63715109e-02  5.51873706e-02  6.43772632e-02
  1.12691864e-01  2.85901446e-02  1.15178367e-02 -4.90560010e-02
 -9.35074985e-02  3.38822813e-03 -8.26568753e-02  7.00808540e-02
 -2.07999721e-02  2.08911207e-02 -3.57312895e-02  1.57547332e-02
  8.01792443e-02 -3.69764417e-02  5.56860864e-02  6.65598083e-04
  7.57955685e-02  1.05503492e-01 -5.59680574e-02  9.97522995e-02
  8.52597505e-02  2.78274212e-02 -2.83609871e-02 -5.19600548e-02
 -3.37442644e-02  4.46080677e-02  2.93377833e-03  8.07847306e-02
  8.95976797e-02  7.00394139e-02 -5.13981283e-02  1.70076489e-02
  1.12440899e-01 -2.32957881e-02 -4.31065857e-02 -2.53790105e-03
  3.87219228e-02  5.10057434e-03 -3.27352434e-02 -1.91406030e-02
 -4.34732884e-02  2.65092347e-02 -5.40383868e-02 -1.36830332e-02
  1.42838471e-02 -1.38627626e-02  6.47321492e-02 -1.16591072e-02
  8.62008780e-02 -7.15964586e-02 -3.27428579e-02  9.88870207e-03]"
"/**
 * The Subject interface declares common operations for both RealSubject and the
 * Proxy. As long as the client works with RealSubject using this interface,
 * you'll be able to pass it a proxy instead of a real subject.
 */
interface Subject {
    request(): void;
}

/**
 * The RealSubject contains some core business logic. Usually, RealSubjects are
 * capable of doing some useful work which may also be very slow or sensitive -
 * e.g. correcting input data. A Proxy can solve these issues without any
 * changes to the RealSubject's code.
 */
class RealSubject implements Subject {
    public request(): void {
        console.log('RealSubject: Handling request.');
    }
}

/**
 * The Proxy has an interface identical to the RealSubject.
 */
class Proxy implements Subject {
    private realSubject: RealSubject;

    /**
     * The Proxy maintains a reference to an object of the RealSubject class. It
     * can be either lazy-loaded or passed to the Proxy by the client.
     */
    constructor(realSubject: RealSubject) {
        this.realSubject = realSubject;
    }

    /**
     * The most common applications of the Proxy pattern are lazy loading,
     * caching, controlling the access, logging, etc. A Proxy can perform one of
     * these things and then, depending on the result, pass the execution to the
     * same method in a linked RealSubject object.
     */
    public request(): void {
        if (this.checkAccess()) {
            this.realSubject.request();
            this.logAccess();
        }
    }

    private checkAccess(): boolean {
        // Some real checks should go here.
        console.log('Proxy: Checking access prior to firing a real request.');

        return true;
    }

    private logAccess(): void {
        console.log('Proxy: Logging the time of request.');
    }
}

/**
 * The client code is supposed to work with all objects (both subjects and
 * proxies) via the Subject interface in order to support both real subjects and
 * proxies. In real life, however, clients mostly work with their real subjects
 * directly. In this case, to implement the pattern more easily, you can extend
 * your proxy from the real subject's class.
 */
function clientCode(subject: Subject) {
    // ...

    subject.request();

    // ...
}

console.log('Client: Executing the client code with a real subject:');
const realSubject = new RealSubject();
clientCode(realSubject);

console.log('');

console.log('Client: Executing the same client code with a proxy:');
const proxy = new Proxy(realSubject);
clientCode(proxy);",TypeScript,Proxy,Refactoring Guru,https://refactoring.guru/design-patterns/proxy/typescript/example#example-0,"[-1.18876681e-01  8.04471690e-03 -6.09551137e-03  5.91816707e-03
 -5.02586104e-02 -3.61116081e-02  3.00079528e-02 -2.17148364e-02
  1.07716313e-02  4.27747332e-02 -7.69349039e-02  2.88961977e-02
 -3.72808538e-02  4.86948714e-02  1.27370745e-01 -1.85088385e-02
  4.67740819e-02  1.15624834e-02 -1.89683647e-04  1.53856371e-02
  7.64888301e-02 -9.12288874e-02 -2.27594506e-02 -3.83996330e-02
 -6.56035766e-02 -9.28707048e-02 -4.46898863e-03 -1.44354790e-01
  1.80703960e-02  7.19181029e-03  7.72057623e-02  4.62610386e-02
 -1.77367508e-01 -1.39891244e-02 -1.54214457e-01  2.63911560e-02
 -1.74050797e-02 -2.77233757e-02 -1.43775064e-03 -2.14203820e-02
  1.97743941e-02  5.79149500e-02 -8.64089699e-04 -1.23084607e-02
  9.68814865e-02 -1.27720702e-02 -1.65041480e-02  6.30428940e-02
  3.22747827e-02 -3.54033373e-02 -9.55231339e-02 -3.94881405e-02
 -8.93008616e-03  1.53364152e-01  2.32281704e-02  1.26403361e-03
 -5.92141645e-03  5.83957173e-02  6.61232620e-02  7.94776753e-02
 -7.80591369e-02 -2.74721645e-02  2.42882818e-02  1.79652106e-02
 -3.44991917e-03 -2.31369343e-02 -5.00726141e-02  3.84171754e-02
  6.12745062e-02  7.63043389e-02 -1.70824025e-02  1.47400778e-02
 -1.83828399e-02 -1.14058321e-02  8.45338330e-02 -4.66233455e-02
 -3.90111879e-02  1.07618691e-02  4.05774377e-02 -5.24044633e-02
  3.85602228e-02 -4.86907698e-02 -6.67058825e-02  1.74106136e-02
  2.65374668e-02  6.10756464e-02  2.48305462e-02 -6.57325089e-02
  1.17029471e-03  1.82126723e-02 -1.06184995e-02 -4.76022810e-02
 -3.10276877e-02  4.08427380e-02 -1.41768996e-02  2.51385216e-02
  2.50956751e-02  4.55458201e-02 -5.62474690e-03  3.18719037e-02
 -1.12017533e-02 -2.55229906e-03 -1.56984925e-02  3.06438394e-02
  2.09979154e-02 -3.67344953e-02 -4.89106178e-02 -2.00704276e-03
  2.02380009e-02  5.50510027e-02 -5.52147552e-02  1.48408348e-02
 -6.59808144e-02 -1.78021491e-02 -1.82635244e-02  4.94719185e-02
  1.75710797e-01 -2.54660174e-02  1.45005602e-02 -1.08763063e-02
 -2.80506839e-03  2.11330913e-02  7.72615224e-02 -2.91398447e-02
  1.25072971e-01 -4.63914722e-02  2.06167940e-02  2.46846173e-33
  7.17406198e-02 -6.51379377e-02 -9.37779061e-03  5.67036606e-02
 -9.94821172e-03  2.20790282e-02  2.36896183e-02  6.28338605e-02
  1.38921291e-02  3.31302322e-02  2.41491646e-02  4.43459302e-02
  8.41939542e-03  5.79502339e-05  4.27655876e-02 -3.76906693e-02
 -7.63756856e-02 -5.35460608e-03  5.11178300e-02  5.06359711e-02
  5.87974815e-03 -8.82441178e-03 -3.88569459e-02 -2.55324394e-02
 -4.08094898e-02  2.19614897e-02 -2.33679800e-03  2.27434002e-02
 -7.80304894e-02  3.22111584e-02  1.15025192e-01  4.60441634e-02
 -3.38488445e-02  4.23752069e-02 -1.59140229e-02 -4.19803821e-02
  4.27058637e-02 -1.61331445e-02 -6.96139634e-02 -5.74896298e-02
  6.11295691e-03 -1.81598868e-02  3.15688215e-02 -3.04631479e-02
 -4.84315567e-02 -1.15428992e-01 -9.64903273e-03  2.20740084e-02
  1.27937198e-01  3.93309705e-02  2.91527566e-02  6.29623383e-02
  4.93253507e-02 -8.19564760e-02  4.93424200e-02  4.59241048e-02
  2.25171633e-03  8.79447535e-02 -2.23118737e-02  1.83248671e-03
  2.45045796e-02 -3.84823754e-02 -1.90976355e-02  1.82536487e-02
 -3.04859458e-03  4.26936112e-02 -4.70453873e-02 -4.42205481e-02
  4.10511903e-02 -6.12564720e-02 -2.34270021e-02  1.19702565e-02
 -6.52516857e-02 -3.09482235e-02  1.16178719e-02  3.44035365e-02
 -5.57744578e-02  6.05969056e-02 -5.27558438e-02 -1.22115193e-02
  1.13467220e-02  1.09791178e-02 -3.04742903e-02  1.07739009e-01
 -4.49546687e-02  3.89791429e-02  3.31937820e-02 -5.92332706e-02
  1.54752121e-03 -1.56618543e-02  6.50085800e-04  9.85264592e-03
 -2.32916679e-02 -1.12646688e-02  9.78126004e-03 -4.18221164e-33
 -5.56649677e-02 -7.58778909e-03 -8.34955648e-02  1.49696488e-02
 -2.31404528e-02 -6.25426844e-02  4.30820435e-02 -6.55835681e-03
  9.38948337e-03  8.50944668e-02 -6.46802261e-02  3.32444236e-02
  4.19154316e-02  2.56887469e-02 -2.81097498e-02 -1.06349529e-03
 -6.38753399e-02 -8.93110782e-02 -1.96212102e-02  3.23533593e-03
 -3.44164632e-02  9.91368890e-02  6.28233775e-02 -3.12433057e-02
  1.35937892e-02  2.93456353e-02 -1.81255694e-02  1.26477987e-01
  2.17434913e-02 -2.06362288e-02 -3.85916643e-02 -1.37572344e-02
 -2.84528770e-02 -1.84073243e-02  3.35860276e-03 -6.58870414e-02
  1.35186594e-02  1.30411923e-01  1.85059607e-02 -1.39185578e-01
  8.71392265e-02 -7.52430931e-02 -6.60413280e-02  1.13314409e-02
  6.84555471e-02 -2.31303684e-02 -7.83996955e-02  3.87228504e-02
 -1.67822428e-02  7.33599514e-02 -5.95177226e-02  1.41547304e-02
  1.15329428e-02  3.16591747e-02 -1.61423273e-02 -2.25835461e-02
 -4.93201837e-02 -2.18118392e-02  1.03056230e-01  5.71765974e-02
  5.74764647e-02 -5.32698892e-02 -5.31515060e-03 -7.76752038e-03
  3.45422551e-02 -3.96562228e-03 -5.10130599e-02 -5.08464389e-02
  7.01072738e-02  3.61811579e-03  2.61088498e-02  1.52830621e-02
 -4.31669578e-02 -6.33254349e-02  6.07908145e-02  8.44107103e-03
  4.11532223e-02 -5.54123260e-02 -2.96033733e-03  8.47807452e-02
 -2.49072146e-02 -1.56263690e-02 -2.49183681e-02 -1.87749248e-02
  8.46853387e-03  4.47579892e-03 -6.41438514e-02  2.03717258e-02
  1.01719759e-02 -3.68804559e-02 -5.62923700e-02  8.27889070e-02
 -6.94929957e-02 -8.65440443e-02 -3.72437877e-03 -5.06112450e-08
  3.35585396e-03  4.01992165e-03  3.62399854e-02  4.98967655e-02
 -5.46360239e-02  3.12206801e-03 -1.07928395e-01 -1.08263902e-01
 -6.95801079e-02  5.06827161e-02 -5.74592464e-02  1.56733431e-02
  7.92059451e-02  1.09543931e-02  3.78913581e-02 -5.60499914e-02
 -5.17653860e-03 -4.22462225e-02 -7.85833821e-02  5.68924472e-02
 -3.25562693e-02 -3.62109467e-02 -1.01679061e-02  5.95868826e-02
 -1.83651783e-02  4.84891124e-02  7.81623200e-02 -4.46902439e-02
 -5.04540280e-02  4.63846512e-02 -9.20781717e-02  3.26624550e-02
 -4.15408658e-03  3.36576588e-02 -1.16763376e-01  5.22750728e-02
 -2.66723335e-02  5.46574173e-03 -7.99142662e-03  6.23664930e-02
  7.62755722e-02 -6.37473390e-02 -3.87464315e-02  4.00378145e-02
  3.54841389e-02  4.00156416e-02 -1.73356030e-02 -3.97619382e-02
  8.79024565e-02  4.43093926e-02 -3.88740636e-02 -6.28427193e-02
 -6.84144050e-02 -4.86107655e-02 -2.50266381e-02 -1.45650757e-02
 -3.85959037e-02 -6.38584569e-02 -2.59621092e-03  7.21391011e-03
  6.41230494e-02  7.25273862e-02 -1.62999555e-02  2.81106271e-02]"
"/**
 * The Handler interface declares a method for building the chain of handlers.
 * It also declares a method for executing a request.
 */
interface Handler {
    setNext(handler: Handler): Handler;

    handle(request: string): string;
}

/**
 * The default chaining behavior can be implemented inside a base handler class.
 */
abstract class AbstractHandler implements Handler
{
    private nextHandler: Handler;

    public setNext(handler: Handler): Handler {
        this.nextHandler = handler;
        // Returning a handler from here will let us link handlers in a
        // convenient way like this:
        // monkey.setNext(squirrel).setNext(dog);
        return handler;
    }

    public handle(request: string): string {
        if (this.nextHandler) {
            return this.nextHandler.handle(request);
        }

        return null;
    }
}

/**
 * All Concrete Handlers either handle a request or pass it to the next handler
 * in the chain.
 */
class MonkeyHandler extends AbstractHandler {
    public handle(request: string): string {
        if (request === 'Banana') {
            return `Monkey: I'll eat the ${request}.`;
        }
        return super.handle(request);

    }
}

class SquirrelHandler extends AbstractHandler {
    public handle(request: string): string {
        if (request === 'Nut') {
            return `Squirrel: I'll eat the ${request}.`;
        }
        return super.handle(request);
    }
}

class DogHandler extends AbstractHandler {
    public handle(request: string): string {
        if (request === 'MeatBall') {
            return `Dog: I'll eat the ${request}.`;
        }
        return super.handle(request);
    }
}

/**
 * The client code is usually suited to work with a single handler. In most
 * cases, it is not even aware that the handler is part of a chain.
 */
function clientCode(handler: Handler) {
    const foods = ['Nut', 'Banana', 'Cup of coffee'];

    for (const food of foods) {
        console.log(`Client: Who wants a ${food}?`);

        const result = handler.handle(food);
        if (result) {
            console.log(`  ${result}`);
        } else {
            console.log(`  ${food} was left untouched.`);
        }
    }
}

/**
 * The other part of the client code constructs the actual chain.
 */
const monkey = new MonkeyHandler();
const squirrel = new SquirrelHandler();
const dog = new DogHandler();

monkey.setNext(squirrel).setNext(dog);

/**
 * The client should be able to send a request to any handler, not just the
 * first one in the chain.
 */
console.log('Chain: Monkey > Squirrel > Dog\n');
clientCode(monkey);
console.log('');

console.log('Subchain: Squirrel > Dog\n');
clientCode(squirrel);",TypeScript,Chain of Responsibility,Refactoring Guru,https://refactoring.guru/design-patterns/chain-of-responsibility/typescript/example#example-0,"[-4.45112176e-02  5.24889678e-02  8.94925445e-02  3.70174162e-02
 -2.74037104e-02 -1.71504654e-02  3.74847129e-02 -2.50536744e-02
  4.66095284e-02 -2.82012057e-02  2.76015010e-02  1.85566861e-02
 -6.21839368e-04  2.54248548e-02  8.86050314e-02  2.76001263e-02
  2.72500459e-02  1.46834273e-02 -2.64924243e-02 -2.70752516e-02
  5.87539636e-02 -7.00320397e-03 -1.57099124e-02 -7.54547725e-03
 -1.62881345e-01 -8.46424103e-02 -3.05245575e-02 -1.10923059e-01
  1.14185568e-02 -4.06681746e-03 -1.20416870e-02 -2.89666634e-02
 -1.60456344e-01  1.61299147e-02 -1.50421351e-01  7.77382180e-02
  2.05881074e-02 -1.12886906e-01  1.23615274e-02 -1.43644996e-02
  1.39117911e-02  8.78624991e-02 -1.31776771e-02 -2.58089211e-02
  2.81550512e-02 -2.36841980e-02 -1.07619517e-01  6.10638708e-02
 -2.41026860e-02 -3.00289597e-02  1.17236818e-03 -6.56444766e-03
  7.50782192e-02  3.56438644e-02  4.94805947e-02  1.42408097e-02
 -2.99319886e-02 -6.45076334e-02  1.17927510e-02  4.85560074e-02
 -1.72092882e-03 -3.29685956e-02 -2.01433562e-02 -2.05593314e-02
  4.26964611e-02 -7.18519837e-02 -2.19453126e-02  3.26380990e-02
 -1.34206982e-02  4.36231047e-02 -2.42595584e-03 -4.52917889e-02
  6.93497714e-03  1.89163256e-02  1.30380574e-03 -4.52925153e-02
 -1.26030874e-02 -4.90603643e-03 -4.61232103e-02 -1.04975887e-02
 -1.62382629e-02 -5.11660278e-02 -1.81799158e-02 -3.24095041e-02
  1.94176137e-02  9.79381055e-02 -6.44107070e-03 -2.60600448e-02
  2.79503246e-03  3.16986181e-02 -7.55149275e-02 -4.60067540e-02
 -5.17228208e-02  1.27954520e-02  1.92520935e-02  5.54951280e-02
 -1.15843527e-02  1.22702569e-02 -3.37483324e-02  1.04186505e-01
  5.74563481e-02  1.97400078e-02  1.42715424e-02 -5.00127859e-02
  3.76067720e-02  4.56370972e-02 -1.23005293e-01 -1.71760246e-02
 -1.53577272e-02  3.67334001e-02 -3.07475422e-02  4.81806397e-02
 -1.54550150e-02  2.04803851e-02 -7.42792413e-02  2.50152964e-02
  7.26772025e-02 -4.19547595e-02 -1.79526117e-02  6.29307851e-02
  9.93072838e-02 -1.59262195e-02  4.07089069e-02  1.15042254e-02
  5.14482930e-02 -4.57979329e-02  4.80297655e-02  2.07076481e-33
  1.84639804e-02 -8.82142186e-02 -3.92215550e-02  1.13568204e-02
  5.33502735e-02  5.28319627e-02 -6.30080001e-03  3.10915522e-02
 -3.80219594e-02  4.16477062e-02 -1.19972043e-02 -8.33399687e-03
 -1.43793859e-02 -1.53360469e-02  4.59048478e-03 -1.79168265e-02
  8.22874233e-02 -3.35389934e-02  8.05047899e-02  1.11200353e-02
 -3.60626839e-02  2.97481660e-02 -8.36505089e-03  1.42772887e-02
 -3.89668648e-03  4.09249514e-02 -5.95191009e-02 -1.85100287e-02
 -1.10704340e-02 -2.11126748e-02  1.09341636e-01 -4.95907590e-02
 -5.76614849e-02  3.04028653e-02 -5.79209765e-03  2.24582497e-02
  3.17569673e-02 -2.26161070e-02 -1.24842636e-01 -1.14526421e-01
  1.45771811e-02 -6.42434275e-03  6.21528132e-03  2.14615725e-02
 -7.19446316e-02 -5.94118088e-02 -3.99034694e-02  7.27079157e-03
 -2.77061039e-03 -4.49555553e-02  3.77959125e-02  6.71451092e-02
  1.50640324e-01 -5.57764284e-02  3.81005630e-02  3.68034374e-03
 -9.37442761e-03 -7.48064928e-03 -5.22773676e-02  2.99125500e-02
  2.77913418e-02 -2.94610485e-02 -3.49295996e-02  1.81422830e-02
 -3.21004689e-02  3.40477005e-02 -6.32612333e-02 -1.57281999e-02
  7.74886832e-02 -1.62853096e-02 -3.52152772e-02  2.75481623e-02
  9.13315080e-03  3.69031839e-02  2.51047257e-02  6.89308066e-03
 -9.65481177e-02 -3.81635614e-02  3.89326662e-02 -7.26516545e-02
 -8.77399743e-03  4.06405106e-02 -3.27625163e-02  1.90217778e-01
 -5.40327318e-02  7.33800605e-02  2.02417448e-02 -3.63163324e-03
  6.65947422e-02  8.93941969e-02 -7.11636171e-02  1.35904048e-02
  3.10859401e-02 -1.59034003e-02  4.69822399e-02 -4.80798238e-33
 -1.91048160e-02  6.27356246e-02 -3.48563567e-02 -2.20135264e-02
 -6.37083948e-02 -1.36976819e-02  1.48367826e-02 -1.15777934e-02
 -6.13842793e-02 -1.62038840e-02 -5.89683019e-02  5.54613136e-02
  5.90574853e-02  3.63939665e-02  2.64603253e-02  7.12849721e-02
 -9.01058987e-02 -3.52499224e-02  6.81573432e-03 -7.68919215e-02
 -2.94456072e-02  5.37288040e-02  6.13408461e-02  2.35690381e-02
 -3.41798253e-02  3.28907073e-02  7.98390899e-03  6.83167353e-02
 -3.97768728e-02 -3.35329883e-02 -1.37631930e-02 -9.86662507e-02
  6.09068274e-02  1.55143263e-02  4.09408584e-02 -6.27061501e-02
  4.00867760e-02  1.08192705e-01  1.06739886e-02 -8.36563297e-03
  8.04560483e-02 -4.13293988e-02 -7.57184327e-02  2.80536506e-02
 -1.36977332e-02 -3.26938108e-02 -1.47031397e-02 -1.24880243e-02
  5.29032052e-02 -1.49650536e-02 -4.77077886e-02 -5.00046350e-02
 -5.26548214e-02 -5.61803058e-02 -2.20454969e-02  5.85710513e-04
  3.19670998e-02 -6.23523779e-02  8.67962167e-02  1.98023347e-03
  1.43712070e-02 -2.76568029e-02 -3.44921425e-02  9.10105705e-02
  2.06208844e-02 -1.19189665e-01 -2.31871521e-03 -1.15033634e-01
  8.43689814e-02  2.53879614e-02 -4.06213701e-02  1.35401100e-01
 -1.51001131e-02 -6.75733015e-02  1.19547121e-01  5.12619577e-02
 -2.02023648e-02 -8.98023099e-02  2.38766912e-02  1.54501544e-02
 -3.84556018e-02 -6.53080642e-02  8.23544431e-03 -3.43887648e-03
  4.98431325e-02 -3.95437479e-02  4.54846360e-02  4.43328209e-02
  6.67253509e-03 -1.27453692e-02  2.23764163e-02  6.37673736e-02
 -4.06549349e-02  1.46428626e-02 -3.55343297e-02 -5.17415160e-08
 -2.02270336e-02 -7.77122229e-02 -6.13715909e-02  1.32241333e-02
 -2.71670669e-02  3.91931646e-02 -7.88337737e-03 -5.86135909e-02
 -6.37706667e-02  2.34165043e-03 -6.16743900e-02  9.25258547e-02
  4.45855595e-02 -9.77483299e-03  2.95283385e-02 -4.93677184e-02
  2.25307830e-02 -2.68869326e-02 -7.85727650e-02  7.96632767e-02
 -5.07813543e-02  3.17675807e-02 -1.32903764e-02  3.33846547e-02
 -1.93671305e-02 -5.52615672e-02  6.44687340e-02  1.18216880e-01
 -6.86287358e-02  2.17164345e-02 -2.86499579e-02  6.76997006e-02
 -2.82512754e-02  4.24284935e-02 -4.89550643e-02  1.81618724e-02
 -1.05909787e-01  1.65594593e-02  6.83211461e-02  9.72537547e-02
  6.51094466e-02  9.80903860e-04 -7.85153806e-02  2.84052212e-02
  2.71229222e-02 -3.58865522e-02 -1.25387951e-03 -1.15271257e-02
  6.56904727e-02  7.53920972e-02 -8.12562555e-02  1.54229430e-02
 -2.83552948e-02 -2.38322429e-02  1.12588238e-02 -5.07771075e-02
  4.12504002e-02 -6.65894523e-02 -2.83660963e-02 -2.65620034e-02
  1.63390655e-02  9.09973867e-03  4.04486135e-02 -3.00551411e-02]"
"/**
 * Iterator Design Pattern
 *
 * Intent: Lets you traverse elements of a collection without exposing its
 * underlying representation (list, stack, tree, etc.).
 */

interface Iterator<T> {
    // Return the current element.
    current(): T;

    // Return the current element and move forward to next element.
    next(): T;

    // Return the key of the current element.
    key(): number;

    // Checks if current position is valid.
    valid(): boolean;

    // Rewind the Iterator to the first element.
    rewind(): void;
}

interface Aggregator {
    // Retrieve an external iterator.
    getIterator(): Iterator<string>;
}

/**
 * Concrete Iterators implement various traversal algorithms. These classes
 * store the current traversal position at all times.
 */

class AlphabeticalOrderIterator implements Iterator<string> {
    private collection: WordsCollection;

    /**
     * Stores the current traversal position. An iterator may have a lot of
     * other fields for storing iteration state, especially when it is supposed
     * to work with a particular kind of collection.
     */
    private position: number = 0;

    /**
     * This variable indicates the traversal direction.
     */
    private reverse: boolean = false;

    constructor(collection: WordsCollection, reverse: boolean = false) {
        this.collection = collection;
        this.reverse = reverse;

        if (reverse) {
            this.position = collection.getCount() - 1;
        }
    }

    public rewind() {
        this.position = this.reverse ?
            this.collection.getCount() - 1 :
            0;
    }

    public current(): string {
        return this.collection.getItems()[this.position];
    }

    public key(): number {
        return this.position;
    }

    public next(): string {
        const item = this.collection.getItems()[this.position];
        this.position += this.reverse ? -1 : 1;
        return item;
    }

    public valid(): boolean {
        if (this.reverse) {
            return this.position >= 0;
        }

        return this.position < this.collection.getCount();
    }
}

/**
 * Concrete Collections provide one or several methods for retrieving fresh
 * iterator instances, compatible with the collection class.
 */
class WordsCollection implements Aggregator {
    private items: string[] = [];

    public getItems(): string[] {
        return this.items;
    }

    public getCount(): number {
        return this.items.length;
    }

    public addItem(item: string): void {
        this.items.push(item);
    }

    public getIterator(): Iterator<string> {
        return new AlphabeticalOrderIterator(this);
    }

    public getReverseIterator(): Iterator<string> {
        return new AlphabeticalOrderIterator(this, true);
    }
}

/**
 * The client code may or may not know about the Concrete Iterator or Collection
 * classes, depending on the level of indirection you want to keep in your
 * program.
 */
const collection = new WordsCollection();
collection.addItem('First');
collection.addItem('Second');
collection.addItem('Third');

const iterator = collection.getIterator();

console.log('Straight traversal:');
while (iterator.valid()) {
    console.log(iterator.next());
}

console.log('');
console.log('Reverse traversal:');
const reverseIterator = collection.getReverseIterator();
while (reverseIterator.valid()) {
    console.log(reverseIterator.next());
}",TypeScript,Iterator,Refactoring Guru,https://refactoring.guru/design-patterns/iterator/typescript/example#example-0,"[-2.99059898e-02  7.92612229e-03 -1.28989154e-02 -3.01033016e-02
 -1.00554734e-01  3.74849960e-02 -1.26291497e-03  3.29319090e-02
  4.32694703e-03 -1.85500197e-02  3.37467007e-02 -1.44185601e-02
  2.42529474e-02 -6.25302121e-02 -2.65596919e-02  3.63886193e-03
 -3.09976414e-02  7.12050647e-02  1.64957419e-02 -5.00033349e-02
  7.73573220e-02  2.76633985e-02 -1.23486044e-02 -2.00405088e-03
 -3.52310762e-02  1.04242943e-01 -7.75661916e-02 -6.31481707e-02
  1.80247203e-02 -4.64504994e-02  9.64171346e-03  1.17442710e-02
 -4.92481701e-02  4.34968919e-02 -6.63513467e-02  2.66707912e-02
 -3.27539407e-02  6.79510739e-03  1.41925607e-02 -1.90191101e-02
 -3.10796537e-02  7.85869583e-02 -7.36785904e-02 -8.53090659e-02
  3.81660536e-02 -4.29060347e-02 -9.59189087e-02  8.37549218e-04
  5.57726575e-03 -8.74069426e-03  5.73988911e-03  2.21906677e-02
  4.66547115e-03  2.88644098e-02  4.49016597e-03  6.80640861e-02
  4.19655256e-02 -4.63063158e-02 -5.36234006e-02  9.77260340e-03
  7.87201002e-02 -7.65090659e-02 -4.61981595e-02 -5.39425164e-02
  2.88790166e-02 -5.08243144e-02  7.38762841e-02  4.88094315e-02
  3.33427675e-02 -4.84202430e-03 -6.36873255e-03  2.74309404e-02
  4.46653962e-02  4.40915078e-02 -4.55030911e-02  5.44036143e-02
  6.30659750e-03 -2.95635685e-02 -7.92804733e-03 -2.16413233e-02
 -1.68609098e-02  1.02396114e-02  1.79881379e-02 -1.70805212e-02
  6.64355382e-02  4.33545485e-02 -5.71668446e-02 -4.02359217e-02
  1.30979819e-02  7.53477141e-02 -5.08688241e-02 -6.85378611e-02
  8.76302421e-02  3.21962796e-02  9.42043290e-02  8.21041316e-02
  2.17538252e-02 -2.32143383e-02  1.42478319e-02  4.98885363e-02
 -3.21417674e-02  3.63862328e-02 -3.21131013e-02 -1.03134178e-01
 -6.09016716e-02 -5.66490069e-02 -4.89816554e-02 -6.01786152e-02
 -4.58899885e-02 -4.74671870e-02 -2.57687364e-02  2.34832000e-02
 -1.84939131e-02  1.26082422e-02 -6.24577627e-02 -4.40435968e-02
 -1.74990986e-02  2.99457964e-02  6.00626282e-02  1.63387954e-02
  2.00115833e-02 -3.08118835e-02  2.15047579e-02  1.12967798e-02
  3.72248888e-02  1.14915883e-02  1.39792785e-02  4.53939037e-33
  5.88196777e-02 -1.32767800e-02 -2.42826738e-03  3.62006538e-02
 -1.72696896e-02 -2.04911474e-02  5.63586839e-02  1.18129782e-01
 -3.96703221e-02  1.46456864e-02  7.97315761e-02  5.07571883e-02
  2.88796518e-03 -6.76706759e-03  2.57890541e-02 -1.19663730e-01
  7.50011057e-02  1.67681631e-02 -4.90543768e-02 -9.18146819e-02
  4.04718630e-02 -5.82742598e-03 -4.12267819e-02 -8.49350616e-02
  1.28328279e-02  9.71572753e-03 -3.44497152e-02  2.22866908e-02
 -1.15915127e-01 -8.74928106e-03  9.93132591e-02 -2.17522420e-02
 -3.62303928e-02  3.48060168e-02  6.09668121e-02  4.03863704e-03
  2.59982459e-02 -3.15842666e-02  3.21080186e-03 -1.22922309e-01
  1.02687404e-02 -4.62521315e-02  1.86087526e-02 -2.10293084e-02
  6.12965785e-03 -1.77596901e-02 -4.96006496e-02  6.56442204e-03
 -2.47365665e-02 -1.42756049e-02  3.01622171e-02  9.25073028e-02
 -7.82201439e-02 -1.66915972e-02  2.30408572e-02 -2.71052234e-02
 -1.27258813e-02  1.15248181e-01  2.09703278e-02  1.22550242e-01
 -6.25040084e-02  9.31678936e-02  1.20389629e-02  6.93081692e-02
  3.02319564e-02 -3.99836950e-04 -6.31182417e-02 -6.37401566e-02
  4.95431498e-02 -3.51050422e-02 -8.54700746e-04 -4.60384134e-03
  3.72564495e-02 -1.01140719e-02  4.99869101e-02 -4.71450128e-02
 -6.59818351e-02 -8.11621621e-02 -9.01367888e-02 -1.73891664e-01
 -3.96706313e-02 -2.34448835e-02 -5.59086504e-04  7.55096525e-02
  1.28409481e-02  4.85294797e-02  1.08544305e-02 -5.65853007e-02
  8.48070458e-02  1.02830119e-02 -6.93993345e-02 -5.88499196e-03
  1.40078627e-02  1.29251396e-02  3.27000991e-02 -6.34043947e-33
  4.90559265e-02 -3.18465824e-03  1.20119257e-02 -4.91505265e-02
  2.00735871e-02 -4.83828112e-02  1.48268221e-02  6.75511360e-02
 -5.63076027e-02 -6.52621984e-02 -5.51910587e-02  7.31667355e-02
  5.93752787e-02  3.31704738e-03  7.97604844e-02  7.17728063e-02
  6.62276661e-03 -8.95880833e-02  5.30892350e-02  4.39994357e-04
 -2.33576279e-02  4.45330516e-02  3.16704698e-02 -3.33574563e-02
 -2.31064744e-02  6.87377015e-03  5.37026003e-02  3.52611430e-02
  5.41698299e-02  7.27368379e-03  8.17131624e-02 -4.24747504e-02
  6.91643208e-02  4.17144597e-03 -4.06959020e-02 -9.03434679e-02
 -1.13651231e-02  2.35645790e-02  3.37650143e-02  1.07931420e-01
  4.12845388e-02 -7.02550635e-02  4.97863553e-02 -8.09051767e-02
  8.65499768e-03 -9.86404866e-02 -3.67533416e-02  9.60618928e-02
  1.84109993e-02 -2.11955677e-03  4.98757362e-02 -6.70043305e-02
 -9.77998599e-02  2.65245838e-03  5.42084910e-02  6.90473616e-02
  7.45839551e-02 -9.95807052e-02  5.77528663e-02  1.00585157e-02
  8.16443877e-04 -2.94898991e-02  8.38743150e-02  4.38129939e-02
  8.99515450e-02 -1.01767154e-02 -8.99034515e-02 -1.09004430e-01
 -4.60294075e-02  1.45063398e-03 -1.31311584e-02  5.35914600e-02
 -2.27901302e-02 -5.28352074e-02  4.59358841e-02  4.35100077e-03
  2.68802866e-02 -4.22906689e-03 -3.92052159e-03 -6.52429760e-02
 -7.92151466e-02  3.61274704e-02  2.21146327e-02 -2.61442252e-02
  9.28877573e-03 -5.99673390e-02  5.28173372e-02  3.41777387e-03
 -3.33853811e-02 -3.83662130e-03 -1.35152154e-02 -3.15774269e-02
  5.27114831e-02  7.15626823e-03  5.54407835e-02 -5.86947877e-08
 -1.60151735e-01 -1.10672556e-01  2.62681562e-02  7.32678920e-02
  8.42861012e-02 -2.72548348e-02  4.23873588e-03  1.77949406e-02
 -4.35076691e-02 -1.05457947e-01  2.69909818e-02  3.08259502e-02
  3.46934237e-02  1.09552511e-03  9.08810273e-02 -6.17262162e-02
  4.37610038e-02 -2.54827626e-02 -8.28933567e-02  5.33987060e-02
 -1.36219272e-02 -5.97499423e-02  2.43550539e-02 -1.47251223e-04
  1.35870352e-02  3.02574541e-02  4.05400582e-02  1.93789192e-02
  6.23647422e-02  3.81181650e-02 -1.51707865e-02  7.28108361e-02
  4.08562534e-02  2.00786553e-02 -1.78702604e-02  6.35692626e-02
 -3.85557264e-02 -5.90732275e-03  2.05060523e-02  4.76735421e-02
  3.86486948e-02 -3.25334258e-02 -5.17021790e-02  6.85103014e-02
  4.34166826e-02 -7.17041641e-02 -3.96585651e-02 -3.94417197e-02
  9.76124480e-02 -1.71046201e-02 -1.41657710e-01 -3.82582918e-02
  4.54543866e-02 -5.32940403e-02 -1.89228132e-02  3.36963385e-02
 -1.91339443e-03 -4.83533964e-02  6.85612787e-04  5.39465770e-02
  3.09636164e-02 -4.13024351e-02 -1.53585644e-02  4.66482081e-02]"
"/**
 * The Originator holds some important state that may change over time. It also
 * defines a method for saving the state inside a memento and another method for
 * restoring the state from it.
 */
class Originator {
    /**
     * For the sake of simplicity, the originator's state is stored inside a
     * single variable.
     */
    private state: string;

    constructor(state: string) {
        this.state = state;
        console.log(`Originator: My initial state is: ${state}`);
    }

    /**
     * The Originator's business logic may affect its internal state. Therefore,
     * the client should backup the state before launching methods of the
     * business logic via the save() method.
     */
    public doSomething(): void {
        console.log('Originator: I\'m doing something important.');
        this.state = this.generateRandomString(30);
        console.log(`Originator: and my state has changed to: ${this.state}`);
    }

    private generateRandomString(length: number = 10): string {
        const charSet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';

        return Array
            .apply(null, { length })
            .map(() => charSet.charAt(Math.floor(Math.random() * charSet.length)))
            .join('');
    }

    /**
     * Saves the current state inside a memento.
     */
    public save(): Memento {
        return new ConcreteMemento(this.state);
    }

    /**
     * Restores the Originator's state from a memento object.
     */
    public restore(memento: Memento): void {
        this.state = memento.getState();
        console.log(`Originator: My state has changed to: ${this.state}`);
    }
}

/**
 * The Memento interface provides a way to retrieve the memento's metadata, such
 * as creation date or name. However, it doesn't expose the Originator's state.
 */
interface Memento {
    getState(): string;

    getName(): string;

    getDate(): string;
}

/**
 * The Concrete Memento contains the infrastructure for storing the Originator's
 * state.
 */
class ConcreteMemento implements Memento {
    private state: string;

    private date: string;

    constructor(state: string) {
        this.state = state;
        this.date = new Date().toISOString().slice(0, 19).replace('T', ' ');
    }

    /**
     * The Originator uses this method when restoring its state.
     */
    public getState(): string {
        return this.state;
    }

    /**
     * The rest of the methods are used by the Caretaker to display metadata.
     */
    public getName(): string {
        return `${this.date} / (${this.state.substr(0, 9)}...)`;
    }

    public getDate(): string {
        return this.date;
    }
}

/**
 * The Caretaker doesn't depend on the Concrete Memento class. Therefore, it
 * doesn't have access to the originator's state, stored inside the memento. It
 * works with all mementos via the base Memento interface.
 */
class Caretaker {
    private mementos: Memento[] = [];

    private originator: Originator;

    constructor(originator: Originator) {
        this.originator = originator;
    }

    public backup(): void {
        console.log('\nCaretaker: Saving Originator\'s state...');
        this.mementos.push(this.originator.save());
    }

    public undo(): void {
        if (!this.mementos.length) {
            return;
        }
        const memento = this.mementos.pop();

        console.log(`Caretaker: Restoring state to: ${memento.getName()}`);
        this.originator.restore(memento);
    }

    public showHistory(): void {
        console.log('Caretaker: Here\'s the list of mementos:');
        for (const memento of this.mementos) {
            console.log(memento.getName());
        }
    }
}

/**
 * Client code.
 */
const originator = new Originator('Super-duper-super-puper-super.');
const caretaker = new Caretaker(originator);

caretaker.backup();
originator.doSomething();

caretaker.backup();
originator.doSomething();

caretaker.backup();
originator.doSomething();

console.log('');
caretaker.showHistory();

console.log('\nClient: Now, let\'s rollback!\n');
caretaker.undo();

console.log('\nClient: Once more!\n');
caretaker.undo();",TypeScript,Memento,Refactoring Guru,https://refactoring.guru/design-patterns/memento/typescript/example#example-0,"[-6.42877072e-02  8.29475001e-02  1.41973803e-02  1.35280949e-04
 -1.89088453e-02  2.00893972e-02 -4.24758391e-03  3.02237328e-02
  3.89841646e-02 -7.92215765e-03  2.60210969e-02 -2.12071389e-02
 -5.17320335e-02 -3.62057798e-02  4.20334190e-03  2.65683308e-02
 -7.19268471e-02  4.24707495e-02 -6.49318248e-02  9.23965243e-04
  6.53873906e-02 -5.43789156e-02 -3.29166092e-02 -2.07303017e-02
  2.65216269e-02  7.44031444e-02  3.51990201e-02 -4.14389297e-02
  2.69618575e-02  4.72749409e-04 -2.03106888e-02 -6.64223870e-03
 -7.91421160e-02 -3.21773738e-02 -5.43988943e-02  1.10039741e-01
 -7.52510056e-02 -1.57646406e-02 -1.74060278e-02 -4.82959449e-02
 -1.66634936e-02  8.39847922e-02 -3.86199281e-02 -7.18981773e-02
  3.88432071e-02 -7.90054649e-02 -9.61375684e-02  3.36498790e-03
  2.63726618e-02  7.33644608e-03  4.71154926e-03  4.00017574e-02
  3.11227161e-02  3.84361632e-02  4.93319184e-02  9.77167934e-02
  4.71153669e-02 -8.53126682e-03 -6.45577684e-02  3.63318436e-02
 -2.00511701e-02 -2.55517047e-02  2.33734921e-02 -3.93247567e-02
  5.16196787e-02 -2.57283412e-02  4.67973873e-02 -1.01553872e-02
  2.11563278e-02 -1.25540346e-02 -2.47076359e-02 -6.47576340e-03
  3.13154273e-02 -2.15422735e-02 -2.94571836e-02 -4.05407660e-02
 -3.70693877e-02  3.60175632e-02 -5.57946153e-02 -3.97601500e-02
  5.61682768e-02 -4.85067368e-02  1.22664673e-02 -8.92800186e-03
  3.18264402e-02  6.31211102e-02 -1.35576781e-02 -4.76548336e-02
  4.04472696e-03  3.49111073e-02 -5.01657166e-02 -6.80311993e-02
  5.06807379e-02 -5.12465602e-04 -4.90143560e-02  2.26403177e-02
 -2.47329823e-03  4.67034355e-02 -2.60211397e-02  1.00636333e-01
  2.79956553e-02  2.95014344e-02 -3.94613342e-03  3.17770801e-02
  1.79831237e-02 -2.86679473e-02 -4.92163189e-02 -5.16755767e-02
 -3.70797589e-02  5.65981455e-02 -3.98229100e-02  1.04713812e-01
 -2.66234931e-02  8.39944631e-02  1.69706922e-02 -2.42561027e-02
  1.65057238e-02  1.34824719e-02  4.50454932e-03  9.50412005e-02
  9.51912627e-02 -3.81635204e-02  3.25269438e-02 -1.71713717e-02
 -5.30386306e-02 -2.70427465e-02  6.90385774e-02  1.84319333e-33
  5.60205206e-02 -2.88578924e-02 -4.17299531e-02  4.39275056e-02
 -7.38518964e-03  6.29852489e-02 -5.10102604e-03  7.33269006e-02
 -1.07420664e-02 -6.99229911e-02  6.52624294e-02  3.64322774e-02
 -1.01190917e-02 -4.38619740e-02 -1.05980667e-03 -7.39883110e-02
  1.29415793e-02  2.09470354e-02  1.13915950e-01 -1.74502172e-02
  2.78399251e-02  6.77416176e-02 -3.18712220e-02 -5.24740554e-02
 -9.19194706e-03  2.44898647e-02  8.11610557e-03  8.18353370e-02
 -1.33185878e-01 -1.66882221e-02  1.04873143e-01 -2.12102905e-02
 -2.17299946e-02  9.96463839e-03  5.46795093e-02  3.54605392e-02
  1.37607362e-02 -6.39856085e-02 -1.25272959e-01 -1.45071924e-01
 -9.30176117e-03 -3.83544117e-02 -3.55065800e-02 -3.60998139e-02
 -6.02760687e-02 -1.30005836e-01  3.09254043e-02  1.62213352e-02
  2.04929560e-02 -2.89547276e-02 -4.02324609e-02  8.88530910e-02
 -1.95238348e-02 -1.01538442e-01 -3.14560309e-02  6.06274940e-02
  1.32106263e-02 -1.69718154e-02 -8.50115810e-03  8.09428189e-03
  4.74695340e-02 -2.42879963e-03 -3.87958396e-04  2.31085047e-02
 -4.17588167e-02  9.55006108e-02 -2.84152329e-02 -2.64179800e-02
  8.52241665e-02 -1.75540149e-02 -6.20086379e-02 -1.35003785e-02
  2.72387862e-02  4.34525870e-03  1.80671476e-02  2.69441046e-02
 -4.74703945e-02  1.44141214e-02 -9.45199654e-02 -1.26278907e-01
  1.08575588e-02 -1.84777491e-02 -6.73710778e-02  1.08246349e-01
  8.23231712e-02  3.69027108e-02  2.02066898e-02 -3.11473664e-02
  3.88418548e-02  8.73573422e-02 -1.49711147e-02 -5.64678609e-02
  2.97017377e-02  2.37251655e-03 -2.36155279e-03 -4.56095849e-33
  5.53141311e-02 -6.21603802e-02 -5.99180488e-03 -1.78025179e-02
 -9.60006565e-03 -7.36517683e-02 -3.72424684e-02  8.38918611e-02
 -1.19305380e-01 -6.76936731e-02 -3.10960449e-02  5.46094440e-02
  9.19301435e-02  1.54347289e-02  4.29320261e-02  1.20498180e-01
 -2.16677617e-02 -7.16375560e-02  8.53798119e-04 -6.95422143e-02
  4.80081560e-03  5.73791564e-02  2.40117963e-02  2.46361289e-02
 -8.31376389e-02  2.49470994e-02 -2.50456086e-03  2.07617898e-02
  4.24853452e-02 -6.93435594e-02  5.83950244e-02 -3.31405625e-02
 -4.74946648e-02  2.75028460e-02  1.42527819e-02 -6.23007119e-02
 -1.76758412e-02  3.80491652e-02 -5.70678897e-02  5.15071377e-02
  3.81602533e-02 -1.39093565e-04 -5.36136478e-02  2.95596401e-04
 -1.09689487e-02 -2.63389982e-02 -2.69296467e-02  6.99589700e-02
  8.78872722e-02  4.53882432e-03  2.59689111e-02 -1.21842742e-01
 -8.12044218e-02 -4.54059541e-02  1.89478192e-02  2.35613398e-02
  9.80571210e-02 -1.07590884e-01 -6.97997911e-03  1.95787679e-02
 -4.14118804e-02 -6.34566024e-02 -1.01970220e-02  4.30261642e-02
  1.33660166e-02 -6.60109520e-02  1.81136839e-03  1.37728441e-03
  1.23820473e-02 -3.61180538e-03  1.09835360e-02  6.04729503e-02
  3.07643204e-04 -5.76589853e-02  1.21963538e-01  3.19724269e-02
 -3.05304974e-02 -8.16221908e-02  5.06479442e-02 -4.00459729e-02
 -8.62548947e-02 -3.50448601e-02 -2.50647999e-02 -5.86220510e-02
 -1.47327045e-02 -9.27523151e-02 -2.33219247e-02  3.47406231e-02
 -5.17088035e-03 -7.05162734e-02 -2.89713480e-02  9.51677710e-02
 -8.36208463e-02 -2.22323500e-02 -2.43429989e-02 -5.68076821e-08
 -7.93301165e-02 -1.20019317e-02  4.67013083e-02  5.96403405e-02
  4.67024930e-02 -1.11176156e-01  2.24292167e-02 -3.85343358e-02
 -1.84432641e-02 -6.25958592e-02 -2.82355696e-02  4.40995209e-02
  3.10016144e-02 -6.08213134e-02  3.24307755e-03 -3.17199528e-02
  2.31944919e-02  9.51711461e-03 -4.83932681e-02  7.27905110e-02
 -3.51444371e-02 -7.72518218e-02  5.27593717e-02 -7.95577560e-03
  3.90458144e-02 -2.49480978e-02  4.00238931e-02  9.64355245e-02
 -9.61294770e-03  9.51310620e-02  1.05029985e-03  6.61993623e-02
  8.07573572e-02  1.02038998e-02 -7.02944025e-02 -1.26834362e-04
  1.53655577e-02 -1.74017213e-02  5.74074313e-02  1.07998818e-01
  1.36457250e-01 -6.19974807e-02 -4.58969511e-02  6.82229176e-02
  2.00515129e-02 -1.01633901e-02 -2.92547769e-03 -1.17515307e-02
  5.46329096e-02 -2.55278870e-02 -1.06520973e-01 -3.42678875e-02
  6.54154969e-03  2.51500262e-03  2.41917018e-02 -8.58730357e-03
  4.83500585e-02  4.47313022e-03  6.53238446e-02  4.04476710e-02
  1.83572825e-02 -4.14774334e-03  5.13529852e-02 -1.11976266e-02]"
"/**
 * The Context defines the interface of interest to clients. It also maintains a
 * reference to an instance of a State subclass, which represents the current
 * state of the Context.
 */
class Context {
    /**
     * @type {State} A reference to the current state of the Context.
     */
    private state: State;

    constructor(state: State) {
        this.transitionTo(state);
    }

    /**
     * The Context allows changing the State object at runtime.
     */
    public transitionTo(state: State): void {
        console.log(`Context: Transition to ${(<any>state).constructor.name}.`);
        this.state = state;
        this.state.setContext(this);
    }

    /**
     * The Context delegates part of its behavior to the current State object.
     */
    public request1(): void {
        this.state.handle1();
    }

    public request2(): void {
        this.state.handle2();
    }
}

/**
 * The base State class declares methods that all Concrete State should
 * implement and also provides a backreference to the Context object, associated
 * with the State. This backreference can be used by States to transition the
 * Context to another State.
 */
abstract class State {
    protected context: Context;

    public setContext(context: Context) {
        this.context = context;
    }

    public abstract handle1(): void;

    public abstract handle2(): void;
}

/**
 * Concrete States implement various behaviors, associated with a state of the
 * Context.
 */
class ConcreteStateA extends State {
    public handle1(): void {
        console.log('ConcreteStateA handles request1.');
        console.log('ConcreteStateA wants to change the state of the context.');
        this.context.transitionTo(new ConcreteStateB());
    }

    public handle2(): void {
        console.log('ConcreteStateA handles request2.');
    }
}

class ConcreteStateB extends State {
    public handle1(): void {
        console.log('ConcreteStateB handles request1.');
    }

    public handle2(): void {
        console.log('ConcreteStateB handles request2.');
        console.log('ConcreteStateB wants to change the state of the context.');
        this.context.transitionTo(new ConcreteStateA());
    }
}

/**
 * The client code.
 */
const context = new Context(new ConcreteStateA());
context.request1();
context.request2();",TypeScript,State,Refactoring Guru,https://refactoring.guru/design-patterns/state/typescript/example#example-0,"[-6.30205050e-02  2.26055942e-02  3.14863250e-02  1.28793567e-02
 -2.04665810e-02 -1.26206139e-02  3.66451219e-02  3.27386037e-02
  1.92005802e-02 -5.09303287e-02 -2.27484442e-02 -7.13833943e-02
 -2.04947423e-02  8.81216209e-03  1.07565492e-01  5.25264628e-02
 -2.39587501e-02  2.75040176e-02 -1.50699653e-02  7.59573355e-02
  9.53046232e-02 -5.61608709e-02 -4.18161526e-02 -5.11049107e-02
 -2.45060213e-02  3.99962589e-02 -3.90290879e-02 -9.36524048e-02
  8.18477869e-02  1.42397918e-02  3.92252952e-03  3.19619104e-02
 -1.34434476e-01 -3.65165919e-02 -6.42583221e-02  7.67540038e-02
 -1.60329100e-02 -2.63592843e-02 -3.63498814e-02  7.94264767e-03
  3.25627886e-02  7.50217065e-02 -1.83812268e-02 -4.33698110e-02
  3.21878083e-02 -5.38661182e-02 -2.61858758e-02 -2.80190283e-03
 -1.48965986e-02 -1.97713412e-02 -3.03713102e-02 -3.21982726e-02
 -3.36430687e-03  1.08566312e-02 -3.26398946e-02  8.67367089e-02
  5.99414557e-02  1.38081700e-01  3.24670151e-02  2.18368135e-02
 -1.72380619e-02 -2.21552141e-02  1.18983835e-02  2.54108524e-03
  1.12391509e-01  1.50951287e-02  2.95740440e-02 -8.66036490e-02
  6.12323545e-03 -8.59560259e-03 -9.17741470e-03  1.05337554e-03
  1.85141359e-02 -3.91139090e-02 -2.50908677e-02 -8.57576802e-02
 -3.97068970e-02  8.58133733e-02 -1.69914484e-03 -7.10559562e-02
  7.39497617e-02  5.93907433e-03 -2.02057343e-02 -4.97833304e-02
  3.73935960e-02  7.21608177e-02 -3.48366164e-02 -9.20135677e-02
  3.63548216e-03  3.83304693e-02 -2.39737239e-02 -4.49648649e-02
 -6.32720254e-03  6.46282583e-02 -1.34014590e-02  1.01083685e-02
 -2.87604760e-02 -2.57987063e-03  4.43131700e-02  1.06539033e-01
 -4.17771144e-03  2.46997662e-02 -1.68056171e-02  1.95074752e-02
 -5.65288728e-03 -2.11880412e-02 -9.03851986e-02 -9.36526898e-03
 -9.42378715e-02  3.18801552e-02 -7.42767192e-03  2.84032039e-02
 -1.03801833e-02  2.35959496e-02 -1.92169286e-02  2.24052332e-02
  7.71184415e-02 -1.34628015e-02  8.13548977e-04  8.54065418e-02
  5.57370409e-02 -7.16999695e-02  4.17967141e-03 -6.88497201e-02
 -5.20141348e-02 -9.24262702e-02  2.20356360e-02  3.37916491e-34
  7.37686306e-02 -1.12806588e-01 -7.48498887e-02  8.43641981e-02
  2.85719279e-02  5.21226935e-02  5.45553006e-02 -2.10088305e-03
 -6.36137873e-02 -4.86174673e-02  1.24570340e-01  7.68435895e-02
 -9.98458546e-03 -3.37608904e-02  5.17205894e-02 -8.61700624e-02
  4.80270013e-02  1.64934751e-02  1.08752906e-01 -2.95237321e-02
 -1.82631109e-02  8.52599069e-02 -5.52758388e-02 -2.14143768e-02
 -3.46366293e-03  4.97678667e-02 -6.01639086e-03  1.43458769e-02
 -1.24650568e-01 -1.13457885e-04  5.11879139e-02  4.13091443e-02
 -1.15274914e-01  9.99765918e-02  4.30458337e-02 -1.76712144e-02
  3.17845903e-02 -1.84536241e-02 -1.04722440e-01 -1.77743942e-01
  2.65400503e-02 -2.46525370e-02 -3.25424448e-02  3.28460597e-02
 -4.03174199e-02 -1.21759683e-01 -7.63459457e-03  1.91919599e-02
  1.30257551e-02 -5.88646233e-02 -4.85611986e-03  9.35447514e-02
  4.83087776e-03 -5.42328432e-02  5.88698834e-02 -4.94157383e-03
 -6.98207617e-02  2.31806096e-02 -1.83033086e-02  4.99241287e-03
  3.57781202e-02 -2.02558879e-02 -5.18653169e-02  5.59064820e-02
 -1.74717922e-02  8.18589777e-02 -1.21342957e-01 -4.51986343e-02
  4.62852232e-02 -5.15024960e-02 -1.54943466e-02  2.85564996e-02
  7.45303137e-03  5.06076925e-02  5.46906283e-03 -9.04635713e-03
 -8.27958435e-02  2.85282955e-02 -8.76697004e-02 -7.91511983e-02
  2.25363430e-02  3.44106928e-02 -6.62914813e-02  1.48047194e-01
  3.66395758e-03  7.25384578e-02  1.49163473e-02 -2.13527232e-02
  9.71976260e-04  4.40586172e-02 -5.86013794e-02 -4.14304920e-02
  3.95979546e-02  3.40090431e-02  3.90649810e-02 -2.87294089e-33
  5.10868616e-02 -3.91589664e-02 -5.83462007e-02  3.35286697e-03
 -1.55753149e-02 -3.19275856e-02  3.76956686e-02  2.55880790e-04
 -5.26129492e-02  4.98490594e-02 -1.00414595e-02  2.10151970e-02
  7.30787814e-02  4.41672392e-02 -7.23537207e-02  6.34309873e-02
  7.22497189e-03 -4.55995500e-02  4.48619714e-03 -1.35313775e-02
  1.22218765e-02  4.89938483e-02 -5.48677258e-02  2.53759697e-02
 -5.58574311e-02  3.46116046e-03 -8.43070447e-02  3.81616242e-02
  1.72881025e-03 -7.03056622e-03 -5.20925783e-02 -4.92683090e-02
 -1.86401773e-02  7.94432759e-02 -1.55996205e-03 -6.82267407e-03
 -8.35087337e-03  2.44687609e-02 -4.03049178e-02 -1.79301612e-02
  2.12274157e-02 -4.48110253e-02  5.09067699e-02  9.65289865e-03
  5.76977618e-02  7.62874726e-03  2.14647539e-02 -1.21777821e-02
 -4.58782837e-02 -4.66301925e-02  1.33769335e-02  3.90160852e-03
 -5.20976186e-02 -1.36505207e-02 -3.04997130e-03  3.00039705e-02
  7.05167130e-02 -9.51189324e-02  1.78149506e-03  1.60425790e-02
  7.75326863e-02 -2.06490122e-02 -1.74873248e-02  5.31000420e-02
  8.05756524e-02 -7.63401464e-02 -5.74053824e-02 -8.83521289e-02
  7.46269301e-02  1.09747853e-02 -2.40223017e-03  7.76815834e-03
  4.92708012e-02 -2.66533755e-02  1.22473575e-01 -9.29995626e-02
  5.76523542e-02 -9.44333598e-02  4.52214889e-02 -2.29056962e-02
 -4.79427539e-02 -5.77813573e-02  1.05500836e-02 -5.80323301e-02
  2.79009733e-02  3.55944298e-02 -3.25779654e-02  4.01754566e-02
 -2.17289925e-02  1.53416104e-03 -1.23516116e-02  3.76168229e-02
 -5.39609306e-02 -2.84986142e-02  2.05251947e-03 -4.92876282e-08
 -5.73252514e-02  1.78718604e-02 -2.01274101e-02  2.07720995e-02
  1.29449544e-02  1.60217716e-03  7.28460436e-04  6.66267285e-03
 -2.93357819e-02 -5.25143594e-02 -7.29765445e-02  8.46829116e-02
  1.03272974e-01 -1.20370938e-02 -2.27194987e-02 -2.51865224e-03
  3.84515040e-02 -1.09780878e-02 -2.43247598e-02  8.14160239e-03
 -6.24656752e-02 -6.31229803e-02  2.22311709e-02  3.21301520e-02
 -9.15484224e-03 -6.58540800e-02  1.00926027e-01  9.73624289e-02
 -1.12966737e-02  5.20494692e-02 -1.08069129e-01  7.40879551e-02
 -2.83657713e-03 -3.61757498e-04 -7.84320459e-02  3.63049507e-02
 -1.29584298e-02 -5.35890693e-03  5.46994992e-02  7.32830912e-02
  9.64293331e-02 -2.58921124e-02 -9.11175907e-02  7.04938769e-02
 -9.75382794e-03  2.78529078e-02  7.73537951e-03 -4.16138762e-04
  6.77646846e-02 -1.78554635e-02 -4.10469137e-02 -1.46709345e-02
 -5.91713265e-02  1.22538824e-02  1.98365711e-02  3.25488523e-02
  1.07872132e-02 -2.55501345e-02 -1.06788594e-02  3.45807709e-02
  2.29625427e-03  8.44580214e-03  1.23376222e-02 -2.77820844e-02]"
"/**
 * The Abstract Class defines a template method that contains a skeleton of some
 * algorithm, composed of calls to (usually) abstract primitive operations.
 *
 * Concrete subclasses should implement these operations, but leave the template
 * method itself intact.
 */
abstract class AbstractClass {
    /**
     * The template method defines the skeleton of an algorithm.
     */
    public templateMethod(): void {
        this.baseOperation1();
        this.requiredOperations1();
        this.baseOperation2();
        this.hook1();
        this.requiredOperation2();
        this.baseOperation3();
        this.hook2();
    }

    /**
     * These operations already have implementations.
     */
    protected baseOperation1(): void {
        console.log('AbstractClass says: I am doing the bulk of the work');
    }

    protected baseOperation2(): void {
        console.log('AbstractClass says: But I let subclasses override some operations');
    }

    protected baseOperation3(): void {
        console.log('AbstractClass says: But I am doing the bulk of the work anyway');
    }

    /**
     * These operations have to be implemented in subclasses.
     */
    protected abstract requiredOperations1(): void;

    protected abstract requiredOperation2(): void;

    /**
     * These are ""hooks."" Subclasses may override them, but it's not mandatory
     * since the hooks already have default (but empty) implementation. Hooks
     * provide additional extension points in some crucial places of the
     * algorithm.
     */
    protected hook1(): void { }

    protected hook2(): void { }
}

/**
 * Concrete classes have to implement all abstract operations of the base class.
 * They can also override some operations with a default implementation.
 */
class ConcreteClass1 extends AbstractClass {
    protected requiredOperations1(): void {
        console.log('ConcreteClass1 says: Implemented Operation1');
    }

    protected requiredOperation2(): void {
        console.log('ConcreteClass1 says: Implemented Operation2');
    }
}

/**
 * Usually, concrete classes override only a fraction of base class' operations.
 */
class ConcreteClass2 extends AbstractClass {
    protected requiredOperations1(): void {
        console.log('ConcreteClass2 says: Implemented Operation1');
    }

    protected requiredOperation2(): void {
        console.log('ConcreteClass2 says: Implemented Operation2');
    }

    protected hook1(): void {
        console.log('ConcreteClass2 says: Overridden Hook1');
    }
}

/**
 * The client code calls the template method to execute the algorithm. Client
 * code does not have to know the concrete class of an object it works with, as
 * long as it works with objects through the interface of their base class.
 */
function clientCode(abstractClass: AbstractClass) {
    // ...
    abstractClass.templateMethod();
    // ...
}

console.log('Same client code can work with different subclasses:');
clientCode(new ConcreteClass1());
console.log('');

console.log('Same client code can work with different subclasses:');
clientCode(new ConcreteClass2());",TypeScript,Template Method,Refactoring Guru,https://refactoring.guru/design-patterns/template-method/typescript/example#example-0,"[-7.93825462e-02  3.14211808e-02  8.70065019e-02 -3.61592434e-02
 -4.19920571e-02 -3.08809150e-02 -2.51849853e-02  2.49098036e-02
 -3.15491557e-02 -4.55878899e-02 -1.39737483e-02 -1.85958259e-02
 -7.38951787e-02  6.58239238e-03  5.16594350e-02  7.25002363e-02
  1.84472539e-02  3.84106413e-02 -5.58779389e-02  7.92870298e-02
  9.85117853e-02 -5.51585034e-02 -7.54980370e-02  4.40956764e-02
 -5.64242564e-02  1.79911666e-02 -5.13726287e-02 -2.25429982e-02
  6.41489998e-02  2.77505312e-02 -4.74717692e-02  1.22907981e-02
  9.30636190e-03  6.62542209e-02 -7.28495568e-02  5.35548776e-02
  1.99007709e-02 -3.14326882e-02 -4.83710170e-02  1.82364937e-02
 -6.01543710e-02  4.97878082e-02 -4.30782214e-02 -3.48786972e-02
  6.40063062e-02 -8.75521731e-03 -2.64157187e-02 -7.21000507e-02
 -6.26930520e-02 -6.15340471e-03  2.45365128e-02  5.03947996e-02
  3.39096412e-02  1.53611563e-02 -4.35109809e-02 -2.92707812e-02
  4.56633419e-02  1.73209347e-02  3.71181406e-02 -7.73637556e-03
 -4.37503383e-02 -1.99510120e-02  7.07540568e-03  2.35867724e-02
  2.61014737e-02  1.16723003e-02  8.19340721e-03 -5.08493967e-02
  1.80265214e-02  7.53095746e-02 -2.95572318e-02 -2.36461610e-02
  3.83291556e-03  3.24691609e-02 -5.34484759e-02  1.75688881e-02
  3.93996648e-02  9.02987644e-02 -8.24624300e-02 -1.54773548e-01
  4.88248952e-02  3.42760198e-02 -4.95395972e-04 -5.65702841e-02
  6.16270192e-02  5.40593490e-02 -3.22755687e-02 -2.32062470e-02
 -1.91514678e-02  6.04778230e-02  1.77344307e-02 -3.95969972e-02
 -1.00398630e-01 -2.76657436e-02 -8.09421577e-03 -4.87120412e-02
  2.47616470e-02 -1.09693094e-03 -1.49092823e-03  9.31823030e-02
 -3.96242104e-02  3.51958685e-02 -6.87292311e-03 -2.11897101e-02
  1.17079318e-01  6.06098846e-02 -7.48514980e-02 -9.71740931e-02
 -2.98097674e-02  1.44709153e-02  2.13935901e-03 -3.10613047e-02
 -9.60637722e-03 -1.55792898e-02 -1.74000449e-02  6.17425814e-02
  6.44741133e-02  1.04914710e-03 -1.08151846e-02  8.83713067e-02
  1.14523247e-02 -2.96386331e-02  1.14885740e-01  3.48221771e-02
  1.88156422e-02 -3.71641964e-02 -6.09732717e-02  3.93895043e-33
  3.46282907e-02 -6.95184767e-02 -9.22318399e-02  8.98198411e-02
  1.37741957e-02 -3.02870031e-02  3.93833257e-02  2.78937835e-02
 -5.52827194e-02  1.25955632e-02  5.87248318e-02  9.45026241e-03
  5.58567718e-02  1.01896496e-02  1.32516712e-01  1.31125264e-02
  6.12343214e-02 -1.04439212e-02  6.78155050e-02 -1.09644728e-02
  1.51423170e-04  2.30033156e-02 -1.06973602e-02  2.66920198e-02
 -3.83589603e-02  9.68824178e-02  1.89385079e-02 -3.01579311e-02
 -9.52526107e-02  1.68431289e-02  1.25707444e-02  4.00704378e-03
  1.66375916e-02  8.08054581e-02 -9.95789841e-03  1.91102661e-02
  4.87557352e-02 -5.14936857e-02 -5.25067970e-02 -8.20675567e-02
  8.17907741e-04 -1.49734803e-02 -1.41020287e-02 -4.67442237e-02
  8.90106782e-02 -1.19898379e-01 -8.53113234e-02 -5.87167963e-03
  7.51185566e-02 -6.62321746e-02  2.36737188e-02  6.58075213e-02
  2.83677801e-02 -6.99070394e-02  5.45686260e-02 -4.70360443e-02
 -1.08930916e-02  4.76125441e-02  4.38893773e-03  6.00768961e-02
 -4.39150520e-02 -7.51829706e-03 -7.24022761e-02  2.33780183e-02
 -1.07090399e-01  2.24294458e-02 -9.17658284e-02 -1.99243389e-02
  3.15446854e-02 -2.57809591e-02  1.84780192e-02  2.61432044e-02
 -3.56963575e-02  7.43046850e-02 -1.80337727e-02  8.20372719e-03
  6.08337149e-02 -3.11017521e-02  2.26458274e-02 -2.67392229e-02
 -5.88397905e-02  4.12009284e-02  5.16306721e-02  3.75700518e-02
 -6.07656687e-02 -1.08654937e-02  8.76220316e-02  3.98993380e-02
  1.43653601e-02  2.22626943e-02 -6.84476122e-02 -3.33342515e-02
 -2.11353116e-02 -2.18169857e-02  7.31092095e-02 -6.66927226e-33
  2.91131530e-02  9.57641900e-02 -7.91525319e-02 -3.45391743e-02
 -8.15351680e-02  6.11983202e-02 -9.97689441e-02 -9.32390243e-02
 -8.83426368e-02  2.85509806e-02 -1.50477812e-02  3.52070248e-03
  3.18300985e-02 -4.35790420e-03  2.03555971e-02 -3.37629840e-02
 -1.22321941e-01 -8.18795413e-02 -3.08918282e-02  3.92367095e-02
  1.98506881e-02  7.72983655e-02  4.47659343e-02  5.21245264e-02
  3.41561586e-02  2.06101276e-02 -1.28336489e-01  1.36186376e-01
  8.30353796e-02  5.76012069e-03 -4.47048098e-02  1.06686365e-03
 -2.17515212e-02  1.53916124e-02  8.44890177e-02  2.73220092e-02
 -5.87311201e-03  9.57958624e-02  2.22464860e-03 -2.15004012e-02
  1.54470177e-02 -6.63598403e-02 -6.94935694e-02 -2.59258077e-02
 -4.48969007e-03 -4.02493365e-02  3.46761383e-03 -2.79978011e-02
 -1.99472961e-05 -7.29851797e-02 -6.05529895e-05 -5.03059812e-02
 -1.04705915e-02  7.18162581e-02 -5.60261756e-02  3.61297801e-02
  4.61768061e-02 -6.49656504e-02 -1.74012296e-02  5.33459261e-02
  1.01357751e-01 -2.26259157e-02 -6.55840151e-03  5.41539155e-02
  1.08186845e-02  4.63881576e-03  9.17288382e-03 -3.12354676e-02
 -3.94385941e-02  5.28823696e-02 -1.91818811e-02  2.57441215e-02
 -8.15225951e-03 -8.72820336e-03  6.27345666e-02  4.10407856e-02
  3.68443504e-02 -1.77563969e-02 -1.44235333e-02 -4.69345078e-02
 -4.58385907e-02 -4.92425002e-02  3.39163560e-03  3.42255668e-03
 -2.78870272e-03 -7.21101016e-02  3.67796677e-03  4.00441606e-03
 -5.81465326e-02 -6.26653284e-02  1.12725850e-02  4.96750027e-02
 -7.89100677e-02 -2.97601838e-02 -2.46100612e-02 -5.60373294e-08
 -5.21135051e-03 -1.81900170e-02  4.63513599e-04 -1.31848361e-02
  6.86509311e-02 -4.27259691e-02 -2.34450866e-02 -7.07808882e-03
 -5.62550090e-02 -7.13546276e-02 -8.75662938e-02  7.24984631e-02
  2.32079942e-02 -3.11697610e-02 -2.42107711e-03 -2.99257170e-02
 -4.71562669e-02 -3.81214432e-02 -6.32873848e-02  3.68879512e-02
 -7.57363141e-02 -5.25551699e-02 -9.91661008e-03 -6.28613755e-02
 -1.10853694e-01 -4.46624048e-02  3.79162207e-02  8.86457860e-02
 -1.25424433e-02  9.83475670e-02 -8.09013546e-02  5.91979250e-02
 -3.77144925e-02  5.66316582e-02  3.93643975e-02  2.43660677e-02
  4.22934741e-02 -2.91374587e-02 -5.18484339e-02  3.21088806e-02
  6.31116554e-02 -5.71148880e-02 -3.65184620e-02  1.40904477e-02
  7.64965117e-02  2.45357268e-02 -2.44789775e-02 -3.89147066e-02
  4.33887020e-02  9.72994715e-02 -3.32259685e-02  5.00681363e-02
 -1.89499892e-02  3.46206054e-02 -8.42563137e-02  3.71648036e-02
  4.93659265e-03 -9.41500738e-02  3.80664878e-02 -3.58200669e-02
 -1.70858297e-02  7.87542574e-03  1.36640385e-01 -4.11145501e-02]"
"/**
 * The Command interface declares a method for executing a command.
 */
interface Command {
    execute(): void;
}

/**
 * Some commands can implement simple operations on their own.
 */
class SimpleCommand implements Command {
    private payload: string;

    constructor(payload: string) {
        this.payload = payload;
    }

    public execute(): void {
        console.log(`SimpleCommand: See, I can do simple things like printing (${this.payload})`);
    }
}

/**
 * However, some commands can delegate more complex operations to other objects,
 * called ""receivers.""
 */
class ComplexCommand implements Command {
    private receiver: Receiver;

    /**
     * Context data, required for launching the receiver's methods.
     */
    private a: string;

    private b: string;

    /**
     * Complex commands can accept one or several receiver objects along with
     * any context data via the constructor.
     */
    constructor(receiver: Receiver, a: string, b: string) {
        this.receiver = receiver;
        this.a = a;
        this.b = b;
    }

    /**
     * Commands can delegate to any methods of a receiver.
     */
    public execute(): void {
        console.log('ComplexCommand: Complex stuff should be done by a receiver object.');
        this.receiver.doSomething(this.a);
        this.receiver.doSomethingElse(this.b);
    }
}

/**
 * The Receiver classes contain some important business logic. They know how to
 * perform all kinds of operations, associated with carrying out a request. In
 * fact, any class may serve as a Receiver.
 */
class Receiver {
    public doSomething(a: string): void {
        console.log(`Receiver: Working on (${a}.)`);
    }

    public doSomethingElse(b: string): void {
        console.log(`Receiver: Also working on (${b}.)`);
    }
}

/**
 * The Invoker is associated with one or several commands. It sends a request to
 * the command.
 */
class Invoker {
    private onStart: Command;

    private onFinish: Command;

    /**
     * Initialize commands.
     */
    public setOnStart(command: Command): void {
        this.onStart = command;
    }

    public setOnFinish(command: Command): void {
        this.onFinish = command;
    }

    /**
     * The Invoker does not depend on concrete command or receiver classes. The
     * Invoker passes a request to a receiver indirectly, by executing a
     * command.
     */
    public doSomethingImportant(): void {
        console.log('Invoker: Does anybody want something done before I begin?');
        if (this.isCommand(this.onStart)) {
            this.onStart.execute();
        }

        console.log('Invoker: ...doing something really important...');

        console.log('Invoker: Does anybody want something done after I finish?');
        if (this.isCommand(this.onFinish)) {
            this.onFinish.execute();
        }
    }

    private isCommand(object): object is Command {
        return object.execute !== undefined;
    }
}

/**
 * The client code can parameterize an invoker with any commands.
 */
const invoker = new Invoker();
invoker.setOnStart(new SimpleCommand('Say Hi!'));
const receiver = new Receiver();
invoker.setOnFinish(new ComplexCommand(receiver, 'Send email', 'Save report'));

invoker.doSomethingImportant();",TypeScript,Command,Refactoring Guru,https://refactoring.guru/design-patterns/command/typescript/example#example-0,"[-5.86337075e-02  3.30686271e-02  2.69839051e-03  1.56841464e-02
 -2.03610417e-02 -2.62825917e-02  1.92426052e-02  1.45594366e-02
 -5.00872685e-03  2.09633615e-02 -1.51731782e-02 -1.76843051e-02
  2.40900763e-03  3.31753492e-02  1.08947977e-01  1.35520531e-03
  4.43882085e-02  2.23427103e-03 -1.07727177e-01  5.59184998e-02
  1.06259048e-01 -5.68092754e-03 -2.19431128e-02 -1.79103017e-02
 -1.01396151e-01 -4.35332656e-02  8.19804799e-03 -1.33717835e-01
 -1.28793987e-02 -3.95741984e-02 -3.79846953e-02  2.91654840e-02
 -7.46189952e-02  3.96347530e-02 -1.29569530e-01  1.01550572e-01
  8.06415007e-02  5.34106046e-03 -3.94521281e-02 -4.42854576e-02
  2.16397271e-02  7.21412376e-02 -8.24048892e-02 -5.41725792e-02
  2.62359269e-02 -1.06002741e-01 -9.27407444e-02 -3.38542238e-02
 -3.15986723e-02 -4.93874215e-02  2.39848741e-03  3.40112932e-02
  2.67344825e-02  3.14300954e-02  1.15594864e-02  1.00750374e-02
  1.08220046e-02  1.21689327e-02  5.66696078e-02 -7.93373305e-03
 -4.80085425e-02  1.55197503e-03 -2.35377289e-02 -4.40392224e-03
  8.72946829e-02 -7.88235292e-02  3.45192477e-02  4.23540687e-03
  1.44023085e-02  3.33234556e-02 -2.49336697e-02 -9.46846418e-03
 -3.53379138e-02  6.76953048e-02 -1.55660266e-03 -4.21432108e-02
  5.03392741e-02  6.39209151e-02 -1.06837712e-01 -5.23380563e-02
 -9.92571097e-03 -1.55086564e-02 -5.86180799e-02 -4.61322069e-03
  9.42021608e-03  6.92267865e-02 -2.20422223e-02 -2.95848083e-02
  3.43206227e-02  8.55897143e-02 -6.39159232e-02 -3.71457972e-02
 -4.10153754e-02  1.76462010e-02  3.52379568e-02  1.44936680e-03
 -3.55457067e-02 -5.16020618e-02  2.25770157e-02  7.89153054e-02
 -2.15244088e-02  5.03438758e-04  5.46794571e-03 -5.21802865e-02
  6.41941801e-02 -1.23204896e-02 -4.93469015e-02 -8.45047385e-02
  1.87148585e-03  1.31172710e-03  2.77108018e-04 -3.55711989e-02
 -3.43155190e-02 -1.15669547e-02  1.92024615e-02  7.24475086e-02
  7.43848979e-02  6.28219638e-03  4.36157510e-02  3.80832404e-02
  5.41292839e-02 -1.78027283e-02  6.03768118e-02 -1.22199906e-02
  2.23288331e-02 -2.94921659e-02 -3.17425355e-02  6.95939675e-33
  8.04738551e-02 -7.29479715e-02 -6.17167875e-02  1.07978433e-01
  1.84758920e-02  8.41137171e-02  6.39634356e-02  7.07349256e-02
  9.54646990e-03 -3.25362422e-02  2.61712167e-02  3.50764692e-02
  2.42622476e-02  1.79634020e-02  7.02092499e-02 -2.45841071e-02
  7.35609084e-02 -2.80173449e-03  8.26667063e-03  1.18492059e-02
  3.04082185e-02  2.89360210e-02 -6.97709695e-02  2.93310434e-02
  2.59796828e-02 -1.18860854e-02  1.27989659e-03  2.67132856e-02
 -5.83914146e-02  1.61715376e-03  1.10762700e-01  2.11467277e-02
 -5.32606617e-02  7.89909139e-02 -4.34479164e-03  5.11874259e-03
 -1.91263575e-02  6.17100717e-03 -3.02056819e-02 -1.59448206e-01
 -5.19130677e-02 -4.75836582e-02 -7.65971914e-02 -1.17010418e-02
 -5.39665781e-02 -1.51601553e-01 -6.42189756e-02 -4.19564173e-02
  7.72554129e-02 -4.32195887e-02  3.96549851e-02  6.94685280e-02
  5.41916713e-02 -5.49016073e-02  4.21885811e-02  3.96696106e-02
 -1.84101760e-02 -5.61255496e-03 -1.84833016e-02  1.73236169e-02
 -4.63620201e-02 -3.73019502e-02 -3.35482508e-02  7.98634812e-02
 -1.21160587e-02  2.85169017e-02 -6.59462512e-02 -7.06729293e-02
  6.05244599e-02 -7.93104619e-02 -6.85449541e-02  3.25997435e-02
 -3.13926376e-02 -2.30204239e-02  5.42657562e-02  4.10353579e-02
 -5.24499966e-03 -2.83743888e-02 -2.40511112e-02 -3.94454040e-02
 -1.73118077e-02  2.72073075e-02 -2.28992254e-02  1.15574136e-01
 -4.29396629e-02  7.12803826e-02  1.15057491e-02  1.84196397e-03
  4.66094017e-02  3.59832495e-02 -4.02788594e-02  3.98715399e-02
 -7.25726485e-02  1.21582497e-03  2.70266961e-02 -9.99082477e-33
  5.56223579e-02  9.57559571e-02 -7.31459856e-02  6.48348732e-03
 -2.95305494e-02  2.50788368e-02 -3.93211506e-02 -7.84361735e-02
 -1.41726226e-01 -5.46261407e-02 -9.14684683e-02  3.79119851e-02
  1.67433843e-02 -1.98348463e-02  2.97580697e-02  1.52258864e-02
 -1.46024060e-02 -2.23371480e-02  6.84879534e-03 -1.35207549e-02
 -1.72065124e-02  6.43836111e-02  1.08940572e-01 -4.97606322e-02
 -6.93882583e-03  2.30020192e-03 -7.54301995e-02  1.25602767e-01
 -7.33201508e-04  1.63120423e-02  5.61839268e-02 -3.11373491e-02
  1.73677970e-02 -5.99864796e-02 -2.20200662e-02 -3.90919782e-02
  5.39561771e-02  1.01825878e-01  8.80427286e-03 -1.51252626e-02
  8.91395137e-02 -5.71525954e-02  4.24096063e-02 -3.65439989e-02
  3.14517273e-03 -1.00119308e-01  4.07331176e-02 -7.25784758e-03
 -3.89710180e-02  1.62391067e-02 -2.01682802e-02 -6.15979023e-02
 -3.45958956e-02  2.59961355e-02 -2.24165991e-02  6.39506849e-03
  7.83988833e-02 -5.61586395e-02  5.66661507e-02  2.76952144e-02
  4.53808792e-02 -4.65982258e-02  2.08696462e-02  4.35068384e-02
 -4.65458632e-03 -3.91651914e-02  5.30800261e-02 -6.09450974e-02
  9.67162102e-02  2.75712218e-02  9.48267896e-03  4.65695886e-03
 -6.83223736e-03 -1.38138114e-02  7.80057609e-02 -1.26816006e-03
  4.25359327e-03 -1.21667147e-01 -4.38868208e-03 -2.23274808e-02
 -3.00864335e-02 -5.81534728e-02 -2.90018804e-02 -3.49061526e-02
  2.14083269e-02 -3.22564952e-02  3.74915153e-02  3.36480998e-02
 -1.10295601e-02 -3.72505449e-02 -2.87495386e-02  6.23819567e-02
 -5.19807488e-02 -1.47962319e-02 -4.87159677e-02 -6.73219702e-08
 -1.68904047e-02 -6.56398013e-02 -1.48220593e-02  5.66494204e-02
  3.45436507e-03 -6.87842593e-02 -5.06424271e-02 -7.39158094e-02
  7.47245038e-03 -2.89471056e-02 -5.98419607e-02  3.79083231e-02
  7.48809725e-02 -5.48369475e-02  6.83195591e-02 -4.68392484e-02
  3.77095751e-02 -8.94454122e-02 -9.27992463e-02  5.50444350e-02
 -2.83689871e-02 -7.53748789e-02 -4.37152237e-02  5.53415306e-02
 -2.16819700e-02  3.42405997e-02  7.97639340e-02  9.86997783e-02
 -8.09159689e-03  5.84373660e-02 -4.36840467e-02  7.68932551e-02
 -5.64124389e-03  5.14705293e-02 -4.41884883e-02  4.18434516e-02
 -2.60335673e-02 -5.80318458e-02  2.91579738e-02  4.98634987e-02
  8.17237869e-02 -3.51290852e-02 -4.62913290e-02  6.73615336e-02
  4.25201505e-02  1.98824871e-02 -3.49903964e-02 -7.89160654e-02
  2.62118243e-02  2.78848317e-02 -1.03935450e-01  5.00941761e-02
 -3.17169763e-02  5.56482747e-02 -4.94892225e-02  2.94030476e-02
  4.54358608e-02 -1.21299364e-01  4.34461422e-02  1.76562779e-02
  3.30745727e-02  5.03495941e-03 -1.15055414e-02 -1.26197692e-02]"
"/**
 * The Mediator interface declares a method used by components to notify the
 * mediator about various events. The Mediator may react to these events and
 * pass the execution to other components.
 */
interface Mediator {
    notify(sender: object, event: string): void;
}

/**
 * Concrete Mediators implement cooperative behavior by coordinating several
 * components.
 */
class ConcreteMediator implements Mediator {
    private component1: Component1;

    private component2: Component2;

    constructor(c1: Component1, c2: Component2) {
        this.component1 = c1;
        this.component1.setMediator(this);
        this.component2 = c2;
        this.component2.setMediator(this);
    }

    public notify(sender: object, event: string): void {
        if (event === 'A') {
            console.log('Mediator reacts on A and triggers following operations:');
            this.component2.doC();
        }

        if (event === 'D') {
            console.log('Mediator reacts on D and triggers following operations:');
            this.component1.doB();
            this.component2.doC();
        }
    }
}

/**
 * The Base Component provides the basic functionality of storing a mediator's
 * instance inside component objects.
 */
class BaseComponent {
    protected mediator: Mediator;

    constructor(mediator?: Mediator) {
        this.mediator = mediator!;
    }

    public setMediator(mediator: Mediator): void {
        this.mediator = mediator;
    }
}

/**
 * Concrete Components implement various functionality. They don't depend on
 * other components. They also don't depend on any concrete mediator classes.
 */
class Component1 extends BaseComponent {
    public doA(): void {
        console.log('Component 1 does A.');
        this.mediator.notify(this, 'A');
    }

    public doB(): void {
        console.log('Component 1 does B.');
        this.mediator.notify(this, 'B');
    }
}

class Component2 extends BaseComponent {
    public doC(): void {
        console.log('Component 2 does C.');
        this.mediator.notify(this, 'C');
    }

    public doD(): void {
        console.log('Component 2 does D.');
        this.mediator.notify(this, 'D');
    }
}

/**
 * The client code.
 */
const c1 = new Component1();
const c2 = new Component2();
const mediator = new ConcreteMediator(c1, c2);

console.log('Client triggers operation A.');
c1.doA();

console.log('');
console.log('Client triggers operation D.');
c2.doD();",TypeScript,Mediator,Refactoring Guru,https://refactoring.guru/design-patterns/mediator/typescript/example#example-0,"[ 1.30946992e-03 -1.87037122e-02  6.59124777e-02 -3.12505662e-02
  2.48147007e-02  1.40395127e-02  9.02621895e-02  5.08257002e-02
  1.10702284e-01  8.92541185e-03  4.79501523e-02 -1.99147779e-02
  8.90320633e-03  2.43882742e-02  4.49958667e-02  2.35488657e-02
 -3.99333276e-02  1.19757950e-02 -1.06202155e-01  1.64886024e-02
  2.75445767e-02 -5.50935194e-02 -4.12485376e-02 -1.77719276e-02
 -6.87463954e-02 -3.58783230e-02  4.86853346e-02 -9.50830430e-02
  1.63407307e-02 -3.23548615e-02  7.73961917e-02 -3.65412459e-02
 -1.15821116e-01 -1.86740572e-03 -8.34583342e-02  4.05408591e-02
 -3.58007778e-03 -3.79994251e-02 -5.84776998e-02 -1.00292638e-02
  3.73520777e-02  3.81393358e-02 -2.15107389e-02 -7.14365914e-02
  2.81815100e-02 -4.62911539e-02 -7.73810744e-02  9.80998855e-03
 -5.92981465e-02 -5.06978408e-02 -4.52072732e-02  1.47030763e-02
  1.47656268e-02  2.86999568e-02  2.90420596e-02 -5.29791452e-02
  2.27169823e-02  6.98257834e-02  3.15550826e-02 -3.54321338e-02
 -5.59395850e-02 -1.88229363e-02  2.45228242e-02  3.32759949e-03
  9.80252773e-02 -2.08162982e-02  7.85661861e-03  3.02630127e-04
 -3.57526727e-02  1.95610877e-02 -5.40083647e-02  8.81833769e-03
  1.14919633e-01  2.18198355e-02  1.54205633e-03 -7.41894320e-02
  1.40600819e-02  7.18784258e-02 -2.53137425e-02 -4.50709648e-02
  2.03253645e-02  1.36063406e-02 -3.83002944e-02 -4.53755260e-02
  3.02327331e-02  5.36142997e-02 -5.22229448e-02 -5.17688394e-02
 -3.06921415e-02 -1.10641941e-02 -3.00133079e-02  6.49898127e-03
 -7.42012681e-03  4.70704548e-02  2.95469724e-03 -8.93049221e-03
  6.69596065e-03 -7.06152199e-03  4.13225889e-02  8.97134990e-02
 -1.21913450e-02  1.67581625e-02 -5.64757586e-02 -5.57307107e-03
  1.79683082e-02 -4.74219397e-02 -1.33548439e-01 -3.55569720e-02
 -8.03733245e-03 -3.26595195e-02 -2.29497701e-02 -1.30789066e-02
 -4.58271839e-02  4.00460744e-03 -2.05004821e-03  1.83342472e-02
  5.33759594e-02  6.75898977e-03  1.99450161e-02 -2.12075356e-02
  8.68783742e-02 -5.43768965e-02  2.80207824e-02 -1.74923781e-02
  2.82690078e-02 -3.62064913e-02  1.02312276e-02  2.90120675e-33
  4.20100167e-02 -7.07245097e-02 -9.63379070e-02  9.65464115e-02
  5.87689653e-02  2.92487200e-02  5.52728921e-02  2.36723833e-02
 -4.27218825e-02 -4.47737947e-02  3.84444575e-05  5.16362907e-03
 -3.35007310e-02 -2.03710310e-02  3.10373101e-02 -5.89498878e-02
  5.40657043e-02  3.58150378e-02  3.12469713e-02 -4.80517372e-02
  4.87714224e-02  3.25214006e-02 -2.41488628e-02  4.97276857e-02
  4.96403314e-02  5.16439928e-03 -1.56691466e-02  2.05304753e-02
 -6.57859445e-02 -3.41751128e-02  6.55492023e-02  4.70531471e-02
  3.15636285e-02  6.03027232e-02  6.99791778e-03 -4.69353758e-02
 -7.09405318e-02  1.00240589e-03 -5.87262064e-02 -1.46135420e-01
  4.69126590e-02 -4.78089564e-02 -4.45769988e-02 -4.35668603e-02
  2.87509873e-03 -8.18588957e-02 -6.78835288e-02  3.20676416e-02
  6.88164681e-02 -8.18352997e-02  8.47140253e-02  9.49537605e-02
  6.40270710e-02 -1.56526398e-02  9.92398411e-02  7.53614753e-02
 -2.32812539e-02 -1.32644400e-02 -5.51672792e-03 -5.17877471e-03
 -1.55840637e-02  1.12775760e-02 -3.81167531e-02  1.87645312e-02
 -8.56164098e-02  3.16805914e-02 -1.58543810e-02 -6.64901286e-02
  9.21576470e-02 -4.65710983e-02  1.88790867e-03  3.23618278e-02
 -2.22153850e-02 -1.23540219e-02  2.59601828e-02 -7.45746866e-03
 -1.20617166e-01 -4.00537327e-02 -3.69254053e-02 -5.92414662e-02
 -5.52018732e-02  9.57696792e-03 -1.25958808e-02  1.75251409e-01
 -1.79177336e-02  1.27090607e-02 -3.29950675e-02  1.63956005e-02
 -4.03868407e-02  9.37101617e-02 -4.05611731e-02  3.04161347e-02
  5.18585704e-02 -9.60829854e-03  8.30685794e-02 -5.61503235e-33
 -2.25318875e-02  3.54861803e-02 -4.56572138e-02 -1.32676587e-02
 -2.76872590e-02 -7.21056759e-03 -6.44702837e-02 -6.33762404e-02
 -4.85321358e-02  2.25918740e-02 -4.36557177e-03  3.83224674e-02
 -2.66098301e-03 -8.50956887e-03 -8.69352818e-02  9.18566883e-02
  4.91425246e-02 -1.32008651e-02  5.60723897e-03 -2.67275032e-02
  2.01285165e-02  6.47303537e-02  7.49271661e-02  1.11092962e-02
 -1.06029911e-02  9.72046889e-03  1.47324931e-02  1.15367748e-01
  6.04623891e-02 -2.53103487e-02 -1.86432544e-02 -1.19638129e-03
  1.74218640e-02 -9.53597855e-03  8.97261202e-02 -6.30188286e-02
  6.49124980e-02  5.15024811e-02 -4.24973890e-02 -3.07484306e-02
  8.17702860e-02 -2.66307741e-02  1.11438259e-02  5.51548265e-02
 -3.60533372e-02 -8.31353739e-02  4.22184803e-02 -1.06284870e-02
  2.73224097e-02  7.79041927e-03 -1.87514853e-02 -1.52629122e-01
  3.59437428e-02  5.32112690e-03 -2.92556062e-02  9.16105658e-02
  1.13310687e-01 -7.65601024e-02  1.43143814e-02  4.71164025e-02
  6.11358769e-02 -8.04633796e-02 -1.39230723e-02  7.77043179e-02
  9.36061889e-03 -1.25736790e-02 -1.55189484e-02  1.31642297e-02
  6.78563863e-02  3.41647752e-02  8.32806900e-02  6.10455386e-02
 -2.33062971e-02 -7.75472820e-02  8.08998421e-02 -7.74564396e-04
 -3.77248451e-02 -7.55931363e-02  2.68949028e-02 -7.57203922e-02
 -4.55041006e-02 -5.08693792e-02  3.28080282e-02 -9.69708487e-02
 -1.70889385e-02  7.99540058e-03  6.07703589e-02 -1.15228137e-02
  2.11225310e-03 -2.24120431e-02 -4.28012237e-02  9.90761817e-02
  3.83293480e-02 -5.56524433e-02 -4.33386713e-02 -5.32893765e-08
 -4.97462526e-02 -8.85270834e-02 -2.76602749e-02 -7.18595758e-02
 -3.92664643e-03 -1.21657103e-01 -7.34180026e-03 -5.61917573e-02
 -6.28854334e-02 -4.08169068e-02 -5.12596667e-02  1.15222726e-02
  1.10836245e-01 -6.57461658e-02  8.67441297e-02 -4.15756367e-02
  3.15192621e-03 -5.29008508e-02 -1.00747108e-01  1.21727167e-03
 -3.14333010e-03 -4.96992469e-02  1.69160999e-02  2.55245306e-02
 -1.07847694e-02 -5.89865334e-02  8.53996649e-02  8.06431845e-02
  4.76500206e-02  1.92836821e-02 -8.76641124e-02  4.39334065e-02
 -5.39007317e-03  1.77297797e-02 -2.12006588e-02  7.21138641e-02
  3.60680223e-02 -9.14536491e-02  2.08866429e-02  8.77530202e-02
  4.93929200e-02 -3.25483456e-02 -5.80266714e-02  6.34271502e-02
  6.79943189e-02  3.91070079e-03 -4.07852903e-02 -6.00711703e-02
  3.98906767e-02  6.11725524e-02 -7.12695345e-02  3.52573842e-02
 -3.84824611e-02  1.99785996e-02 -1.89678110e-02 -5.26961684e-02
  4.04312313e-02  9.07588564e-03  5.86711951e-02 -1.48131009e-02
 -1.93675980e-02  4.37138602e-02  3.92512269e-02 -1.14631830e-02]"
"/**
 * The Subject interface declares a set of methods for managing subscribers.
 */
interface Subject {
    // Attach an observer to the subject.
    attach(observer: Observer): void;

    // Detach an observer from the subject.
    detach(observer: Observer): void;

    // Notify all observers about an event.
    notify(): void;
}

/**
 * The Subject owns some important state and notifies observers when the state
 * changes.
 */
class ConcreteSubject implements Subject {
    /**
     * @type {number} For the sake of simplicity, the Subject's state, essential
     * to all subscribers, is stored in this variable.
     */
    public state: number;

    /**
     * @type {Observer[]} List of subscribers. In real life, the list of
     * subscribers can be stored more comprehensively (categorized by event
     * type, etc.).
     */
    private observers: Observer[] = [];

    /**
     * The subscription management methods.
     */
    public attach(observer: Observer): void {
        const isExist = this.observers.includes(observer);
        if (isExist) {
            return console.log('Subject: Observer has been attached already.');
        }

        console.log('Subject: Attached an observer.');
        this.observers.push(observer);
    }

    public detach(observer: Observer): void {
        const observerIndex = this.observers.indexOf(observer);
        if (observerIndex === -1) {
            return console.log('Subject: Nonexistent observer.');
        }

        this.observers.splice(observerIndex, 1);
        console.log('Subject: Detached an observer.');
    }

    /**
     * Trigger an update in each subscriber.
     */
    public notify(): void {
        console.log('Subject: Notifying observers...');
        for (const observer of this.observers) {
            observer.update(this);
        }
    }

    /**
     * Usually, the subscription logic is only a fraction of what a Subject can
     * really do. Subjects commonly hold some important business logic, that
     * triggers a notification method whenever something important is about to
     * happen (or after it).
     */
    public someBusinessLogic(): void {
        console.log('\nSubject: I\'m doing something important.');
        this.state = Math.floor(Math.random() * (10 + 1));

        console.log(`Subject: My state has just changed to: ${this.state}`);
        this.notify();
    }
}

/**
 * The Observer interface declares the update method, used by subjects.
 */
interface Observer {
    // Receive update from subject.
    update(subject: Subject): void;
}

/**
 * Concrete Observers react to the updates issued by the Subject they had been
 * attached to.
 */
class ConcreteObserverA implements Observer {
    public update(subject: Subject): void {
        if (subject instanceof ConcreteSubject && subject.state < 3) {
            console.log('ConcreteObserverA: Reacted to the event.');
        }
    }
}

class ConcreteObserverB implements Observer {
    public update(subject: Subject): void {
        if (subject instanceof ConcreteSubject && (subject.state === 0 || subject.state >= 2)) {
            console.log('ConcreteObserverB: Reacted to the event.');
        }
    }
}

/**
 * The client code.
 */

const subject = new ConcreteSubject();

const observer1 = new ConcreteObserverA();
subject.attach(observer1);

const observer2 = new ConcreteObserverB();
subject.attach(observer2);

subject.someBusinessLogic();
subject.someBusinessLogic();

subject.detach(observer2);

subject.someBusinessLogic();",TypeScript,Observer,Refactoring Guru,https://refactoring.guru/design-patterns/observer/typescript/example#example-0,"[-2.05501262e-02 -5.29441126e-02  4.57543507e-02  2.26924550e-02
  4.36103903e-02 -1.82206719e-03  7.13200122e-02 -2.61910036e-02
  6.30516782e-02  4.21584360e-02  2.04817485e-02 -6.38440326e-02
 -1.49420174e-02  1.89484376e-02 -9.52417310e-03  2.23572049e-02
  4.31541633e-03 -2.72471607e-02 -9.91237536e-02  1.87502597e-02
  1.76380612e-02 -1.54802771e-02 -3.72143388e-02  2.70828791e-02
 -5.39496765e-02 -2.87173651e-02  1.37094557e-02 -9.61980894e-02
  1.79281197e-02 -2.94213295e-02  1.76864676e-02  4.88053920e-04
 -5.50205372e-02  1.70568936e-02 -6.92989901e-02  3.01883873e-02
 -1.39857521e-02 -2.89011169e-02 -4.16400433e-02 -2.81947237e-02
  8.86461418e-03  2.26698518e-02 -9.09754075e-03 -3.88069041e-02
  5.53507768e-02 -2.06638556e-02 -4.48602922e-02 -2.61014048e-02
 -2.77305786e-02 -2.85300836e-02 -2.90279416e-03 -2.10312326e-02
  2.10617483e-02  5.43110669e-02  6.19510785e-02  1.56543143e-02
  3.05241961e-02  3.90109234e-02 -5.44021325e-03 -5.03744520e-02
 -9.66759585e-03  4.43859324e-02 -3.93305859e-03 -1.28263142e-02
  3.94968688e-02 -9.71595943e-03  3.88047956e-02  3.83297764e-02
  1.32624451e-02  2.51859277e-02 -3.10574658e-02  6.71311319e-02
  3.36479843e-02 -7.78832519e-03  2.88080331e-03 -5.72952032e-02
  3.64179052e-02  5.33492595e-04  1.03587424e-02 -3.03403754e-03
 -7.59676918e-02 -3.80578786e-02 -4.23148088e-02 -3.53219099e-02
  3.30243707e-02 -1.70742832e-02  5.07266866e-03 -2.58624479e-02
 -1.94069892e-02  2.14144662e-02 -1.80493202e-02 -2.96705100e-03
  5.27557023e-02  2.92834714e-02  5.18418588e-02  5.31366952e-02
 -1.09019596e-02  3.83884124e-02  2.57624104e-03  1.30886793e-01
 -1.29453447e-02  5.68576977e-02 -6.88440502e-02  7.07143396e-02
  2.40448099e-02 -4.18339781e-02 -7.58941397e-02 -9.81338993e-02
 -4.65492234e-02  3.03350650e-02 -1.20955622e-02  2.46868655e-02
 -4.43719514e-02  1.93851963e-02 -1.77890044e-02  4.56553400e-02
  9.02704820e-02  9.36935246e-02 -9.11824219e-03  6.05240138e-03
  6.12523705e-02 -2.03129230e-03  5.62400669e-02  6.32604584e-03
  2.32509095e-02 -3.63587849e-02  3.13899294e-02  2.61051985e-33
  4.49178703e-02 -8.27458426e-02 -8.08043182e-02  7.38222077e-02
  2.05975454e-02  2.31002513e-02  4.30187285e-02  2.41108518e-02
  3.89974862e-02 -2.55532470e-03  4.23875228e-02  1.06331848e-01
  3.97097282e-02 -9.53871477e-03  4.93351258e-02 -8.74382555e-02
  1.80593990e-02  3.68484445e-02  2.88510439e-03  1.71391517e-02
  1.22529650e-02  7.97499437e-03 -9.32743251e-02  1.28889093e-02
 -2.11499017e-02  8.32424536e-02  2.80111693e-02  9.55019519e-02
 -3.48823704e-02  2.89699389e-03  1.10962182e-01  6.47448897e-02
 -6.82549700e-02  2.99416762e-02 -3.60615291e-02 -7.06704929e-02
 -2.83856485e-02 -2.57037003e-02 -6.06616624e-02 -1.29747152e-01
  6.80800453e-02 -3.20923887e-02 -6.14516027e-02 -5.82090653e-02
 -2.49841027e-02 -8.94905776e-02 -1.41111296e-02  2.53968686e-03
  6.40396476e-02 -4.28832211e-02  4.32832129e-02  2.27933377e-02
  2.43632458e-02 -1.16182208e-01  1.31260213e-02  4.85827625e-02
  3.34771127e-02  2.46429667e-02 -5.34420554e-03  1.96404438e-02
 -6.57848939e-02 -9.14146192e-03  1.45860598e-03  1.65163912e-02
  3.01366136e-03  1.11057177e-01 -6.12529516e-02 -1.11898832e-01
  8.71612057e-02 -5.61965331e-02 -5.10673970e-02  7.40699098e-02
 -2.15609260e-02  2.66196746e-02 -3.38788591e-02 -1.16146915e-02
 -9.69416201e-02  3.28346505e-03 -8.41809064e-02 -6.29492179e-02
  2.96035851e-05  2.21003555e-02 -5.94412535e-02  1.25102103e-01
  5.47723062e-02  1.24580460e-02 -3.88749987e-02  1.46180037e-02
 -6.25874326e-02  7.50226304e-02  1.52989775e-02  2.34558545e-02
  2.70839091e-02 -1.51584772e-02  1.40140112e-02 -4.52791240e-33
 -2.84308437e-02 -1.28710363e-02 -1.19041421e-01 -3.22654843e-02
 -4.42668833e-02 -5.23140877e-02 -5.36093749e-02 -1.45258224e-02
 -6.40701652e-02 -5.95407635e-02 -9.56098810e-02  2.72490121e-02
  1.44122588e-02  7.48110712e-02 -1.43855009e-02  7.62994662e-02
 -2.03753058e-02 -7.69443139e-02 -6.64929599e-02 -1.92024850e-03
 -3.17618959e-02  1.57975733e-01  9.33860391e-02 -5.19904681e-02
 -2.34877467e-02  3.97182181e-02  1.47393178e-02  1.28464654e-01
  2.07889043e-02 -5.89124076e-02 -4.23990898e-02 -7.79068246e-02
 -8.14429596e-02  3.33391177e-03  2.54764669e-02 -4.79985140e-02
  4.34632376e-02  4.16448675e-02 -4.57640588e-02 -2.76571084e-02
  2.51582861e-02 -3.69661413e-02 -1.65324006e-02 -1.07032144e-02
  1.27484398e-02 -4.13630717e-02  2.48485734e-03  7.17682615e-02
 -1.73223249e-04  7.55040301e-03 -5.68737090e-02 -8.12060237e-02
 -8.87629483e-03  5.82103617e-03 -9.27200727e-03  8.48392993e-02
  2.20580325e-02 -7.69984126e-02  9.17795077e-02  2.26803925e-02
  1.52827241e-02 -2.47926805e-02  1.35257198e-02  3.89171429e-02
  3.30924951e-02  2.14799978e-02 -2.67627854e-02 -5.02352156e-02
  7.66828433e-02  1.59762539e-02  4.35348302e-02  6.23683333e-02
 -5.07487245e-02 -9.43819657e-02  9.11948383e-02  1.45711256e-02
  1.33110108e-02 -6.51828796e-02  9.97413974e-03 -4.05829810e-02
 -1.03259943e-01 -1.61847565e-02  3.96149717e-02 -5.89647889e-02
 -1.83872301e-02 -7.17435451e-03  5.26630878e-02 -1.55462800e-02
  2.73545869e-02 -4.64462601e-02 -1.11843579e-01  7.06323683e-02
 -2.64986698e-02 -4.65555489e-03 -9.98281986e-02 -5.86138960e-08
 -2.79790815e-02 -2.27123387e-02 -3.13603729e-02  5.58783300e-02
  5.22987656e-02 -2.99421349e-03 -4.22560312e-02 -4.99635115e-02
 -6.45758882e-02 -4.27726768e-02 -5.89279085e-02  3.10884677e-02
  5.10403514e-02  6.19069114e-02  8.41860846e-02 -8.90073031e-02
 -2.14763451e-02 -7.35902041e-02 -1.13526210e-01 -1.37176197e-02
  2.49391384e-02 -3.61311249e-02  2.61741653e-02  6.44933572e-03
  5.87367900e-02 -3.51055898e-02  9.50747058e-02  7.88674727e-02
 -8.64654407e-03  5.76095320e-02 -3.65545973e-02  5.90948947e-02
  1.37696592e-02  3.52664180e-02 -1.41898496e-02  5.03879637e-02
  4.33789119e-02 -2.52129268e-02  6.47250414e-02  9.30712968e-02
  1.17722221e-01 -3.45388465e-02 -7.55828023e-02  1.01337142e-01
  8.03042799e-02  1.48384813e-02 -5.95903359e-02 -1.00663103e-01
  1.14558734e-01  2.47444175e-02 -9.40390304e-02 -3.45913209e-02
 -2.56968308e-02  2.85401884e-02 -2.63397656e-02 -2.11355947e-02
  4.01795618e-02 -6.95850849e-02  4.12650220e-02  6.10931069e-02
  7.80410133e-03  1.08715957e-02 -6.04620986e-02 -2.90892608e-02]"
"/**
 * The Context defines the interface of interest to clients.
 */
class Context {
    /**
     * @type {Strategy} The Context maintains a reference to one of the Strategy
     * objects. The Context does not know the concrete class of a strategy. It
     * should work with all strategies via the Strategy interface.
     */
    private strategy: Strategy;

    /**
     * Usually, the Context accepts a strategy through the constructor, but also
     * provides a setter to change it at runtime.
     */
    constructor(strategy: Strategy) {
        this.strategy = strategy;
    }

    /**
     * Usually, the Context allows replacing a Strategy object at runtime.
     */
    public setStrategy(strategy: Strategy) {
        this.strategy = strategy;
    }

    /**
     * The Context delegates some work to the Strategy object instead of
     * implementing multiple versions of the algorithm on its own.
     */
    public doSomeBusinessLogic(): void {
        // ...

        console.log('Context: Sorting data using the strategy (not sure how it\'ll do it)');
        const result = this.strategy.doAlgorithm(['a', 'b', 'c', 'd', 'e']);
        console.log(result.join(','));

        // ...
    }
}

/**
 * The Strategy interface declares operations common to all supported versions
 * of some algorithm.
 *
 * The Context uses this interface to call the algorithm defined by Concrete
 * Strategies.
 */
interface Strategy {
    doAlgorithm(data: string[]): string[];
}

/**
 * Concrete Strategies implement the algorithm while following the base Strategy
 * interface. The interface makes them interchangeable in the Context.
 */
class ConcreteStrategyA implements Strategy {
    public doAlgorithm(data: string[]): string[] {
        return data.sort();
    }
}

class ConcreteStrategyB implements Strategy {
    public doAlgorithm(data: string[]): string[] {
        return data.reverse();
    }
}

/**
 * The client code picks a concrete strategy and passes it to the context. The
 * client should be aware of the differences between strategies in order to make
 * the right choice.
 */
const context = new Context(new ConcreteStrategyA());
console.log('Client: Strategy is set to normal sorting.');
context.doSomeBusinessLogic();

console.log('');

console.log('Client: Strategy is set to reverse sorting.');
context.setStrategy(new ConcreteStrategyB());
context.doSomeBusinessLogic();",TypeScript,Strategy,Refactoring Guru,https://refactoring.guru/design-patterns/strategy/typescript/example#example-0,"[-5.33810118e-03  6.58564419e-02 -1.35524878e-02 -2.76850499e-02
 -1.08098902e-01  2.69006919e-02  4.72340100e-02  7.64833018e-02
 -4.49175611e-02 -3.26435184e-05 -1.76895540e-02  4.34030443e-02
 -2.02567521e-02  1.34747997e-02  2.18493175e-02  2.97343601e-02
 -1.75860785e-02  2.24215928e-02  2.38374015e-03  7.90728815e-03
  3.52038480e-02 -6.42006397e-02 -3.57650146e-02 -5.57201393e-02
  4.35942272e-03  3.19281034e-02 -2.34401654e-02 -4.59772572e-02
  5.72279245e-02  1.14100017e-02  8.03597551e-03  7.71659538e-02
 -3.04236077e-02  2.74638794e-02 -1.34038687e-01  7.43117929e-02
 -8.75808448e-02 -9.91347656e-02  3.29911448e-02  4.14140932e-02
 -6.71192557e-02  1.30606487e-01 -3.96070816e-02 -3.76017839e-02
  9.85328946e-03 -4.95707877e-02 -1.19919077e-01  1.12330057e-02
  2.00474858e-02 -3.07645276e-02 -6.58807158e-02  1.04137566e-02
 -5.58816046e-02 -5.97717101e-03 -3.91190313e-02  6.18477315e-02
  8.84328131e-03  4.90094610e-02  3.77188772e-02  2.30720360e-02
  5.10960957e-03 -4.18602675e-02 -2.32484601e-02  9.00022499e-03
  9.16640908e-02 -2.75151432e-02  5.45366891e-02  1.49233807e-02
  3.64761194e-03 -1.62764788e-02  2.37999205e-02 -9.02588759e-03
  4.21228111e-02  2.49194391e-02 -6.07069023e-02 -2.86081973e-02
 -2.42814026e-03  5.23338765e-02 -3.97680178e-02 -4.36285734e-02
  2.43872404e-02  1.27628827e-02 -3.15254368e-02  4.97655459e-02
  9.52626094e-02  5.06929941e-02 -6.60668015e-02 -6.86155111e-02
  4.84413654e-02  5.96984513e-02 -4.81137261e-02 -2.85147633e-02
 -2.71794926e-02  7.72241503e-02  5.32340072e-02  2.99196038e-02
  1.99973099e-02 -2.59272717e-02 -5.24049699e-02  1.07261680e-01
 -2.38502193e-02  3.07618119e-02 -1.21451980e-02  4.42226902e-02
  2.33341064e-02 -1.51179451e-02 -7.48227835e-02 -6.30906001e-02
 -5.46118356e-02 -5.55533916e-02 -2.38814130e-02  1.07989430e-01
 -9.52800550e-03 -1.27203045e-02 -8.40168744e-02  1.74486823e-02
  5.61005855e-03 -4.45043258e-02  1.88394096e-02  4.06500958e-02
  2.09589936e-02 -2.03523459e-03 -1.87997296e-02 -1.88826658e-02
 -2.97268108e-02  4.61385176e-02  3.39352712e-02  2.93054525e-33
  2.02640649e-02 -6.93152472e-02  2.21252497e-02  5.63829243e-02
  1.91006046e-02  5.13372160e-02  1.20472703e-02  1.51308393e-02
 -1.09185830e-01 -2.65507437e-02  4.50625494e-02  8.69523436e-02
 -3.09092291e-02  1.55718187e-02  9.13385004e-02 -9.09372345e-02
  1.16774872e-01  6.58953935e-02 -1.10669658e-02 -9.76079106e-02
 -7.61326402e-03  5.19687757e-02 -4.69876155e-02 -9.79166329e-02
  2.06066240e-02  2.68810522e-02 -7.25481473e-03 -1.41017083e-02
 -7.39228576e-02  1.48448879e-02  3.22729610e-02 -2.90321186e-02
 -5.49130812e-02  7.74346814e-02  6.20830618e-02  3.29659693e-02
 -5.26631959e-02 -4.56849039e-02 -3.78093235e-02 -1.00625485e-01
 -4.32568565e-02  2.88866810e-03 -4.46921363e-02 -4.42910083e-02
 -1.07354010e-02 -5.11918515e-02 -5.71063273e-02  5.31479083e-02
  5.71449436e-02 -4.75549102e-02 -5.72350062e-02  7.55732059e-02
  4.41546850e-02 -1.73284896e-02  2.62908507e-02 -5.08219115e-02
  3.28592546e-02  2.79315300e-02 -2.72769891e-02  7.28706196e-02
  3.90037484e-02  2.84466036e-02 -2.73349844e-02  2.94374973e-02
 -2.66312771e-02  3.04578096e-02 -1.15804367e-01 -1.22582391e-01
  8.26179907e-02 -2.73460578e-02 -2.19398849e-02  8.84798095e-02
  3.99336172e-03  1.31946608e-01  4.51155901e-02  3.11240200e-02
 -6.54342845e-02  2.73026922e-03 -1.04989767e-01 -1.67018414e-01
  2.65162028e-02  8.82215276e-02  1.14119415e-04  1.04933143e-01
 -1.43941026e-02  5.34389764e-02  3.02621815e-02 -2.82878969e-02
  5.28347827e-02  3.20716128e-02 -1.03618450e-01 -3.59104909e-02
  1.00937793e-02  5.85893653e-02  4.19411920e-02 -3.88960832e-33
 -3.04316059e-02  2.73582675e-02 -4.10761125e-02 -7.81196309e-03
 -1.79114677e-02 -6.49800971e-02  2.68017016e-02 -3.39960232e-02
 -7.30811730e-02  6.82998747e-02  3.02582439e-02  5.82643561e-02
  2.42415406e-02 -1.84070915e-02  9.10880417e-02  1.70528945e-02
 -3.09798773e-02 -8.13382491e-02 -2.26183906e-02 -5.18103465e-02
 -1.65405124e-02  1.97314974e-02 -3.51637639e-02  2.06059534e-02
  8.34983308e-03  1.82341058e-02 -2.37866025e-03  3.84285264e-02
  8.47165938e-05 -3.40779908e-02  5.02818776e-03 -1.52899502e-02
 -2.30382383e-02  3.82623374e-02 -1.76992826e-02 -3.76515128e-02
  3.40313800e-02  2.36262064e-02 -5.55648562e-03  5.59860617e-02
 -2.46061813e-02 -1.73166487e-02 -1.91194657e-02  3.51872817e-02
  4.29033376e-02 -4.50521111e-02 -7.24066328e-03 -1.03895003e-02
  8.12621340e-02 -7.46885613e-02  1.88498180e-02  7.87607022e-03
 -6.57023266e-02 -8.87558386e-02 -3.31609063e-02  3.97489965e-02
  3.88451964e-02 -3.98729108e-02  3.59446630e-02  3.75796668e-02
  4.15551625e-02 -9.45890695e-03  8.12425986e-02 -9.72521119e-03
  3.66371050e-02 -1.76630933e-02 -1.20815814e-01 -6.91497475e-02
  1.94899477e-02 -2.86899041e-02 -4.51083258e-02  9.41312462e-02
  2.28017103e-03 -3.05893105e-02  2.24933550e-02 -3.62306163e-02
  3.69244106e-02  8.37450847e-04  8.39091539e-02  3.67972516e-02
  6.88164448e-03 -6.63545434e-05  4.47502956e-02  4.57069166e-02
 -2.26032529e-02  2.52329502e-02  8.54171626e-03  2.77004242e-02
 -8.32884610e-02 -1.64401643e-02 -2.15486307e-02 -3.38201895e-02
 -2.41853800e-02  2.94654742e-02  9.89603437e-03 -5.79234012e-08
 -1.33679003e-01 -6.52952492e-02 -1.73161421e-02  7.45658204e-02
  6.74965512e-03 -2.02458669e-02  2.14342903e-02  5.34019200e-03
 -3.44302915e-02 -4.42980304e-02 -4.11573201e-02  9.86165851e-02
  5.59386099e-03  2.37557627e-02  1.66556295e-02 -1.40806101e-02
  6.64986437e-03 -6.92056417e-02 -8.40878710e-02  4.42333147e-02
  3.98784615e-02 -3.91400754e-02  3.06341648e-02  2.07481422e-02
  6.47382513e-02 -8.80206004e-02  5.33625484e-02  1.54702395e-01
  8.33735466e-02  1.00490913e-01 -4.92295586e-02  7.25062266e-02
  2.08453019e-03 -1.60340933e-04 -9.42820758e-02  5.27440161e-02
 -1.81159247e-02  1.98611487e-02  4.65971306e-02  3.34025435e-02
  1.83598083e-02 -3.08315475e-02 -1.54897524e-02  8.38315785e-02
  6.78828284e-02  1.20531935e-02  3.58880721e-02 -9.77953523e-03
  8.74269530e-02 -6.95754886e-02 -7.50477538e-02 -1.39359292e-02
 -2.05089673e-02 -8.57529510e-03  1.28951797e-03 -4.49391361e-03
 -6.75994828e-02 -6.22668341e-02 -4.69841808e-02 -1.41454171e-02
 -8.71188343e-02 -3.72558348e-02  1.92063972e-02  1.93926543e-02]"
"/**
 * The Component interface declares an `accept` method that should take the base
 * visitor interface as an argument.
 */
interface Component {
    accept(visitor: Visitor): void;
}

/**
 * Each Concrete Component must implement the `accept` method in such a way that
 * it calls the visitor's method corresponding to the component's class.
 */
class ConcreteComponentA implements Component {
    /**
     * Note that we're calling `visitConcreteComponentA`, which matches the
     * current class name. This way we let the visitor know the class of the
     * component it works with.
     */
    public accept(visitor: Visitor): void {
        visitor.visitConcreteComponentA(this);
    }

    /**
     * Concrete Components may have special methods that don't exist in their
     * base class or interface. The Visitor is still able to use these methods
     * since it's aware of the component's concrete class.
     */
    public exclusiveMethodOfConcreteComponentA(): string {
        return 'A';
    }
}

class ConcreteComponentB implements Component {
    /**
     * Same here: visitConcreteComponentB => ConcreteComponentB
     */
    public accept(visitor: Visitor): void {
        visitor.visitConcreteComponentB(this);
    }

    public specialMethodOfConcreteComponentB(): string {
        return 'B';
    }
}

/**
 * The Visitor Interface declares a set of visiting methods that correspond to
 * component classes. The signature of a visiting method allows the visitor to
 * identify the exact class of the component that it's dealing with.
 */
interface Visitor {
    visitConcreteComponentA(element: ConcreteComponentA): void;

    visitConcreteComponentB(element: ConcreteComponentB): void;
}

/**
 * Concrete Visitors implement several versions of the same algorithm, which can
 * work with all concrete component classes.
 *
 * You can experience the biggest benefit of the Visitor pattern when using it
 * with a complex object structure, such as a Composite tree. In this case, it
 * might be helpful to store some intermediate state of the algorithm while
 * executing visitor's methods over various objects of the structure.
 */
class ConcreteVisitor1 implements Visitor {
    public visitConcreteComponentA(element: ConcreteComponentA): void {
        console.log(`${element.exclusiveMethodOfConcreteComponentA()} + ConcreteVisitor1`);
    }

    public visitConcreteComponentB(element: ConcreteComponentB): void {
        console.log(`${element.specialMethodOfConcreteComponentB()} + ConcreteVisitor1`);
    }
}

class ConcreteVisitor2 implements Visitor {
    public visitConcreteComponentA(element: ConcreteComponentA): void {
        console.log(`${element.exclusiveMethodOfConcreteComponentA()} + ConcreteVisitor2`);
    }

    public visitConcreteComponentB(element: ConcreteComponentB): void {
        console.log(`${element.specialMethodOfConcreteComponentB()} + ConcreteVisitor2`);
    }
}

/**
 * The client code can run visitor operations over any set of elements without
 * figuring out their concrete classes. The accept operation directs a call to
 * the appropriate operation in the visitor object.
 */
function clientCode(components: Component[], visitor: Visitor) {
    // ...
    for (const component of components) {
        component.accept(visitor);
    }
    // ...
}

const components = [
    new ConcreteComponentA(),
    new ConcreteComponentB(),
];

console.log('The client code works with all visitors via the base Visitor interface:');
const visitor1 = new ConcreteVisitor1();
clientCode(components, visitor1);
console.log('');

console.log('It allows the same client code to work with different types of visitors:');
const visitor2 = new ConcreteVisitor2();
clientCode(components, visitor2);",TypeScript,Visitor,Refactoring Guru,https://refactoring.guru/design-patterns/visitor/typescript/example#example-0,"[-2.37307101e-02  2.38629840e-02  5.88591024e-02  4.75659557e-02
 -9.73350834e-03  1.61218748e-03  7.55548775e-02  7.65314186e-03
 -6.63811946e-03 -3.81626524e-02  9.05778166e-03 -8.64994824e-02
 -1.10012470e-02  9.36483499e-03  8.53517130e-02  2.59530898e-02
  3.03332824e-02  9.88987926e-03 -4.44668941e-02  1.04509056e-01
  1.03781661e-02 -4.38494124e-02 -5.59056960e-02 -3.43189165e-02
 -7.69015849e-02  2.07025073e-02 -2.41708942e-02 -1.07359491e-01
  8.34215060e-02 -8.98486096e-03  3.90792713e-02  1.11902937e-01
 -6.72740117e-02  4.87095416e-02 -1.17235646e-01  6.69540241e-02
 -3.42209474e-03 -4.70150374e-02 -2.61375401e-02 -1.70726068e-02
 -2.02639662e-02  1.02054551e-01 -1.57239512e-02 -4.75203469e-02
  5.63835949e-02 -9.04658362e-02 -2.42304616e-02 -6.65007904e-02
  2.64901947e-02 -5.37545532e-02  4.51235659e-02  1.97160654e-02
  2.05137283e-02  4.83880714e-02 -3.47916111e-02  9.19117499e-03
  1.58756580e-02  1.52828032e-02 -5.71857498e-04 -1.01009542e-02
 -3.37999649e-02 -2.97193341e-02  4.17646859e-03 -6.13757074e-02
  5.23537137e-02 -9.17848200e-03 -5.49654998e-02 -6.51817769e-02
  5.60026020e-02 -6.08529476e-03 -2.42077056e-02  5.77206770e-03
  5.53041324e-02  1.48207862e-02 -1.69420266e-03  1.35944774e-02
 -1.71546880e-02  6.80931732e-02 -1.03336843e-02 -1.64766744e-01
  4.04640511e-02  4.01637459e-04 -4.25977167e-03 -2.90880315e-02
  7.68893063e-02  9.13989618e-02 -4.41040322e-02 -7.58173019e-02
 -1.46879489e-02  7.14778528e-02  2.50424966e-02  8.18380993e-03
 -1.26433773e-02 -1.77760161e-02  7.08941966e-02 -2.71539334e-02
  1.42726547e-03  1.27767706e-02  1.16688646e-02  1.29367396e-01
  2.37325882e-03  6.88273981e-02  8.79073050e-03  9.94141493e-03
  7.60824466e-03 -6.62343402e-04 -8.06506798e-02 -7.76666775e-02
 -2.36317907e-02 -3.27730626e-02 -3.16535402e-03 -5.97234629e-03
 -4.54373518e-03 -1.36950575e-02 -3.87784913e-02 -3.76973748e-02
  5.28432280e-02 -4.63954769e-02  4.68839295e-02  6.39525503e-02
  4.84695099e-02 -3.64563875e-02  7.54084960e-02 -2.21866183e-02
  3.17516737e-02 -8.15833136e-02 -4.63949377e-03  6.39422936e-33
  4.35536839e-02  1.51308980e-02 -1.15138948e-01  3.69638391e-02
  5.46267554e-02  1.57831516e-02  3.22785191e-02  1.98686365e-02
 -3.50122228e-02  1.30006773e-02  4.35197316e-02  2.28243563e-02
  1.85373146e-02  5.71077019e-02  7.32614771e-02  1.36361709e-02
  8.54935795e-02  9.87255946e-03  2.26839185e-02 -1.88211538e-02
  6.76450655e-02  3.68391946e-02 -1.99897178e-02  3.78482230e-02
  3.16154473e-02  1.84846651e-02  1.33184041e-03  3.06484811e-02
 -1.21212102e-01 -3.39100981e-04  6.20044507e-02  5.72475046e-02
  5.31164790e-03  1.03694245e-01  1.98185761e-02 -1.12514971e-02
  2.64858790e-02 -6.86865523e-02 -2.30798721e-02 -1.69875443e-01
 -4.58974689e-02 -2.54356284e-02 -2.55343542e-02 -5.79067180e-03
 -9.75663401e-03 -6.27115369e-02 -3.76935527e-02  3.59883420e-02
  4.18459289e-02 -2.95323152e-02  1.43613927e-02  7.62900412e-02
 -2.18733698e-02 -3.10918409e-02  1.02089101e-03  2.11437065e-02
  2.05493569e-02  7.70450085e-02  1.19752195e-02  2.75337826e-02
 -4.56183776e-02  6.04597963e-02 -9.92232785e-02  3.04433201e-02
 -8.41787979e-02  3.85912210e-02 -1.18288487e-01 -6.39887676e-02
  6.26300946e-02 -8.64621997e-03 -1.72560848e-02  4.49327528e-02
 -6.13508821e-02  6.96991431e-03 -1.69125702e-02 -4.04892787e-02
 -7.29016066e-02 -1.01168277e-02 -7.77844852e-03 -5.66902868e-02
 -8.82950351e-02  6.30804151e-02  1.39787432e-03  1.16627730e-01
 -5.22120968e-02  1.08928690e-02  3.52334380e-02 -1.29861077e-02
 -4.77877678e-03 -3.88847925e-02 -5.62942494e-03 -1.13504045e-02
  1.39012653e-02 -4.46865484e-02  3.45666781e-02 -7.49428489e-33
  1.82433985e-02  4.39929888e-02 -3.12592834e-02 -4.61588018e-02
 -6.53213859e-02 -3.01171076e-02 -4.67962772e-02 -1.18635967e-01
 -7.56461844e-02  1.19649740e-02  5.18232724e-03  7.40509704e-02
  1.07020624e-01 -1.87585540e-02 -7.20174285e-03  5.64264469e-02
 -3.45437266e-02 -7.13050440e-02  2.91495398e-02  2.21128054e-02
  8.04467965e-03  6.31846339e-02  2.59010140e-02 -2.78415233e-02
  5.24684414e-03  1.56409889e-02 -3.77257317e-02  6.14246391e-02
  8.36781636e-02 -1.71827711e-02 -4.53887396e-02 -2.01767161e-02
 -3.53830308e-02 -5.99582531e-02  5.76341636e-02 -3.34084220e-02
 -3.28313559e-02  8.70896950e-02 -2.55553052e-02 -1.64052285e-02
  1.49215860e-02 -6.84865341e-02  2.61275489e-02 -1.13183912e-02
 -5.90689853e-03 -6.24375157e-02 -2.60420535e-02  4.31546532e-02
  1.90623719e-02 -3.04188244e-02  6.45728037e-03 -5.00941202e-02
 -2.93714721e-02  3.90372686e-02 -8.06467421e-03  6.35092109e-02
  5.80185615e-02 -8.20885524e-02  4.53925282e-02  7.51135265e-03
  4.01830785e-02 -2.28118300e-02  3.11230104e-02  9.34638456e-02
  2.64564995e-02 -5.16568981e-02 -5.67156859e-02 -3.75120454e-02
  2.58760136e-02  3.01708132e-02  8.37433850e-04  4.90435548e-02
  2.04148218e-02 -4.07655165e-02  7.27144629e-02 -3.40686962e-02
  8.90639201e-02 -2.32508127e-03  6.08843751e-02 -1.98168866e-02
 -6.80269152e-02 -1.60774849e-02  4.90367711e-02 -7.07692653e-02
  2.90864352e-02 -9.48107392e-02 -3.31284441e-02 -1.48830973e-02
  6.35578181e-04 -8.51607695e-03 -2.21241228e-02  4.94186133e-02
 -3.30974162e-02 -6.31985441e-02 -1.76336244e-02 -5.75377044e-08
 -7.55380690e-02 -6.04293495e-02 -6.38107657e-02 -5.78110218e-02
  6.97917193e-02 -1.16662867e-01 -2.91464776e-02 -1.47723509e-02
 -7.92817101e-02 -3.06964461e-02 -4.59567830e-02  7.12462962e-02
  2.31708325e-02 -6.49328381e-02  6.78764358e-02 -5.77995379e-04
 -2.29254700e-02 -4.61285412e-02 -1.24043137e-01  5.04373051e-02
 -8.59533623e-02 -6.15110956e-02  9.41931736e-03  1.07668759e-02
  4.93774330e-03  3.66505422e-03  9.84580368e-02  1.64298955e-02
  2.87232343e-02  1.14727162e-01 -6.79864660e-02  4.86512110e-02
 -1.94477830e-02 -2.64090076e-02  2.08839066e-02  8.12053010e-02
 -1.10828993e-03 -4.63222079e-02  4.24352065e-02  5.54067791e-02
  5.50805740e-02 -1.01330899e-01 -3.28929536e-02  4.84206378e-02
  7.48643875e-02  1.73747670e-02 -2.56246533e-02 -3.10442504e-02
  7.18032420e-02  8.52916911e-02 -8.31225663e-02 -6.62391016e-04
 -6.17193654e-02  6.76972196e-02 -4.85110804e-02  2.64778659e-02
 -7.37808226e-03 -9.63582173e-02  7.76107907e-02 -2.82542463e-02
 -1.17098796e-03  2.53649298e-02  9.40245390e-02 -6.18480854e-02]"
"using System;

namespace RefactoringGuru.DesignPatterns.AbstractFactory.Conceptual
{
    // The Abstract Factory interface declares a set of methods that return
    // different abstract products. These products are called a family and are
    // related by a high-level theme or concept. Products of one family are
    // usually able to collaborate among themselves. A family of products may
    // have several variants, but the products of one variant are incompatible
    // with products of another.
    public interface IAbstractFactory
    {
        IAbstractProductA CreateProductA();

        IAbstractProductB CreateProductB();
    }

    // Concrete Factories produce a family of products that belong to a single
    // variant. The factory guarantees that resulting products are compatible.
    // Note that signatures of the Concrete Factory's methods return an abstract
    // product, while inside the method a concrete product is instantiated.
    class ConcreteFactory1 : IAbstractFactory
    {
        public IAbstractProductA CreateProductA()
        {
            return new ConcreteProductA1();
        }

        public IAbstractProductB CreateProductB()
        {
            return new ConcreteProductB1();
        }
    }

    // Each Concrete Factory has a corresponding product variant.
    class ConcreteFactory2 : IAbstractFactory
    {
        public IAbstractProductA CreateProductA()
        {
            return new ConcreteProductA2();
        }

        public IAbstractProductB CreateProductB()
        {
            return new ConcreteProductB2();
        }
    }

    // Each distinct product of a product family should have a base interface.
    // All variants of the product must implement this interface.
    public interface IAbstractProductA
    {
        string UsefulFunctionA();
    }

    // Concrete Products are created by corresponding Concrete Factories.
    class ConcreteProductA1 : IAbstractProductA
    {
        public string UsefulFunctionA()
        {
            return ""The result of the product A1."";
        }
    }

    class ConcreteProductA2 : IAbstractProductA
    {
        public string UsefulFunctionA()
        {
            return ""The result of the product A2."";
        }
    }

    // Here's the the base interface of another product. All products can
    // interact with each other, but proper interaction is possible only between
    // products of the same concrete variant.
    public interface IAbstractProductB
    {
        // Product B is able to do its own thing...
        string UsefulFunctionB();

        // ...but it also can collaborate with the ProductA.
        //
        // The Abstract Factory makes sure that all products it creates are of
        // the same variant and thus, compatible.
        string AnotherUsefulFunctionB(IAbstractProductA collaborator);
    }

    // Concrete Products are created by corresponding Concrete Factories.
    class ConcreteProductB1 : IAbstractProductB
    {
        public string UsefulFunctionB()
        {
            return ""The result of the product B1."";
        }

        // The variant, Product B1, is only able to work correctly with the
        // variant, Product A1. Nevertheless, it accepts any instance of
        // AbstractProductA as an argument.
        public string AnotherUsefulFunctionB(IAbstractProductA collaborator)
        {
            var result = collaborator.UsefulFunctionA();

            return $""The result of the B1 collaborating with the ({result})"";
        }
    }

    class ConcreteProductB2 : IAbstractProductB
    {
        public string UsefulFunctionB()
        {
            return ""The result of the product B2."";
        }

       // The variant, Product B2, is only able to work correctly with the
       // variant, Product A2. Nevertheless, it accepts any instance of
       // AbstractProductA as an argument.
        public string AnotherUsefulFunctionB(IAbstractProductA collaborator)
        {
            var result = collaborator.UsefulFunctionA();

            return $""The result of the B2 collaborating with the ({result})"";
        }
    }

    // The client code works with factories and products only through abstract
    // types: AbstractFactory and AbstractProduct. This lets you pass any
    // factory or product subclass to the client code without breaking it.
    class Client
    {
        public void Main()
        {
            // The client code can work with any concrete factory class.
            Console.WriteLine(""Client: Testing client code with the first factory type..."");
            ClientMethod(new ConcreteFactory1());
            Console.WriteLine();

            Console.WriteLine(""Client: Testing the same client code with the second factory type..."");
            ClientMethod(new ConcreteFactory2());
        }

        public void ClientMethod(IAbstractFactory factory)
        {
            var productA = factory.CreateProductA();
            var productB = factory.CreateProductB();

            Console.WriteLine(productB.UsefulFunctionB());
            Console.WriteLine(productB.AnotherUsefulFunctionB(productA));
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            new Client().Main();
        }
    }
}",C#,Abstract Factory,Refactoring Guru,https://refactoring.guru/design-patterns/abstract-factory/csharp/example#example-0,"[-6.67942017e-02 -2.43347101e-02  5.71391499e-03 -4.91777807e-02
 -7.31627792e-02  6.00583367e-02  6.25198483e-02  8.56076553e-02
 -7.22335055e-02 -4.06930484e-02  3.39150690e-02 -8.18511546e-02
  4.92529720e-02 -1.61085520e-02  5.33478335e-02  6.32942021e-02
  1.93049051e-02 -3.85660678e-02 -5.06915525e-02  3.87131013e-02
  7.61216953e-02 -8.22007656e-02 -4.14369516e-02 -2.90128123e-02
 -7.59452805e-02  1.73062831e-02  2.15629544e-02 -2.55921539e-02
  1.38350781e-02 -2.26893388e-02  7.61188660e-03  9.67449769e-02
 -7.68894404e-02 -1.00330599e-02 -7.13477330e-03  8.24563019e-03
 -7.28984876e-03  2.79824771e-02  1.73637196e-02 -6.55077100e-02
  1.99189573e-03  4.59684879e-02 -1.71898007e-02 -4.41239886e-02
  9.12410021e-02 -2.81215757e-02 -4.30087782e-02 -2.96144690e-02
  4.16415036e-02 -2.94184778e-02 -3.16320509e-02  2.65602898e-02
 -3.69533822e-02 -1.81030463e-02  4.02553454e-02 -1.51652684e-02
 -1.23115638e-02  7.66267329e-02 -1.79853812e-02  4.06039730e-02
  4.70537245e-02  1.65434722e-02 -8.04111362e-03 -5.76465167e-02
  9.18294117e-02  9.05121863e-03  1.46662761e-02 -3.39846164e-02
 -5.11722825e-02  1.59970345e-03 -3.95527557e-02 -2.04377226e-03
 -4.66729403e-02  4.77778316e-02 -4.23444510e-02  3.69842872e-02
  1.47729144e-02  3.14593278e-02 -5.81262028e-03 -9.17859301e-02
 -1.44591974e-02  8.20394084e-02 -1.89925116e-02 -3.62062715e-02
  3.55964899e-02  7.00992495e-02  7.14477291e-03 -6.26185387e-02
  1.66035369e-02  8.35567042e-02 -4.08094823e-02 -3.30365263e-02
 -4.37049055e-03  1.72007727e-04  4.96688671e-02 -2.70709544e-02
  9.53884702e-03  1.14359595e-02  1.96368862e-02  7.35261813e-02
 -7.36066774e-02  1.35978553e-02  2.84354966e-02 -4.30684164e-02
  3.22622433e-03  3.92430834e-02 -8.71789604e-02 -6.22207336e-02
  3.68510261e-02  1.03696287e-02 -5.60297556e-02 -2.10829042e-02
 -6.29654229e-02  3.05861887e-02 -7.28152916e-02 -1.65945999e-02
  3.67899090e-02 -6.52430579e-02 -1.32035315e-02  3.45022306e-02
  2.31299400e-02  1.21844681e-02  8.53934363e-02  5.18716779e-03
 -7.92565383e-03  1.24786422e-02  2.67667528e-02  4.44348473e-33
 -3.71444747e-02 -5.32824397e-02 -5.92502952e-02  1.13378085e-01
  3.36988382e-02 -1.09276630e-03  4.86400537e-02  1.05402678e-01
 -3.87085117e-02 -5.22194393e-02 -3.71751934e-03 -7.73506425e-03
 -4.33149040e-02  1.74489375e-02  8.62227976e-02  3.56186903e-03
  2.38278434e-02 -3.85969169e-02  9.71587934e-03 -3.32196690e-02
 -3.00822798e-02  8.95959139e-02  2.85789929e-02 -8.32336722e-04
  2.02804878e-02 -3.31998774e-04  8.35488588e-02  3.64921652e-02
 -8.11012164e-02  4.04880149e-03  4.90343757e-02 -2.38089152e-02
 -2.26835813e-02  7.04376921e-02 -6.92929476e-02 -1.12338252e-02
 -8.99189152e-03 -6.20761029e-02 -9.59001109e-03 -5.35598770e-02
 -1.68393757e-02  1.23462686e-02  2.98174694e-02  2.98528187e-02
  4.80497554e-02 -7.99558312e-02 -6.92134723e-02  4.07836139e-02
  3.26864570e-02 -4.35845554e-02 -3.91648002e-02  9.76970568e-02
  8.10655355e-02 -4.31820750e-02  2.62169577e-02 -1.47204669e-02
 -2.33585034e-02  3.08096707e-02 -4.76458762e-03  9.94033813e-02
 -1.19773559e-01  9.15453508e-02 -4.99573685e-02  6.94703385e-02
 -7.71474093e-02  1.05981916e-01 -6.50060102e-02 -9.80444849e-02
  8.49034488e-02 -3.69522311e-02  4.39920090e-02 -3.68669294e-02
 -5.68687636e-03 -5.95274381e-03 -1.34938797e-02 -7.79896509e-03
 -7.36268237e-02 -8.56558885e-03 -4.48117405e-02 -7.30322674e-02
 -5.94330467e-02  7.79467672e-02  1.35708116e-02  8.66903737e-02
 -1.03323452e-01  1.91940386e-02  1.32907992e-02  1.81709360e-02
  6.77656606e-02  6.18215883e-03 -2.25858074e-02  2.42068041e-02
 -3.94945741e-02 -5.61285531e-03  1.40899807e-01 -5.48728624e-33
  2.30858941e-02  2.72031333e-02 -7.33684143e-03 -3.92914191e-02
  1.22028226e-02 -8.35357059e-04 -1.47701623e-02 -9.52792466e-02
 -1.18137844e-01  1.14763677e-01 -1.99301285e-03 -1.25576397e-02
  5.81034943e-02 -1.64773799e-02 -5.04340008e-02 -2.18842216e-02
 -1.26246931e-02 -5.89110553e-02  6.48829341e-02  1.09189562e-03
  3.24319676e-02  5.12700193e-02  2.34607588e-02 -5.59345670e-02
 -2.12052688e-02  2.40679830e-03 -1.02470122e-01  1.04476303e-01
  6.08414114e-02 -2.23578010e-02  1.04133990e-02 -4.17398363e-02
  1.57124009e-02 -4.67548221e-02  6.02880903e-02 -6.34403825e-02
  1.78689435e-02  1.81684867e-02  1.11862905e-02 -6.47735894e-02
  9.62471124e-03 -6.82836473e-02 -3.35514769e-02  1.06646894e-02
  3.25448029e-02 -4.99932915e-02 -2.49535237e-02 -5.37613332e-02
  6.69365600e-02 -3.69348638e-02  4.57625426e-02  3.31722805e-03
 -4.21632305e-02 -4.59532328e-02 -1.00554422e-01  3.06948237e-02
  1.21083476e-01 -6.92836940e-02 -8.06587096e-03  4.18926924e-02
  8.54055882e-02 -2.68200170e-02  6.36276752e-02  3.42417061e-02
  6.08373843e-02 -4.67030667e-02  1.63749866e-02 -7.16470629e-02
  3.40159871e-02  1.06660966e-02 -4.62769195e-02  6.89306334e-02
 -5.34363883e-03 -5.55060841e-02  8.50965381e-02 -2.11920240e-03
  1.63272712e-02  6.01646665e-04  5.21741137e-02 -7.42437914e-02
 -2.20522713e-02 -6.01428747e-02  7.53342286e-02  2.83636358e-02
 -4.82848026e-02 -4.06769030e-02  6.68276567e-03  2.15057973e-02
 -2.89312452e-02  2.12980956e-02 -9.25827306e-03  4.09684889e-02
 -8.66109803e-02  3.79304029e-02  1.74602736e-02 -5.42264047e-08
 -3.69494222e-02 -4.91172522e-02  4.04183567e-03  5.24758101e-02
 -3.37254442e-02 -6.08517602e-02 -1.12458304e-01  1.24272751e-02
  8.46353432e-05 -2.69560907e-02 -1.00014336e-01  5.73006533e-02
  2.92776106e-03  5.54420389e-02  6.89258128e-02 -3.34947892e-02
 -1.45814242e-02 -6.19445071e-02 -7.96253607e-02  3.44515778e-02
  2.38197707e-02 -2.32238639e-02  7.73086539e-03  6.94913650e-03
 -7.25322217e-02 -6.24325611e-02  5.91101125e-02  6.76798373e-02
 -6.06119027e-03  1.14171453e-01 -3.31421308e-02  3.49733680e-02
 -3.02089155e-02  4.56918078e-03  4.59118299e-02 -1.71937998e-02
  4.21526432e-02  1.45954331e-02 -2.64813602e-02  5.35843745e-02
  8.02172199e-02 -3.21609341e-02 -1.02494910e-01  3.70127447e-02
  1.78930327e-01 -6.26832917e-02 -8.06988031e-03 -8.95908996e-02
  5.89994807e-03  6.92060739e-02 -5.50033003e-02  2.60134749e-02
 -2.05765795e-02 -2.67692395e-02 -5.77854142e-02  1.71739738e-02
 -1.90169178e-02 -1.21584274e-01  5.00959195e-02  5.85821131e-03
  3.83644621e-03  2.31231172e-02  9.33559090e-02  1.97501052e-02]"
"using System;
using System.Collections.Generic;

namespace RefactoringGuru.DesignPatterns.Builder.Conceptual
{
    // The Builder interface specifies methods for creating the different parts
    // of the Product objects.
    public interface IBuilder
    {
        void BuildPartA();
        
        void BuildPartB();
        
        void BuildPartC();
    }
    
    // The Concrete Builder classes follow the Builder interface and provide
    // specific implementations of the building steps. Your program may have
    // several variations of Builders, implemented differently.
    public class ConcreteBuilder : IBuilder
    {
        private Product _product = new Product();
        
        // A fresh builder instance should contain a blank product object, which
        // is used in further assembly.
        public ConcreteBuilder()
        {
            this.Reset();
        }
        
        public void Reset()
        {
            this._product = new Product();
        }
        
        // All production steps work with the same product instance.
        public void BuildPartA()
        {
            this._product.Add(""PartA1"");
        }
        
        public void BuildPartB()
        {
            this._product.Add(""PartB1"");
        }
        
        public void BuildPartC()
        {
            this._product.Add(""PartC1"");
        }
        
        // Concrete Builders are supposed to provide their own methods for
        // retrieving results. That's because various types of builders may
        // create entirely different products that don't follow the same
        // interface. Therefore, such methods cannot be declared in the base
        // Builder interface (at least in a statically typed programming
        // language).
        //
        // Usually, after returning the end result to the client, a builder
        // instance is expected to be ready to start producing another product.
        // That's why it's a usual practice to call the reset method at the end
        // of the `GetProduct` method body. However, this behavior is not
        // mandatory, and you can make your builders wait for an explicit reset
        // call from the client code before disposing of the previous result.
        public Product GetProduct()
        {
            Product result = this._product;

            this.Reset();

            return result;
        }
    }
    
    // It makes sense to use the Builder pattern only when your products are
    // quite complex and require extensive configuration.
    //
    // Unlike in other creational patterns, different concrete builders can
    // produce unrelated products. In other words, results of various builders
    // may not always follow the same interface.
    public class Product
    {
        private List<object> _parts = new List<object>();
        
        public void Add(string part)
        {
            this._parts.Add(part);
        }
        
        public string ListParts()
        {
            string str = string.Empty;

            for (int i = 0; i < this._parts.Count; i++)
            {
                str += this._parts[i] + "", "";
            }

            str = str.Remove(str.Length - 2); // removing last "",c""

            return ""Product parts: "" + str + ""\n"";
        }
    }
    
    // The Director is only responsible for executing the building steps in a
    // particular sequence. It is helpful when producing products according to a
    // specific order or configuration. Strictly speaking, the Director class is
    // optional, since the client can control builders directly.
    public class Director
    {
        private IBuilder _builder;
        
        public IBuilder Builder
        {
            set { _builder = value; } 
        }
        
        // The Director can construct several product variations using the same
        // building steps.
        public void BuildMinimalViableProduct()
        {
            this._builder.BuildPartA();
        }
        
        public void BuildFullFeaturedProduct()
        {
            this._builder.BuildPartA();
            this._builder.BuildPartB();
            this._builder.BuildPartC();
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            // The client code creates a builder object, passes it to the
            // director and then initiates the construction process. The end
            // result is retrieved from the builder object.
            var director = new Director();
            var builder = new ConcreteBuilder();
            director.Builder = builder;
            
            Console.WriteLine(""Standard basic product:"");
            director.BuildMinimalViableProduct();
            Console.WriteLine(builder.GetProduct().ListParts());

            Console.WriteLine(""Standard full featured product:"");
            director.BuildFullFeaturedProduct();
            Console.WriteLine(builder.GetProduct().ListParts());

            // Remember, the Builder pattern can be used without a Director
            // class.
            Console.WriteLine(""Custom product:"");
            builder.BuildPartA();
            builder.BuildPartC();
            Console.Write(builder.GetProduct().ListParts());
        }
    }
}",C#,Builder,Refactoring Guru,https://refactoring.guru/design-patterns/builder/csharp/example#example-0,"[-5.54662645e-02  1.64024532e-02  2.69808192e-02 -7.77957076e-03
 -6.35948628e-02  4.38640006e-02  1.62756648e-02  9.48023349e-02
 -5.69050536e-02 -1.65380631e-02  1.61717199e-02 -2.17324998e-02
  2.28318516e-02 -5.24203032e-02  4.74189445e-02  8.54254793e-03
  1.41276615e-02  6.70005148e-03 -3.29264775e-02  2.40103491e-02
  7.91562572e-02 -8.33741482e-03  9.14597418e-03 -1.22584561e-02
 -5.65956812e-03  3.90983419e-03  3.23952995e-02 -5.61726205e-02
  5.39352633e-02 -2.19105333e-02  2.63878959e-03  7.72632509e-02
 -1.07195517e-02  1.18363015e-02  5.61390258e-02  3.71098183e-02
  1.65039841e-02  2.84623764e-02 -9.21629965e-02 -6.78959861e-02
 -6.59497501e-03  2.87871640e-02 -6.18733391e-02 -3.75155103e-03
  6.33616373e-03 -1.16246697e-02 -6.82129860e-02 -7.22190663e-02
  4.48570848e-02 -3.83859724e-02 -5.60628809e-02  1.52901765e-02
 -4.90953736e-02 -3.81709710e-02  3.72544341e-02  6.79235756e-02
  1.38191404e-02  3.73042226e-02 -2.42556967e-02 -4.63139405e-03
  7.93951899e-02  3.53608467e-02 -6.52600601e-02 -8.93808901e-02
  5.52763306e-02 -3.38856690e-02  1.31688798e-02  2.32846886e-02
 -2.22488418e-02 -2.14976929e-02  5.15560023e-02  4.68070172e-02
 -1.04664424e-02  5.40840998e-02 -3.78795490e-02  3.43027040e-02
  4.57661152e-02  2.01886147e-02 -2.58156955e-02 -4.65223603e-02
 -4.58361469e-02  3.13271508e-02 -4.22968296e-03 -3.98916118e-02
  4.20067422e-02  7.78408498e-02  5.41402102e-02 -1.18126748e-02
  5.34586385e-02  6.39665425e-02 -7.04382285e-02 -5.54728024e-02
  6.00021612e-03  2.33937497e-03  2.96186954e-02  5.30673936e-02
  1.29021155e-02  1.87965240e-02 -1.26294559e-02  6.45002276e-02
 -8.60184580e-02 -2.93517169e-02  2.04923376e-02 -1.97717659e-02
 -5.54344654e-02 -5.91217866e-03 -1.08670175e-01  6.47722743e-03
 -1.52677689e-02 -8.36345367e-03 -7.42238536e-02 -2.94806398e-02
 -6.53841421e-02 -1.68267395e-02 -2.31033899e-02 -9.70178768e-02
  3.65556730e-03 -2.35463716e-02 -1.35466587e-02  5.01309074e-02
  1.27364039e-01  1.37181561e-02  7.42352456e-02  2.49433517e-03
 -5.77122942e-02 -1.19408900e-02  9.48822708e-04 -2.01909132e-34
  4.75226566e-02 -6.03433326e-02 -1.21008437e-02  9.50322971e-02
  2.13517770e-02  2.69038994e-02  8.19156766e-02  1.49559632e-01
  2.05438887e-03 -3.37136947e-02  1.63613558e-02 -1.02880336e-01
 -7.48168826e-02  9.37936977e-02  4.34846617e-02 -4.89501394e-02
  1.05213206e-02  2.15068739e-02 -1.92329101e-02 -4.43796180e-02
 -2.36034207e-02  7.50760138e-02 -2.83996556e-02  1.36611369e-02
 -2.66873348e-03 -7.37238526e-02  2.20630616e-02  6.23495951e-02
 -1.36927545e-01  2.93379910e-02  5.35750017e-02 -1.26484679e-02
  2.79591475e-02  5.01726344e-02 -7.03924298e-02 -4.49950360e-02
 -3.13777737e-02 -4.77080978e-02 -1.10034551e-02 -3.86124067e-02
  1.43218478e-02 -4.96995673e-02 -9.10375174e-03  1.01344995e-02
 -1.91302877e-02 -5.64537272e-02 -8.72612521e-02  2.97809578e-02
  2.13805679e-03 -1.46159697e-02 -1.95390731e-02  1.33357286e-01
  5.46276048e-02 -2.71518696e-02 -2.82970164e-02 -2.39116792e-02
 -3.80117819e-02 -2.64102295e-02 -3.64589952e-02  1.37506220e-02
 -1.04505524e-01  1.71389639e-01 -2.26163194e-02  3.63450199e-02
 -9.63305011e-02  8.07771906e-02  1.64011642e-02 -7.87621439e-02
  3.84855643e-02 -5.90347238e-02 -4.77368385e-02 -2.85301749e-02
  1.25856493e-02 -7.55597949e-02  3.22286971e-02 -2.91808564e-02
 -5.08422889e-02  1.00329760e-02 -6.35765567e-02 -1.04594886e-01
 -2.03350149e-02  1.24712989e-01 -1.13268606e-02  8.68554264e-02
 -1.23601872e-02  4.75217588e-02  1.35421017e-02  9.12843924e-03
  5.36746830e-02  9.73060727e-03  2.67745238e-02 -4.64403220e-02
 -5.32013029e-02  2.32574884e-02  6.24881350e-02 -2.52787911e-33
  4.65216525e-02 -5.29632494e-02  1.04284845e-02 -9.88426730e-02
  1.19334459e-02 -3.98732796e-02 -6.60828650e-02 -7.32951313e-02
 -5.31933568e-02  5.03996685e-02 -2.17108242e-03  1.30383973e-03
  1.28717246e-02 -1.00394878e-04 -5.65236211e-02  1.95024163e-02
  3.49819362e-02 -6.78334460e-02  7.52274096e-02 -1.02934511e-02
  1.41664175e-02  5.86708225e-02  6.24344386e-02 -7.85928816e-02
 -2.27867905e-02 -7.00394511e-02 -1.02871686e-01  9.43551064e-02
  9.21669230e-02 -2.25765798e-02  7.43088052e-02 -6.04608953e-02
 -4.57678251e-02 -4.38238122e-02 -3.22628058e-02 -6.01298548e-02
 -3.42894308e-02  4.14710455e-02  4.58553657e-02 -5.19553646e-02
  6.69192672e-02 -7.51491711e-02  3.40887345e-02  4.17024866e-02
  6.05730489e-02 -1.47805110e-01  6.76178709e-02 -6.47341907e-02
  6.02368824e-02  2.88867479e-04  5.45638017e-02  1.50791956e-02
 -1.66416969e-02 -4.81361058e-03 -7.09171221e-03  3.39684449e-02
  1.02738701e-01 -5.61306216e-02  6.16517700e-02  5.48139215e-02
  3.37710455e-02  2.71488018e-02  6.35415465e-02 -1.21692568e-02
  8.45402032e-02 -1.79526228e-02  4.07935074e-03 -2.03929879e-02
  2.45872382e-02 -6.21804558e-02 -9.16691273e-02  5.84712736e-02
 -3.07524242e-02  6.98127970e-03  4.01460975e-02 -1.57551356e-02
 -1.19176386e-02  4.84585054e-02  2.67433114e-02  2.36691252e-04
 -4.76919971e-02 -3.20802331e-02  1.41988974e-02 -3.08345426e-02
  2.32453384e-02 -7.84121901e-02  1.52812330e-02  3.27658020e-02
  4.28192131e-02 -5.37916040e-03 -2.77304389e-02  8.66677016e-02
 -1.18615011e-04  6.04857951e-02  2.43631247e-02 -6.17762694e-08
 -7.58449659e-02 -5.45483157e-02 -1.39848925e-02  1.61727648e-02
  4.79736105e-02 -8.07797536e-02 -2.83906534e-02  3.74094285e-02
  1.13783395e-02 -2.19727773e-02  1.61715038e-02  2.15241704e-02
  8.58099945e-03  3.09736263e-02  1.20908944e-02 -1.09207861e-01
  3.30085238e-03 -1.73701886e-02 -7.24572912e-02  1.28633790e-02
 -9.17892758e-05 -3.88215519e-02  2.10368205e-02  3.62325460e-02
 -5.70490249e-02 -8.02743882e-02  1.00121781e-01  1.20367936e-03
 -2.29176804e-02  9.42190588e-02 -2.24499404e-02  7.91265666e-02
  4.61924523e-02  5.17768078e-02  2.28836332e-02  1.01100150e-02
  6.30250499e-02  4.81151342e-02 -7.58065283e-03  5.76807782e-02
  4.88303117e-02 -2.21637823e-02 -2.79041454e-02  5.01018763e-02
  1.41193405e-01 -5.29015139e-02 -5.84207065e-02 -6.62728995e-02
 -3.16639617e-03 -9.48476046e-03 -1.01130940e-01  3.13114114e-02
 -7.02609122e-02 -2.93214694e-02 -1.51821384e-02  9.78605542e-03
  8.74050241e-03 -9.40699279e-02  6.14840277e-02  2.94017955e-03
 -6.48683310e-03  1.91680957e-02  4.26753722e-02  7.18744397e-02]"
"using System;

namespace RefactoringGuru.DesignPatterns.FactoryMethod.Conceptual
{
    // The Creator class declares the factory method that is supposed to return
    // an object of a Product class. The Creator's subclasses usually provide
    // the implementation of this method.
    abstract class Creator
    {
        // Note that the Creator may also provide some default implementation of
        // the factory method.
        public abstract IProduct FactoryMethod();

        // Also note that, despite its name, the Creator's primary
        // responsibility is not creating products. Usually, it contains some
        // core business logic that relies on Product objects, returned by the
        // factory method. Subclasses can indirectly change that business logic
        // by overriding the factory method and returning a different type of
        // product from it.
        public string SomeOperation()
        {
            // Call the factory method to create a Product object.
            var product = FactoryMethod();
            // Now, use the product.
            var result = ""Creator: The same creator's code has just worked with ""
                + product.Operation();

            return result;
        }
    }

    // Concrete Creators override the factory method in order to change the
    // resulting product's type.
    class ConcreteCreator1 : Creator
    {
        // Note that the signature of the method still uses the abstract product
        // type, even though the concrete product is actually returned from the
        // method. This way the Creator can stay independent of concrete product
        // classes.
        public override IProduct FactoryMethod()
        {
            return new ConcreteProduct1();
        }
    }

    class ConcreteCreator2 : Creator
    {
        public override IProduct FactoryMethod()
        {
            return new ConcreteProduct2();
        }
    }

    // The Product interface declares the operations that all concrete products
    // must implement.
    public interface IProduct
    {
        string Operation();
    }

    // Concrete Products provide various implementations of the Product
    // interface.
    class ConcreteProduct1 : IProduct
    {
        public string Operation()
        {
            return ""{Result of ConcreteProduct1}"";
        }
    }

    class ConcreteProduct2 : IProduct
    {
        public string Operation()
        {
            return ""{Result of ConcreteProduct2}"";
        }
    }

    class Client
    {
        public void Main()
        {
            Console.WriteLine(""App: Launched with the ConcreteCreator1."");
            ClientCode(new ConcreteCreator1());
            
            Console.WriteLine("""");

            Console.WriteLine(""App: Launched with the ConcreteCreator2."");
            ClientCode(new ConcreteCreator2());
        }

        // The client code works with an instance of a concrete creator, albeit
        // through its base interface. As long as the client keeps working with
        // the creator via the base interface, you can pass it any creator's
        // subclass.
        public void ClientCode(Creator creator)
        {
            // ...
            Console.WriteLine(""Client: I'm not aware of the creator's class,"" +
                ""but it still works.\n"" + creator.SomeOperation());
            // ...
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            new Client().Main();
        }
    }
}",C#,Factory Method,Refactoring Guru,https://refactoring.guru/design-patterns/factory-method/csharp/example#example-0,"[-1.03910372e-01 -3.78060788e-02  1.69826392e-02 -3.73437814e-02
 -9.84106883e-02  3.45350727e-02  4.97965477e-02  9.72523540e-02
 -7.62723014e-02 -2.37430278e-02 -2.54094936e-02 -6.00674488e-02
  2.70166975e-02 -1.45098642e-02  4.06500623e-02  7.69995153e-02
  2.80510983e-03  1.70578563e-03  6.17391779e-04  4.50296998e-02
  1.21301591e-01 -7.38677979e-02 -5.34451194e-02 -2.55493429e-02
 -6.00045137e-02  1.42000560e-02  3.30033042e-02 -1.73193626e-02
  3.29037160e-02  3.08512524e-02 -1.42725827e-02  2.49376595e-02
 -4.52995002e-02  1.08040832e-02 -5.49830236e-02  4.30866815e-02
  2.39140876e-02  5.01240678e-02 -1.36748552e-02 -4.57032993e-02
 -1.73119735e-02  2.52090301e-02 -3.43201645e-02 -6.74580596e-03
  8.23734403e-02 -4.02700976e-02 -3.37070450e-02 -6.26510233e-02
  1.07292598e-02 -4.18708175e-02 -1.76500231e-02 -3.34640942e-03
  1.40265776e-02 -3.01591251e-02  3.35994698e-02  2.41710320e-02
  1.73426662e-02  8.23133439e-02  2.33961791e-02  2.61964574e-02
  8.30369908e-03  8.24122801e-02  8.41259398e-03 -2.27142591e-02
  8.38112459e-02  1.02726594e-02  8.87466874e-03 -2.33853250e-04
 -1.99210439e-02 -3.98596190e-02 -2.51551326e-02  7.12698186e-03
 -8.96196533e-03  2.80075371e-02 -7.95918182e-02 -1.00336960e-02
 -2.48620007e-02  8.21749568e-02 -1.66274831e-02 -7.92889372e-02
  5.42026460e-02  8.58244747e-02  1.19928988e-02 -1.00826258e-02
  2.74300668e-02  1.02970973e-01  3.40746604e-02 -2.45523416e-02
  1.72044449e-02  1.29664555e-01 -5.13065755e-02 -6.31216466e-02
  2.05327682e-02 -1.68354064e-02  2.08883211e-02 -9.76995379e-03
 -2.05771495e-02 -2.50261109e-02 -2.94399112e-02  8.97701234e-02
 -1.01350568e-01  1.36144841e-02  8.79367068e-03 -4.17863838e-02
  7.20248297e-02  5.55913188e-02 -5.95361255e-02 -5.13120890e-02
  7.81576056e-03  4.03885767e-02 -3.43783721e-02 -6.94791600e-03
 -8.07647109e-02  1.13203768e-02 -4.47459659e-03  4.05920148e-02
  3.14678699e-02 -1.67609807e-02 -1.49184987e-02  3.02984565e-02
  5.16985683e-03  2.70086434e-02  5.72009236e-02 -4.98763891e-03
 -1.70508809e-02  2.93772630e-02  2.82395687e-02  4.51511008e-34
  1.14300977e-02 -3.95032577e-02 -3.45763639e-02  1.35102108e-01
  4.16883603e-02 -1.92331448e-02  7.08465427e-02  1.15993142e-01
  1.15186181e-02 -6.08906969e-02  2.77686231e-02 -4.98850159e-02
  1.05480524e-02  3.34109142e-02  8.09114352e-02 -1.22706098e-02
  1.28458543e-02 -3.12117729e-02  3.56402248e-02 -5.43550439e-02
 -5.99719957e-02  8.86444524e-02  2.78911516e-02 -3.86298783e-02
 -1.52418837e-02  2.49731150e-02  7.31967017e-03  1.33832991e-02
 -7.53210858e-02  5.76234329e-03  3.94958742e-02 -3.95428538e-02
 -9.14800353e-03  9.09968317e-02 -7.10965991e-02 -7.91978184e-03
  8.34495854e-03 -4.98043969e-02  8.17336701e-03 -5.72010949e-02
 -1.10906651e-02 -3.81982103e-02  5.58693567e-03  5.91126678e-04
  5.57191111e-03 -8.58733058e-02 -5.94207123e-02 -5.11764665e-04
  2.84948070e-02 -2.65305080e-02  2.24766787e-03  9.95995626e-02
  4.65984382e-02 -3.47349048e-02  2.31929701e-02 -4.11232933e-02
 -2.84362212e-02  2.90294178e-02  3.53280688e-03  3.19570675e-02
 -1.16852961e-01  9.37810242e-02 -5.23251556e-02  1.11941993e-01
 -6.40213788e-02  9.02651474e-02 -3.94025072e-02 -1.34641245e-01
  6.19664155e-02 -6.30245358e-02  5.79074631e-03 -8.49655177e-03
 -7.34376460e-02 -2.19235662e-02  1.03489961e-02  2.22239345e-02
 -9.49846059e-02  1.06767686e-02 -7.57927224e-02 -3.23980041e-02
 -3.50212157e-02  7.74325207e-02  2.72437949e-02  7.69537762e-02
 -9.32435095e-02  4.20650393e-02  2.58208830e-02  3.98014449e-02
  6.06761500e-02  4.12615761e-02  4.64112454e-05 -5.95944412e-02
 -2.86772214e-02  8.33382271e-03  1.07215315e-01 -1.97009474e-33
  2.41549276e-02  1.71367489e-02 -5.01019917e-02 -4.91649695e-02
 -2.84226369e-02  3.63646634e-03 -5.82168661e-02 -6.23049997e-02
 -1.53369397e-01  6.46662861e-02 -9.68585443e-03  2.26400271e-02
  5.26869111e-02  2.01140773e-02 -3.20575126e-02 -4.39025722e-02
 -3.60762179e-02 -3.86402942e-02  1.83028281e-02 -3.73769514e-02
  3.23794000e-02  6.63815439e-02  2.62029786e-02 -8.89993086e-02
 -1.68401632e-03  1.56927165e-02 -9.11702663e-02  1.52523652e-01
  8.39903206e-02 -3.36579159e-02  9.25602112e-03 -1.28658433e-02
  3.52756009e-02 -8.98673385e-02  4.40714248e-02  3.71425459e-03
 -2.10413635e-02  4.27598916e-02  7.61545543e-03 -5.76738864e-02
  2.79349349e-02 -1.07642867e-01 -3.92333344e-02  1.97160915e-02
  4.29624245e-02 -6.58515170e-02 -3.17538194e-02 -5.04620820e-02
  6.25656173e-02 -1.46141630e-02  1.36682941e-02 -3.13103124e-02
 -2.01218184e-02 -7.39772245e-02 -4.52073142e-02  4.82865721e-02
  1.07773356e-01 -6.33409172e-02  6.86540687e-03  4.76277284e-02
  7.94528276e-02 -5.01644835e-02  3.64721753e-02  6.97499663e-02
  3.48719060e-02 -1.38413943e-02  2.95939744e-02 -2.50351205e-02
  8.00176989e-04  1.48441282e-03 -1.82132591e-02  3.18053514e-02
 -1.48145985e-02 -2.93727871e-02  6.39274418e-02  1.11004626e-02
  5.11724912e-02  1.77075844e-02  7.52941659e-03 -7.42673129e-02
 -4.83311526e-03 -7.03609735e-02  6.36627376e-02 -5.77435421e-04
 -1.49600869e-02 -9.99537036e-02  5.34699252e-03 -2.76932307e-03
 -1.15013923e-02 -2.28398982e-02 -1.67278256e-02  8.26550946e-02
 -1.04458883e-01  2.65342463e-02  2.18151789e-02 -5.73704533e-08
 -5.12846410e-02  5.18266391e-03  1.59428287e-02  5.41906208e-02
 -2.43094936e-02 -2.73505431e-02 -7.16817528e-02 -6.46319166e-02
  7.73865730e-03 -1.29395872e-02 -1.04793102e-01  4.77698185e-02
  1.28008248e-02  2.41090804e-02  5.48478626e-02 -4.68169004e-02
  3.67253795e-02 -3.88325825e-02 -7.28328601e-02  3.93512212e-02
 -1.89906207e-03 -5.83157055e-02 -1.54912611e-02 -9.73274559e-03
 -7.77362362e-02 -7.30809197e-02  7.72809014e-02  5.81660792e-02
 -5.45310713e-02  1.29650772e-01 -5.23050576e-02  1.06399149e-01
 -1.31607885e-02  6.82178661e-02  2.83845514e-02  1.81191396e-02
 -1.80471630e-03 -1.36326731e-03  7.23409234e-03  4.14079279e-02
  8.18915591e-02 -1.59169491e-02 -9.08405557e-02  1.42631382e-02
  1.04686759e-01 -1.48454392e-02 -1.05564827e-02 -8.21941569e-02
  2.61857808e-02  6.63257688e-02 -6.58624172e-02  4.84499447e-02
 -4.32461267e-03 -6.59379140e-02 -3.48145142e-02  5.99513873e-02
  6.10667048e-03 -8.88949260e-02  1.17155565e-02  5.07944124e-03
 -4.10960987e-02  1.35662844e-02  9.86951888e-02  2.12755650e-02]"
"using System;

namespace RefactoringGuru.DesignPatterns.Prototype.Conceptual
{
    public class Person
    {
        public int Age;
        public DateTime BirthDate;
        public string Name;
        public IdInfo IdInfo;

        public Person ShallowCopy()
        {
            return (Person) this.MemberwiseClone();
        }

        public Person DeepCopy()
        {
            Person clone = (Person) this.MemberwiseClone();
            clone.IdInfo = new IdInfo(IdInfo.IdNumber);
            clone.Name = String.Copy(Name);
            return clone;
        }
    }

    public class IdInfo
    {
        public int IdNumber;

        public IdInfo(int idNumber)
        {
            this.IdNumber = idNumber;
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            Person p1 = new Person();
            p1.Age = 42;
            p1.BirthDate = Convert.ToDateTime(""1977-01-01"");
            p1.Name = ""Jack Daniels"";
            p1.IdInfo = new IdInfo(666);

            // Perform a shallow copy of p1 and assign it to p2.
            Person p2 = p1.ShallowCopy();
            // Make a deep copy of p1 and assign it to p3.
            Person p3 = p1.DeepCopy();

            // Display values of p1, p2 and p3.
            Console.WriteLine(""Original values of p1, p2, p3:"");
            Console.WriteLine(""   p1 instance values: "");
            DisplayValues(p1);
            Console.WriteLine(""   p2 instance values:"");
            DisplayValues(p2);
            Console.WriteLine(""   p3 instance values:"");
            DisplayValues(p3);

            // Change the value of p1 properties and display the values of p1,
            // p2 and p3.
            p1.Age = 32;
            p1.BirthDate = Convert.ToDateTime(""1900-01-01"");
            p1.Name = ""Frank"";
            p1.IdInfo.IdNumber = 7878;
            Console.WriteLine(""\nValues of p1, p2 and p3 after changes to p1:"");
            Console.WriteLine(""   p1 instance values: "");
            DisplayValues(p1);
            Console.WriteLine(""   p2 instance values (reference values have changed):"");
            DisplayValues(p2);
            Console.WriteLine(""   p3 instance values (everything was kept the same):"");
            DisplayValues(p3);
        }

        public static void DisplayValues(Person p)
        {
            Console.WriteLine(""      Name: {0:s}, Age: {1:d}, BirthDate: {2:MM/dd/yy}"",
                p.Name, p.Age, p.BirthDate);
            Console.WriteLine(""      ID#: {0:d}"", p.IdInfo.IdNumber);
        }
    }
}",C#,Prototype,Refactoring Guru,https://refactoring.guru/design-patterns/prototype/csharp/example#example-0,"[ 1.57724433e-02  7.09069967e-02 -2.35240199e-02 -1.23219555e-02
 -9.10381228e-02  4.74774428e-02  6.89083561e-02  1.02453277e-01
 -2.22628079e-02 -2.46080663e-02 -1.17720682e-02 -7.50941411e-02
  1.67060588e-02 -7.00620264e-02 -1.50520541e-02  1.19498102e-02
 -1.18732937e-01  3.93050760e-02 -3.15631814e-02 -2.58963071e-02
  5.41308075e-02 -5.46441078e-02 -5.34636416e-02 -6.98698964e-03
  8.59940145e-03  8.21328759e-02  4.60891128e-02  1.59655921e-02
  2.02459618e-02 -1.97110535e-03 -3.52940559e-02  1.63954943e-02
 -1.40813496e-02 -4.50703502e-02 -5.08170202e-03  7.68407509e-02
  8.89749790e-04  1.03397653e-01 -4.15350217e-03  6.88520353e-03
  1.34583339e-02 -1.59343332e-02 -1.64303277e-02 -6.18201159e-02
  4.92541529e-02 -3.12334001e-02 -6.98528066e-02  2.74836719e-02
  9.20558814e-03  8.12989939e-03 -6.17856197e-02  1.89561695e-02
 -6.30147755e-02 -2.30287621e-03  6.53202236e-02  7.62683712e-03
  2.73761209e-02 -8.88145417e-02 -2.05635116e-03 -4.73543741e-02
  1.50961587e-02  3.18750776e-02  6.75690994e-02 -8.69019702e-03
  6.98418096e-02 -5.31410724e-02  9.58594009e-02  8.21410865e-03
  3.56223397e-02 -2.35947259e-02 -2.03454997e-02  1.05653048e-01
  1.78569239e-02  3.03760096e-02 -7.01817945e-02 -2.70253606e-02
 -4.98141125e-02 -9.44646914e-03 -4.55244211e-03 -5.66528514e-02
  2.97746179e-03 -1.32573657e-02 -3.62705179e-02  2.68826447e-02
  6.36794269e-02 -4.40194607e-02 -5.35428450e-02  1.05214240e-02
 -4.71127070e-02  2.39940919e-02 -7.38235712e-02  3.81169394e-02
  7.02170283e-02  5.75660467e-02  7.20937103e-02  4.49324921e-02
  4.23058718e-02  2.00830046e-02  7.66636282e-02  1.11902080e-01
 -1.09153569e-01  8.50473419e-02 -2.85710096e-02  4.91002426e-02
 -4.48544472e-02 -2.46475264e-02 -1.71243940e-02 -4.77804579e-02
 -5.64544238e-02  1.51068047e-02 -3.56836841e-02  4.27315682e-02
 -3.94233689e-02  2.82292180e-02  4.10264172e-02 -7.02591762e-02
  6.88897446e-02 -2.36416585e-03 -4.07721922e-02  3.02243792e-02
  7.23025501e-02  2.80670356e-04 -1.21450974e-02  1.59568675e-02
 -1.07388366e-02 -2.58184434e-03  5.41882813e-02  7.03932082e-33
  2.51564141e-02 -7.35373721e-02  2.22411286e-02  5.87607287e-02
  2.61157677e-02  2.01951023e-02 -2.77927388e-02  7.88717438e-03
  6.46660104e-04 -2.39208099e-02 -2.85178982e-02 -6.76969737e-02
  8.17288831e-03 -4.66705374e-02 -5.48602641e-02 -4.52010483e-02
  2.12009754e-02  9.85570550e-02 -2.24474333e-02 -3.56654339e-02
  4.48878519e-02 -8.87946226e-03 -2.36013997e-03 -2.73440443e-02
  2.51933448e-02  3.83713171e-02 -7.22181983e-03  9.19830874e-02
 -2.05073766e-02 -4.63707410e-02  1.08367205e-01 -3.79285365e-02
 -2.17109919e-02  2.34691408e-02 -2.91200615e-02 -8.16802215e-03
  6.42986894e-02 -3.37215029e-02  3.16039659e-02 -3.20390947e-02
 -5.05542010e-02 -6.22844733e-02  7.28371963e-02  9.80316754e-03
 -8.16733837e-02 -9.58536342e-02 -3.49671580e-03  6.58145249e-02
 -4.23089266e-02  3.17063392e-03 -5.85803241e-02  3.54431756e-02
 -7.78827667e-02 -3.50083113e-02 -9.80626643e-02 -1.15074054e-03
 -5.75706288e-02 -4.02552221e-04 -8.52732286e-02  4.57810014e-02
  1.56870745e-02  8.37935433e-02 -6.00867011e-02  3.75820696e-02
  6.63867779e-03  5.40697798e-02  4.77401018e-02 -7.04190284e-02
  1.19120806e-01 -3.09821684e-02 -6.37023151e-02  1.76215297e-04
 -4.93308948e-03 -3.01448107e-02 -2.12416314e-02  1.03543578e-02
 -2.73915119e-02  2.26467177e-02 -1.05024360e-01 -4.23492864e-02
  9.80078895e-03  6.55297711e-02 -8.64326283e-02  8.48629922e-02
  4.40417752e-02  1.94638632e-02  1.78007428e-02  2.08178796e-02
  2.07859688e-02  3.87427248e-02  1.04424618e-02 -2.16817781e-02
  1.71692725e-02 -6.00651130e-02  3.61670256e-02 -6.41672171e-33
  3.29032242e-02  4.75704856e-03  2.95615476e-02  6.72199950e-03
  8.32201242e-02 -6.60232306e-02 -1.02722747e-02  3.51025886e-03
 -6.87963068e-02  5.43547655e-03 -1.71234217e-02 -4.42846417e-02
 -3.69961746e-02 -2.64866906e-03  3.15369703e-02  3.38302627e-02
  1.29812341e-02 -8.06336664e-03  6.75154477e-03 -8.34998935e-02
  4.37063724e-02  9.83761624e-02  6.74252212e-03 -2.80034635e-02
 -8.75698105e-02  1.12906415e-02 -1.09015144e-02  5.93351712e-03
  3.56339328e-02  7.72712613e-03 -1.97602529e-03  1.58187244e-02
 -3.07400245e-02  9.27671324e-03  4.06924374e-02 -5.74895814e-02
  9.13614184e-02  1.97573123e-03 -2.99689695e-02  7.32699633e-02
  2.29528453e-03  2.11829972e-02 -4.28145230e-02  1.77708380e-02
  5.26394621e-02  4.22020862e-03  1.02416109e-02  5.04768640e-02
  8.55490640e-02 -3.19661647e-02  2.91051553e-03 -4.90296483e-02
 -9.85101238e-02 -3.65939960e-02  2.95386906e-03 -1.79555491e-02
  3.18587162e-02 -7.81722590e-02  8.18686262e-02  5.55999838e-02
 -5.16911820e-02 -4.49310690e-02 -2.76128184e-02  4.02102135e-02
  5.45133650e-02 -1.44886887e-02 -1.95248108e-02 -6.48606196e-02
 -2.86454409e-02 -2.88375486e-02 -2.30144281e-02 -2.36070137e-02
  2.69832145e-02 -7.52171278e-02  4.66140993e-02 -1.00434005e-01
 -6.03981093e-02  5.32167628e-02  4.15921472e-02  2.53564566e-02
  4.83143702e-02 -4.17526215e-02  8.71064432e-04  1.29213734e-02
 -1.23958595e-01 -4.29900847e-02  8.77507180e-02  1.18738385e-02
 -4.93256412e-02 -7.44259506e-02 -7.45341107e-02  6.21130392e-02
 -5.76408766e-02 -2.38005240e-02 -6.49587587e-02 -5.25330570e-08
 -5.10779917e-02 -1.50256148e-02  1.10571776e-02  4.75822054e-02
 -3.77235096e-03 -7.64739811e-02 -3.55459340e-02  3.23256967e-03
  7.58509561e-02 -4.13432457e-02  1.95339546e-02  3.19358595e-02
  1.39119536e-01 -8.94411653e-02  2.43972223e-02 -6.53659329e-02
 -6.30608052e-02 -7.48973563e-02 -2.21552234e-02  5.19153662e-02
  5.94468378e-02 -6.33184686e-02 -2.21722089e-02  2.55666394e-02
  7.31267482e-02 -8.78639966e-02  1.02677062e-01  3.55248265e-02
  4.41847928e-02  3.42771523e-02 -2.44407430e-02  8.93065184e-02
  1.05326809e-01  6.21994212e-02  7.22520649e-02 -8.85040388e-02
 -3.85328825e-03  5.61271720e-02  1.26554696e-02  1.06563754e-01
  1.01580150e-01  6.08611200e-03 -9.60056856e-02  5.90559319e-02
  1.02186002e-01 -7.61790648e-02 -3.12077738e-02 -9.58885998e-03
  2.12828834e-02 -4.36067879e-02 -7.50710368e-02  4.43559326e-02
  7.34952465e-02 -8.32848474e-02 -7.58249089e-02 -1.35386884e-02
  2.59151869e-02  3.38414572e-02  5.93649000e-02  1.14996262e-01
 -2.03959160e-02 -5.01139946e-02 -9.45977122e-03 -4.08587120e-02]"
"using System;

namespace RefactoringGuru.DesignPatterns.Adapter.Conceptual
{
    // The Target defines the domain-specific interface used by the client code.
    public interface ITarget
    {
        string GetRequest();
    }

    // The Adaptee contains some useful behavior, but its interface is
    // incompatible with the existing client code. The Adaptee needs some
    // adaptation before the client code can use it.
    class Adaptee
    {
        public string GetSpecificRequest()
        {
            return ""Specific request."";
        }
    }

    // The Adapter makes the Adaptee's interface compatible with the Target's
    // interface.
    class Adapter : ITarget
    {
        private readonly Adaptee _adaptee;

        public Adapter(Adaptee adaptee)
        {
            this._adaptee = adaptee;
        }

        public string GetRequest()
        {
            return $""This is '{this._adaptee.GetSpecificRequest()}'"";
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            Adaptee adaptee = new Adaptee();
            ITarget target = new Adapter(adaptee);

            Console.WriteLine(""Adaptee interface is incompatible with the client."");
            Console.WriteLine(""But with adapter client can call it's method."");

            Console.WriteLine(target.GetRequest());
        }
    }
}",C#,Adapter,Refactoring Guru,https://refactoring.guru/design-patterns/adapter/csharp/example#example-0,"[-8.41635913e-02 -2.34607290e-02  1.46926148e-03 -2.91690025e-02
 -2.73361914e-02  2.81443037e-02  6.07152097e-02  8.62565357e-03
 -5.26987910e-02  2.28019357e-02 -3.56367789e-02 -4.97243255e-02
  4.36548851e-02  4.24491353e-02  4.60502058e-02  1.28078507e-04
  4.52133864e-02 -4.47668545e-02  7.77701885e-02  7.55885020e-02
  1.27730325e-01  2.68766582e-02 -1.17296940e-02 -5.32687455e-02
 -1.02742895e-01 -4.95134592e-02  7.17190430e-02 -4.17584516e-02
 -4.64929044e-02 -7.51900533e-03  3.09326760e-02  5.40212467e-02
 -1.69192046e-01 -4.60665114e-02 -5.21205105e-02 -1.16159245e-02
 -1.57341808e-02  4.21152003e-02 -2.03099521e-03 -6.46100044e-02
  1.14898486e-02  3.80594954e-02  3.97838093e-02 -4.13778611e-02
  6.65130615e-02 -7.88266137e-02 -3.28810029e-02 -2.86188331e-02
 -1.16412090e-02 -1.13947261e-02  1.39144566e-02 -5.39975017e-02
 -1.63122192e-02 -1.91359092e-02  1.79383103e-02  1.81905238e-03
  2.18075025e-03  1.44132391e-01  4.00235280e-02  1.13389427e-02
  2.79163476e-03 -4.07423005e-02  3.67725119e-02  4.76884050e-03
 -3.58153060e-02  1.24833751e-02  1.00910217e-02 -6.16450328e-03
 -6.66817650e-02 -5.57827540e-02 -9.37556326e-02  2.96168830e-02
 -5.22455834e-02 -4.81320210e-02  1.01384139e-02  3.82168405e-02
 -2.85311826e-02  4.45471145e-02  3.54629941e-02 -2.23568957e-02
  6.10917024e-02  6.53657019e-02 -9.06590372e-03 -5.71800023e-03
  6.29980341e-02  9.99510512e-02 -6.16858900e-02 -5.09121642e-02
  2.00693160e-02 -1.08104735e-03  3.37258261e-03 -3.12974267e-02
 -5.02336398e-02 -1.11694261e-02  7.97156915e-02  2.94965152e-02
 -5.68770990e-02 -4.21363041e-02 -7.09802732e-02  7.42884874e-02
 -4.72634993e-02  1.78615749e-02  3.44280642e-03  9.40072257e-03
  6.83125108e-02 -2.66633090e-02 -2.41495147e-02  4.38975953e-02
  5.33261336e-03  4.12196107e-02 -3.43756266e-02  4.86552976e-02
 -4.42106510e-03 -2.81923339e-02 -1.71091389e-02 -2.52325572e-02
  8.44565928e-02 -3.44634466e-02 -6.15262650e-02 -2.25100275e-02
 -3.74794081e-02  3.75070907e-02 -1.65640470e-02 -3.91495489e-02
  5.61730638e-02  3.28283757e-02  5.07080555e-02  3.39392733e-33
 -2.74777282e-02  1.36913974e-02  1.09337941e-02  6.83723837e-02
  7.72178080e-03 -1.11547440e-01  1.12604119e-01  5.56955934e-02
  2.62778085e-02 -7.06045106e-02  7.23913405e-03 -2.27945461e-03
  3.06356903e-02 -1.24104815e-02  2.94247139e-02  6.83450550e-02
  1.72885954e-02  5.48822954e-02  9.01179165e-02  5.51975565e-03
 -7.82267302e-02  1.11605669e-03  5.48069477e-02 -1.63266994e-02
  1.74367204e-02  3.30112688e-02 -6.23624958e-02  5.24189211e-02
 -6.72899261e-02 -1.62718985e-02  1.24786481e-01 -1.72816068e-02
 -3.83456685e-02  8.87734257e-03 -2.89275171e-03 -9.60738286e-02
  4.14900221e-02 -1.59122478e-02 -1.06751956e-01 -1.32409018e-02
  2.01248731e-02 -3.63125466e-02 -3.68863232e-02  7.79979974e-02
  9.03507099e-02 -1.04509994e-01  2.68020760e-02 -2.86829304e-02
  3.82937230e-02  4.78372276e-02 -2.35222224e-02  2.02719048e-02
  8.46354198e-03 -2.70070024e-02  2.69131772e-02  2.24719811e-02
 -3.32707725e-02  7.56053627e-02  5.38711715e-03 -2.21363716e-02
 -7.68003166e-02 -4.80865799e-02 -2.47237328e-02  3.58903259e-02
  7.46523589e-02  5.72961606e-02 -2.13371906e-02 -1.11107782e-01
 -2.87827775e-02 -9.77871418e-02  4.28899191e-02 -1.83637533e-02
 -4.60071079e-02  2.83462852e-02  2.95733195e-02 -1.33370003e-02
 -8.82718936e-02  6.64989799e-02  2.06177421e-02 -7.13074058e-02
 -5.58786206e-02  3.60674784e-02 -2.45874543e-02  5.66275194e-02
 -7.09173307e-02  5.64029068e-02  7.15618432e-02 -4.60353233e-02
  1.00945324e-01 -5.70143461e-02  5.55738285e-02  1.89258475e-02
 -1.08721077e-01 -2.48339139e-02  1.40156329e-01 -4.07923797e-33
  5.67019694e-02 -4.67674062e-02 -5.70637248e-02 -2.21855212e-02
 -3.62855179e-04 -2.65555475e-02 -4.76808316e-04  3.29503790e-02
 -4.58602607e-02 -1.52700832e-02 -6.59150491e-03 -2.34204195e-02
  7.77024031e-02 -1.49549702e-02  8.26714281e-03  3.48212458e-02
 -4.59153764e-02 -2.00634450e-02  2.96402797e-02  2.17042863e-02
  4.37641367e-02  2.83814352e-02  6.96798712e-02 -1.33450583e-01
 -1.22699067e-02  3.35393324e-02 -9.65521932e-02  2.14570686e-02
  3.74270901e-02 -2.81082485e-02 -4.61035594e-03 -8.91016144e-03
  3.14064287e-02 -2.69682007e-03  3.76922823e-02  1.57562420e-02
 -5.84173016e-02  7.36742169e-02 -2.64145136e-02  1.64187048e-02
  1.10735958e-02 -9.72925946e-02 -6.29111901e-02  3.45619232e-03
  4.17117514e-02 -1.07626706e-01 -2.75155790e-02 -7.51949614e-03
  5.34579083e-02 -2.82068248e-03  1.42104551e-02 -3.22239920e-02
 -2.11122986e-02 -3.42232622e-02  4.12065871e-02  4.75248434e-02
  1.36978745e-01 -5.86699173e-02  3.94799858e-02 -1.51411127e-02
  1.05000310e-01 -6.81549534e-02 -4.46911249e-03  6.66135699e-02
  6.95832968e-02  1.75601483e-04  2.25790441e-02 -3.60189751e-02
  7.09763989e-02  1.59376636e-02 -3.66084836e-03 -3.32688279e-02
  7.49727897e-03 -3.17976400e-02  1.08786695e-01 -4.14615348e-02
  9.28551331e-02  6.47464544e-02 -4.73724157e-02  1.02274837e-02
 -5.36968447e-02 -3.39720994e-02  6.96281856e-03  1.24507789e-02
  1.33622000e-02 -5.07805794e-02  1.63282193e-02  1.03982294e-03
 -4.52038534e-02 -4.17996980e-02 -3.85256894e-02  4.31657992e-02
 -3.73067521e-02  3.13091353e-02  1.05056083e-02 -5.75260835e-08
 -2.96279695e-02  3.12910392e-03 -5.22822849e-02  3.57407844e-03
 -4.40812297e-02  2.72724815e-02 -9.62465033e-02 -9.57098976e-02
 -1.62911266e-02  4.56001312e-02 -6.93296343e-02  2.96033174e-02
  6.47801533e-02  8.01793113e-02  5.02893589e-02 -4.77692448e-02
  5.64609617e-02 -1.20703904e-02 -6.54711723e-02  1.75605826e-02
 -6.20419085e-02 -3.16801332e-02  1.80405341e-02 -1.04479857e-01
  5.15303425e-02  1.97108816e-02  4.26659621e-02 -2.58528627e-03
 -5.04803807e-02  9.16398317e-02 -5.23577593e-02  7.32808411e-02
 -3.60167436e-02  3.96193098e-03 -6.95996210e-02  1.98373236e-02
  3.92747335e-02  1.75993070e-02  5.66702299e-02  6.60438463e-02
  3.22348587e-02  2.27839444e-02 -6.23383895e-02 -9.87214036e-03
  5.49252629e-02 -8.26494861e-03  5.53894788e-02 -1.97001696e-02
  5.03785387e-02  6.49119988e-02 -1.48899466e-01  1.53360730e-02
 -6.99551702e-02 -3.80914547e-02 -7.08839223e-02  9.16107092e-03
 -5.97893670e-02 -5.17578907e-02 -9.57754161e-03 -3.50039937e-02
  3.16456705e-02  5.22270724e-02 -2.68240757e-02  1.31237330e-02]"
"using System;

namespace RefactoringGuru.DesignPatterns.Bridge.Conceptual
{
    // The Abstraction defines the interface for the ""control"" part of the two
    // class hierarchies. It maintains a reference to an object of the
    // Implementation hierarchy and delegates all of the real work to this
    // object.
    class Abstraction
    {
        protected IImplementation _implementation;
        
        public Abstraction(IImplementation implementation)
        {
            this._implementation = implementation;
        }
        
        public virtual string Operation()
        {
            return ""Abstract: Base operation with:\n"" + 
                _implementation.OperationImplementation();
        }
    }

    // You can extend the Abstraction without changing the Implementation
    // classes.
    class ExtendedAbstraction : Abstraction
    {
        public ExtendedAbstraction(IImplementation implementation) : base(implementation)
        {
        }
        
        public override string Operation()
        {
            return ""ExtendedAbstraction: Extended operation with:\n"" +
                base._implementation.OperationImplementation();
        }
    }

    // The Implementation defines the interface for all implementation classes.
    // It doesn't have to match the Abstraction's interface. In fact, the two
    // interfaces can be entirely different. Typically the Implementation
    // interface provides only primitive operations, while the Abstraction
    // defines higher- level operations based on those primitives.
    public interface IImplementation
    {
        string OperationImplementation();
    }

    // Each Concrete Implementation corresponds to a specific platform and
    // implements the Implementation interface using that platform's API.
    class ConcreteImplementationA : IImplementation
    {
        public string OperationImplementation()
        {
            return ""ConcreteImplementationA: The result in platform A.\n"";
        }
    }

    class ConcreteImplementationB : IImplementation
    {
        public string OperationImplementation()
        {
            return ""ConcreteImplementationA: The result in platform B.\n"";
        }
    }

    class Client
    {
        // Except for the initialization phase, where an Abstraction object gets
        // linked with a specific Implementation object, the client code should
        // only depend on the Abstraction class. This way the client code can
        // support any abstraction-implementation combination.
        public void ClientCode(Abstraction abstraction)
        {
            Console.Write(abstraction.Operation());
        }
    }
    
    class Program
    {
        static void Main(string[] args)
        {
            Client client = new Client();

            Abstraction abstraction;
            // The client code should be able to work with any pre-configured
            // abstraction-implementation combination.
            abstraction = new Abstraction(new ConcreteImplementationA());
            client.ClientCode(abstraction);
            
            Console.WriteLine();
            
            abstraction = new ExtendedAbstraction(new ConcreteImplementationB());
            client.ClientCode(abstraction);
        }
    }
}",C#,Bridge,Refactoring Guru,https://refactoring.guru/design-patterns/bridge/csharp/example#example-0,"[-6.42777979e-02  2.26994138e-02 -1.13800250e-03 -2.83373948e-02
 -1.28659815e-01  8.70385021e-03  2.28191540e-02  8.27731863e-02
 -1.02460526e-01 -4.82057035e-02 -5.01934551e-02 -2.00967882e-02
  2.67472696e-02 -6.65822392e-03  8.77995193e-02  4.11414951e-02
  4.27374355e-02  1.00426516e-02  3.31588020e-03  3.08566689e-02
  6.40036091e-02 -4.03354280e-02 -8.29762295e-02  8.18488002e-03
 -3.57522145e-02  1.30846780e-02 -1.53101189e-02 -5.01706973e-02
  4.24894281e-02  9.01377425e-02 -2.02196538e-02  3.33655663e-02
 -6.60305470e-02  4.49515060e-02 -5.14742583e-02  8.10866356e-02
 -7.40583194e-03 -4.71781101e-03 -4.04303782e-02 -4.80163433e-02
 -8.07791427e-02  8.19824710e-02 -2.03773491e-02 -2.22599655e-02
  4.08861935e-02 -6.13372885e-02 -4.70664389e-02 -6.28350005e-02
 -4.20891568e-02 -5.19162565e-02 -2.68800929e-02 -9.34203417e-05
 -3.65895871e-03 -4.03548032e-02  2.94559132e-02  1.89988408e-02
  1.28367348e-02  9.45789069e-02 -4.60928539e-03  7.74762360e-03
 -4.57391404e-02  2.64679827e-02  8.21200723e-04  1.91696621e-02
  1.95615925e-02  2.52805147e-02  4.55332361e-02 -1.19077796e-02
  2.00890726e-03 -4.88385744e-02 -5.27201295e-02 -1.04985517e-02
 -3.33593488e-02  7.62915239e-03 -5.12031838e-02 -2.09422577e-02
  7.25011667e-03  1.22053161e-01  3.17013785e-02 -9.36007276e-02
  4.76333313e-02  2.83460673e-02 -2.37781908e-02  3.22602987e-02
  5.62545285e-02  5.05531803e-02 -5.34406751e-02 -7.81398825e-03
 -1.55487098e-02  1.00133754e-01  1.85091458e-02 -7.74481297e-02
 -7.34193325e-02 -5.80297643e-03  3.54014225e-02 -3.10596116e-02
 -1.63216274e-02 -5.50463051e-02 -4.62452583e-02  7.70992711e-02
 -1.07371308e-01  1.03473626e-02  3.85210887e-02 -4.08962406e-02
  7.96946138e-02  4.62853536e-02 -2.22601201e-02 -5.60661666e-02
 -1.08187413e-02 -5.55671267e-02 -4.29108664e-02 -4.02807780e-02
 -4.06164210e-03 -6.90603396e-03 -3.23932841e-02  5.60024641e-02
  4.91948538e-02 -3.95816900e-02  1.03780217e-02  4.26574089e-02
  3.80571075e-02 -2.51674955e-03  4.74351719e-02  1.33664757e-02
 -1.07889529e-02 -6.56387256e-03 -6.50063250e-03  1.99770251e-33
 -3.39198895e-02 -8.98433775e-02 -3.94120626e-02  1.12940900e-01
  2.87363715e-02 -2.91035920e-02  7.03316554e-02  3.30412127e-02
 -2.84381341e-02 -9.77116898e-02  6.40847459e-02  1.20897396e-02
  3.96278240e-02  6.84369206e-02  8.85075405e-02 -3.60572450e-02
  6.84817061e-02  4.69591245e-02  4.93959039e-02 -3.42964269e-02
 -3.10785398e-02  7.12976754e-02  1.27529604e-02 -3.84308808e-02
 -5.11353314e-02  4.07421738e-02 -9.04024113e-03 -1.10047590e-02
 -8.09885189e-02  1.22140674e-02  3.72431390e-02 -1.55062033e-02
 -3.06562092e-02  9.41312239e-02 -8.42006505e-02 -1.05660912e-02
  2.09356137e-02 -4.72891033e-02  1.63091123e-02 -9.06747207e-02
 -3.59971076e-02 -1.90129317e-02  3.79647091e-02 -8.15840997e-03
  4.57339920e-02 -7.59422481e-02 -1.02640986e-01  3.69379148e-02
  3.40787531e-03 -1.11197056e-02  1.68963876e-02  1.03931680e-01
  4.96892119e-03  1.99079458e-02  2.78130025e-02 -3.72767597e-02
 -4.85255457e-02  8.19709897e-02 -2.25784834e-02  1.25103742e-01
 -7.68616945e-02  4.40834649e-02 -4.46858518e-02  4.60874289e-02
  1.41033996e-02  4.12199460e-02 -8.69640857e-02 -6.72885329e-02
  7.94973001e-02 -2.12172568e-02  2.73912475e-02 -5.92134614e-03
 -2.79351790e-02  6.81130067e-02  1.29547026e-02 -1.70405786e-02
 -3.19935419e-02 -2.03077495e-02 -6.73315153e-02 -6.01027310e-02
 -8.47499967e-02  7.80401379e-02  7.02087060e-02  8.48822892e-02
 -1.61614101e-02  2.56522093e-02  6.91641867e-02  1.26051959e-02
  8.93531665e-02 -2.43394133e-02 -4.44034338e-02 -4.86064143e-02
 -1.56703740e-02 -1.74586587e-02  9.59908068e-02 -3.78355375e-33
  8.19471255e-02  6.26450479e-02 -9.76398215e-02 -6.89666271e-02
 -2.41375957e-02 -1.82183832e-03 -1.17093734e-02 -9.57444310e-02
 -1.20352827e-01  4.45759930e-02 -4.09121774e-02 -4.10159072e-03
  4.38882448e-02  2.64638662e-02 -1.10263862e-02 -2.12603472e-02
 -5.42006120e-02 -5.18365987e-02  5.50673604e-02  5.80184860e-03
  1.54127106e-02 -1.05753485e-02  4.69334330e-03 -4.67124134e-02
  8.26691315e-02 -2.63837092e-02 -1.46262228e-01  9.51280966e-02
  1.22942790e-01 -1.46559365e-02 -3.29739973e-02 -1.82539504e-03
 -1.94241200e-02 -6.05125539e-02  3.69821116e-02  2.04985263e-04
  1.18858730e-02  5.89357838e-02 -1.51864178e-02 -5.44196889e-02
  8.32049623e-02 -1.08685307e-01 -6.52133375e-02  3.16064321e-02
  9.42756012e-02  6.65681018e-03 -5.72289452e-02 -5.46907727e-03
 -2.78128348e-02 -2.88009308e-02  3.89370658e-02 -2.94607822e-02
 -2.26924941e-03  7.80696468e-03 -1.95115581e-02  3.11231446e-02
  1.41701639e-01 -3.93499173e-02  3.91419837e-03 -6.59729308e-03
  8.42803791e-02 -6.81247637e-02  2.68509109e-02  2.31656805e-02
  6.29036874e-02 -9.82700754e-03 -1.56149259e-02 -6.77374080e-02
 -3.80737372e-02 -3.30134481e-02 -2.34914534e-02  5.34073263e-02
 -5.42404614e-02 -1.38006487e-03  1.12782255e-01  5.50108403e-02
  8.19697529e-02  6.20557833e-03  3.71885598e-02 -2.38486025e-02
 -4.40036356e-02 -1.16600739e-02  2.45934185e-02  2.47847792e-02
 -2.57778503e-02 -8.62440765e-02 -1.33674880e-02  5.10016493e-02
 -1.70439184e-02 -2.38951761e-02 -2.18006596e-03  7.06484392e-02
 -6.29817694e-02  2.08489597e-02 -8.66456237e-03 -5.38075220e-08
 -4.89263646e-02 -1.03081223e-02 -2.80861910e-02  2.82841567e-02
  2.48209126e-02  4.99729179e-02 -4.80147265e-02 -4.01022211e-02
 -2.54819747e-02 -3.96661088e-02 -7.68539310e-02  1.13636618e-02
  4.29226533e-02 -1.35442819e-02 -1.88233668e-03  1.00644734e-02
  2.16150517e-03 -6.69410452e-02 -4.87431772e-02  8.67667198e-02
 -2.48385128e-02 -4.33755331e-02 -6.86837733e-02  1.97783727e-02
 -4.98183742e-02 -7.87321553e-02  2.47769747e-02  7.82017261e-02
 -2.21594460e-02  8.55922997e-02 -2.49211062e-02  7.93026537e-02
 -7.60909263e-03  1.22652818e-02  2.04388108e-02  4.56167944e-02
  2.89029889e-02 -4.69826395e-03  7.49845337e-03  5.67509495e-02
  3.09372451e-02 -1.33798616e-02 -5.13213053e-02 -3.62912193e-03
  1.60037234e-01 -3.87805738e-02 -1.19285341e-02 -2.69898865e-02
  1.60884541e-02  2.33194418e-02 -1.04780920e-01  4.23862748e-02
  1.31116319e-03 -3.64559367e-02 -8.02914947e-02  5.79411946e-02
 -4.00283653e-03 -8.34504291e-02  1.19984401e-02  1.76656600e-02
 -3.39731537e-02  3.19186375e-02  6.11725487e-02  2.60965042e-02]"
"using System;
using System.Collections.Generic;

namespace RefactoringGuru.DesignPatterns.Composite.Conceptual
{
    // The base Component class declares common operations for both simple and
    // complex objects of a composition.
    abstract class Component
    {
        public Component() { }

        // The base Component may implement some default behavior or leave it to
        // concrete classes (by declaring the method containing the behavior as
        // ""abstract"").
        public abstract string Operation();

        // In some cases, it would be beneficial to define the child-management
        // operations right in the base Component class. This way, you won't
        // need to expose any concrete component classes to the client code,
        // even during the object tree assembly. The downside is that these
        // methods will be empty for the leaf-level components.
        public virtual void Add(Component component)
        {
            throw new NotImplementedException();
        }

        public virtual void Remove(Component component)
        {
            throw new NotImplementedException();
        }

        // You can provide a method that lets the client code figure out whether
        // a component can bear children.
        public virtual bool IsComposite()
        {
            return true;
        }
    }

    // The Leaf class represents the end objects of a composition. A leaf can't
    // have any children.
    //
    // Usually, it's the Leaf objects that do the actual work, whereas Composite
    // objects only delegate to their sub-components.
    class Leaf : Component
    {
        public override string Operation()
        {
            return ""Leaf"";
        }

        public override bool IsComposite()
        {
            return false;
        }
    }

    // The Composite class represents the complex components that may have
    // children. Usually, the Composite objects delegate the actual work to
    // their children and then ""sum-up"" the result.
    class Composite : Component
    {
        protected List<Component> _children = new List<Component>();
        
        public override void Add(Component component)
        {
            this._children.Add(component);
        }

        public override void Remove(Component component)
        {
            this._children.Remove(component);
        }

        // The Composite executes its primary logic in a particular way. It
        // traverses recursively through all its children, collecting and
        // summing their results. Since the composite's children pass these
        // calls to their children and so forth, the whole object tree is
        // traversed as a result.
        public override string Operation()
        {
            int i = 0;
            string result = ""Branch("";

            foreach (Component component in this._children)
            {
                result += component.Operation();
                if (i != this._children.Count - 1)
                {
                    result += ""+"";
                }
                i++;
            }
            
            return result + "")"";
        }
    }

    class Client
    {
        // The client code works with all of the components via the base
        // interface.
        public void ClientCode(Component leaf)
        {
            Console.WriteLine($""RESULT: {leaf.Operation()}\n"");
        }

        // Thanks to the fact that the child-management operations are declared
        // in the base Component class, the client code can work with any
        // component, simple or complex, without depending on their concrete
        // classes.
        public void ClientCode2(Component component1, Component component2)
        {
            if (component1.IsComposite())
            {
                component1.Add(component2);
            }
            
            Console.WriteLine($""RESULT: {component1.Operation()}"");
        }
    }
    
    class Program
    {
        static void Main(string[] args)
        {
            Client client = new Client();

            // This way the client code can support the simple leaf
            // components...
            Leaf leaf = new Leaf();
            Console.WriteLine(""Client: I get a simple component:"");
            client.ClientCode(leaf);

            // ...as well as the complex composites.
            Composite tree = new Composite();
            Composite branch1 = new Composite();
            branch1.Add(new Leaf());
            branch1.Add(new Leaf());
            Composite branch2 = new Composite();
            branch2.Add(new Leaf());
            tree.Add(branch1);
            tree.Add(branch2);
            Console.WriteLine(""Client: Now I've got a composite tree:"");
            client.ClientCode(tree);

            Console.Write(""Client: I don't need to check the components classes even when managing the tree:\n"");
            client.ClientCode2(tree, leaf);
        }
    }
}",C#,Composite,Refactoring Guru,https://refactoring.guru/design-patterns/composite/csharp/example#example-0,"[-6.88544381e-03  2.77260244e-02  1.67450607e-02  6.62114322e-02
 -4.33534533e-02  1.01375561e-02  1.02377450e-02  5.94404414e-02
  2.90650856e-02  4.82218154e-02 -1.21421693e-02 -3.12053859e-02
  3.78142372e-02  1.06315287e-02  4.48429435e-02 -9.36598238e-03
 -4.57580318e-04  7.45214298e-02 -2.17480958e-02 -4.22304384e-02
  5.31244278e-02 -5.97007982e-02 -3.29633914e-02 -2.83838939e-02
 -2.85967495e-02  3.17482054e-02 -3.89676914e-02 -8.89380425e-02
  8.67176708e-03 -1.40584493e-02 -1.19536836e-02  8.65782648e-02
 -3.86552252e-02  6.73358887e-02 -8.92337710e-02  5.24447784e-02
 -4.40214702e-04  4.31490988e-02 -3.15500498e-02 -5.24221659e-02
  1.03564505e-02  8.36429000e-02 -3.49101201e-02 -1.20775953e-01
  5.59781343e-02 -5.50087541e-02 -7.33644366e-02 -9.06715021e-02
 -1.17138308e-02 -6.36241436e-02 -1.88305061e-02  2.15051905e-03
 -2.78073689e-03  6.47173375e-02  5.04108192e-03  1.23401694e-02
  4.25625555e-02 -6.17907615e-03  7.52971508e-03  1.75066316e-03
 -7.32295122e-03 -2.13219933e-02 -4.12435792e-02 -4.57841679e-02
  3.52932252e-02  2.07618140e-02  1.22748623e-02  2.74073835e-02
  5.08644152e-03  5.34364209e-03  8.33957084e-03  1.14335353e-02
  3.18412879e-03  2.76572146e-02 -3.12660225e-02  3.30301262e-02
 -7.84095936e-03  3.52726206e-02  9.25418499e-06 -8.94896016e-02
  3.18802297e-02  9.64401215e-02 -2.03142203e-02 -4.56457101e-02
  2.66020577e-02  1.41828358e-01  1.01852035e-02 -3.07161994e-02
 -2.89228708e-02  5.03653027e-02 -3.67996767e-02  2.29797629e-03
  6.51445761e-02  4.61147279e-02  5.01669571e-02  2.34424546e-02
 -1.95970992e-03 -1.29395649e-02  7.73437205e-04  5.30660003e-02
 -2.41846666e-02  2.01957710e-02  5.55091873e-02 -7.64740482e-02
 -6.47762865e-02  1.60864796e-02 -5.53901754e-02 -5.10830842e-02
 -2.48887902e-03 -1.94636248e-02 -3.66799533e-02  3.56148742e-02
 -6.71454668e-02 -7.25560414e-04 -5.46775870e-02 -5.21050058e-02
  1.19088687e-01 -1.44223198e-02  3.39949946e-03  4.32457961e-02
  9.62635949e-02 -1.88757218e-02  4.62768637e-02  2.14368161e-02
  6.65680096e-02 -4.78896983e-02 -3.69209014e-02  2.93688245e-33
  2.08422877e-02 -2.24774908e-02 -2.55402401e-02  7.90243149e-02
  7.29170293e-02 -1.42661193e-02  7.77761191e-02  4.82927859e-02
  1.01559125e-02 -3.21194238e-04 -1.48287946e-02 -2.66363695e-02
 -2.40765288e-02 -1.65742694e-03  8.79546702e-02 -1.89207084e-02
  3.05367019e-02 -9.53832828e-03  3.05719906e-03 -1.74398962e-02
  3.19330655e-02  5.45627922e-02 -9.15270206e-03  4.47339751e-02
  5.97985648e-02 -4.66369744e-03 -9.60559584e-03  8.70828331e-03
 -1.26932800e-01 -1.26857748e-02  1.11622527e-01 -9.86101478e-03
 -3.03272288e-02  1.04748257e-01 -2.80980896e-02 -1.12885693e-02
  4.64141779e-02 -5.14794849e-02 -1.68403201e-02 -1.01351172e-01
 -4.44347598e-02 -6.53824955e-02 -3.00760992e-04  3.14747132e-02
 -2.61561596e-03 -6.67018816e-02 -6.34711683e-02  2.89516803e-02
  2.93097110e-03  5.56715690e-02  4.72991876e-02  1.29910320e-01
  3.51871401e-02 -3.31476144e-02 -1.45352855e-02  9.00746062e-02
  1.23117529e-02  8.81511196e-02  1.40160294e-02  8.96747634e-02
 -8.37847218e-02  9.08303354e-03 -9.62661430e-02  2.29330417e-02
 -5.98428100e-02  9.39132646e-02 -8.66485536e-02 -8.66993293e-02
  7.74702728e-02 -1.02700368e-01 -3.71675491e-02  2.39165742e-02
 -4.41031419e-02 -1.65562537e-02  4.92943674e-02 -3.04575861e-02
 -6.10579997e-02 -2.67824009e-02 -6.14613071e-02 -6.27836436e-02
 -9.03239623e-02  8.18030089e-02  4.72383164e-02  1.15850970e-01
  1.87050216e-02  2.15527359e-02  1.90128386e-02  3.53142135e-02
  6.86932541e-03 -2.92598561e-04  7.79086817e-03 -5.55259585e-02
  1.32358344e-02  4.58443398e-03  9.30310935e-02 -3.48120411e-33
  7.00149918e-03  1.63634606e-02 -2.96883006e-02 -1.64941344e-02
  4.07191599e-03 -3.44414525e-02 -1.04770049e-01 -6.92498386e-02
 -1.58068448e-01 -8.46061669e-03 -1.38419587e-02  2.91122794e-02
  3.86983529e-02  2.76246350e-02 -6.09726645e-02  3.85135040e-02
  1.61039997e-02 -4.71825935e-02  8.25695768e-02  7.20867561e-03
  2.41852272e-02  8.94587710e-02  7.82082826e-02 -4.84932959e-02
  9.60819703e-03 -8.21447838e-03 -7.32874870e-02  7.27079213e-02
  1.04752049e-01  9.86058079e-03  2.42931601e-02 -2.84382030e-02
  6.74625114e-02 -9.99247208e-02  2.90207509e-02 -1.08225971e-01
 -2.55538467e-02  4.17813808e-02  2.53697578e-02  1.60388388e-02
  1.44177454e-03 -1.04278713e-01 -1.60358027e-02 -1.17427120e-02
  5.50951576e-04 -1.14776380e-01 -8.20732582e-03  5.13725802e-02
  1.49309263e-02  3.89250144e-02  1.87574551e-02 -6.83779940e-02
 -4.65243272e-02  3.98847414e-03  2.46535428e-02  2.93286387e-02
  1.20391659e-01 -2.05050167e-02  9.35060382e-02 -3.23548466e-02
  1.23624317e-02 -5.27353436e-02 -1.45222964e-02  4.91064899e-02
  8.63846987e-02 -1.21844718e-02 -5.72091341e-02 -5.49538210e-02
  9.31116845e-03  5.66478586e-03 -1.62151139e-02  4.30344157e-02
 -2.86054015e-02 -3.39127705e-02  9.84860957e-02 -3.91141810e-02
  1.41843017e-02  5.37672825e-02  4.06241715e-02  5.62354969e-03
 -6.59329072e-02 -5.15837185e-02  3.81808961e-03 -4.87845019e-02
 -2.73965187e-02 -1.04877256e-01  1.18138650e-02 -6.56299898e-03
 -9.52848885e-03  2.24423353e-02 -2.59678476e-02  5.19654751e-02
 -1.91174671e-02 -2.66123619e-02  2.58080196e-02 -5.46664083e-08
 -3.94008458e-02 -4.51108441e-02 -5.21382540e-02 -9.67718940e-03
  9.21626315e-02 -9.40108374e-02 -3.45787890e-02  2.68820617e-02
 -6.28982708e-02 -2.32574157e-03 -1.38793476e-02  4.24990803e-02
  5.46773523e-02 -1.47302756e-02  6.64711520e-02 -2.56451443e-02
  3.70608643e-02 -3.69139016e-02 -9.09936428e-02  7.34827071e-02
 -7.13965064e-03 -1.43365711e-02 -2.60367859e-02  1.00964837e-01
  1.97354500e-04 -6.50547892e-02  1.03949100e-01  2.43054032e-02
 -1.38078816e-02  5.95749170e-02 -6.15008995e-02  8.23398754e-02
 -2.35170554e-02  2.04171501e-02 -5.53542115e-02  4.67891134e-02
 -2.62364298e-02 -3.80945904e-03  1.98983047e-02  9.44351554e-02
  4.27658819e-02 -5.98445646e-02 -7.99944717e-03  2.28556655e-02
  6.90551102e-02 -6.05426468e-02 -4.50163744e-02 -7.95803405e-03
  4.70142327e-02  1.66758650e-03 -1.28289849e-01 -5.70688955e-03
 -8.58197436e-02 -5.41731007e-02 -6.35127574e-02  1.31774116e-02
  4.30081785e-02 -3.60031724e-02  9.34760422e-02  9.92216356e-03
 -2.68269069e-02  1.10605806e-02  9.67006385e-03 -2.79145129e-02]"
"using System;

namespace RefactoringGuru.DesignPatterns.Composite.Conceptual
{
    // The base Component interface defines operations that can be altered by
    // decorators.
    public abstract class Component
    {
        public abstract string Operation();
    }

    // Concrete Components provide default implementations of the operations.
    // There might be several variations of these classes.
    class ConcreteComponent : Component
    {
        public override string Operation()
        {
            return ""ConcreteComponent"";
        }
    }

    // The base Decorator class follows the same interface as the other
    // components. The primary purpose of this class is to define the wrapping
    // interface for all concrete decorators. The default implementation of the
    // wrapping code might include a field for storing a wrapped component and
    // the means to initialize it.
    abstract class Decorator : Component
    {
        protected Component _component;

        public Decorator(Component component)
        {
            this._component = component;
        }

        public void SetComponent(Component component)
        {
            this._component = component;
        }

        // The Decorator delegates all work to the wrapped component.
        public override string Operation()
        {
            if (this._component != null)
            {
                return this._component.Operation();
            }
            else
            {
                return string.Empty;
            }
        }
    }

    // Concrete Decorators call the wrapped object and alter its result in some
    // way.
    class ConcreteDecoratorA : Decorator
    {
        public ConcreteDecoratorA(Component comp) : base(comp)
        {
        }

        // Decorators may call parent implementation of the operation, instead
        // of calling the wrapped object directly. This approach simplifies
        // extension of decorator classes.
        public override string Operation()
        {
            return $""ConcreteDecoratorA({base.Operation()})"";
        }
    }

    // Decorators can execute their behavior either before or after the call to
    // a wrapped object.
    class ConcreteDecoratorB : Decorator
    {
        public ConcreteDecoratorB(Component comp) : base(comp)
        {
        }

        public override string Operation()
        {
            return $""ConcreteDecoratorB({base.Operation()})"";
        }
    }
    
    public class Client
    {
        // The client code works with all objects using the Component interface.
        // This way it can stay independent of the concrete classes of
        // components it works with.
        public void ClientCode(Component component)
        {
            Console.WriteLine(""RESULT: "" + component.Operation());
        }
    }
    
    class Program
    {
        static void Main(string[] args)
        {
            Client client = new Client();

            var simple = new ConcreteComponent();
            Console.WriteLine(""Client: I get a simple component:"");
            client.ClientCode(simple);
            Console.WriteLine();

            // ...as well as decorated ones.
            //
            // Note how decorators can wrap not only simple components but the
            // other decorators as well.
            ConcreteDecoratorA decorator1 = new ConcreteDecoratorA(simple);
            ConcreteDecoratorB decorator2 = new ConcreteDecoratorB(decorator1);
            Console.WriteLine(""Client: Now I've got a decorated component:"");
            client.ClientCode(decorator2);
        }
    }
}",C#,Decorator,Refactoring Guru,https://refactoring.guru/design-patterns/decorator/csharp/example#example-0,"[-4.54396270e-02  1.82164889e-02  3.52699310e-02  4.83594723e-02
 -1.02880694e-01  3.71039025e-02  8.12443532e-03  3.66597399e-02
 -5.55286892e-02 -1.17017552e-02 -2.23583095e-02 -1.19260587e-02
 -3.32030840e-02  4.05781381e-02  8.42214748e-02  3.05389296e-02
  8.71696975e-03  3.30442600e-02 -5.45691215e-02  7.59233683e-02
  8.11210647e-02 -7.43440315e-02 -6.05788939e-02 -2.59392075e-02
 -2.25993469e-02  1.54371280e-02  3.05518024e-02 -6.05185702e-02
  4.43082601e-02 -1.28854206e-03  1.59136094e-02  2.73094438e-02
 -1.31174505e-01  3.13127711e-02 -1.05638199e-01  5.42398989e-02
  1.59433950e-03  4.99216355e-02 -1.92981698e-02 -5.67842610e-02
 -7.50089670e-03  5.92328683e-02 -6.98006749e-02 -1.52036576e-02
  8.21062997e-02 -1.96784995e-02 -3.19356774e-03 -1.11304916e-01
 -4.14747223e-02 -9.22340602e-02  1.22336708e-02  4.50854078e-02
  1.93020478e-02  6.17845319e-02 -1.44632412e-02  2.27358881e-02
  6.11557625e-02  4.69661243e-02  1.86871514e-02  2.54182778e-02
 -6.36587217e-02  2.52432730e-02  3.95801552e-02  6.35404978e-03
  1.61772370e-02 -5.15908515e-03  3.53286229e-02  3.01171076e-02
  1.57214124e-02 -1.08643370e-02 -1.33113731e-02 -2.22767163e-02
  2.71914825e-02  1.83996186e-02 -1.04615539e-02  1.59300789e-02
 -3.28303650e-02  9.02955979e-02  1.44516658e-02 -7.42362514e-02
  6.01242855e-02  7.88707659e-02  5.83237456e-03 -1.68780610e-02
  4.90570962e-02  1.11290239e-01 -1.65181775e-02 -3.91354784e-02
 -7.98869319e-03  8.82487819e-02  4.84592579e-02 -1.90656707e-02
  5.68964407e-02  8.23424198e-03 -1.07568521e-02 -3.71365771e-02
 -3.13545540e-02  1.18901562e-02 -2.26625707e-02  5.47989756e-02
 -4.58609946e-02  9.95315798e-03 -1.10192979e-02 -2.66312733e-02
 -1.88760541e-03  2.03956142e-02 -8.81564021e-02 -3.10051776e-02
 -2.04732828e-02 -2.21263058e-02  9.48664732e-03  3.51292118e-02
 -6.71174303e-02 -3.41407023e-02  1.39324293e-02 -6.70736004e-03
  4.93397526e-02 -2.52654292e-02  7.05064833e-02  8.05406943e-02
  6.81986287e-02 -2.63394676e-02  5.42418510e-02 -1.00077372e-02
  3.70217860e-02 -2.34053005e-03  4.27093497e-03  2.22549072e-33
  2.65860204e-02 -3.77847552e-02 -8.04917961e-02  1.15419269e-01
  1.41688762e-02 -3.03145349e-02  3.74782458e-02  7.45724663e-02
 -3.87286348e-03  3.65734566e-03  3.67894918e-02 -4.19454612e-02
 -2.79288422e-02  2.02034414e-02  5.45119196e-02 -4.63943696e-03
  1.58318672e-02  4.64267423e-03 -1.26061337e-02 -2.45232992e-02
 -2.45037600e-02  9.88984331e-02  2.19460875e-02 -2.49113645e-02
 -1.12943007e-02 -1.18007492e-02  1.49744621e-03 -2.68435981e-02
 -1.25489473e-01 -2.03221273e-02  8.36295336e-02 -4.45382893e-02
  2.70086918e-02  1.47099286e-01 -7.90732130e-02 -3.59241404e-02
 -5.07790595e-03 -5.21118902e-02 -2.20294259e-02 -7.57161900e-02
 -5.44495732e-02 -1.86434630e-02 -1.30729619e-02  2.03224067e-02
  5.85807450e-02 -3.32009085e-02 -2.64410283e-02  4.66242507e-02
  3.18382420e-02 -5.62570132e-02  6.99999407e-02  1.41012847e-01
  7.94436559e-02  4.56106588e-02  7.63675272e-02  5.08149490e-02
  3.63262407e-02  1.67406574e-02 -4.51000314e-03  9.95685998e-03
 -7.72755668e-02  8.17141309e-02 -8.25183690e-02  3.01330891e-02
 -5.26033454e-02  7.44515955e-02 -4.77860309e-03 -7.74231404e-02
  3.04986723e-03 -5.16978353e-02  4.11187159e-03 -9.39963269e-04
 -1.16877094e-01 -1.48113882e-02  6.05779998e-02 -1.24595575e-02
 -7.23149180e-02 -5.11591462e-03 -4.06326987e-02 -7.14932084e-02
 -7.78567865e-02  7.79740736e-02  2.37787254e-02  1.27008080e-01
 -1.97632611e-02  5.70583669e-03  6.70012757e-02  3.43124084e-02
  4.76062223e-02  1.72093720e-03  1.95931271e-03 -6.93211928e-02
 -1.53424870e-02 -3.58696282e-02  6.89669997e-02 -3.13858902e-33
  8.82950705e-03  3.36057320e-02 -2.10942924e-02 -2.54065152e-02
 -4.25626151e-02 -2.05412190e-02 -1.09638378e-01 -4.46294136e-02
 -8.75912905e-02  2.52356641e-02 -2.62024812e-02  4.09273952e-02
  4.09429073e-02  3.44229527e-02 -4.46391217e-02  4.92572486e-02
 -4.96969894e-02 -2.67738011e-02  9.19539928e-02 -5.50116934e-02
  3.24009471e-02  3.98388319e-02  2.16888264e-03 -4.38595116e-02
 -1.78749878e-02 -7.72023527e-03 -8.69605765e-02  9.40716788e-02
  1.53355837e-01 -3.34143750e-02  2.31631439e-05 -6.09927475e-02
  4.23836298e-02 -7.48221278e-02 -1.33232474e-02 -1.88533366e-02
 -5.20057976e-02  4.44782227e-02 -2.90985908e-02 -2.15671957e-02
 -3.56144272e-02 -7.39660487e-02 -1.10250749e-02  3.61298881e-02
 -3.26553881e-02 -8.72450247e-02 -9.77617949e-02 -1.59885408e-03
  2.82447692e-02  5.27338162e-02  7.23327277e-03 -3.34382989e-02
 -2.45218500e-02 -3.68541293e-02 -2.21728478e-02  7.05986097e-03
  7.36119673e-02 -6.92550093e-02  2.41077412e-02  5.14758825e-02
  9.49407890e-02 -4.63576391e-02  3.35633531e-02  2.03421898e-02
  5.82184829e-02  8.98357294e-03  8.99928249e-03 -9.72351432e-02
  3.16009368e-03  7.03122234e-03  6.67814016e-02  6.01606295e-02
 -7.69440606e-02 -1.07920431e-02  1.13079533e-01  2.58070976e-02
  4.77700531e-02 -2.39124298e-02  4.73314300e-02 -4.12112698e-02
 -1.52566889e-02 -7.76048526e-02  2.55235601e-02 -4.21445817e-02
 -1.13171330e-02 -9.43969637e-02  3.01716551e-02  4.38657968e-04
  4.99574281e-02 -5.03714895e-03 -4.20949236e-03  1.00806370e-01
 -2.14253161e-02 -1.54305231e-02 -1.08172009e-02 -5.40167591e-08
 -3.60455140e-02 -4.24976125e-02 -4.87309657e-02 -4.63820994e-02
 -2.51064710e-02 -3.47464755e-02 -2.37199152e-03 -5.23903929e-02
 -9.10744071e-02 -3.91248763e-02  2.56613665e-03  5.16175441e-02
  1.26362629e-02 -3.07498537e-02  3.25658210e-02  1.64811930e-03
 -6.30703103e-03 -5.17934747e-02 -1.01678096e-01  1.90589894e-02
 -2.16453541e-02 -2.37277038e-02 -4.45825644e-02  2.91355066e-02
 -2.30235662e-02 -5.05000018e-02  6.80851042e-02  7.58746117e-02
 -1.77436986e-03  8.34755450e-02 -6.51601180e-02  4.54753712e-02
  1.97684914e-02  2.89017018e-02 -1.23954471e-02  7.85991773e-02
 -1.92248300e-02 -7.98381418e-02  6.39278591e-02  9.93269756e-02
  4.88021225e-02 -9.64939222e-02 -2.52935179e-02  4.30101678e-02
  9.47534144e-02 -3.72188352e-02 -5.10822423e-02 -4.69531603e-02
  2.19484679e-02  5.49126826e-02 -4.93410155e-02 -1.80276029e-03
 -1.09785825e-01 -3.06438338e-02 -9.53421667e-02  2.42665689e-02
  2.60209274e-02  1.34794163e-02  5.87115251e-02 -2.61428487e-02
 -1.00413434e-01  2.46308614e-02  7.81703964e-02 -2.77278349e-02]"
"using System;

namespace RefactoringGuru.DesignPatterns.Facade.Conceptual
{
    // The Facade class provides a simple interface to the complex logic of one
    // or several subsystems. The Facade delegates the client requests to the
    // appropriate objects within the subsystem. The Facade is also responsible
    // for managing their lifecycle. All of this shields the client from the
    // undesired complexity of the subsystem.
    public class Facade
    {
        protected Subsystem1 _subsystem1;
        
        protected Subsystem2 _subsystem2;

        public Facade(Subsystem1 subsystem1, Subsystem2 subsystem2)
        {
            this._subsystem1 = subsystem1;
            this._subsystem2 = subsystem2;
        }
        
        // The Facade's methods are convenient shortcuts to the sophisticated
        // functionality of the subsystems. However, clients get only to a
        // fraction of a subsystem's capabilities.
        public string Operation()
        {
            string result = ""Facade initializes subsystems:\n"";
            result += this._subsystem1.operation1();
            result += this._subsystem2.operation1();
            result += ""Facade orders subsystems to perform the action:\n"";
            result += this._subsystem1.operationN();
            result += this._subsystem2.operationZ();
            return result;
        }
    }
    
    // The Subsystem can accept requests either from the facade or client
    // directly. In any case, to the Subsystem, the Facade is yet another
    // client, and it's not a part of the Subsystem.
    public class Subsystem1
    {
        public string operation1()
        {
            return ""Subsystem1: Ready!\n"";
        }

        public string operationN()
        {
            return ""Subsystem1: Go!\n"";
        }
    }
    
    // Some facades can work with multiple subsystems at the same time.
    public class Subsystem2
    {
        public string operation1()
        {
            return ""Subsystem2: Get ready!\n"";
        }

        public string operationZ()
        {
            return ""Subsystem2: Fire!\n"";
        }
    }


    class Client
    {
        // The client code works with complex subsystems through a simple
        // interface provided by the Facade. When a facade manages the lifecycle
        // of the subsystem, the client might not even know about the existence
        // of the subsystem. This approach lets you keep the complexity under
        // control.
        public static void ClientCode(Facade facade)
        {
            Console.Write(facade.Operation());
        }
    }
    
    class Program
    {
        static void Main(string[] args)
        {
            // The client code may have some of the subsystem's objects already
            // created. In this case, it might be worthwhile to initialize the
            // Facade with these objects instead of letting the Facade create
            // new instances.
            Subsystem1 subsystem1 = new Subsystem1();
            Subsystem2 subsystem2 = new Subsystem2();
            Facade facade = new Facade(subsystem1, subsystem2);
            Client.ClientCode(facade);
        }
    }
}",C#,Facade,Refactoring Guru,https://refactoring.guru/design-patterns/facade/csharp/example#example-0,"[-2.80168429e-02  3.34360786e-02 -4.43386659e-02  8.80043954e-03
 -1.47109732e-01 -6.28713742e-02 -4.70252521e-02  6.57220334e-02
 -6.13877624e-02  3.99334058e-02 -4.19753268e-02 -5.67267053e-02
  4.76809852e-02 -2.42223162e-02  8.21126774e-02 -1.38494009e-02
  2.26366669e-02 -7.26925135e-02 -7.92913791e-03  4.20652032e-02
  8.79958346e-02 -7.45409876e-02 -4.38117906e-02 -4.76014428e-02
 -6.91513643e-02 -1.56263765e-02 -4.01681773e-02  1.55153801e-03
  2.82985084e-02  2.59520467e-02  4.57075797e-02  4.92105447e-03
 -6.87489733e-02  2.23356951e-02  2.37621609e-02  9.11755338e-02
  8.30256566e-02  2.30435543e-02 -9.96466447e-03  4.40833867e-02
 -5.46401963e-02  2.03569066e-02 -7.01880455e-02 -5.74669652e-02
  5.37393391e-02 -8.07958543e-02 -5.44208735e-02 -2.00588200e-02
 -2.20416412e-02 -8.24622661e-02 -6.22900613e-02 -3.29376347e-02
 -1.50841493e-02  3.07273050e-03  3.67030390e-02  3.33077181e-03
  1.73849668e-02  4.46052700e-02 -3.75738256e-02 -2.42122021e-02
 -6.19835546e-03  4.24969662e-03 -4.87486906e-02 -2.45105457e-02
  1.44728208e-02  5.47269322e-02  2.40291422e-03  4.02038498e-03
 -4.68490459e-03 -1.85134802e-02 -3.53011861e-02 -2.35829540e-02
 -8.26674979e-03  4.96405400e-02 -8.30062851e-02 -1.22561753e-02
  2.22697277e-02  3.62350158e-02 -1.09465532e-02 -1.27511859e-01
  1.12189539e-01  4.61796597e-02 -9.43425447e-02  1.08599616e-02
  2.01363824e-02  5.01661189e-02 -2.47578118e-02 -1.66250989e-02
  1.81376245e-02  8.66524428e-02 -2.23354623e-02 -7.11728036e-02
  8.10484588e-03 -2.90358849e-02  5.83938770e-02  1.40210828e-02
 -6.22808076e-02 -1.30702108e-02  4.13960554e-02  5.22384495e-02
 -7.75697082e-02 -2.45094802e-02  7.73249716e-02 -8.45606066e-03
 -6.78309007e-03  5.55216558e-02 -4.43873703e-02  5.15396986e-03
 -1.45092439e-02 -3.77417132e-02 -6.43055514e-02  5.43150753e-02
 -4.49255109e-02 -1.33678624e-02  9.91998333e-03  6.97373180e-03
  8.12591612e-02 -2.62678619e-02 -2.12150645e-02  5.44349514e-02
  9.83905196e-02  9.45090409e-03  9.46354270e-02  1.40682235e-02
  3.99200432e-02  3.84543790e-04 -1.14947110e-02  4.40443297e-33
 -9.93874203e-03 -3.24232876e-02 -2.76144519e-02  1.31892771e-01
  4.64539789e-02  1.49623649e-02  5.21303825e-02  7.87118152e-02
  1.00909192e-02  4.78857048e-02 -2.75436882e-02 -4.07777317e-02
  1.15988096e-02 -4.56431881e-02  7.87683800e-02 -3.82427797e-02
  8.89938399e-02  6.08896138e-03 -4.55333963e-02 -3.45171802e-02
  3.73285636e-02  6.68785349e-02  1.40012307e-02 -5.60167953e-02
  1.64498929e-02 -2.94426866e-02 -2.78011593e-03  2.64773872e-02
 -7.13307261e-02 -1.52083477e-02  1.12334594e-01 -4.91406396e-02
 -2.38740407e-02  1.08158231e-01 -4.50784750e-02  8.53142608e-03
  5.33731841e-02 -1.68088600e-02  5.98705560e-02 -1.25313714e-01
 -7.31431842e-02 -4.66345064e-02  1.97689421e-02  5.40004186e-02
  5.66315744e-03 -7.67694339e-02 -1.09672956e-01 -2.76522874e-03
 -1.44231971e-02 -3.53831947e-02  9.98407751e-02  9.99639779e-02
  2.13281978e-02  3.91293094e-02  5.24780573e-03  5.25111370e-02
 -5.51598892e-02  7.15192780e-03 -1.26418378e-02  3.19256894e-02
 -9.54408869e-02  6.42730435e-03 -6.02540150e-02  4.94525433e-02
  2.23343298e-02 -4.13683290e-03 -5.10530658e-02 -7.13687390e-02
  4.28979658e-02 -2.43693646e-02 -3.30444239e-02 -1.01867097e-03
 -5.59013560e-02  2.91535668e-02  3.33432853e-02  1.14008170e-02
  1.14866337e-02 -3.13357897e-02 -7.58300647e-02 -3.05330325e-02
 -6.24259561e-02  5.61630093e-02 -2.01372034e-03  8.87890086e-02
  3.12859453e-02  7.11616576e-02  4.07359898e-02 -1.70082804e-02
  4.01201993e-02  2.94590872e-02 -2.81896833e-02 -8.26343745e-02
 -4.00910415e-02 -4.11570035e-02  1.09181821e-01 -6.12812572e-33
  8.51741731e-02  4.46214573e-04 -9.89768133e-02 -8.17986131e-02
 -3.16005908e-02 -8.61641299e-03 -6.65953457e-02 -7.27361739e-02
 -1.86839312e-01  5.42487353e-02 -4.86841686e-02  5.45912869e-02
  3.91286053e-02 -1.35814836e-02  1.94140393e-02 -1.84579554e-03
  2.79260240e-02 -6.56376705e-02  8.97479728e-02  6.75380556e-03
 -2.02005617e-02  9.54455435e-02  1.12839798e-02 -5.99213354e-02
 -3.35233994e-02  2.03362219e-02 -1.01669997e-01  8.76579061e-02
  1.15143731e-01  1.95731912e-02 -4.06563804e-02 -1.38183013e-02
  3.80487777e-02 -8.00148956e-03  6.37694150e-02  1.11328382e-02
 -9.46304854e-03  4.41650860e-02 -4.15725866e-03 -1.63780339e-02
  4.93070781e-02 -6.83780462e-02 -3.66887413e-02 -5.94594236e-03
  5.14247082e-02 -3.05733494e-02 -1.74714364e-02  8.43378901e-03
 -5.23335859e-02  1.13563882e-02 -3.22349928e-02 -4.83887680e-02
 -7.99491927e-02 -1.52872251e-02  1.88053064e-02  1.78835802e-02
  2.17390861e-02 -3.34221385e-02  3.94273251e-02  2.57747117e-02
  1.22006610e-01 -4.94010970e-02 -1.72228739e-02  3.78855057e-02
  5.53009585e-02 -3.15089859e-02 -4.34809662e-02 -5.47248833e-02
  1.10781975e-02 -1.04387626e-02 -3.83257754e-02  3.94716896e-02
 -9.93895531e-02 -2.83253621e-02  6.65514320e-02  1.78585842e-03
 -4.99025472e-02 -2.74728099e-03  1.12082120e-02  3.72331142e-02
 -2.12927517e-02  3.07225063e-02 -4.54012267e-02  3.14065777e-02
 -7.06656948e-02 -8.73077810e-02  5.55295125e-02  1.44072603e-02
 -4.26653214e-02 -5.52972220e-02 -1.18939215e-02  4.88095097e-02
  1.48435812e-02  1.87432207e-02 -1.10012311e-02 -5.53876625e-08
 -3.69653129e-03  1.57036455e-04  3.97462174e-02  1.54707003e-02
 -2.05157865e-02 -4.00358438e-02 -1.06218643e-01 -6.02194779e-02
 -1.08510656e-02 -2.76206825e-02 -5.94324432e-02  6.77803531e-02
  7.53543302e-02  2.41436046e-02 -2.32305583e-02 -1.87593736e-02
  2.28129346e-02 -6.98582008e-02 -5.81170693e-02  4.55383472e-02
  3.31545211e-02 -1.60728805e-02 -3.78466807e-02  7.61467442e-02
 -6.43387437e-03 -3.82630937e-02  4.19303067e-02 -2.25622859e-02
 -3.71623375e-02  7.53240213e-02  4.28335881e-03  8.05035159e-02
  1.44039830e-02  1.03109576e-01  1.05735157e-02  3.55958529e-02
  2.73305667e-03  3.46636400e-02  5.50400279e-02 -3.41599882e-02
  9.71162543e-02 -3.82822230e-02  7.20134098e-03  5.10176122e-02
  6.96852431e-02 -2.87304400e-03  1.90923885e-02 -1.03590768e-02
  8.25734958e-02 -4.75885929e-04 -1.25569150e-01  1.65262762e-02
 -2.02241782e-02  8.02859291e-03 -7.30928481e-02  2.34116651e-02
  4.04650578e-03 -3.50908004e-02  1.03939071e-01  6.20696396e-02
 -5.66018187e-02  5.59400916e-02  1.40330913e-02 -4.41108346e-02]"
"using System;
using System.Collections.Generic;
using System.Linq;
// Use Json.NET library, you can download it from NuGet Package Manager
using Newtonsoft.Json;

namespace RefactoringGuru.DesignPatterns.Flyweight.Conceptual
{
    // The Flyweight stores a common portion of the state (also called intrinsic
    // state) that belongs to multiple real business entities. The Flyweight
    // accepts the rest of the state (extrinsic state, unique for each entity)
    // via its method parameters.
    public class Flyweight
    {
        private Car _sharedState;

        public Flyweight(Car car)
        {
            this._sharedState = car;
        }

        public void Operation(Car uniqueState)
        {
            string s = JsonConvert.SerializeObject(this._sharedState);
            string u = JsonConvert.SerializeObject(uniqueState);
            Console.WriteLine($""Flyweight: Displaying shared {s} and unique {u} state."");
        }
    }

    // The Flyweight Factory creates and manages the Flyweight objects. It
    // ensures that flyweights are shared correctly. When the client requests a
    // flyweight, the factory either returns an existing instance or creates a
    // new one, if it doesn't exist yet.
    public class FlyweightFactory
    {
        private List<Tuple<Flyweight, string>> flyweights = new List<Tuple<Flyweight, string>>();

        public FlyweightFactory(params Car[] args)
        {
            foreach (var elem in args)
            {
                flyweights.Add(new Tuple<Flyweight, string>(new Flyweight(elem), this.getKey(elem)));
            }
        }

        // Returns a Flyweight's string hash for a given state.
        public string getKey(Car key)
        {
            List<string> elements = new List<string>();

            elements.Add(key.Model);
            elements.Add(key.Color);
            elements.Add(key.Company);

            if (key.Owner != null && key.Number != null)
            {
                elements.Add(key.Number);
                elements.Add(key.Owner);
            }

            elements.Sort();

            return string.Join(""_"", elements);
        }

        // Returns an existing Flyweight with a given state or creates a new
        // one.
        public Flyweight GetFlyweight(Car sharedState)
        {
            string key = this.getKey(sharedState);

            if (flyweights.Where(t => t.Item2 == key).Count() == 0)
            {
                Console.WriteLine(""FlyweightFactory: Can't find a flyweight, creating new one."");
                this.flyweights.Add(new Tuple<Flyweight, string>(new Flyweight(sharedState), key));
            }
            else
            {
                Console.WriteLine(""FlyweightFactory: Reusing existing flyweight."");
            }
            return this.flyweights.Where(t => t.Item2 == key).FirstOrDefault().Item1;
        }

        public void listFlyweights()
        {
            var count = flyweights.Count;
            Console.WriteLine($""\nFlyweightFactory: I have {count} flyweights:"");
            foreach (var flyweight in flyweights)
            {
                Console.WriteLine(flyweight.Item2);
            }
        }
    }

    public class Car
    {
        public string Owner { get; set; }

        public string Number { get; set; }

        public string Company { get; set; }

        public string Model { get; set; }

        public string Color { get; set; }
    }

    class Program
    {
        static void Main(string[] args)
        {
            // The client code usually creates a bunch of pre-populated
            // flyweights in the initialization stage of the application.
            var factory = new FlyweightFactory(
                new Car { Company = ""Chevrolet"", Model = ""Camaro2018"", Color = ""pink"" },
                new Car { Company = ""Mercedes Benz"", Model = ""C300"", Color = ""black"" },
                new Car { Company = ""Mercedes Benz"", Model = ""C500"", Color = ""red"" },
                new Car { Company = ""BMW"", Model = ""M5"", Color = ""red"" },
                new Car { Company = ""BMW"", Model = ""X6"", Color = ""white"" }
            );
            factory.listFlyweights();

            addCarToPoliceDatabase(factory, new Car {
                Number = ""CL234IR"",
                Owner = ""James Doe"",
                Company = ""BMW"",
                Model = ""M5"",
                Color = ""red""
            });

            addCarToPoliceDatabase(factory, new Car {
                Number = ""CL234IR"",
                Owner = ""James Doe"",
                Company = ""BMW"",
                Model = ""X1"",
                Color = ""red""
            });

            factory.listFlyweights();
        }

        public static void addCarToPoliceDatabase(FlyweightFactory factory, Car car)
        {
            Console.WriteLine(""\nClient: Adding a car to database."");

            var flyweight = factory.GetFlyweight(new Car {
                Color = car.Color,
                Model = car.Model,
                Company = car.Company
            });

            // The client code either stores or calculates extrinsic state and
            // passes it to the flyweight's methods.
            flyweight.Operation(car);
        }
    }
}",C#,Flyweight,Refactoring Guru,https://refactoring.guru/design-patterns/flyweight/csharp/example#example-0,"[ 5.17159875e-04  3.47136296e-02 -1.64422821e-02  2.93262582e-02
 -5.09610139e-02  7.69004375e-02  7.91211650e-02  2.74222307e-02
 -6.05596192e-02 -9.66502540e-03  3.76684442e-02 -5.03522418e-02
  6.22922108e-02 -7.03922510e-02 -5.96830389e-03  7.36831203e-02
 -8.84275511e-03 -1.98651990e-03 -1.21999927e-01 -1.40391802e-02
  7.91973919e-02 -4.94515672e-02 -2.00664951e-03 -1.12452423e-02
 -3.66380215e-02  4.78162710e-03 -2.06249300e-02  2.56893728e-02
 -3.91442105e-02 -3.83645557e-02 -5.06614111e-02  1.43539358e-03
 -2.15710923e-02  3.40511985e-02 -1.27168708e-02 -5.20769656e-02
 -3.55052128e-02  1.34231001e-02 -4.36773784e-02 -6.10384420e-02
 -1.62884593e-02  5.31422533e-02  4.21064645e-02 -5.61496876e-02
  1.27665196e-02  5.97559754e-03 -2.75795255e-02  5.19892350e-02
  7.24884942e-02 -2.21768562e-02 -5.42302132e-02 -2.77212132e-02
  7.33171310e-03  3.59120686e-03  5.93944490e-02  4.00034226e-02
 -2.93001477e-02 -5.31807356e-02 -1.18165582e-01 -1.11054316e-01
  5.76867424e-02 -2.78676338e-02  2.66626049e-02 -7.50321569e-03
  6.38436154e-02 -5.02724089e-02  1.26232039e-02 -9.72799398e-03
  6.86245272e-03 -3.11487373e-02  7.48410076e-02 -1.44728515e-02
 -1.95588488e-02  7.36347139e-02 -7.75021911e-02  5.85146844e-02
  7.27293789e-02 -2.42198557e-02  5.89526445e-03  1.89812307e-03
 -9.67918783e-02 -4.31322493e-03 -7.38928244e-02 -1.44624598e-02
  1.02869853e-01 -4.26554261e-03 -1.78423859e-02 -4.21511941e-02
 -1.18591469e-02  9.37146768e-02 -9.16353762e-02  3.53064984e-02
  3.14271003e-02  2.96198372e-02  8.82085506e-03  9.62101445e-02
  6.42872974e-02 -6.75215125e-02 -3.31638269e-02  9.88324285e-02
 -6.89502358e-02  2.71723773e-02  4.45995964e-02  4.02683998e-03
 -6.21260665e-02 -5.43644652e-02  4.45380807e-02  1.47695178e-02
 -4.85399589e-02 -3.50118987e-02 -7.30384793e-03  7.37319514e-02
 -2.13550478e-02  3.00155524e-02 -1.03039496e-01 -2.02610772e-02
  3.77560668e-02 -3.48485671e-02 -2.58849598e-02  1.47794830e-02
  4.28195596e-02 -2.25668866e-03  2.58071963e-02 -1.52259897e-02
  4.33976874e-02  1.54387183e-03 -5.14110886e-02  3.60670760e-33
 -8.73573311e-03 -6.68232441e-02  5.52232005e-02  6.42445162e-02
 -5.69687504e-03 -4.03884985e-02  1.41130033e-04  8.14796090e-02
 -4.26374115e-02 -1.92857981e-02 -8.87423381e-03 -1.45735908e-02
  3.66533026e-02 -4.48568389e-02  2.15721000e-02 -4.45441306e-02
  2.81530563e-02 -2.02458948e-02  5.95621392e-03 -6.10780343e-02
 -1.32152401e-02 -2.24730652e-02  1.67494491e-02 -4.11278121e-02
  8.55139457e-03  4.23776619e-02 -2.27893163e-02  4.28211167e-02
 -8.29803795e-02  3.88468802e-02  1.10336617e-01  2.25974843e-02
 -9.00167152e-02  3.33914459e-02  1.05718337e-03 -2.55955989e-03
  1.42274210e-02 -5.23331128e-02 -3.92018957e-03 -3.86734344e-02
  5.19180372e-02 -4.81616147e-02 -4.91605047e-03 -1.59807317e-02
 -4.31187339e-02 -3.83100957e-02 -2.27698926e-02  1.60480682e-02
 -3.67967933e-02  5.12055717e-02 -2.66470481e-02  1.12458300e-02
  4.66908254e-02 -3.00234351e-02 -4.75857519e-02  4.31886986e-02
  8.79479200e-03  1.02698095e-02  1.36146117e-02  2.72799693e-02
 -7.88245499e-02  6.92006946e-02 -3.04659246e-03  1.60767753e-02
  9.10999179e-02  6.34600371e-02 -2.54981034e-02 -6.66962117e-02
  6.00698292e-02 -8.79025906e-02  4.28097993e-02 -4.82537262e-02
  4.20272015e-02 -4.44148155e-03  3.05753015e-02  2.30371137e-03
 -2.94805374e-02 -8.44953284e-02 -9.07709226e-02 -8.83665755e-02
 -6.92602433e-03  3.62962484e-02 -5.81926256e-02  5.14403619e-02
 -5.47304843e-03  6.47098497e-02 -1.67816728e-02  1.56887863e-02
  6.03289939e-02  4.61149551e-02 -9.95507371e-03  1.03800958e-02
  1.89891886e-02 -6.23729713e-02  2.27935482e-02 -3.12942347e-33
 -1.56141054e-02 -3.42096128e-02  1.23006133e-02 -2.18976345e-02
  1.32906511e-01 -7.51752183e-02 -4.00718413e-02 -9.69985202e-02
 -9.41195190e-02  1.85127519e-02 -5.57937659e-03 -3.20286267e-02
 -1.72258485e-02  7.95013085e-03  7.99494162e-02  3.10636442e-02
  3.19831036e-02 -7.72273466e-02  3.44223008e-02 -3.00197899e-02
 -1.32167523e-04  6.09748326e-02 -1.09802634e-02  7.34479772e-03
 -6.46253303e-02  8.43831617e-03 -6.30309582e-02  8.08641240e-02
 -4.18063672e-03 -4.42417227e-02  3.59332561e-02 -3.33965272e-02
  1.92292128e-02  2.66399253e-02 -7.41284387e-03 -9.52980444e-02
  5.61136305e-02  2.14290395e-02 -2.28199884e-02  1.21037930e-01
 -1.28037678e-02 -1.10979207e-01 -2.55669672e-02 -2.82850116e-02
  5.66766933e-02 -1.22589454e-01  8.77493434e-03  2.44091544e-02
  7.54816756e-02  1.20345326e-02  1.02763809e-01 -3.02426722e-02
 -1.03831172e-01  2.21730694e-02  3.51871997e-02  2.76142284e-02
  1.15198158e-01 -5.18333986e-02  1.24703385e-01  2.33245399e-02
 -2.64599510e-02 -2.32633129e-02 -1.14316912e-02  7.70263895e-02
  2.37818845e-02 -7.01814815e-02 -8.74511839e-04 -4.86564450e-02
 -1.08460872e-03 -7.33011868e-03 -1.43072471e-01  3.32580991e-02
  7.08831772e-02 -2.76256129e-02  3.30711044e-02 -5.68230972e-02
  6.07193112e-02  4.76175584e-02  1.00196473e-01 -5.72497025e-02
  4.34005167e-03 -9.56394970e-02  1.00257531e-01  4.53664362e-03
  1.49884615e-02 -2.58410834e-02  9.55051742e-03 -9.00129322e-03
 -6.23483323e-02 -2.07218770e-02 -4.00864799e-03  2.51365192e-02
 -8.27252306e-03  1.38518624e-02 -3.79171148e-02 -5.13849656e-08
 -4.94400933e-02 -2.23141145e-02  1.21512683e-02  6.97953925e-02
  5.27485311e-02 -2.07487307e-02  3.36399674e-02 -9.50008631e-03
  4.12723422e-03 -5.07400371e-03  4.77131009e-02  5.29457889e-02
  1.04367584e-01  4.55947667e-02  4.06198986e-02 -4.48004566e-02
 -7.54930377e-02 -3.14588062e-02 -9.47644040e-02  8.94541070e-02
 -1.34038543e-02  1.13484534e-02 -6.85960352e-02  4.76401262e-02
  1.00450799e-01 -3.86499949e-02  4.88413721e-02 -3.39994533e-03
  6.35599941e-02  1.09465830e-01 -5.37114069e-02  1.02511495e-01
  1.08360238e-01  9.97397304e-03 -1.34381689e-02 -5.02592251e-02
 -1.43318018e-02  3.27283330e-02  9.36541427e-03  5.35083413e-02
  7.16623291e-02  9.16482136e-02 -5.91637194e-02  1.10451253e-02
  1.52885363e-01 -2.92641986e-02 -1.06470678e-02 -3.18139866e-02
  1.81943402e-02  3.93951021e-04 -7.02565014e-02 -8.10915697e-03
  1.20193639e-03  1.15946482e-03 -1.07432783e-01  9.44467075e-03
  1.70252752e-02 -2.88392976e-02  5.58738783e-02  1.82634480e-02
  4.88553979e-02 -5.32066226e-02 -4.07577641e-02  3.26352492e-02]"
"using System;

namespace RefactoringGuru.DesignPatterns.Proxy.Conceptual
{
    // The Subject interface declares common operations for both RealSubject and
    // the Proxy. As long as the client works with RealSubject using this
    // interface, you'll be able to pass it a proxy instead of a real subject.
    public interface ISubject
    {
        void Request();
    }
    
    // The RealSubject contains some core business logic. Usually, RealSubjects
    // are capable of doing some useful work which may also be very slow or
    // sensitive - e.g. correcting input data. A Proxy can solve these issues
    // without any changes to the RealSubject's code.
    class RealSubject : ISubject
    {
        public void Request()
        {
            Console.WriteLine(""RealSubject: Handling Request."");
        }
    }
    
    // The Proxy has an interface identical to the RealSubject.
    class Proxy : ISubject
    {
        private RealSubject _realSubject;
        
        public Proxy(RealSubject realSubject)
        {
            this._realSubject = realSubject;
        }
        
        // The most common applications of the Proxy pattern are lazy loading,
        // caching, controlling the access, logging, etc. A Proxy can perform
        // one of these things and then, depending on the result, pass the
        // execution to the same method in a linked RealSubject object.
        public void Request()
        {
            if (this.CheckAccess())
            {
                this._realSubject.Request();

                this.LogAccess();
            }
        }
        
        public bool CheckAccess()
        {
            // Some real checks should go here.
            Console.WriteLine(""Proxy: Checking access prior to firing a real request."");

            return true;
        }
        
        public void LogAccess()
        {
            Console.WriteLine(""Proxy: Logging the time of request."");
        }
    }
    
    public class Client
    {
        // The client code is supposed to work with all objects (both subjects
        // and proxies) via the Subject interface in order to support both real
        // subjects and proxies. In real life, however, clients mostly work with
        // their real subjects directly. In this case, to implement the pattern
        // more easily, you can extend your proxy from the real subject's class.
        public void ClientCode(ISubject subject)
        {
            // ...
            
            subject.Request();
            
            // ...
        }
    }
    
    class Program
    {
        static void Main(string[] args)
        {
            Client client = new Client();
            
            Console.WriteLine(""Client: Executing the client code with a real subject:"");
            RealSubject realSubject = new RealSubject();
            client.ClientCode(realSubject);

            Console.WriteLine();

            Console.WriteLine(""Client: Executing the same client code with a proxy:"");
            Proxy proxy = new Proxy(realSubject);
            client.ClientCode(proxy);
        }
    }
}",C#,Proxy,Refactoring Guru,https://refactoring.guru/design-patterns/proxy/csharp/example#example-0,"[-1.18548699e-01 -6.88962964e-03 -1.98349170e-02 -1.86514724e-02
 -1.05914228e-01 -9.30668693e-03  8.29272904e-03  4.42397362e-03
 -2.46437564e-02  7.90853649e-02 -9.55018625e-02  1.77550018e-02
 -2.55821943e-02  4.93250899e-02  1.16907291e-01 -2.06878465e-02
  5.65917231e-02  1.99261922e-02  1.02681713e-02  3.69483083e-02
  1.00674592e-01 -7.67646432e-02 -3.69665995e-02 -4.25444469e-02
 -6.41086251e-02 -7.14810193e-02  4.43005189e-03 -1.22923993e-01
  1.60090474e-03  1.14987716e-02  4.22404334e-02  5.55198789e-02
 -1.61483541e-01 -2.30964459e-02 -1.19870521e-01  3.77103984e-02
 -4.79032798e-03  1.68721210e-02  1.47226695e-02 -2.53252666e-02
 -1.18217431e-02  3.66375484e-02  2.75866613e-02  9.26348846e-03
  8.07627439e-02 -2.35805567e-02 -7.13185454e-03  5.26998155e-02
  4.97737452e-02 -4.23012748e-02 -1.00748301e-01 -6.30455688e-02
 -1.54367322e-02  1.14663675e-01  3.67607698e-02  9.72921611e-04
  1.49375796e-02  7.70693496e-02  5.47379106e-02  5.23020849e-02
 -5.53119555e-02  2.36405265e-02  1.21811805e-02  1.87014565e-02
 -4.76322994e-02  3.70446302e-04 -3.52092311e-02  3.04601770e-02
  7.18945861e-02  2.76994165e-02 -3.46764401e-02  2.30955686e-02
 -2.65524201e-02 -1.40015427e-02  4.71652523e-02 -4.82023992e-02
 -4.29643393e-02  3.62927951e-02  5.03427908e-02 -5.74669316e-02
  5.39621972e-02 -2.78016087e-02 -4.54271510e-02  1.14961974e-02
  3.72062698e-02  5.90961240e-02  1.92027800e-02 -6.68439940e-02
  9.65365674e-03  6.55273274e-02 -4.72307112e-03 -5.05262613e-02
  1.41834915e-02  1.79191940e-02 -1.56274461e-03  1.81084089e-02
  3.47592845e-03  4.54731919e-02 -3.37683200e-03  4.53152917e-02
 -2.21940856e-02 -6.66481850e-04 -5.02925813e-02  1.26597555e-02
  5.62788323e-02 -2.99723055e-02 -3.94663066e-02  1.68304495e-03
  3.42081226e-02  3.05106398e-02 -6.81415871e-02 -3.46348574e-03
 -8.54296908e-02 -2.11441945e-02 -1.04619712e-02  1.82289872e-02
  1.64129972e-01 -2.85376329e-02 -2.50560027e-02 -1.98694617e-02
 -1.29756732e-02  3.61125655e-02  7.37238377e-02 -5.17789871e-02
  1.34941682e-01 -2.01835986e-02  1.42384684e-02  1.18242738e-33
  4.37341556e-02 -5.05587608e-02  1.60763580e-02  6.00434765e-02
  5.97755658e-04 -7.05334544e-03  4.87089269e-02  7.56338164e-02
  4.94142696e-02 -2.75709596e-03  3.14072482e-02  4.89521259e-03
  1.03929732e-02 -1.02673136e-02  4.81921136e-02 -3.58071513e-02
 -8.78938884e-02 -1.87783018e-02  3.23155262e-02  2.41227262e-02
 -2.60336250e-02  3.19203571e-03 -1.93796139e-02 -5.09351492e-02
 -4.79424372e-02  1.33357998e-02 -1.66289397e-02  1.67209413e-02
 -8.19080025e-02  3.82364765e-02  1.32429242e-01  7.45233381e-03
 -3.77038941e-02  6.02890253e-02 -5.53905070e-02 -6.43458366e-02
  4.80995253e-02 -2.28072330e-02 -2.63357423e-02 -5.66576384e-02
 -5.95932268e-03 -3.98431979e-02  3.62249464e-02 -7.39017408e-03
 -8.49853642e-03 -1.11655541e-01 -1.92192141e-02  2.33830325e-02
  1.02612153e-01  4.32353355e-02  6.36737719e-02  7.27809742e-02
  5.86325340e-02 -4.55912501e-02  1.97901689e-02  3.28374617e-02
 -1.67821031e-02  1.20014831e-01 -1.12175774e-02  2.74925437e-02
 -8.31553433e-03 -2.75722630e-02 -2.13016698e-04  4.05401215e-02
  2.50252746e-02  3.72726992e-02 -3.99729759e-02 -9.08138081e-02
  3.87002155e-02 -8.94461200e-02  8.56091175e-03 -1.88719966e-02
 -6.31185845e-02 -3.82395126e-02  1.27741098e-02  3.79443020e-02
 -5.55548854e-02  6.25815317e-02 -9.92782339e-02 -1.83546618e-02
 -6.21630996e-03  2.74047330e-02 -1.15428511e-02  7.84569830e-02
 -5.80791868e-02  5.46905547e-02  6.52250424e-02 -5.53636774e-02
  3.18803787e-02 -3.74245532e-02 -8.89745634e-03 -3.26314173e-03
 -4.92546000e-02 -3.45635577e-03  7.31701180e-02 -2.42651348e-33
 -1.97211951e-02 -1.06338959e-03 -9.64475051e-02  5.13890432e-03
 -2.37043425e-02 -5.30928895e-02  2.06478443e-02 -2.40519233e-02
 -3.05366516e-02  8.14317763e-02 -7.37810954e-02  2.64748279e-02
  2.06896029e-02  4.76423874e-02 -5.62428795e-02 -3.73488180e-02
 -2.47702543e-02 -6.91768825e-02 -2.40168767e-03 -1.81746762e-03
 -8.46293569e-03  8.75727162e-02  4.32087369e-02 -5.56906499e-02
  2.44278256e-02  2.19424348e-02 -5.53521775e-02  1.23404548e-01
  3.33322659e-02  7.25758262e-03 -4.66247573e-02  5.59930177e-03
  9.21759754e-03 -6.88847080e-02  9.21643991e-03 -6.54945225e-02
  1.08413678e-02  1.12474032e-01  9.95344855e-03 -8.89043212e-02
  8.21188763e-02 -8.99371430e-02 -7.30170980e-02  1.67154241e-02
  8.25986862e-02 -2.81149149e-02 -8.63547996e-02  4.33295071e-02
 -9.58221965e-03  8.18096697e-02 -4.86521311e-02  1.15266694e-02
  1.57320332e-02  2.51007918e-02  6.26981724e-03 -5.16095571e-03
 -3.24323848e-02 -1.89621374e-02  9.55189914e-02  6.12984039e-02
  8.04218873e-02 -4.48750556e-02 -1.80949587e-02 -1.39044970e-02
  6.69917092e-02  2.62661539e-02 -1.67798027e-02 -4.71631251e-02
  3.70589159e-02 -1.65801048e-02  1.16028739e-02  2.75268336e-03
 -5.19107506e-02 -5.01920544e-02  7.53055438e-02  6.10971183e-05
  6.10173158e-02 -2.43834835e-02 -1.36346593e-02  8.44730437e-02
 -3.87765863e-03 -3.02460548e-02 -2.88612414e-02 -1.44570833e-02
 -1.18952524e-02 -2.15305611e-02 -4.11846898e-02  2.61906311e-02
 -1.13474699e-02 -3.94160561e-02 -5.88846877e-02  8.86293426e-02
 -5.28466664e-02 -7.84788579e-02  9.71728005e-03 -5.02532913e-08
  1.41126232e-03  3.15477373e-03  7.19239935e-02  6.16447031e-02
 -5.18127643e-02  3.86282057e-02 -1.43381238e-01 -1.04167983e-01
 -5.33109717e-02  4.28329296e-02 -5.64096794e-02  1.03481091e-03
  8.52661580e-02  2.34573539e-02  4.39815074e-02 -6.02378324e-02
  3.15416674e-03 -6.10001571e-02 -8.49627778e-02  5.85625023e-02
 -1.75576415e-02 -4.80711907e-02 -1.82044078e-02  5.91693819e-02
 -1.93697065e-02  4.59356457e-02  9.05822292e-02 -5.27480803e-02
 -5.51030375e-02  8.11472610e-02 -7.33592361e-02  5.53430691e-02
  9.62439645e-03  3.56854424e-02 -1.05779089e-01  5.55089451e-02
 -1.98552869e-02 -4.53185849e-03  6.70653349e-03  4.82353084e-02
  7.01778904e-02 -5.63582964e-02 -4.10230644e-02  2.52329018e-02
  5.91864549e-02  1.22449156e-02 -1.56846526e-03 -3.85629274e-02
  5.32882176e-02  2.75541134e-02 -6.76194951e-02 -2.49963086e-02
 -5.08634336e-02 -4.73026074e-02 -3.16534378e-02  2.06434610e-03
 -3.32254209e-02 -6.24697395e-02  6.69195782e-03  3.44231650e-02
  4.69930544e-02  9.06182155e-02 -3.48282158e-02  3.08084283e-02]"
"using System;
using System.Collections.Generic;

namespace RefactoringGuru.DesignPatterns.ChainOfResponsibility.Conceptual
{
    // The Handler interface declares a method for building the chain of
    // handlers. It also declares a method for executing a request.
    public interface IHandler
    {
        IHandler SetNext(IHandler handler);
        
        object Handle(object request);
    }

    // The default chaining behavior can be implemented inside a base handler
    // class.
    abstract class AbstractHandler : IHandler
    {
        private IHandler _nextHandler;

        public IHandler SetNext(IHandler handler)
        {
            this._nextHandler = handler;
            
            // Returning a handler from here will let us link handlers in a
            // convenient way like this:
            // monkey.SetNext(squirrel).SetNext(dog);
            return handler;
        }
        
        public virtual object Handle(object request)
        {
            if (this._nextHandler != null)
            {
                return this._nextHandler.Handle(request);
            }
            else
            {
                return null;
            }
        }
    }

    class MonkeyHandler : AbstractHandler
    {
        public override object Handle(object request)
        {
            if ((request as string) == ""Banana"")
            {
                return $""Monkey: I'll eat the {request.ToString()}.\n"";
            }
            else
            {
                return base.Handle(request);
            }
        }
    }

    class SquirrelHandler : AbstractHandler
    {
        public override object Handle(object request)
        {
            if (request.ToString() == ""Nut"")
            {
                return $""Squirrel: I'll eat the {request.ToString()}.\n"";
            }
            else
            {
                return base.Handle(request);
            }
        }
    }

    class DogHandler : AbstractHandler
    {
        public override object Handle(object request)
        {
            if (request.ToString() == ""MeatBall"")
            {
                return $""Dog: I'll eat the {request.ToString()}.\n"";
            }
            else
            {
                return base.Handle(request);
            }
        }
    }

    class Client
    {
        // The client code is usually suited to work with a single handler. In
        // most cases, it is not even aware that the handler is part of a chain.
        public static void ClientCode(AbstractHandler handler)
        {
            foreach (var food in new List<string> { ""Nut"", ""Banana"", ""Cup of coffee"" })
            {
                Console.WriteLine($""Client: Who wants a {food}?"");

                var result = handler.Handle(food);

                if (result != null)
                {
                    Console.Write($""   {result}"");
                }
                else
                {
                    Console.WriteLine($""   {food} was left untouched."");
                }
            }
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            // The other part of the client code constructs the actual chain.
            var monkey = new MonkeyHandler();
            var squirrel = new SquirrelHandler();
            var dog = new DogHandler();

            monkey.SetNext(squirrel).SetNext(dog);

            // The client should be able to send a request to any handler, not
            // just the first one in the chain.
            Console.WriteLine(""Chain: Monkey > Squirrel > Dog\n"");
            Client.ClientCode(monkey);
            Console.WriteLine();

            Console.WriteLine(""Subchain: Squirrel > Dog\n"");
            Client.ClientCode(squirrel);
        }
    }
}",C#,Chain of Responsibility,Refactoring Guru,https://refactoring.guru/design-patterns/chain-of-responsibility/csharp/example#example-0,"[-3.76035124e-02 -3.72464245e-04  4.23431359e-02  5.28263748e-02
 -5.04975989e-02  5.23729762e-03  6.34702146e-02  7.65585282e-04
  2.32410580e-02  8.27496313e-03  2.35661324e-02 -5.31932572e-03
  1.22579616e-02  1.30625367e-02  8.31134543e-02  3.26848030e-02
  5.58746681e-02  1.05500352e-02 -4.00172872e-03 -6.10601041e-04
  6.48755804e-02 -8.77773669e-03 -1.79860611e-02 -2.46863384e-02
 -1.83456704e-01 -6.21523522e-02 -1.46314437e-02 -1.12403512e-01
 -1.92465819e-02 -2.86185602e-03 -1.33515857e-02 -1.28874378e-02
 -1.48796037e-01 -1.35040078e-02 -1.14287332e-01  8.28284994e-02
  1.26307309e-02 -3.98006216e-02 -7.71142263e-03 -3.85952019e-03
 -3.17829512e-02  7.97063038e-02  5.83632151e-04 -4.16793190e-02
  3.88838351e-02 -3.11882515e-02 -9.24991518e-02  2.51884405e-02
  8.16816697e-04 -5.54728992e-02 -2.08986970e-03 -1.19376229e-02
  4.36995588e-02  1.87631305e-02  4.24390696e-02 -1.65873133e-02
 -1.85866784e-02 -6.22360855e-02 -1.56680979e-02  5.05957566e-02
  2.94551849e-02 -3.45096900e-03 -2.92807110e-02 -1.36488024e-02
  3.19753177e-02 -4.72183786e-02  5.93994884e-03  1.94722079e-02
 -4.35690163e-03 -2.14774329e-02 -2.90316306e-02 -1.79517101e-02
 -3.11835371e-02  3.67141962e-02 -2.43666917e-02 -2.82334033e-02
 -4.51850006e-04  1.86403673e-02 -1.63661391e-02 -7.07172826e-02
  1.60250422e-02  2.22112499e-02 -9.05147195e-03 -4.10592481e-02
  3.45568508e-02  1.31330684e-01 -1.69077422e-02 -9.81260370e-03
  1.91861391e-02  8.80538076e-02 -8.10970664e-02 -1.30570559e-02
 -5.16347308e-03  1.42092286e-02  3.50092053e-02  4.79481071e-02
  1.21710701e-02  2.70449091e-02 -5.64130135e-02  1.02863923e-01
  3.52517851e-02  1.29253911e-02 -2.05130111e-02 -7.28663653e-02
  4.49161828e-02  4.96926270e-02 -8.06213319e-02 -4.59345356e-02
 -3.56479920e-02  5.86982537e-03 -7.28133768e-02  8.99021700e-02
 -5.52691482e-02 -1.59056447e-02 -7.29757249e-02 -1.49420351e-02
  1.06104955e-01 -1.79427676e-02  9.18211695e-03  5.60500659e-02
  1.00473687e-01 -1.50136771e-02  2.08257474e-02 -7.14501599e-03
  5.41967340e-02 -2.03894190e-02  1.01392977e-02  2.37649821e-33
  7.93749094e-03 -8.07940066e-02 -1.79498456e-02  4.01070938e-02
  2.80812420e-02  1.64028760e-02  2.53279973e-02  4.24523503e-02
 -3.75785911e-03  7.44472141e-04  7.23089231e-03 -4.36685905e-02
  2.78030778e-03 -1.60459732e-03  3.27301808e-02 -2.18189824e-02
  4.31466028e-02 -4.36960999e-03  7.34021366e-02 -3.39361914e-02
 -5.54071255e-02  1.48185128e-02 -7.03815650e-03  1.10544208e-02
 -1.96730345e-02  5.34681492e-02 -6.13454282e-02 -1.00975363e-02
 -2.44817212e-02 -8.48259963e-03  1.21108174e-01 -5.51683046e-02
 -7.02800900e-02  4.37149890e-02 -3.13239843e-02  3.63776344e-03
  2.95318179e-02 -3.55362818e-02 -5.57725541e-02 -1.17010437e-01
  3.63853201e-02 -3.57666165e-02  1.56159559e-02  5.22858985e-02
 -7.04559162e-02 -7.69882277e-02 -5.97022437e-02  1.27649419e-02
 -3.74355316e-02  1.42399792e-03  5.02659269e-02  6.13150634e-02
  1.34417117e-01 -2.06043832e-02 -8.12206650e-04 -2.29872856e-02
 -2.65450738e-02  1.78900138e-02 -4.44806106e-02  6.50247186e-02
 -1.19423838e-02 -1.27430297e-02 -4.84928489e-02  4.28497195e-02
  2.74840798e-02  3.78489271e-02 -5.00709042e-02 -5.78581728e-02
  6.26422539e-02 -7.42547363e-02 -8.98081064e-03  1.94256697e-02
  2.00132411e-02  2.23202840e-03  2.96010263e-02 -9.34981555e-03
 -9.25978273e-02 -4.28636149e-02  5.74049121e-03 -6.93235397e-02
 -3.73927243e-02  4.79133651e-02 -1.88843664e-02  1.59218639e-01
 -8.10612366e-02  9.03373808e-02  4.90106344e-02 -8.61015823e-03
  9.95443314e-02  6.53095320e-02 -4.59467806e-02 -1.00823650e-02
  1.58286318e-02 -3.85336205e-03  9.67507064e-02 -4.32813824e-33
  2.18082741e-02  5.66773713e-02 -5.82083464e-02 -1.78250391e-02
 -3.89775857e-02 -1.14519717e-02 -3.37586999e-02 -3.21427733e-02
 -9.83458981e-02 -3.39502394e-02 -7.84069374e-02  2.57540010e-02
  7.26145599e-03  7.11672753e-02  2.24965420e-02  4.65031378e-02
 -5.34587689e-02 -1.56534947e-02  2.30319388e-02 -6.80032074e-02
 -9.24160518e-03  5.42314090e-02  5.34351766e-02 -2.17690822e-02
 -2.44253539e-02  2.28274101e-03 -4.84074317e-02  7.25824088e-02
 -2.61374805e-02 -2.54390854e-02  3.96263693e-03 -7.81828836e-02
  8.84125531e-02 -4.84064296e-02  4.44870368e-02 -6.18915744e-02
  3.86548303e-02  1.07237853e-01  2.06933524e-02  4.68072034e-02
  8.72815549e-02 -7.21093565e-02 -5.83742298e-02  7.74198351e-03
  9.07115079e-03 -3.67334038e-02 -4.13579233e-02 -1.94102619e-02
  4.82446663e-02  1.72923412e-02 -3.41488086e-02 -6.11527897e-02
 -6.66059256e-02 -7.35750049e-02  5.67543227e-03  2.95875110e-02
  6.88394159e-02 -7.33714476e-02  1.12495542e-01 -2.03401372e-02
  2.49972083e-02 -2.10981648e-02 -2.66877525e-02  7.39544258e-02
  7.43463635e-02 -7.10262805e-02  2.42280681e-02 -1.28616259e-01
  4.95191328e-02 -5.32349013e-03 -7.37139434e-02  9.28770825e-02
 -3.17000225e-02 -7.78864920e-02  1.00772507e-01  1.51402354e-02
  1.85387786e-02 -9.53833461e-02 -1.10224849e-02  2.61025061e-03
 -1.87994130e-02 -9.69338864e-02  4.39748093e-02 -4.77772579e-03
  3.45796254e-03 -4.29661870e-02  5.83161935e-02  4.25631925e-02
  1.04537590e-04  1.21599184e-02  3.03190257e-02  6.94966465e-02
  1.35349473e-02  3.93496789e-02 -1.34733850e-02 -5.84064210e-08
 -4.58721481e-02 -6.07113838e-02 -3.67972627e-02  2.68507041e-02
 -8.15650448e-03  7.10466504e-02 -4.35773842e-02 -5.33722267e-02
 -1.38613321e-02  7.36685330e-03 -3.82491834e-02  6.66988567e-02
  6.98290840e-02  2.06019394e-02  6.01254366e-02 -2.12003309e-02
  3.68230194e-02 -3.50530744e-02 -8.21815059e-02  1.23459212e-01
 -3.86371538e-02  2.68969368e-02 -1.74364597e-02  1.94273833e-02
 -6.24517351e-03 -6.02925420e-02  9.73426253e-02  9.88138691e-02
 -5.48152402e-02  4.46480475e-02 -3.84646803e-02  7.76257142e-02
 -1.78725589e-02  3.49989422e-02 -6.30499125e-02  3.57734486e-02
 -9.23516750e-02 -2.65714657e-02  5.58524802e-02  8.93761814e-02
  6.28031045e-02  9.83723998e-03 -9.44506228e-02  3.00113149e-02
  1.07309178e-01 -3.75136882e-02 -2.66405623e-02 -5.05837873e-02
  4.58564237e-02  5.06264828e-02 -1.29939541e-01  4.52450439e-02
  3.23685927e-05 -1.44039020e-02 -4.89419932e-03 -1.13400053e-02
  3.96967530e-02 -5.64585589e-02  2.50412021e-02  1.82152111e-02
 -1.93984658e-02  3.12188342e-02 -1.40778162e-03  1.02858534e-02]"
"using System;
using System.Collections;
using System.Collections.Generic;

namespace RefactoringGuru.DesignPatterns.Iterator.Conceptual
{
    abstract class Iterator : IEnumerator
    {
        object IEnumerator.Current => Current();

        // Returns the key of the current element
        public abstract int Key();
        
        // Returns the current element
        public abstract object Current();
        
        // Move forward to next element
        public abstract bool MoveNext();
        
        // Rewinds the Iterator to the first element
        public abstract void Reset();
    }

    abstract class IteratorAggregate : IEnumerable
    {
        // Returns an Iterator or another IteratorAggregate for the implementing
        // object.
        public abstract IEnumerator GetEnumerator();
    }

    // Concrete Iterators implement various traversal algorithms. These classes
    // store the current traversal position at all times.
    class AlphabeticalOrderIterator : Iterator
    {
        private WordsCollection _collection;
        
        // Stores the current traversal position. An iterator may have a lot of
        // other fields for storing iteration state, especially when it is
        // supposed to work with a particular kind of collection.
        private int _position = -1;
        
        private bool _reverse = false;

        public AlphabeticalOrderIterator(WordsCollection collection, bool reverse = false)
        {
            this._collection = collection;
            this._reverse = reverse;

            if (reverse)
            {
                this._position = collection.getItems().Count;
            }
        }
        
        public override object Current()
        {
            return this._collection.getItems()[_position];
        }

        public override int Key()
        {
            return this._position;
        }
        
        public override bool MoveNext()
        {
            int updatedPosition = this._position + (this._reverse ? -1 : 1);

            if (updatedPosition >= 0 && updatedPosition < this._collection.getItems().Count)
            {
                this._position = updatedPosition;
                return true;
            }
            else
            {
                return false;
            }
        }
        
        public override void Reset()
        {
            this._position = this._reverse ? this._collection.getItems().Count - 1 : 0;
        }
    }

    // Concrete Collections provide one or several methods for retrieving fresh
    // iterator instances, compatible with the collection class.
    class WordsCollection : IteratorAggregate
    {
        List<string> _collection = new List<string>();
        
        bool _direction = false;
        
        public void ReverseDirection()
        {
            _direction = !_direction;
        }
        
        public List<string> getItems()
        {
            return _collection;
        }
        
        public void AddItem(string item)
        {
            this._collection.Add(item);
        }
        
        public override IEnumerator GetEnumerator()
        {
            return new AlphabeticalOrderIterator(this, _direction);
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            // The client code may or may not know about the Concrete Iterator
            // or Collection classes, depending on the level of indirection you
            // want to keep in your program.
            var collection = new WordsCollection();
            collection.AddItem(""First"");
            collection.AddItem(""Second"");
            collection.AddItem(""Third"");

            Console.WriteLine(""Straight traversal:"");

            foreach (var element in collection)
            {
                Console.WriteLine(element);
            }

            Console.WriteLine(""\nReverse traversal:"");

            collection.ReverseDirection();

            foreach (var element in collection)
            {
                Console.WriteLine(element);
            }
        }
    }
}",C#,Iterator,Refactoring Guru,https://refactoring.guru/design-patterns/iterator/csharp/example#example-0,"[-6.93184324e-03 -1.75629053e-02  4.32746764e-03 -2.90149059e-02
 -1.13233663e-01  3.41453925e-02  1.19077954e-02  1.58594921e-02
 -3.37122357e-03  2.64476594e-02  3.28390859e-02 -7.53693376e-03
  3.33141163e-02 -8.57035890e-02 -5.76550514e-02  1.03312014e-02
 -4.53762859e-02  6.78741485e-02  3.44478153e-02 -1.85012594e-02
  5.05889058e-02  3.06168422e-02 -8.15292448e-03  1.48165599e-02
 -4.75087501e-02  1.05173670e-01 -5.51487356e-02 -7.00200349e-02
 -2.00053165e-03 -6.10055625e-02 -2.79619843e-02  1.89538058e-02
 -2.50752494e-02  5.60588725e-02 -3.48783992e-02  1.60009824e-02
 -3.00998110e-02  6.56979159e-04  3.01245600e-03  2.76327739e-03
 -4.66666147e-02  6.73186034e-02 -3.60947140e-02 -9.87843722e-02
  5.01586720e-02  1.83870532e-02 -9.02968794e-02 -6.30263053e-03
  3.05794906e-02 -4.55120811e-03  1.05649428e-02  4.31952290e-02
 -1.29843112e-02  1.87264625e-02 -2.79467739e-03  6.32396713e-02
  7.22112730e-02 -3.09566781e-02 -6.01255633e-02  1.40405111e-02
  8.54681060e-02 -2.44279243e-02 -6.74744099e-02 -8.14109072e-02
  6.54779375e-03 -2.88434196e-02  6.08794019e-02  4.15523089e-02
  5.06313443e-02  4.69878269e-03 -1.41164381e-02  4.79233712e-02
  5.98818772e-02  2.51229014e-02 -3.97789367e-02  3.30954827e-02
  1.55155156e-02  1.43903131e-02 -1.74999125e-02 -6.33804798e-02
 -2.29813606e-02 -1.36903813e-02  3.05388086e-02 -1.32508706e-02
  8.74956548e-02  1.05202105e-02 -6.46141544e-02 -3.08202542e-02
  5.16184308e-02  9.44067836e-02 -6.43207952e-02 -5.79115264e-02
  9.93295535e-02  2.93475334e-02  1.07615240e-01  7.07721785e-02
  4.67849113e-02  2.37562023e-02  4.93718032e-03  3.74146663e-02
 -1.25629082e-02  2.72534527e-02 -4.85365987e-02 -7.87443817e-02
 -3.79380882e-02 -1.95905641e-02 -2.89082732e-02 -6.72847554e-02
 -3.35322358e-02 -7.14661554e-02 -3.57359909e-02  2.15003304e-02
 -5.85737033e-03 -6.71343226e-03 -5.31604253e-02 -6.65852949e-02
 -1.94604006e-02  5.57191893e-02  6.26298487e-02 -7.55710434e-03
  2.59159934e-02 -2.82677822e-02  2.89401934e-02  1.54680870e-02
  2.66484823e-02  1.65717378e-02  1.83300078e-02  4.41039199e-33
  5.93793392e-02 -3.34348902e-02  8.65194295e-03  6.04965053e-02
 -1.61532033e-02 -1.58651248e-02  6.05624542e-02  1.27057344e-01
 -2.23286971e-02 -6.26861071e-03  7.92932361e-02  3.77859771e-02
 -1.17587671e-03 -7.95659237e-03  1.04501909e-02 -1.14898235e-01
  5.98537885e-02  1.53059633e-02 -7.23247156e-02 -9.26089585e-02
  3.98071483e-02  2.77736550e-03 -3.79337594e-02 -1.03824221e-01
 -3.28473677e-03 -3.24963732e-03 -5.49688525e-02  1.61244522e-03
 -1.16751716e-01  6.90738554e-04  6.10436909e-02 -1.05677955e-02
 -3.14186588e-02  3.59121040e-02  2.80167051e-02  2.59491205e-02
  2.33130679e-02 -2.31292993e-02  3.37552615e-02 -8.98294002e-02
 -8.84609856e-03 -4.86713089e-02  8.67194310e-03 -4.16580625e-02
  9.92283341e-04 -2.95602493e-02 -6.82525858e-02  5.19151287e-03
 -4.17701602e-02  1.00042764e-02  3.09216734e-02  7.37013221e-02
 -1.03697546e-01 -2.62615252e-02 -3.06173470e-02 -5.42776734e-02
 -1.21624060e-02  1.17974453e-01 -3.64976237e-03  1.18608616e-01
 -3.90839502e-02  1.26628563e-01  1.93345789e-02  4.60515469e-02
  5.46253510e-02 -2.23661284e-03 -6.49872422e-02 -8.03554803e-02
  5.38559556e-02 -7.04664737e-02 -2.16925815e-02 -5.51306037e-03
  3.11759859e-02 -2.38611475e-02  3.09926551e-02 -3.64540629e-02
 -8.03390965e-02 -8.24541673e-02 -9.51723009e-02 -1.38634592e-01
 -3.58397104e-02  1.08276708e-02 -8.53136927e-03  3.87820192e-02
  1.81281641e-02  3.34109180e-02  2.50673871e-02 -5.94754145e-02
  6.65885955e-02 -1.80042032e-02 -3.43570970e-02 -3.90623622e-02
  3.28641236e-02  2.43312530e-02  4.64480259e-02 -6.53497056e-33
  3.83193828e-02 -1.54995145e-02 -8.30240268e-03 -1.07715959e-02
  7.58671341e-03 -3.01962364e-02  2.42196359e-02  4.79761921e-02
 -5.37543446e-02 -5.24724275e-02 -2.21097041e-02  7.27886930e-02
  5.20485379e-02  4.51008864e-02  7.38818496e-02  3.35955918e-02
  3.67790200e-02 -5.79039715e-02  4.39420119e-02  1.59172192e-02
 -2.68460345e-02  2.63843797e-02  1.75287407e-02 -2.37996075e-02
 -1.70813315e-02 -4.64642467e-03  2.42367592e-02  2.72328425e-02
  7.18645751e-02 -8.46442766e-03  8.32388699e-02  2.85452115e-04
  7.41895288e-02 -1.16036469e-02 -2.42048372e-02 -8.11650231e-02
 -3.84207107e-02  1.16607826e-02  3.40145826e-02  1.33934349e-01
  5.47019057e-02 -7.64781535e-02  5.83033152e-02 -6.47317842e-02
  2.37343386e-02 -5.84511049e-02 -5.26643321e-02  9.61499438e-02
  1.74171068e-02  2.07498707e-02  5.35648987e-02 -3.53710428e-02
 -8.54137242e-02 -6.42296672e-03  5.94366752e-02  6.66793361e-02
  6.58699945e-02 -8.99037048e-02  8.22425187e-02  3.75378169e-02
  1.40252635e-02 -1.17996223e-02  7.35008270e-02  8.00703932e-03
  7.03285187e-02  4.50500213e-02 -1.12764806e-01 -8.54265466e-02
 -3.86747420e-02 -1.39788762e-02 -2.31449790e-02  5.21768220e-02
 -5.90274073e-02 -5.89446872e-02  4.53604609e-02 -1.10366824e-03
  4.39020880e-02  1.76667573e-03 -2.43128445e-02 -6.76750019e-02
 -5.71358837e-02  1.09555190e-02  2.65439581e-02 -4.49734814e-02
 -1.16007272e-02 -4.42289710e-02  4.22432609e-02 -7.59461801e-03
 -3.92435156e-02  4.92512423e-04 -9.46425367e-03 -4.87528518e-02
  5.39294668e-02 -5.67848701e-03  3.51891182e-02 -5.55167325e-08
 -1.92113653e-01 -1.00283712e-01  3.99064422e-02  8.31853822e-02
  8.62124860e-02 -8.60879314e-04  2.11634599e-02  3.45930830e-02
 -4.04587090e-02 -1.18406087e-01  1.16183879e-02  3.62515524e-02
  5.49116731e-02  5.58439083e-03  6.69282004e-02 -5.77218235e-02
  2.70999800e-02 -6.15191124e-02 -6.50827512e-02  7.08064288e-02
 -3.87991429e-04 -8.56890157e-02  8.88662599e-03  1.02639375e-02
  2.59452183e-02  3.18825152e-03  5.29151447e-02  2.19046753e-02
  4.39529903e-02  3.13929729e-02 -1.55384373e-02  6.63493201e-02
  3.58665287e-02  4.50989604e-02 -8.16013850e-03  5.44829741e-02
 -3.41833942e-02  1.43311557e-03  3.02219000e-02  2.47340444e-02
  1.04604280e-02 -2.22828276e-02 -7.23123103e-02  6.87713251e-02
  4.49623242e-02 -6.29614070e-02 -3.25114988e-02 -5.91317900e-02
  4.85784262e-02 -7.38811344e-02 -1.55552924e-01 -1.99424196e-03
  7.34673515e-02 -3.40156779e-02 -2.68536340e-02  7.51871616e-02
  1.28612434e-02 -4.86338995e-02 -2.15201024e-02  6.45960718e-02
 -4.05868748e-03 -1.98568162e-02 -5.41389473e-02  5.49361296e-02]"
"using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;

namespace RefactoringGuru.DesignPatterns.Memento.Conceptual
{
    // The Originator holds some important state that may change over time. It
    // also defines a method for saving the state inside a memento and another
    // method for restoring the state from it.
    class Originator
    {
        // For the sake of simplicity, the originator's state is stored inside a
        // single variable.
        private string _state;

        public Originator(string state)
        {
            this._state = state;
            Console.WriteLine(""Originator: My initial state is: "" + state);
        }

        // The Originator's business logic may affect its internal state.
        // Therefore, the client should backup the state before launching
        // methods of the business logic via the save() method.
        public void DoSomething()
        {
            Console.WriteLine(""Originator: I'm doing something important."");
            this._state = this.GenerateRandomString(30);
            Console.WriteLine($""Originator: and my state has changed to: {_state}"");
        }

        private string GenerateRandomString(int length = 10)
        {
            string allowedSymbols = ""abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"";
            string result = string.Empty;

            while (length > 0)
            {
                result += allowedSymbols[new Random().Next(0, allowedSymbols.Length)];

                Thread.Sleep(12);

                length--;
            }

            return result;
        }

        // Saves the current state inside a memento.
        public IMemento Save()
        {
            return new ConcreteMemento(this._state);
        }

        // Restores the Originator's state from a memento object.
        public void Restore(IMemento memento)
        {
            if (!(memento is ConcreteMemento))
            {
                throw new Exception(""Unknown memento class "" + memento.ToString());
            }

            this._state = memento.GetState();
            Console.Write($""Originator: My state has changed to: {_state}"");
        }
    }

    // The Memento interface provides a way to retrieve the memento's metadata,
    // such as creation date or name. However, it doesn't expose the
    // Originator's state.
    public interface IMemento
    {
        string GetName();

        string GetState();

        DateTime GetDate();
    }

    // The Concrete Memento contains the infrastructure for storing the
    // Originator's state.
    class ConcreteMemento : IMemento
    {
        private string _state;

        private DateTime _date;

        public ConcreteMemento(string state)
        {
            this._state = state;
            this._date = DateTime.Now;
        }

        // The Originator uses this method when restoring its state.
        public string GetState()
        {
            return this._state;
        }
        
        // The rest of the methods are used by the Caretaker to display
        // metadata.
        public string GetName()
        {
            return $""{this._date} / ({this._state.Substring(0, 9)})..."";
        }

        public DateTime GetDate()
        {
            return this._date;
        }
    }

    // The Caretaker doesn't depend on the Concrete Memento class. Therefore, it
    // doesn't have access to the originator's state, stored inside the memento.
    // It works with all mementos via the base Memento interface.
    class Caretaker
    {
        private List<IMemento> _mementos = new List<IMemento>();

        private Originator _originator = null;

        public Caretaker(Originator originator)
        {
            this._originator = originator;
        }

        public void Backup()
        {
            Console.WriteLine(""\nCaretaker: Saving Originator's state..."");
            this._mementos.Add(this._originator.Save());
        }

        public void Undo()
        {
            if (this._mementos.Count == 0)
            {
                return;
            }

            var memento = this._mementos.Last();
            this._mementos.Remove(memento);

            Console.WriteLine(""Caretaker: Restoring state to: "" + memento.GetName());

            try
            {
                this._originator.Restore(memento);
            }
            catch (Exception)
            {
                this.Undo();
            }
        }

        public void ShowHistory()
        {
            Console.WriteLine(""Caretaker: Here's the list of mementos:"");

            foreach (var memento in this._mementos)
            {
                Console.WriteLine(memento.GetName());
            }
        }
    }
    
    class Program
    {
        static void Main(string[] args)
        {
            // Client code.
            Originator originator = new Originator(""Super-duper-super-puper-super."");
            Caretaker caretaker = new Caretaker(originator);

            caretaker.Backup();
            originator.DoSomething();

            caretaker.Backup();
            originator.DoSomething();

            caretaker.Backup();
            originator.DoSomething();

            Console.WriteLine();
            caretaker.ShowHistory();

            Console.WriteLine(""\nClient: Now, let's rollback!\n"");
            caretaker.Undo();

            Console.WriteLine(""\n\nClient: Once more!\n"");
            caretaker.Undo();

            Console.WriteLine();
        }
    }
}",C#,Memento,Refactoring Guru,https://refactoring.guru/design-patterns/memento/csharp/example#example-0,"[-5.33777475e-02  5.58744445e-02 -2.94168689e-03 -1.06415171e-02
 -3.58270332e-02  4.60032597e-02  1.06507326e-02  5.29615395e-02
 -2.27647442e-02  2.20709853e-02  1.92943327e-02 -4.80056293e-02
 -7.81245762e-03 -6.26520738e-02 -1.36377485e-02  2.39758696e-02
 -3.66712362e-02  3.16979922e-02 -6.46672174e-02  2.41250191e-02
  8.80335942e-02 -3.85113321e-02 -2.06877477e-02 -1.71115156e-02
 -8.61951336e-03  6.14993200e-02  4.41607796e-02 -3.35061252e-02
  6.47955108e-03  3.10815085e-04 -4.55440804e-02 -1.64335407e-02
 -6.63635433e-02 -5.87279685e-02 -7.09127588e-03  9.38589498e-02
 -8.00450295e-02  4.23206277e-02 -3.91103067e-02 -5.52378036e-02
 -5.64237833e-02  5.24019152e-02 -1.43637890e-02 -8.53134096e-02
  2.57923696e-02 -9.31816250e-02 -7.58380443e-02 -1.42496563e-02
  6.60803318e-02 -1.97714157e-02 -1.47605790e-02  4.35788408e-02
 -1.11005194e-02  1.83549989e-02  5.93115799e-02  8.68360102e-02
  4.55050357e-02  3.28668859e-03 -1.17780596e-01  1.29133947e-02
  2.76808999e-03 -8.20271298e-03  1.18094198e-02 -5.42852730e-02
  2.28414331e-02  4.59276279e-03  4.63226400e-02  1.65527239e-02
  3.51250991e-02 -6.60640225e-02 -3.68450694e-02  2.01924238e-02
  1.93705298e-02  2.78429240e-02 -5.52067533e-02 -2.99042705e-02
 -2.02620924e-02  3.11193690e-02 -5.20090908e-02 -5.64086959e-02
  4.13244367e-02 -1.15323951e-02  3.52645032e-02 -1.90183707e-02
  6.31189495e-02  5.13933450e-02 -5.18998364e-03 -5.04899770e-02
  3.55453938e-02  6.74450696e-02 -4.35572267e-02 -2.69574523e-02
  7.15205669e-02 -3.10926419e-03  8.47138185e-03  3.92036326e-02
  3.09742778e-03  4.62737717e-02 -2.97512636e-02  9.92084295e-02
  1.47023806e-02  7.09364517e-03 -3.78588103e-02  2.87107080e-02
  1.87800713e-02 -3.91633213e-02 -9.84313618e-03 -5.66508621e-02
 -2.72846669e-02  2.20601056e-02 -5.22512607e-02  1.00331888e-01
 -4.03736159e-02  6.89534768e-02  1.30298771e-02 -4.74841669e-02
  4.31244373e-02  2.54109204e-02 -1.81941669e-02  5.79771884e-02
  9.07935873e-02 -3.38096870e-03  3.60256359e-02 -5.88719510e-02
 -3.96450832e-02 -1.40739568e-02  4.66224104e-02  1.27022138e-33
  4.85117659e-02 -3.70968878e-02 -2.77028028e-02  6.59201220e-02
 -1.02173639e-02  4.02181745e-02 -3.01477243e-03  9.13887098e-02
  1.65869500e-02 -9.03307199e-02  7.83133283e-02 -1.63293965e-02
 -2.01495644e-02 -3.96652408e-02  1.02377944e-02 -6.74800202e-02
 -7.67574832e-03  3.79392169e-02  1.04756840e-01 -3.44806910e-02
  1.37212453e-02  4.58831750e-02 -2.08417696e-04 -6.10460006e-02
 -2.87939254e-02  3.41159441e-02  1.05848899e-02  8.03784728e-02
 -1.06054559e-01 -3.60522512e-03  9.54596549e-02 -5.18265367e-02
 -3.79355177e-02  1.71830077e-02  2.34361216e-02  2.85328552e-03
  7.88723771e-03 -5.89893945e-02 -6.51335418e-02 -1.42210886e-01
 -1.77001581e-02 -6.29018918e-02 -1.03719682e-02 -1.82934590e-02
 -2.48098727e-02 -1.53496161e-01  2.19659042e-02  2.19338182e-02
 -2.76047131e-03  2.73793557e-04  8.92142823e-04  7.19506815e-02
 -2.66693179e-02 -9.82636437e-02 -6.69759065e-02  5.49845770e-02
 -1.54416077e-03  2.39524022e-02 -1.60989631e-02  1.41093452e-02
  3.13274264e-02  2.56959759e-02  3.65922868e-04  3.90067957e-02
  1.32178590e-02  9.84704196e-02 -3.95652018e-02 -6.74867779e-02
  7.57729784e-02 -7.32623264e-02 -3.79678160e-02 -5.32557890e-02
  4.06888835e-02 -1.50290495e-02  3.64363790e-02  1.69057250e-02
 -3.98229919e-02  1.12354131e-02 -1.15572296e-01 -1.33593172e-01
  8.73106811e-03 -1.84729155e-02 -7.75923878e-02  8.58370811e-02
  5.90060391e-02  6.10651448e-02  4.54166308e-02 -8.59734975e-03
  7.31496438e-02  6.82157949e-02 -2.97332127e-02 -5.29334918e-02
  2.32399479e-02  1.75316632e-02  3.78111564e-02 -3.16586049e-33
  8.07224363e-02 -6.91220462e-02 -8.05416796e-03 -3.57389189e-02
  2.94384006e-02 -5.28029837e-02 -6.45952746e-02  5.07999323e-02
 -1.37166917e-01 -6.33362830e-02 -3.23273614e-02  4.89634015e-02
  5.32624424e-02  3.85457166e-02  2.05279812e-02  6.19100034e-02
  1.88025311e-02 -3.68080214e-02 -5.01237251e-03 -4.45303358e-02
  1.96646489e-02  6.16663471e-02  2.82180589e-02 -1.53596522e-02
 -8.37807134e-02  1.96318794e-02 -4.14372943e-02  1.96585488e-02
  3.60428691e-02 -3.93390432e-02  5.32991476e-02 -1.38868904e-02
 -3.17168571e-02 -1.04175154e-02  1.45281600e-02 -8.01668763e-02
 -1.40986945e-02 -1.29003553e-02 -7.74086416e-02  8.78847316e-02
  4.44255471e-02 -2.66908798e-02 -2.98931357e-02 -3.18299644e-02
 -4.30188142e-03 -4.90927882e-02 -3.71974222e-02  5.43501601e-02
  7.51671046e-02  2.32174490e-02  5.03588133e-02 -1.30586818e-01
 -7.72350058e-02 -4.72268686e-02  4.61570956e-02  4.76025715e-02
  1.23285413e-01 -9.80920941e-02  2.48237755e-02  3.81766744e-02
 -3.31484899e-02 -4.65817600e-02 -3.64632457e-02  4.45164628e-02
  6.00230657e-02 -5.40553685e-03  1.90153383e-02  3.78186698e-04
 -4.17728070e-03  8.85705464e-03 -9.61242802e-03  5.43998964e-02
 -3.04871191e-05 -6.79821819e-02  1.32776096e-01  2.85589844e-02
 -1.16821462e-02 -5.23109697e-02  3.87781262e-02 -4.86791208e-02
 -4.59428169e-02 -6.10784255e-02 -5.76104922e-03 -6.97055161e-02
 -2.10584104e-02 -8.37696716e-02 -1.02960831e-02  1.73424315e-02
 -7.34366290e-03 -6.51806146e-02 -3.60460244e-02  6.48702234e-02
 -4.02014181e-02  1.12600429e-02 -8.88501108e-03 -5.94506169e-08
 -7.94374794e-02 -8.94142222e-03  5.72637804e-02  7.62710720e-02
  5.28309196e-02 -9.29111615e-02 -2.83149239e-02 -6.03801794e-02
  1.51205342e-02 -4.21160012e-02 -2.40171161e-02  3.28592472e-02
  5.13789244e-02 -1.95582807e-02  1.04465773e-02 -7.44640008e-02
  2.28297859e-02 -1.31423837e-02 -4.74722609e-02  6.78172708e-02
  1.21751905e-03 -9.14533213e-02  4.37337831e-02  1.07628508e-02
  5.88173717e-02 -1.54427662e-02  6.97479770e-02  7.11105689e-02
 -2.77025136e-03  1.39184728e-01 -4.30787727e-03  6.52427375e-02
  9.70328152e-02  1.93645041e-02 -6.53085560e-02  1.51252244e-02
  1.83633324e-02 -1.13779558e-02  5.87813370e-02  7.33645409e-02
  1.55935585e-01 -4.85806279e-02 -4.67508435e-02  5.82982600e-02
  7.40277022e-02 -1.76570471e-02  1.01631442e-02 -1.39885452e-02
  2.92058662e-02 -2.68433224e-02 -1.50660262e-01 -1.54413423e-02
  4.33156826e-02 -1.31849200e-02 -1.22153701e-03  1.97801758e-02
  6.54037893e-02  4.12216736e-03  5.83514459e-02  5.33775613e-02
  2.75319070e-02  1.49573125e-02 -5.34093648e-04 -1.37551536e-03]"
"using System;

namespace RefactoringGuru.DesignPatterns.State.Conceptual
{
    // The Context defines the interface of interest to clients. It also
    // maintains a reference to an instance of a State subclass, which
    // represents the current state of the Context.
    class Context
    {
        // A reference to the current state of the Context.
        private State _state = null;

        public Context(State state)
        {
            this.TransitionTo(state);
        }

        // The Context allows changing the State object at runtime.
        public void TransitionTo(State state)
        {
            Console.WriteLine($""Context: Transition to {state.GetType().Name}."");
            this._state = state;
            this._state.SetContext(this);
        }

        // The Context delegates part of its behavior to the current State
        // object.
        public void Request1()
        {
            this._state.Handle1();
        }

        public void Request2()
        {
            this._state.Handle2();
        }
    }
    
    // The base State class declares methods that all Concrete State should
    // implement and also provides a backreference to the Context object,
    // associated with the State. This backreference can be used by States to
    // transition the Context to another State.
    abstract class State
    {
        protected Context _context;

        public void SetContext(Context context)
        {
            this._context = context;
        }

        public abstract void Handle1();

        public abstract void Handle2();
    }

    // Concrete States implement various behaviors, associated with a state of
    // the Context.
    class ConcreteStateA : State
    {
        public override void Handle1()
        {
            Console.WriteLine(""ConcreteStateA handles request1."");
            Console.WriteLine(""ConcreteStateA wants to change the state of the context."");
            this._context.TransitionTo(new ConcreteStateB());
        }

        public override void Handle2()
        {
            Console.WriteLine(""ConcreteStateA handles request2."");
        }
    }

    class ConcreteStateB : State
    {
        public override void Handle1()
        {
            Console.Write(""ConcreteStateB handles request1."");
        }

        public override void Handle2()
        {
            Console.WriteLine(""ConcreteStateB handles request2."");
            Console.WriteLine(""ConcreteStateB wants to change the state of the context."");
            this._context.TransitionTo(new ConcreteStateA());
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            // The client code.
            var context = new Context(new ConcreteStateA());
            context.Request1();
            context.Request2();
        }
    }",C#,State,Refactoring Guru,https://refactoring.guru/design-patterns/state/csharp/example#example-0,"[-5.87543100e-02  5.43956645e-03  1.21600321e-02 -9.01753642e-03
 -7.99089968e-02  2.72942416e-04  7.28848204e-02  6.64502457e-02
 -2.00464968e-02 -2.42338311e-02 -4.61953953e-02 -7.02053457e-02
  2.56401044e-03 -1.18122762e-02  9.73008052e-02  6.09772168e-02
 -4.19688830e-03  1.12298494e-02 -2.94224033e-03  9.23571214e-02
  1.13026313e-01 -4.13274094e-02 -5.75114489e-02 -4.68054712e-02
 -5.44956215e-02  3.87979113e-02 -3.53456810e-02 -7.61170685e-02
  5.43775558e-02  1.74874738e-02 -4.55281744e-03  3.56075503e-02
 -1.29014283e-01 -4.31920961e-02 -2.27675624e-02  8.44828412e-02
 -3.01649347e-02 -4.35669860e-03 -4.39494140e-02  2.29290198e-03
 -3.21237580e-03  5.76933473e-02 -3.26467399e-03 -4.15062644e-02
  2.27056462e-02 -6.18175603e-02 -1.56191383e-02 -1.98871549e-02
  9.74419340e-03 -2.44677290e-02 -2.77668741e-02 -3.45044695e-02
 -2.18543857e-02 -2.39421055e-02 -7.02750077e-03  8.14714655e-02
  8.87893587e-02  1.39658779e-01  9.14901961e-03  7.98135158e-03
 -2.33143102e-02  2.21927576e-02 -2.79689278e-03  3.74415843e-03
  8.62787440e-02  2.94270627e-02  3.78896929e-02 -7.07855746e-02
  1.02120563e-02 -3.25079001e-02 -3.00235096e-02  1.30452802e-02
  8.57208204e-03 -1.19889043e-02 -3.95396054e-02 -9.09732208e-02
 -4.14800271e-02  8.93375129e-02  1.40240202e-02 -9.38806608e-02
  7.19987601e-02  1.77567899e-02 -4.36022319e-03 -3.73210572e-02
  5.47974445e-02  5.88313714e-02 -3.92688327e-02 -9.68950465e-02
  2.38399636e-02  7.83498064e-02 -2.42448058e-02 -3.52238156e-02
  3.59779969e-02  3.86776179e-02 -1.71353873e-02  2.98738070e-02
 -3.03294901e-02 -2.02813894e-02  2.92917751e-02  1.19668916e-01
 -3.89194116e-02  2.62575429e-02 -2.40055416e-02  2.38914080e-02
  1.30232461e-02 -1.81610789e-02 -7.06094950e-02 -1.70184691e-02
 -7.70603642e-02  1.77247345e-03 -2.24071816e-02  1.60681531e-02
 -2.43577510e-02  2.90866252e-02 -1.24528334e-02  4.68081096e-03
  9.57162902e-02  5.19803818e-03 -4.54710005e-03  8.35487396e-02
  6.51418865e-02 -4.62450199e-02 -1.01683298e-02 -8.23558271e-02
 -5.17130345e-02 -7.18261674e-02  1.91192329e-02  1.42511632e-34
  5.36816157e-02 -1.24026984e-01 -6.36028424e-02  9.74662378e-02
  2.94769946e-02  3.24134491e-02  7.04215169e-02  1.26363030e-02
 -3.30569446e-02 -7.35485703e-02  1.25585750e-01  4.18377705e-02
  4.37084539e-03 -1.45774912e-02  5.50167896e-02 -7.68984109e-02
  3.44316475e-02  2.43376754e-02  9.68552828e-02 -4.38219085e-02
 -2.79912483e-02  9.05915871e-02 -2.76879910e-02 -5.68979383e-02
 -1.89443529e-02  4.73121032e-02 -1.38457799e-02  2.15575006e-02
 -9.37487334e-02  9.39181168e-03  6.03625029e-02  1.34122390e-02
 -1.08286873e-01  1.14058129e-01  1.47919720e-02 -3.00225988e-02
  4.34857309e-02 -1.13671552e-02 -5.91299236e-02 -1.62835479e-01
  2.17707530e-02 -4.67687659e-02 -1.39721325e-02  3.30403000e-02
 -1.54195605e-02 -1.21698961e-01 -2.58259159e-02  1.63489953e-02
 -1.27947917e-02 -3.81828770e-02  2.88679563e-02  9.13977697e-02
  1.20598059e-02 -4.41063084e-02  1.67098716e-02 -8.96157231e-03
 -1.00185268e-01  3.84699479e-02 -2.48134471e-02  6.06089085e-03
  1.55830598e-02  3.51070520e-03 -3.46249007e-02  7.73091614e-02
  1.77570395e-02  8.64149034e-02 -1.00575231e-01 -8.87788758e-02
  5.28126806e-02 -6.53991252e-02 -1.56028634e-02  1.11900661e-02
  3.66015971e-04  3.55109125e-02  1.19293705e-02  1.20708486e-03
 -8.68907943e-02  3.50656770e-02 -1.27991110e-01 -7.27201328e-02
  7.79601699e-03  2.89936513e-02 -5.63822910e-02  1.20868057e-01
  7.74471834e-03  6.94808364e-02  3.33977230e-02 -2.11854335e-02
  2.69840565e-02  3.15571576e-02 -5.33110909e-02 -6.42179027e-02
  1.44760152e-02  4.30600718e-02  7.17254952e-02 -2.15453017e-33
  6.69905543e-02 -2.73994878e-02 -5.53986542e-02 -5.14944363e-03
 -1.03227934e-03 -2.64968369e-02  2.08408963e-02 -3.68628651e-02
 -7.25969970e-02  6.78901896e-02 -1.55574549e-02  2.38761585e-02
  3.55458409e-02  5.14720939e-02 -5.28901294e-02  2.76242699e-02
  3.53502706e-02 -1.70653146e-02  6.87925052e-03 -1.00521762e-02
  7.73293013e-03  5.39005250e-02 -6.87102005e-02 -2.34732311e-03
 -3.32283229e-02 -8.80066585e-03 -1.12533189e-01  3.43969613e-02
  3.31795067e-02  8.74457601e-03 -5.43518886e-02 -1.99294034e-02
 -1.14999921e-03  4.59829308e-02  1.53041468e-03 -7.23741855e-03
 -1.43739609e-02 -2.60666944e-03 -3.99599820e-02  8.09336267e-03
  5.37297875e-02 -6.01898432e-02  5.69321178e-02  4.44697216e-03
  8.93250480e-02  2.09930111e-02  8.31969548e-04 -1.05357021e-02
 -4.46220972e-02 -4.78977822e-02  2.48017535e-02 -2.37980541e-02
 -3.60502936e-02 -2.50285249e-02  6.15644921e-03  5.15835434e-02
  9.98573154e-02 -9.53948349e-02  1.62929036e-02  1.74559150e-02
  9.65298712e-02 -2.18582191e-02 -3.95683534e-02  4.43971977e-02
  9.78828520e-02 -4.04285416e-02 -2.81117093e-02 -8.94491822e-02
  5.85666783e-02 -2.03432422e-02 -1.27739022e-02 -1.01163127e-02
  2.60172449e-02 -4.62270379e-02  1.05816782e-01 -6.37546927e-02
  6.68062195e-02 -7.92451650e-02  1.51499165e-02 -1.04676401e-02
 -1.23569435e-02 -6.15048110e-02  1.29957413e-02 -5.49757741e-02
  1.36901224e-02  1.74865685e-02 -3.23321708e-02  4.19295132e-02
 -2.46497542e-02 -2.85360334e-03 -3.09828147e-02  5.74407391e-02
 -2.63365638e-02 -9.99647100e-03 -2.22214963e-02 -5.26195905e-08
 -4.85713333e-02  1.88948549e-02  1.25321792e-02  4.97407317e-02
  1.36872167e-02  3.27906460e-02 -3.50704081e-02 -1.96887981e-02
 -7.41882809e-03 -4.80948463e-02 -7.30798841e-02  7.56650195e-02
  1.14233285e-01 -7.03383749e-03 -2.55381465e-02 -2.35159155e-02
  2.20695008e-02 -3.13539803e-02 -3.49785462e-02  2.18099430e-02
 -3.43533419e-02 -7.36812279e-02  8.98854900e-03  3.35706919e-02
 -4.70891967e-03 -6.73514679e-02  1.18297286e-01  8.55383277e-02
 -1.02007836e-02  6.94186091e-02 -9.00430605e-02  9.12751034e-02
  6.33855071e-03  1.90777127e-02 -7.09146634e-02  2.12226547e-02
  6.19781716e-03 -6.58287201e-03  7.43167102e-02  6.42927587e-02
  1.10460848e-01 -1.48415258e-02 -1.04080938e-01  6.09128997e-02
  1.35616940e-02  6.31685648e-03  6.95160357e-03 -1.15171941e-02
  4.37287539e-02 -2.42853072e-02 -8.06751102e-02  1.09422691e-02
 -3.53900008e-02  1.26829892e-02 -4.33676131e-03  4.21178378e-02
  1.44564919e-02 -3.20195742e-02 -3.08178719e-02  6.37686178e-02
 -2.33654454e-02  3.51570211e-02 -3.74252908e-03 -1.35759469e-02]"
"using System;

namespace RefactoringGuru.DesignPatterns.TemplateMethod.Conceptual
{
    // The Abstract Class defines a template method that contains a skeleton of
    // some algorithm, composed of calls to (usually) abstract primitive
    // operations.
    //
    // Concrete subclasses should implement these operations, but leave the
    // template method itself intact.
    abstract class AbstractClass
    {
        // The template method defines the skeleton of an algorithm.
        public void TemplateMethod()
        {
            this.BaseOperation1();
            this.RequiredOperations1();
            this.BaseOperation2();
            this.Hook1();
            this.RequiredOperation2();
            this.BaseOperation3();
            this.Hook2();
        }

        // These operations already have implementations.
        protected void BaseOperation1()
        {
            Console.WriteLine(""AbstractClass says: I am doing the bulk of the work"");
        }

        protected void BaseOperation2()
        {
            Console.WriteLine(""AbstractClass says: But I let subclasses override some operations"");
        }

        protected void BaseOperation3()
        {
            Console.WriteLine(""AbstractClass says: But I am doing the bulk of the work anyway"");
        }
        
        // These operations have to be implemented in subclasses.
        protected abstract void RequiredOperations1();

        protected abstract void RequiredOperation2();
        
        // These are ""hooks."" Subclasses may override them, but it's not
        // mandatory since the hooks already have default (but empty)
        // implementation. Hooks provide additional extension points in some
        // crucial places of the algorithm.
        protected virtual void Hook1() { }

        protected virtual void Hook2() { }
    }

    // Concrete classes have to implement all abstract operations of the base
    // class. They can also override some operations with a default
    // implementation.
    class ConcreteClass1 : AbstractClass
    {
        protected override void RequiredOperations1()
        {
            Console.WriteLine(""ConcreteClass1 says: Implemented Operation1"");
        }

        protected override void RequiredOperation2()
        {
            Console.WriteLine(""ConcreteClass1 says: Implemented Operation2"");
        }
    }

    // Usually, concrete classes override only a fraction of base class'
    // operations.
    class ConcreteClass2 : AbstractClass
    {
        protected override void RequiredOperations1()
        {
            Console.WriteLine(""ConcreteClass2 says: Implemented Operation1"");
        }

        protected override void RequiredOperation2()
        {
            Console.WriteLine(""ConcreteClass2 says: Implemented Operation2"");
        }

        protected override void Hook1()
        {
            Console.WriteLine(""ConcreteClass2 says: Overridden Hook1"");
        }
    }

    class Client
    {
        // The client code calls the template method to execute the algorithm.
        // Client code does not have to know the concrete class of an object it
        // works with, as long as it works with objects through the interface of
        // their base class.
        public static void ClientCode(AbstractClass abstractClass)
        {
            // ...
            abstractClass.TemplateMethod();
            // ...
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine(""Same client code can work with different subclasses:"");

            Client.ClientCode(new ConcreteClass1());

            Console.Write(""\n"");
            
            Console.WriteLine(""Same client code can work with different subclasses:"");
            Client.ClientCode(new ConcreteClass2());
        }
    }
}",C#,Template Method,Refactoring Guru,https://refactoring.guru/design-patterns/template-method/csharp/example#example-0,"[-6.27160817e-02  2.44155060e-02  7.49834329e-02 -5.75305112e-02
 -1.06568694e-01 -1.22776246e-02 -2.52415165e-02  6.08696714e-02
 -4.48569320e-02 -2.36796192e-03 -4.35177684e-02 -2.97357161e-02
 -6.23474158e-02 -4.95530479e-03  2.64593381e-02  6.30651414e-02
  3.02075054e-02  7.57266805e-02 -2.25202125e-02  9.02426243e-02
  1.08033136e-01 -5.34753054e-02 -5.74627444e-02  3.07127722e-02
 -6.23451844e-02  5.27941138e-02 -5.74801229e-02 -3.26576754e-02
  2.91357599e-02  3.42766680e-02 -4.41089794e-02  4.42483127e-02
  1.96611341e-02  6.00523092e-02 -5.18071055e-02  3.96096334e-02
  4.76666540e-03 -2.96250056e-03 -3.41233015e-02  1.88314896e-02
 -9.24589708e-02  5.43755889e-02 -2.76429821e-02 -3.05577312e-02
  7.47822225e-02 -1.34423962e-02 -2.06037052e-02 -8.21881369e-02
 -2.18548588e-02  3.21837980e-03  3.21381949e-02  2.82917023e-02
  9.63913370e-03  9.40972380e-03  2.61643290e-04 -2.14205440e-02
  5.71999215e-02  3.19571570e-02  1.33080548e-02 -3.47725265e-02
 -2.39853710e-02  9.87413432e-03 -9.91676375e-03  1.27854841e-02
 -2.08266103e-03  4.44179326e-02  2.38068979e-02 -4.29871827e-02
  1.10207675e-02  6.32114187e-02 -2.67038029e-02 -2.62603699e-03
  1.35956788e-02  4.35733087e-02 -8.53810385e-02  8.10210779e-03
  3.91761996e-02  9.53501761e-02 -5.91455400e-02 -1.49328679e-01
  4.85722609e-02  6.00642189e-02  2.83194315e-02 -5.67129254e-02
  7.56028667e-02  4.09956016e-02 -3.51048857e-02 -2.42130905e-02
  7.14771170e-03  8.23897123e-02  1.31440340e-02 -3.62996757e-02
 -4.67422307e-02 -5.98419793e-02  2.73385290e-02 -2.23911200e-02
  8.86624772e-03  1.28956083e-02  2.09758282e-02  8.98895338e-02
 -4.98403534e-02  1.56936795e-02 -1.56490151e-02 -3.96762528e-02
  9.89020020e-02  8.46335217e-02 -6.19345866e-02 -6.04715049e-02
 -4.06104326e-02 -1.32827135e-02 -6.58188527e-03 -3.74252424e-02
 -3.03342566e-02 -2.20136996e-02 -1.31085264e-02  2.97791008e-02
  8.95593762e-02 -4.30398434e-03 -2.38538235e-02  6.36617914e-02
  3.52114253e-03 -2.45643295e-02  8.71551931e-02  2.38745809e-02
  2.57099308e-02 -2.55523454e-02 -5.59369475e-02  3.37847693e-33
  1.66116022e-02 -6.86348528e-02 -6.98323324e-02  8.01582932e-02
  3.56987938e-02 -3.05886716e-02  5.50401285e-02  3.28601599e-02
 -2.37071365e-02 -1.99877638e-02  7.28270710e-02 -2.11596917e-02
  6.10917322e-02 -9.49876383e-04  1.22024648e-01 -6.69052871e-03
  4.29244414e-02 -9.83700063e-03  6.65998831e-02 -4.42617871e-02
 -7.76549708e-03  2.42401846e-02 -1.94309354e-02  5.14608622e-03
 -4.35505323e-02  5.97335882e-02  5.91484364e-03 -3.93889956e-02
 -1.06840529e-01  5.05192624e-03  3.58723439e-02 -9.46337264e-03
  8.27826187e-03  8.76963809e-02 -4.47102524e-02  2.38912785e-03
  6.21531568e-02 -4.24567051e-02 -3.60492654e-02 -7.27640018e-02
  3.72801069e-03 -1.75967962e-02 -1.63586307e-02 -3.06630991e-02
  8.45740363e-02 -9.36809331e-02 -6.93736300e-02 -1.44485505e-02
  7.10561052e-02 -4.89061289e-02  5.34456819e-02  6.38743564e-02
  5.68556003e-02 -5.47365509e-02  3.06400564e-02 -4.92309853e-02
 -3.55962627e-02  5.30074723e-02 -6.69250963e-04  7.25183114e-02
 -9.07090753e-02  9.46071092e-03 -5.54991625e-02  4.84644547e-02
 -7.60389268e-02  1.62910130e-02 -8.75362381e-02 -6.71048015e-02
  1.13960179e-02 -4.60637100e-02  6.82774559e-03  1.90037943e-03
 -3.94326374e-02  5.57598025e-02 -1.08501557e-02  2.04328005e-03
  6.41105175e-02 -2.87490096e-02 -2.69758832e-02 -2.95148287e-02
 -7.95944706e-02  5.77655509e-02  7.76440576e-02  1.69158187e-02
 -4.26482335e-02  1.35391299e-02  9.25506800e-02  4.15287241e-02
  3.65439728e-02  1.15780020e-02 -3.81462462e-02 -6.85351565e-02
 -2.49977726e-02 -6.02023071e-03  1.12031944e-01 -4.87120010e-33
  3.70027274e-02  7.36267045e-02 -6.28108382e-02 -2.24183761e-02
 -7.82008022e-02  7.18319193e-02 -8.59454200e-02 -1.04695156e-01
 -1.07604861e-01  1.10295471e-02 -1.21349201e-03 -6.81207608e-03
  2.20891722e-02 -1.00070832e-03 -1.28294937e-02 -5.55415414e-02
 -7.67063871e-02 -7.38063529e-02 -1.01586469e-02  4.33826111e-02
  6.76972186e-03  6.79487363e-02  3.83305959e-02  2.78335623e-02
  3.39211486e-02  3.40512916e-02 -1.69103652e-01  1.49675757e-01
  1.06148288e-01  1.17822364e-02 -4.92507145e-02 -2.00402159e-02
  1.83849372e-02 -3.25046033e-02  8.85550901e-02  3.40278633e-02
 -3.20219621e-02  1.01988316e-01  5.18928003e-03  2.90200617e-02
  2.86981910e-02 -8.96146148e-02 -6.80271015e-02 -1.37285609e-03
  2.01190785e-02 -4.01251242e-02 -2.36937013e-02 -2.69737430e-02
 -1.59909800e-02 -8.29094872e-02  4.76644002e-03 -4.53121364e-02
 -2.60093901e-02  6.47924170e-02 -1.83050465e-02  5.40384874e-02
  5.30965254e-02 -6.94580302e-02  1.00133149e-02  5.10002002e-02
  1.34319320e-01 -2.72456538e-02 -2.50403350e-03  5.36628850e-02
  4.65160348e-02  2.60499828e-02  4.00627218e-03 -2.09383965e-02
 -4.87994105e-02  6.20227121e-02 -3.75331566e-02  2.53344420e-02
 -2.02213340e-02 -4.16307058e-03  9.13386494e-02  1.71795785e-02
  6.40986636e-02  6.96819322e-03 -2.35049687e-02 -2.76016630e-02
 -1.04216030e-02 -5.01859374e-02  3.90232005e-03  4.46237531e-03
 -4.48535793e-02 -6.26644045e-02 -3.20965541e-03  1.37838367e-02
 -4.96686250e-02 -3.83443050e-02 -1.39834220e-02  5.24276830e-02
 -3.69665325e-02 -3.53969373e-02 -2.38594953e-02 -5.98668066e-08
  2.56136875e-03 -1.43948197e-02  5.90079539e-02 -1.64809078e-03
  8.54663625e-02 -2.05832999e-02 -2.29172576e-02  7.18511734e-03
 -5.19078784e-02 -5.81732467e-02 -7.06532300e-02  7.74508864e-02
  4.20508422e-02 -1.52875027e-02  8.49683117e-03 -3.32151018e-02
 -3.06135062e-02 -5.66050857e-02 -8.32463950e-02  5.46531230e-02
 -6.11241385e-02 -5.63959070e-02 -1.84702389e-02 -3.74202840e-02
 -8.04069117e-02 -5.13422601e-02  6.49600402e-02  7.00433999e-02
 -2.08141264e-02  1.06852263e-01 -9.69970301e-02  5.82416244e-02
 -3.62996794e-02  5.96255660e-02  4.00495008e-02  9.80012584e-03
  5.74507713e-02 -3.40440981e-02 -4.60499711e-02  3.90736312e-02
  4.42097895e-02 -7.36918002e-02 -3.64836194e-02  1.28278583e-02
  8.06897357e-02 -1.67052988e-02 -3.72293107e-02 -4.71137390e-02
  2.13019792e-02  6.90442324e-02 -4.07450795e-02  5.21290712e-02
 -2.04550419e-02  2.29022875e-02 -9.66036394e-02  5.53411730e-02
  1.91253312e-02 -7.73643851e-02  1.24426363e-02 -1.45021090e-02
 -3.35870162e-02  2.39629783e-02  9.72743705e-02 -3.78399268e-02]"
"using System;

namespace RefactoringGuru.DesignPatterns.Command.Conceptual
{
    // The Command interface declares a method for executing a command.
    public interface ICommand
    {
        void Execute();
    }

    // Some commands can implement simple operations on their own.
    class SimpleCommand : ICommand
    {
        private string _payload = string.Empty;

        public SimpleCommand(string payload)
        {
            this._payload = payload;
        }

        public void Execute()
        {
            Console.WriteLine($""SimpleCommand: See, I can do simple things like printing ({this._payload})"");
        }
    }

    // However, some commands can delegate more complex operations to other
    // objects, called ""receivers.""
    class ComplexCommand : ICommand
    {
        private Receiver _receiver;

        // Context data, required for launching the receiver's methods.
        private string _a;

        private string _b;

        // Complex commands can accept one or several receiver objects along
        // with any context data via the constructor.
        public ComplexCommand(Receiver receiver, string a, string b)
        {
            this._receiver = receiver;
            this._a = a;
            this._b = b;
        }

        // Commands can delegate to any methods of a receiver.
        public void Execute()
        {
            Console.WriteLine(""ComplexCommand: Complex stuff should be done by a receiver object."");
            this._receiver.DoSomething(this._a);
            this._receiver.DoSomethingElse(this._b);
        }
    }

    // The Receiver classes contain some important business logic. They know how
    // to perform all kinds of operations, associated with carrying out a
    // request. In fact, any class may serve as a Receiver.
    class Receiver
    {
        public void DoSomething(string a)
        {
            Console.WriteLine($""Receiver: Working on ({a}.)"");
        }

        public void DoSomethingElse(string b)
        {
            Console.WriteLine($""Receiver: Also working on ({b}.)"");
        }
    }

    // The Invoker is associated with one or several commands. It sends a
    // request to the command.
    class Invoker
    {
        private ICommand _onStart;

        private ICommand _onFinish;

        // Initialize commands.
        public void SetOnStart(ICommand command)
        {
            this._onStart = command;
        }

        public void SetOnFinish(ICommand command)
        {
            this._onFinish = command;
        }

        // The Invoker does not depend on concrete command or receiver classes.
        // The Invoker passes a request to a receiver indirectly, by executing a
        // command.
        public void DoSomethingImportant()
        {
            Console.WriteLine(""Invoker: Does anybody want something done before I begin?"");
            if (this._onStart is ICommand)
            {
                this._onStart.Execute();
            }
            
            Console.WriteLine(""Invoker: ...doing something really important..."");
            
            Console.WriteLine(""Invoker: Does anybody want something done after I finish?"");
            if (this._onFinish is ICommand)
            {
                this._onFinish.Execute();
            }
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            // The client code can parameterize an invoker with any commands.
            Invoker invoker = new Invoker();
            invoker.SetOnStart(new SimpleCommand(""Say Hi!""));
            Receiver receiver = new Receiver();
            invoker.SetOnFinish(new ComplexCommand(receiver, ""Send email"", ""Save report""));

            invoker.DoSomethingImportant();
        }
    }
}",C#,Command,Refactoring Guru,https://refactoring.guru/design-patterns/command/csharp/example#example-0,"[-5.63055649e-02  6.71571586e-03 -1.73072126e-02 -1.48611178e-03
 -7.25744292e-02 -6.00904366e-03  4.86636832e-02  7.69145489e-02
 -2.22402513e-02  6.69629872e-02 -2.48667095e-02 -4.23166491e-02
  2.26176549e-02 -3.09288385e-03  8.42177421e-02  6.76192110e-03
  3.74337472e-02 -1.35889882e-03 -1.03745177e-01  4.98873927e-02
  1.09986052e-01 -3.58883254e-02 -2.27375552e-02 -3.30229662e-02
 -1.20788589e-01 -2.24571843e-02  2.56127845e-02 -1.00039028e-01
 -2.40431055e-02 -7.13204313e-03 -2.83692181e-02  4.35267873e-02
 -5.07850349e-02  8.40454921e-03 -1.03219301e-01  1.15864828e-01
  5.97049259e-02  4.52231094e-02 -4.39881384e-02 -4.67163846e-02
 -1.49481567e-02  4.20111753e-02 -7.40743950e-02 -4.34489325e-02
  3.30309942e-02 -8.68432149e-02 -7.96817616e-02 -3.54017131e-02
 -2.11436972e-02 -4.33233455e-02  8.26236606e-03  1.69550627e-02
  1.91511435e-03  3.05959918e-02  1.84629690e-02  1.69781800e-02
  3.30600105e-02  1.15902703e-02  1.54139102e-02 -3.29965949e-02
 -3.40285562e-02  3.52185331e-02 -3.16476710e-02 -1.51805049e-02
  5.21277823e-02 -4.35791351e-02  2.12275777e-02  7.81179778e-03
  2.17080954e-02  1.28195924e-03 -3.07849385e-02 -2.54504499e-03
 -4.49949130e-02  8.02839920e-02 -1.46552036e-02 -5.08714579e-02
  6.20973669e-02  4.74456586e-02 -7.53774792e-02 -7.90036619e-02
  3.46212741e-03  3.81952412e-02 -1.01208342e-02 -3.83801907e-02
  3.82601470e-02  8.71769264e-02  4.52841021e-04 -1.84202585e-02
  5.40983826e-02  9.63721499e-02 -3.47021781e-02 -1.67759489e-02
 -3.30134179e-03 -1.59015656e-02  3.22542638e-02 -1.33113759e-02
 -1.76283456e-02 -3.86042073e-02  7.35920994e-03  8.35572779e-02
 -2.19853595e-02 -1.39644751e-02 -3.20856310e-02 -6.22694418e-02
  6.41696230e-02 -2.25232113e-02 -1.96079519e-02 -7.51404688e-02
 -2.74011865e-03 -1.52778020e-03 -3.09503041e-02 -4.87725548e-02
 -3.45938504e-02 -2.48636901e-02  3.90626043e-02  5.08881398e-02
  8.18620324e-02  1.72615908e-02  5.93124852e-02  1.97582357e-02
  5.21908291e-02 -1.08724711e-02  1.50700696e-02 -9.55279451e-03
  2.47901045e-02 -1.92690250e-02 -2.99227219e-02  6.23523860e-33
  5.92032708e-02 -6.30796403e-02 -4.14755493e-02  1.18077874e-01
  1.26570044e-02  5.31111322e-02  8.54729861e-02  9.13936347e-02
  4.35844064e-02 -4.83232960e-02  3.36854458e-02  1.63765944e-04
  2.08875854e-02  2.06046980e-02  3.38244922e-02 -3.22874263e-02
  3.48954685e-02  2.97141587e-03 -1.02317892e-02 -7.35820178e-03
  1.21759865e-02  3.53877880e-02 -4.18288931e-02  2.25640070e-02
  3.62015367e-02 -1.00228591e-02 -9.24889836e-03  3.30983549e-02
 -5.08119166e-02 -2.95645953e-03  9.88881066e-02 -1.25070410e-02
 -7.94845000e-02  9.35321823e-02 -4.16787602e-02  1.03022037e-02
 -6.74754800e-03  6.92219567e-03 -8.77461629e-04 -1.31361380e-01
 -5.97629026e-02 -5.76469675e-02 -5.10894172e-02 -8.05516820e-03
 -4.74402867e-02 -1.57558218e-01 -7.30833113e-02 -3.43792811e-02
  6.81575984e-02 -4.12164032e-02  5.35461456e-02  7.45662749e-02
  5.34530059e-02 -3.32782902e-02 -2.45260919e-04  2.67190766e-02
 -6.62389621e-02 -3.87211260e-03 -2.30697151e-02  1.79270357e-02
 -6.16843104e-02 -1.71173252e-02 -1.67568605e-02  1.20467290e-01
  3.65364216e-02  3.49038690e-02 -6.85670227e-02 -9.07836705e-02
  6.56267405e-02 -1.03107758e-01 -7.52160996e-02  2.20991410e-02
 -2.56592664e-03 -5.66642582e-02  7.47964904e-02  5.94694167e-02
 -1.76507663e-02 -2.89346948e-02 -6.70912713e-02 -3.35549265e-02
 -4.09532264e-02  4.64011282e-02 -5.21799875e-03  7.62234405e-02
 -4.74037826e-02  8.44649896e-02  2.75750775e-02 -2.27082893e-03
  4.42929789e-02  3.23474291e-03 -4.41007167e-02  5.40259341e-03
 -8.84459689e-02  3.93088497e-02  7.56924376e-02 -8.51007290e-33
  7.10754097e-02  6.66227043e-02 -6.60149455e-02  6.27318490e-03
 -1.54218795e-02  5.23870327e-02 -4.81770188e-02 -9.66078192e-02
 -1.66885108e-01 -5.22876382e-02 -7.38917366e-02  2.60119904e-02
 -1.02943117e-02  8.74464959e-03  2.80007645e-02 -1.16209518e-02
  1.07339444e-02 -2.40496779e-03  3.16776298e-02  1.24531174e-02
  2.52914615e-03  5.81409261e-02  4.79480214e-02 -7.25463852e-02
 -2.50756145e-02 -1.06766319e-03 -9.05970261e-02  1.13813214e-01
  3.31639573e-02  4.01206687e-02  4.11003456e-02 -1.61948428e-02
  3.68383974e-02 -7.49063268e-02 -2.50744689e-02 -3.58703770e-02
  2.20502336e-02  7.68129751e-02 -1.62485838e-02  3.73477936e-02
  7.28130564e-02 -7.29462057e-02  4.88764048e-02 -1.86855216e-02
  2.27408912e-02 -7.44836628e-02 -6.87013147e-04 -1.75066460e-02
 -2.70848777e-02  1.25876553e-02 -1.59260649e-02 -7.78707489e-02
 -7.62859881e-02 -1.70689973e-03  3.33377905e-03  4.23419923e-02
  9.96451303e-02 -4.53648269e-02  4.90805171e-02  2.46292893e-02
  4.76084314e-02 -3.78094912e-02  2.00911723e-02  7.94659462e-03
  3.14668566e-02  1.81657337e-02  5.60123399e-02 -4.44129482e-02
  8.82848948e-02  6.74205925e-03 -1.05624842e-02  9.76469927e-03
 -3.89914541e-03 -3.70359831e-02  8.91695097e-02 -6.73824502e-03
  2.93936003e-02 -1.08279772e-01 -3.10610030e-02 -2.35515479e-02
 -2.03395095e-02 -8.70308802e-02 -1.25298807e-02 -8.40278063e-03
 -3.07306144e-02 -3.04934364e-02  5.57141192e-02  2.75832899e-02
 -2.61802319e-02 -4.94048893e-02 -2.48789694e-02  7.23284408e-02
 -1.34824344e-03 -2.64925207e-03 -5.61063997e-02 -6.88922199e-08
  1.21046172e-03 -5.86499795e-02  2.42504813e-02  5.73372617e-02
 -1.91869494e-02 -4.32131179e-02 -7.32271597e-02 -8.83655250e-02
  9.51213762e-03 -3.54075469e-02 -4.63537686e-02  4.63956334e-02
  9.51780230e-02 -3.69753502e-02  6.71351254e-02 -6.15888424e-02
  2.91811395e-02 -1.08082339e-01 -8.19604844e-02  4.61675413e-02
 -1.07590938e-02 -6.94128871e-02 -3.89498137e-02  2.70869862e-02
  1.12183616e-02  3.90364565e-02  9.04622003e-02  8.00012574e-02
 -3.29809561e-02  8.21468756e-02 -3.64671983e-02  8.09709951e-02
  1.68205276e-02  6.13207966e-02 -1.44520251e-03  4.70211059e-02
  4.76620672e-03 -6.29459992e-02  2.82128379e-02  1.59905013e-02
  8.90652761e-02 -3.62495743e-02 -4.48065922e-02  5.76046593e-02
  8.87545645e-02 -2.93798000e-03 -3.65099199e-02 -9.64806676e-02
  3.55069339e-02  1.14034377e-02 -1.21042170e-01  7.61874318e-02
 -7.89344031e-03  2.64120735e-02 -3.11824232e-02  3.61652449e-02
  4.78298441e-02 -1.06602490e-01  3.30366306e-02  5.82933240e-02
  8.63117725e-03  1.71145722e-02 -3.85525748e-02 -1.55801810e-02]"
"using System;

namespace RefactoringGuru.DesignPatterns.Mediator.Conceptual
{
    // The Mediator interface declares a method used by components to notify the
    // mediator about various events. The Mediator may react to these events and
    // pass the execution to other components.
    public interface IMediator
    {
        void Notify(object sender, string ev);
    }

    // Concrete Mediators implement cooperative behavior by coordinating several
    // components.
    class ConcreteMediator : IMediator
    {
        private Component1 _component1;

        private Component2 _component2;

        public ConcreteMediator(Component1 component1, Component2 component2)
        {
            this._component1 = component1;
            this._component1.SetMediator(this);
            this._component2 = component2;
            this._component2.SetMediator(this);
        } 

        public void Notify(object sender, string ev)
        {
            if (ev == ""A"")
            {
                Console.WriteLine(""Mediator reacts on A and triggers folowing operations:"");
                this._component2.DoC();
            }
            if (ev == ""D"")
            {
                Console.WriteLine(""Mediator reacts on D and triggers following operations:"");
                this._component1.DoB();
                this._component2.DoC();
            }
        }
    }

    // The Base Component provides the basic functionality of storing a
    // mediator's instance inside component objects.
    class BaseComponent
    {
        protected IMediator _mediator;

        public BaseComponent(IMediator mediator = null)
        {
            this._mediator = mediator;
        }

        public void SetMediator(IMediator mediator)
        {
            this._mediator = mediator;
        }
    }

    // Concrete Components implement various functionality. They don't depend on
    // other components. They also don't depend on any concrete mediator
    // classes.
    class Component1 : BaseComponent
    {
        public void DoA()
        {
            Console.WriteLine(""Component 1 does A."");

            this._mediator.Notify(this, ""A"");
        }

        public void DoB()
        {
            Console.WriteLine(""Component 1 does B."");

            this._mediator.Notify(this, ""B"");
        }
    }

    class Component2 : BaseComponent
    {
        public void DoC()
        {
            Console.WriteLine(""Component 2 does C."");

            this._mediator.Notify(this, ""C"");
        }

        public void DoD()
        {
            Console.WriteLine(""Component 2 does D."");

            this._mediator.Notify(this, ""D"");
        }
    }
    
    class Program
    {
        static void Main(string[] args)
        {
            // The client code.
            Component1 component1 = new Component1();
            Component2 component2 = new Component2();
            new ConcreteMediator(component1, component2);

            Console.WriteLine(""Client triggers operation A."");
            component1.DoA();

            Console.WriteLine();

            Console.WriteLine(""Client triggers operation D."");
            component2.DoD();
        }",C#,Mediator,Refactoring Guru,https://refactoring.guru/design-patterns/mediator/csharp/example#example-0,"[ 8.09175707e-03 -4.81774881e-02  3.01887281e-02 -4.65529561e-02
 -3.70032974e-02  6.31279722e-02  1.03882462e-01  9.14288387e-02
  4.19961214e-02  2.22295057e-02  4.48322063e-03 -3.88685465e-02
  2.79321074e-02  8.40079132e-03  3.88472080e-02  4.76885401e-02
 -4.27125730e-02  7.54684117e-03 -8.43982249e-02  2.08834838e-02
  5.76060042e-02 -3.57608348e-02 -3.87288965e-02 -3.40825208e-02
 -6.55931756e-02 -6.65837293e-03  7.20857605e-02 -7.32558891e-02
  6.94196392e-03 -2.98654828e-02  5.67693114e-02 -1.86486784e-02
 -8.27726498e-02 -1.71008371e-02 -5.10338843e-02  3.24721746e-02
 -7.82016106e-03  1.95411127e-02 -8.27290416e-02 -3.50327976e-02
  2.31407546e-02  3.06945369e-02 -1.79483667e-02 -7.95053244e-02
  3.58813070e-02 -5.38351312e-02 -7.15820417e-02 -2.94639617e-02
 -3.16676944e-02 -6.31770492e-02 -5.38902506e-02 -1.23734195e-02
 -4.18467971e-04  2.94874348e-02  2.17103362e-02 -4.88607734e-02
  5.25108278e-02  5.61516024e-02  1.11334519e-02 -4.47597355e-02
 -4.01270613e-02 -6.52850664e-04  2.20614150e-02 -7.65280938e-03
  6.33347407e-02  1.36839866e-03  1.30126467e-02  1.85286868e-02
 -2.88797114e-02 -1.50076160e-02 -6.76458925e-02  2.06884164e-02
  8.83197635e-02  3.53744738e-02 -2.80251354e-02 -5.60780279e-02
 -1.23751322e-02  7.55662024e-02 -1.76933361e-03 -8.97529498e-02
  2.46220045e-02  3.34331244e-02  1.48253253e-04 -4.59336564e-02
  4.44733314e-02  5.77105284e-02 -5.14170080e-02 -4.48854677e-02
 -1.84634756e-02  1.60080474e-02 -8.47129151e-03  1.85303539e-02
  4.31530774e-02  3.23259681e-02  1.87534727e-02  7.44517660e-03
 -2.15853769e-02 -1.14466315e-02  2.85881404e-02  9.22543705e-02
 -4.90196012e-02  2.78993137e-03 -6.20652959e-02 -2.36940803e-03
  6.46352535e-03 -3.46504934e-02 -1.11853607e-01 -3.57002243e-02
  1.02827698e-02 -6.31631985e-02 -4.24319468e-02 -1.55391255e-02
 -6.46735057e-02 -2.90168659e-03 -1.80393772e-03 -1.29967267e-02
  7.55240321e-02  2.09465083e-02  3.69654447e-02 -1.60961710e-02
  9.55126062e-02 -4.11525890e-02  1.09981420e-02 -4.08335477e-02
  3.84571888e-02 -1.55151673e-02 -1.84667669e-02  3.04469935e-33
  3.13057862e-02 -5.26408404e-02 -7.98002779e-02  1.16661474e-01
  4.97378856e-02  8.43140669e-03  5.98502047e-02  3.71681452e-02
  1.24722552e-02 -6.00579344e-02  9.49136168e-03 -2.66429055e-02
 -3.04484032e-02 -1.24484757e-02  1.63853336e-02 -6.98244274e-02
  4.21318077e-02  5.22016957e-02 -4.69008635e-04 -6.15917332e-02
  2.72133537e-02  5.69682047e-02 -2.01358814e-02  3.77399288e-02
  2.53960826e-02 -1.22331297e-02 -9.70334373e-03  2.24252865e-02
 -7.24553764e-02 -4.01839353e-02  9.10291225e-02  7.79465260e-03
  2.00093370e-02  7.85741508e-02 -3.76825742e-02 -5.97203560e-02
 -6.17260188e-02 -6.01921510e-03 -1.18755531e-02 -1.41150281e-01
  3.31263766e-02 -6.73945174e-02 -3.68458107e-02 -3.49445529e-02
  1.85499843e-02 -7.89834857e-02 -7.56616220e-02  2.83370391e-02
  6.86695650e-02 -6.63253963e-02  1.03795059e-01  9.62991118e-02
  7.65062720e-02  5.91443805e-03  7.04414323e-02  7.15951100e-02
 -5.40633239e-02  2.92076636e-02 -4.23451047e-03  1.40856430e-02
 -6.71959668e-02  4.66338284e-02 -3.66770066e-02  3.05689406e-02
 -3.86722423e-02  5.94567433e-02 -8.05020425e-03 -1.03921078e-01
  7.76606649e-02 -5.45742549e-02  7.85576354e-04  9.02272668e-03
 -1.62944030e-02 -3.27455923e-02  4.23356816e-02 -1.18370680e-02
 -1.19459011e-01 -2.91811340e-02 -7.89957792e-02 -6.22429326e-02
 -7.99481794e-02  3.60730439e-02 -7.04315351e-03  1.46583244e-01
 -3.23003903e-02  1.00523895e-02 -9.11709387e-03  1.49706528e-02
 -2.17232923e-03  6.56661540e-02 -3.31282839e-02  4.44326457e-03
  2.20930930e-02  1.84997823e-02  1.14237241e-01 -4.55876142e-33
 -6.93848170e-03  4.07305285e-02 -3.94296944e-02 -2.47129649e-02
 -1.38028236e-02  1.36623774e-02 -5.72553053e-02 -8.10326114e-02
 -8.30747038e-02  4.91041839e-02 -1.41222300e-02  2.26717107e-02
 -1.72737259e-02 -1.84991548e-03 -8.42678100e-02  6.03417456e-02
  9.87202227e-02 -1.55396003e-03  4.47503850e-02 -3.03730145e-02
  7.56931119e-03  7.19847605e-02  4.36880551e-02 -1.28066037e-02
  1.11644724e-02  6.86679780e-03  9.10996553e-03  1.06459960e-01
  7.89409652e-02  1.52459543e-03 -3.21752504e-02  1.81032848e-02
  5.09518161e-02 -4.27973457e-02  6.14678040e-02 -8.24797899e-02
  4.09965068e-02  1.39457090e-02 -3.71817611e-02 -9.14981961e-03
  7.25937709e-02 -3.22604440e-02  1.73192695e-02  4.69463766e-02
 -8.94832890e-03 -8.36150274e-02  2.01007258e-02  1.12027293e-02
  6.44133752e-03  2.42959969e-02 -1.08468523e-02 -1.49446324e-01
  3.80155630e-03 -2.39921324e-02 -8.72695673e-05  9.59971845e-02
  1.32651567e-01 -7.11652413e-02  3.64125222e-02  3.42293009e-02
  6.74583688e-02 -7.67963752e-02  3.40865692e-03  6.05624020e-02
  6.04376234e-02  2.00813524e-02  1.65160629e-03  4.24672430e-03
  6.99592233e-02  1.37270065e-02  4.60187495e-02  5.00070527e-02
 -2.85561681e-02 -5.95833361e-02  9.77091044e-02  4.85786889e-03
  2.57557165e-03 -5.28505631e-02  2.05994323e-02 -9.58046466e-02
 -1.91155504e-02 -5.39209172e-02  2.98696086e-02 -7.61111677e-02
 -2.57697888e-02  3.80916288e-03  5.24142683e-02 -9.52521153e-03
  2.24143937e-02 -2.55456343e-02 -6.19707592e-02  1.08368360e-01
  6.46268204e-02 -3.21725905e-02 -4.46604006e-02 -5.57601538e-08
 -3.13549601e-02 -7.34793618e-02 -5.43054473e-03 -4.33553904e-02
 -1.66222278e-03 -9.89362374e-02 -3.62661630e-02 -7.64719471e-02
 -3.03988829e-02 -3.01408134e-02 -5.15921749e-02 -8.17794539e-03
  9.86820087e-02 -5.25419451e-02  9.05262381e-02 -4.62442897e-02
 -8.57728440e-03 -5.24774566e-02 -1.04056500e-01  1.43389748e-02
  2.13167593e-02 -5.64512275e-02  3.74564610e-04  5.24789616e-02
  8.89681000e-03 -5.91000840e-02  1.11658253e-01  5.79368919e-02
  5.30749597e-02  6.63997605e-02 -8.23060051e-02  4.45370972e-02
  1.10465297e-02  2.02508457e-02 -1.43208299e-02  6.19079359e-02
  5.55386022e-02 -8.69448110e-02  4.81344238e-02  8.65802318e-02
  4.89030033e-02 -3.78333405e-02 -6.09639362e-02  4.38913181e-02
  9.72043499e-02 -1.75079443e-02 -5.64165190e-02 -6.44723177e-02
  2.22371258e-02  5.48410863e-02 -1.09378636e-01  3.45525406e-02
 -3.24010774e-02  1.07904263e-02 -6.61656186e-02 -3.74056250e-02
  4.92858887e-02  3.97856440e-03  7.78756440e-02  4.34126565e-03
 -3.82641703e-02  4.91038486e-02  5.84806781e-03 -1.67031102e-02]"
"using System;
using System.Collections.Generic;
using System.Threading;

namespace RefactoringGuru.DesignPatterns.Observer.Conceptual
{
    public interface IObserver
    {
        // Receive update from subject
        void Update(ISubject subject);
    }

    public interface ISubject
    {
        // Attach an observer to the subject.
        void Attach(IObserver observer);

        // Detach an observer from the subject.
        void Detach(IObserver observer);

        // Notify all observers about an event.
        void Notify();
    }

    // The Subject owns some important state and notifies observers when the
    // state changes.
    public class Subject : ISubject
    {
        // For the sake of simplicity, the Subject's state, essential to all
        // subscribers, is stored in this variable.
        public int State { get; set; } = -0;

        // List of subscribers. In real life, the list of subscribers can be
        // stored more comprehensively (categorized by event type, etc.).
        private List<IObserver> _observers = new List<IObserver>();

        // The subscription management methods.
        public void Attach(IObserver observer)
        {
            Console.WriteLine(""Subject: Attached an observer."");
            this._observers.Add(observer);
        }

        public void Detach(IObserver observer)
        {
            this._observers.Remove(observer);
            Console.WriteLine(""Subject: Detached an observer."");
        }

        // Trigger an update in each subscriber.
        public void Notify()
        {
            Console.WriteLine(""Subject: Notifying observers..."");

            foreach (var observer in _observers)
            {
                observer.Update(this);
            }
        }

        // Usually, the subscription logic is only a fraction of what a Subject
        // can really do. Subjects commonly hold some important business logic,
        // that triggers a notification method whenever something important is
        // about to happen (or after it).
        public void SomeBusinessLogic()
        {
            Console.WriteLine(""\nSubject: I'm doing something important."");
            this.State = new Random().Next(0, 10);

            Thread.Sleep(15);

            Console.WriteLine(""Subject: My state has just changed to: "" + this.State);
            this.Notify();
        }
    }

    // Concrete Observers react to the updates issued by the Subject they had
    // been attached to.
    class ConcreteObserverA : IObserver
    {
        public void Update(ISubject subject)
        {            
            if ((subject as Subject).State < 3)
            {
                Console.WriteLine(""ConcreteObserverA: Reacted to the event."");
            }
        }
    }

    class ConcreteObserverB : IObserver
    {
        public void Update(ISubject subject)
        {
            if ((subject as Subject).State == 0 || (subject as Subject).State >= 2)
            {
                Console.WriteLine(""ConcreteObserverB: Reacted to the event."");
            }
        }
    }
    
    class Program
    {
        static void Main(string[] args)
        {
            // The client code.
            var subject = new Subject();
            var observerA = new ConcreteObserverA();
            subject.Attach(observerA);

            var observerB = new ConcreteObserverB();
            subject.Attach(observerB);

            subject.SomeBusinessLogic();
            subject.SomeBusinessLogic();

            subject.Detach(observerB);

            subject.SomeBusinessLogic();
        }
    }
}",C#,Observer,Refactoring Guru,https://refactoring.guru/design-patterns/observer/csharp/example#example-0,"[-1.83394831e-02 -5.22837304e-02  3.24986540e-02  1.35632595e-02
  1.76749248e-02  1.26457885e-02  7.68845007e-02 -1.91087218e-03
  7.10309669e-02  5.68155758e-02 -1.59496181e-02 -6.29306436e-02
 -5.62290102e-03 -2.19876096e-02 -3.71283665e-02  5.69091924e-02
  1.99385192e-02 -4.79995646e-02 -7.65844285e-02  2.80291252e-02
  1.90858748e-02 -2.15333086e-02 -3.78948264e-02  2.35674605e-02
 -5.63542508e-02  3.60509194e-03  5.11262342e-02 -7.98037425e-02
 -6.99472614e-03 -2.29717921e-02  1.74564775e-02 -4.86426130e-02
 -4.08227444e-02 -2.65417229e-02 -3.10612749e-02  1.31339496e-02
 -1.49700027e-02 -6.76531671e-03 -5.78081794e-02 -1.48153789e-02
 -1.20995427e-02  2.19865097e-03 -2.24669161e-03 -4.98818196e-02
  7.28327632e-02 -6.57389639e-04 -3.10684089e-02 -4.62908223e-02
 -7.70420441e-03 -2.69348156e-02 -2.27372609e-02 -4.44959439e-02
 -2.73766909e-02  4.78348546e-02  5.28452508e-02  1.88874099e-02
  4.39067818e-02  4.60278355e-02 -4.30885740e-02 -5.96427321e-02
  1.11852922e-02  4.79777567e-02  1.26813883e-02 -6.58357050e-03
  4.62296903e-02  4.77467403e-02  5.91684952e-02  4.97649908e-02
 -7.13068433e-03 -8.31063371e-03 -2.75068171e-02  7.85674527e-02
  1.27898576e-02 -1.84665096e-03 -2.88871638e-02 -6.12557642e-02
  4.71854433e-02  1.41159426e-02  3.16378102e-02  5.27713727e-03
 -9.05254111e-02 -2.62472127e-02 -1.35484012e-02 -4.68849353e-02
  5.26776090e-02 -1.47455996e-02 -1.40084941e-02 -1.95284579e-02
 -1.27822245e-02  6.51296303e-02 -3.06605119e-02  9.75447893e-03
  8.54192376e-02  1.85784921e-02  6.44870102e-02  5.36331162e-02
 -1.38478000e-02  4.17596363e-02 -8.99319816e-03  1.08269252e-01
 -2.55572107e-02  5.52508235e-02 -9.75458547e-02  5.32752015e-02
  1.28807304e-02 -2.73773875e-02 -5.71264625e-02 -7.83950314e-02
 -4.89491262e-02 -2.28502252e-03 -1.38897914e-02  2.97480039e-02
 -3.45679112e-02  1.10732429e-02 -3.66721451e-02 -5.36882365e-03
  1.12894170e-01  9.63623747e-02 -3.37824225e-03  3.01003996e-02
  8.29142556e-02 -8.20104685e-03 -1.44971963e-02 -6.53354777e-03
  3.21651846e-02 -1.38481753e-02  3.55082192e-02  2.66182504e-33
  5.99120073e-02 -7.16843754e-02 -7.32714906e-02  8.11500773e-02
 -9.56602208e-03  3.92318740e-02  6.08447604e-02 -6.02457486e-03
  3.03003043e-02 -3.18213031e-02  5.02360389e-02  3.23421545e-02
  6.63561299e-02 -1.72667410e-02  2.09742077e-02 -1.18004367e-01
  2.07924936e-02  2.37304661e-02  6.09704386e-03 -5.82655752e-03
 -2.53679100e-02  2.34914348e-02 -7.32960552e-02 -2.20232289e-02
 -2.96436232e-02  5.99500388e-02  1.90909300e-02  1.03774793e-01
 -6.11192919e-02 -3.48896882e-03  1.08403392e-01  7.09305750e-03
 -6.61228821e-02  5.81314228e-02 -4.84014153e-02 -7.55592585e-02
 -1.32669695e-02 -2.63541285e-02 -5.08801267e-03 -1.23797774e-01
  7.82132298e-02 -3.59261706e-02 -7.82835260e-02 -2.02641916e-02
 -1.42278718e-02 -8.48578066e-02 -3.45292687e-02 -1.31866168e-02
  2.76561659e-02 -6.15603365e-02  7.73148760e-02  2.29995232e-02
  8.86400323e-03 -7.86764547e-02 -1.24745388e-02  5.37664928e-02
 -9.04692709e-03  2.83206925e-02 -3.41153219e-02  4.67857830e-02
 -3.01604941e-02  1.77071504e-02  3.02277338e-02  2.21642610e-02
  6.75488710e-02  1.01406932e-01 -4.22085784e-02 -1.08058549e-01
  7.24149346e-02 -7.93206766e-02 -3.46452259e-02  5.19545451e-02
  2.85558067e-02  1.47759449e-02 -3.75367776e-02  1.48638422e-02
 -1.21521562e-01 -7.64195865e-05 -1.05958350e-01 -5.91060296e-02
  1.64747816e-02  2.36071758e-02 -5.32809868e-02  1.21156566e-01
  4.72509935e-02  3.36852968e-02 -1.51912738e-02  1.77582223e-02
 -4.60541360e-02  7.73303956e-02  3.09677813e-02 -1.26206884e-02
  5.74364997e-02 -9.00454912e-03  3.20013762e-02 -3.79826690e-33
 -1.47843612e-02 -1.01686427e-02 -1.22097194e-01 -2.29995903e-02
 -2.92779971e-02 -2.14534979e-02 -7.43796378e-02 -3.38929966e-02
 -6.71336502e-02 -2.18733009e-02 -6.08617887e-02  8.13068263e-03
 -3.09799127e-02  7.99456090e-02 -1.35966791e-02  7.15286359e-02
  3.76958586e-02 -3.34980786e-02 -4.61656563e-02 -2.59373784e-02
 -1.11017507e-02  1.23809852e-01  5.81489950e-02 -5.18563986e-02
 -2.98039392e-02  2.73158643e-02 -2.43050158e-02  9.67580006e-02
  3.48947085e-02 -3.52867767e-02 -4.75826152e-02 -5.22118136e-02
 -2.76467614e-02 -1.13618262e-02  2.87068207e-02 -4.92773764e-02
  3.75406146e-02 -9.09962319e-03 -2.61170622e-02 -4.81718592e-03
  4.32693623e-02 -6.48123473e-02 -8.46915320e-03 -5.95133612e-03
  3.19020241e-03 -3.38685103e-02 -4.29591052e-02  6.63677230e-02
 -5.33532491e-03  3.04773040e-02 -4.42428514e-02 -8.00118670e-02
 -1.61170382e-02  6.05889130e-04  3.43595428e-04  8.43865052e-02
  3.51737961e-02 -9.66105685e-02  1.10067032e-01  1.81186516e-02
  1.48648741e-02 -3.02731916e-02  3.01653352e-02  8.50664731e-03
  6.96004853e-02  8.61707181e-02  2.89301359e-04 -5.03304489e-02
  8.75588357e-02  5.36257867e-03  3.75297666e-02  5.57677113e-02
 -7.03252628e-02 -8.46486911e-02  1.10767782e-01 -4.90297703e-03
  1.61089078e-02 -7.72725195e-02 -4.82502254e-03 -1.91412512e-02
 -7.01003224e-02 -2.90937833e-02  5.08714207e-02 -5.63045070e-02
 -2.27899738e-02 -2.23849267e-02  4.80002686e-02 -1.01429988e-02
  2.53004320e-02 -6.98128790e-02 -9.44527611e-02  5.76671697e-02
 -1.04035786e-03  2.55104364e-03 -9.07808989e-02 -5.94049148e-08
 -2.75195707e-02 -2.40193699e-02 -2.74831187e-02  9.75236520e-02
  3.83471921e-02 -1.87136116e-03 -4.39210311e-02 -9.24433619e-02
 -3.48277465e-02 -3.75059992e-02 -5.56422360e-02  7.73273059e-04
  7.35655352e-02  2.21736170e-02  9.83381420e-02 -1.10347576e-01
 -2.34270245e-02 -9.68559161e-02 -8.27862322e-02 -7.43431877e-03
  7.81234875e-02 -3.76718268e-02  1.49316576e-04 -6.50814129e-03
  6.92902654e-02 -3.51961292e-02  1.04832828e-01  5.16929366e-02
  8.14742688e-03  7.46894255e-02 -3.95127758e-02  5.90767041e-02
  1.86339822e-02  2.08244100e-02 -6.96946122e-03  4.25560772e-02
  7.53555894e-02 -3.81308012e-02  8.43722820e-02  1.11153334e-01
  1.10370472e-01  3.60154803e-03 -6.81085736e-02  1.09922454e-01
  7.43815899e-02  9.87807871e-04 -5.62841147e-02 -9.49094221e-02
  7.55852237e-02 -1.70163519e-03 -8.35373104e-02 -2.91416012e-02
 -3.04421782e-03  2.84680054e-02 -4.04838920e-02 -4.69232677e-03
  5.11738509e-02 -5.05575538e-02  2.69938968e-02  8.71953815e-02
 -1.71748910e-03  5.43060973e-02 -9.12778378e-02 -2.48384550e-02]"
"using System;
using System.Collections.Generic;

namespace RefactoringGuru.DesignPatterns.Strategy.Conceptual
{
    // The Context defines the interface of interest to clients.
    class Context
    {
        // The Context maintains a reference to one of the Strategy objects. The
        // Context does not know the concrete class of a strategy. It should
        // work with all strategies via the Strategy interface.
        private IStrategy _strategy;

        public Context()
        { }

        // Usually, the Context accepts a strategy through the constructor, but
        // also provides a setter to change it at runtime.
        public Context(IStrategy strategy)
        {
            this._strategy = strategy;
        }

        // Usually, the Context allows replacing a Strategy object at runtime.
        public void SetStrategy(IStrategy strategy)
        {
            this._strategy = strategy;
        }

        // The Context delegates some work to the Strategy object instead of
        // implementing multiple versions of the algorithm on its own.
        public void DoSomeBusinessLogic()
        {
            Console.WriteLine(""Context: Sorting data using the strategy (not sure how it'll do it)"");
            var result = this._strategy.DoAlgorithm(new List<string> { ""a"", ""b"", ""c"", ""d"", ""e"" });

            string resultStr = string.Empty;
            foreach (var element in result as List<string>)
            {
                resultStr += element + "","";
            }

            Console.WriteLine(resultStr);
        }
    }

    // The Strategy interface declares operations common to all supported
    // versions of some algorithm.
    //
    // The Context uses this interface to call the algorithm defined by Concrete
    // Strategies.
    public interface IStrategy
    {
        object DoAlgorithm(object data);
    }

    // Concrete Strategies implement the algorithm while following the base
    // Strategy interface. The interface makes them interchangeable in the
    // Context.
    class ConcreteStrategyA : IStrategy
    {
        public object DoAlgorithm(object data)
        {
            var list = data as List<string>;
            list.Sort();

            return list;
        }
    }

    class ConcreteStrategyB : IStrategy
    {
        public object DoAlgorithm(object data)
        {
            var list = data as List<string>;
            list.Sort();
            list.Reverse();

            return list;
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            // The client code picks a concrete strategy and passes it to the
            // context. The client should be aware of the differences between
            // strategies in order to make the right choice.
            var context = new Context();

            Console.WriteLine(""Client: Strategy is set to normal sorting."");
            context.SetStrategy(new ConcreteStrategyA());
            context.DoSomeBusinessLogic();
            
            Console.WriteLine();
            
            Console.WriteLine(""Client: Strategy is set to reverse sorting."");
            context.SetStrategy(new ConcreteStrategyB());
            context.DoSomeBusinessLogic();
        }
    }
}",C#,Strategy,Refactoring Guru,https://refactoring.guru/design-patterns/strategy/csharp/example#example-0,"[ 6.79956097e-03  4.67060320e-02 -4.98328684e-03 -1.17081823e-02
 -1.39225945e-01  8.52831453e-03  6.33507073e-02  9.48792323e-02
 -8.70545581e-02  5.01392595e-02 -2.61919871e-02  5.85539117e-02
  2.15999149e-02 -4.37932275e-02 -1.74151938e-02  1.27478801e-02
 -1.38698146e-03  3.12227919e-03  6.77728187e-03 -9.77795478e-03
  4.90540452e-02 -1.71584282e-02 -3.80744711e-02 -2.78062522e-02
 -1.35048255e-02  5.32677360e-02 -2.65695490e-02 -3.14520076e-02
 -1.62622202e-02  1.27259688e-02 -1.11730453e-02  3.55391726e-02
 -1.81707758e-02  3.83162275e-02 -9.79738086e-02  5.92771992e-02
 -9.19468552e-02 -4.81219813e-02  4.21599159e-03  3.97570543e-02
 -1.09630153e-01  1.19112514e-01 -2.17195004e-02 -7.33990893e-02
  1.80824548e-02 -4.26549166e-02 -1.28732949e-01 -1.47938030e-02
  4.10363674e-02 -3.88652608e-02 -5.78799471e-02  2.84494329e-02
 -6.66983947e-02 -4.00600247e-02 -3.17064412e-02  8.19848329e-02
  4.79938202e-02  3.74173336e-02 -2.52934899e-02 -7.35521098e-05
  2.14267857e-02 -2.38819979e-02 -2.66352929e-02 -6.68315869e-03
  5.65818138e-02 -5.83367236e-02  5.39645180e-02  4.00229990e-02
  1.32493572e-02 -6.03943989e-02  4.39459085e-03  1.95534173e-02
  3.08025181e-02  3.47219147e-02 -7.67087340e-02 -3.27538550e-02
 -1.66664664e-02  5.16858734e-02 -5.01172952e-02 -6.92040548e-02
  2.47566383e-02  4.77814814e-03  7.21632224e-03  5.64364381e-02
  8.92403349e-02  6.79838285e-03 -5.15559204e-02 -2.19846219e-02
  6.58386201e-02  1.02746807e-01 -7.15939924e-02 -1.10367453e-02
  3.25942710e-02  4.62666787e-02  9.11142901e-02  6.35066479e-02
  4.69137952e-02 -4.53547351e-02 -6.77821189e-02  8.28145072e-02
 -3.06654312e-02  3.33082266e-02 -4.31549139e-02  1.38669945e-02
  3.86370607e-02 -4.27849405e-02 -2.33687591e-02 -5.75633273e-02
 -2.74880733e-02 -9.85586047e-02 -2.78855488e-02  9.71861184e-02
 -2.29576249e-02 -2.62697972e-02 -6.53551593e-02 -2.90226005e-02
  1.72336213e-02 -5.08007035e-03 -4.75975089e-02  3.98111604e-02
  3.19487303e-02  3.13309170e-02 -1.10394228e-02 -4.91727479e-02
  2.07175445e-02  7.94501305e-02  3.98142822e-02  1.73958544e-33
  1.31978104e-02 -9.98880714e-02  4.80761155e-02  6.04843870e-02
  1.20424172e-02  9.69819259e-03  3.13272364e-02  3.70790772e-02
 -5.04112877e-02 -2.97415331e-02  5.99969998e-02  5.94544858e-02
 -5.90843754e-03  2.53479313e-02  8.05058703e-02 -6.03968836e-02
  8.26534107e-02  6.56327903e-02 -3.79077457e-02 -1.24341294e-01
 -1.16389720e-02  6.06323816e-02  1.12212636e-02 -1.33532524e-01
 -6.82944944e-03  4.73028645e-02 -4.34454493e-02  1.26925083e-02
 -5.64270914e-02  1.18561974e-02  4.24941108e-02 -3.65465321e-02
 -5.94420098e-02  7.27827922e-02  3.18934731e-02  3.49785015e-02
 -3.72677483e-02 -5.33115044e-02  2.81166509e-02 -5.36917783e-02
 -1.28012691e-02 -3.61907221e-02 -1.88352689e-02 -2.88700759e-02
  1.72601771e-02 -4.61157933e-02 -6.49473891e-02  3.75831872e-02
  2.25986633e-02  3.46503244e-03 -1.75480675e-02  6.19569644e-02
  2.78532039e-02  1.20132118e-02 -3.37573290e-02 -2.75392104e-02
  1.34912292e-02  3.44270095e-02 -3.53427604e-02  6.66685179e-02
  9.25137941e-03  3.98464315e-02 -2.85707470e-02  4.53038327e-02
  4.91685467e-03  1.51807722e-02 -4.58226465e-02 -1.29719079e-01
  8.86282474e-02 -5.12350053e-02 -9.72284470e-03  4.66727726e-02
  5.77829033e-03  8.12972337e-02  4.81079407e-02  5.19319177e-02
 -6.99724108e-02 -1.16553120e-02 -1.15691267e-01 -1.69483572e-01
  2.52925865e-02  4.46582958e-02 -4.83104214e-03  6.54703677e-02
 -2.91628693e-03  7.26938471e-02  6.71088696e-02 -2.46733576e-02
  1.11365430e-01  5.90788061e-03 -9.12841633e-02 -2.53114514e-02
 -9.43203643e-03  6.13026693e-02  9.29203108e-02 -2.83106519e-33
  3.19161825e-02  4.33637500e-02 -4.93669808e-02 -1.50522776e-02
  2.75243763e-02 -5.70278764e-02 -1.52781168e-02 -5.46815619e-02
 -8.75148103e-02  3.95890549e-02  9.59241483e-03  4.10529561e-02
  1.31298667e-02 -4.84170392e-03  8.84335488e-02 -1.67596787e-02
  2.37478334e-02 -2.54469812e-02 -2.06019375e-02 -7.07103461e-02
 -2.56549697e-02  1.99324600e-02 -1.71851162e-02 -2.57330015e-02
 -1.62423346e-02 -8.53411760e-03 -2.66623273e-02  1.29054766e-02
  4.05548848e-02 -9.50539578e-03  3.95254679e-02  2.29484774e-02
  4.12482880e-02  5.71341673e-03 -1.32981176e-02 -3.86756696e-02
  2.70004813e-02 -2.46969052e-03 -2.94743869e-02  7.48482123e-02
 -1.14938905e-02 -2.91813985e-02 -2.72235437e-03 -1.26943737e-02
  5.97618073e-02 -5.96073829e-02 -6.11782894e-02  4.89937421e-03
  6.64391890e-02 -4.98983376e-02  4.26250286e-02 -5.50414715e-03
 -5.79047278e-02 -8.69493410e-02 -1.56031381e-02  3.75629142e-02
  6.38998747e-02 -3.89842764e-02  4.90482561e-02  7.15469494e-02
  2.78184712e-02 -6.14320440e-03  8.20531324e-02 -1.28011089e-02
  4.46033999e-02  5.25667109e-02 -1.04230106e-01 -1.07866094e-01
  1.73077714e-02 -5.81358261e-02 -6.22227117e-02  6.81064203e-02
 -2.00283136e-02 -7.38146156e-02  3.09298299e-02 -1.63777024e-02
  1.61076002e-02  1.07153170e-02  5.12699410e-02  2.33554225e-02
  7.14397132e-02 -3.05201728e-02  5.92541099e-02  1.20065073e-02
 -4.40360568e-02 -4.10301378e-03 -8.19850061e-03  3.24040689e-02
 -9.56931561e-02 -1.99890081e-02 -1.68608110e-02 -7.00938329e-02
  3.05755753e-02  5.62024005e-02  2.40281355e-02 -5.55724107e-08
 -1.47132665e-01 -5.32974154e-02  3.68242823e-02  1.23743750e-01
  2.81853434e-02  3.20541970e-02 -3.77509482e-02  1.46827754e-02
  1.43845174e-02 -2.46383175e-02 -3.88142169e-02  6.57346994e-02
  3.81395631e-02  3.95857915e-02  5.40750287e-02 -1.40254395e-02
  1.54070314e-02 -1.04245149e-01 -7.01577663e-02  6.50089979e-02
  3.25282738e-02 -7.16740489e-02  9.05838024e-05  3.01408283e-02
  6.88125417e-02 -4.87342663e-02  5.82366176e-02  1.10253841e-01
  5.72820939e-02  1.21026963e-01 -3.20387967e-02  5.63306995e-02
  3.39537524e-02  6.80770865e-03 -5.78242242e-02  2.21442673e-02
  5.62431477e-03 -1.78066792e-03  5.34561463e-02  1.71708316e-02
  3.12846042e-02 -2.49647448e-04 -3.29840928e-02  7.26935640e-02
  8.55139270e-02 -2.94939615e-02  2.32255943e-02 -3.29592228e-02
  4.87347469e-02 -7.02186897e-02 -8.60555321e-02  4.50039748e-03
  1.74086913e-02 -6.39079139e-02 -5.90149593e-03  3.20102796e-02
 -3.62503491e-02 -6.49199933e-02 -5.66784032e-02  2.11909488e-02
 -6.72231093e-02 -1.65162459e-02 -1.18902447e-02  3.07517536e-02]"
"using System;
using System.Collections.Generic;

namespace RefactoringGuru.DesignPatterns.Visitor.Conceptual
{
    // The Component interface declares an `accept` method that should take the
    // base visitor interface as an argument.
    public interface IComponent
    {
        void Accept(IVisitor visitor);
    }

    // Each Concrete Component must implement the `Accept` method in such a way
    // that it calls the visitor's method corresponding to the component's
    // class.
    public class ConcreteComponentA : IComponent
    {
        // Note that we're calling `VisitConcreteComponentA`, which matches the
        // current class name. This way we let the visitor know the class of the
        // component it works with.
        public void Accept(IVisitor visitor)
        {
            visitor.VisitConcreteComponentA(this);
        }

        // Concrete Components may have special methods that don't exist in
        // their base class or interface. The Visitor is still able to use these
        // methods since it's aware of the component's concrete class.
        public string ExclusiveMethodOfConcreteComponentA()
        {
            return ""A"";
        }
    }

    public class ConcreteComponentB : IComponent
    {
        // Same here: VisitConcreteComponentB => ConcreteComponentB
        public void Accept(IVisitor visitor)
        {
            visitor.VisitConcreteComponentB(this);
        }

        public string SpecialMethodOfConcreteComponentB()
        {
            return ""B"";
        }
    }

    // The Visitor Interface declares a set of visiting methods that correspond
    // to component classes. The signature of a visiting method allows the
    // visitor to identify the exact class of the component that it's dealing
    // with.
    public interface IVisitor
    {
        void VisitConcreteComponentA(ConcreteComponentA element);

        void VisitConcreteComponentB(ConcreteComponentB element);
    }

    // Concrete Visitors implement several versions of the same algorithm, which
    // can work with all concrete component classes.
    //
    // You can experience the biggest benefit of the Visitor pattern when using
    // it with a complex object structure, such as a Composite tree. In this
    // case, it might be helpful to store some intermediate state of the
    // algorithm while executing visitor's methods over various objects of the
    // structure.
    class ConcreteVisitor1 : IVisitor
    {
        public void VisitConcreteComponentA(ConcreteComponentA element)
        {
            Console.WriteLine(element.ExclusiveMethodOfConcreteComponentA() + "" + ConcreteVisitor1"");
        }

        public void VisitConcreteComponentB(ConcreteComponentB element)
        {
            Console.WriteLine(element.SpecialMethodOfConcreteComponentB() + "" + ConcreteVisitor1"");
        }
    }

    class ConcreteVisitor2 : IVisitor
    {
        public void VisitConcreteComponentA(ConcreteComponentA element)
        {
            Console.WriteLine(element.ExclusiveMethodOfConcreteComponentA() + "" + ConcreteVisitor2"");
        }

        public void VisitConcreteComponentB(ConcreteComponentB element)
        {
            Console.WriteLine(element.SpecialMethodOfConcreteComponentB() + "" + ConcreteVisitor2"");
        }
    }

    public class Client
    {
        // The client code can run visitor operations over any set of elements
        // without figuring out their concrete classes. The accept operation
        // directs a call to the appropriate operation in the visitor object.
        public static void ClientCode(List<IComponent> components, IVisitor visitor)
        {
            foreach (var component in components)
            {
                component.Accept(visitor);
            }
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            List<IComponent> components = new List<IComponent>
            {
                new ConcreteComponentA(),
                new ConcreteComponentB()
            };

            Console.WriteLine(""The client code works with all visitors via the base Visitor interface:"");
            var visitor1 = new ConcreteVisitor1();
            Client.ClientCode(components,visitor1);

            Console.WriteLine();

            Console.WriteLine(""It allows the same client code to work with different types of visitors:"");
            var visitor2 = new ConcreteVisitor2();
            Client.ClientCode(components, visitor2);
        }
    }
}",C#,Visitor,Refactoring Guru,https://refactoring.guru/design-patterns/visitor/csharp/example#example-0,"[-2.80439649e-02 -1.25130024e-02  4.23188508e-02  3.30946967e-02
 -7.50361234e-02  1.07242567e-02  6.95700943e-02  5.14102317e-02
 -1.93863418e-02  3.08770163e-04 -2.17511468e-02 -8.05134922e-02
  1.65932477e-02 -1.32208159e-02  6.18111789e-02  1.78660043e-02
  4.07083035e-02  2.52740961e-02 -9.59581870e-04  1.02038883e-01
  3.49377841e-02 -5.77846617e-02 -5.13363853e-02 -4.23648246e-02
 -8.18313211e-02  2.79829372e-02 -3.61924456e-03 -1.07396469e-01
  5.05535379e-02  8.85641947e-03  3.23217474e-02  1.16169974e-01
 -6.47975579e-02  2.16209404e-02 -8.92548785e-02  4.67550494e-02
 -2.84429323e-02 -9.51332320e-03 -3.80670056e-02 -2.05158666e-02
 -5.02597168e-02  1.17875479e-01  7.80254416e-03 -4.69071530e-02
  7.37740546e-02 -9.45367292e-02 -3.61709930e-02 -6.92296550e-02
  4.40039299e-02 -3.88584509e-02  2.39461791e-02  9.23037063e-03
  4.56138980e-03  4.55154479e-02 -8.79663229e-03  9.01692826e-03
  3.07495911e-02  1.15294354e-02 -3.38913798e-02 -2.99089719e-02
 -2.38077622e-03  1.99771523e-02 -5.96527942e-03 -6.30548075e-02
  3.18025015e-02  1.46796657e-02 -3.53238173e-02 -4.50449772e-02
  6.63942099e-02 -4.43575978e-02 -3.31382528e-02  3.32961977e-02
  2.61230934e-02  1.74165517e-02 -2.44815629e-02 -1.27280457e-02
 -2.10416224e-03  4.96665947e-02  2.99002277e-03 -1.51988730e-01
  4.15578894e-02  2.49795336e-02  2.68215556e-02 -3.61498818e-02
  6.74885809e-02  6.12000860e-02 -4.44102138e-02 -7.58854151e-02
  2.23520100e-02  1.00645818e-01  3.56860198e-02  1.94941424e-02
  2.28007659e-02 -4.84647080e-02  9.42966789e-02 -2.74931509e-02
  7.14693964e-03  2.95979101e-02  2.24247910e-02  1.05591677e-01
 -4.94163716e-03  6.34477586e-02 -3.01675126e-02  1.24948882e-02
  2.37729633e-03 -7.52188172e-03 -5.18279523e-02 -6.92811608e-02
 -1.47846416e-02 -4.26503681e-02 -1.61106139e-02 -5.09303389e-03
 -2.37929169e-02  6.55206759e-03 -2.72520855e-02 -7.79235139e-02
  5.50623275e-02 -4.15253378e-02  3.52877975e-02  6.60009459e-02
  4.39820141e-02 -2.94145569e-02  5.92737123e-02 -4.45064344e-02
  5.09332530e-02 -6.88441843e-02 -5.80462348e-03  6.79721306e-33
  3.02420044e-03 -1.02003440e-02 -8.56429711e-02  4.70115952e-02
  5.31534925e-02  5.42116491e-03  4.81118001e-02  2.46733930e-02
 -1.03234006e-02 -2.18395162e-02  3.38701122e-02 -1.33001816e-03
  1.47110634e-02  4.29690443e-02  6.43446594e-02 -3.32669518e-03
  5.56968823e-02  2.09434647e-02 -1.72761790e-02 -3.34607884e-02
  6.08212277e-02  4.39162850e-02  7.99361151e-03  2.18836777e-02
  2.76389681e-02 -4.69903275e-03 -5.29697398e-03  3.64968330e-02
 -1.27444297e-01  1.74912496e-03  6.57225028e-02  6.84691966e-03
 -1.50260627e-02  1.13761127e-01 -1.14412773e-02 -2.93243257e-03
  5.54670319e-02 -6.93059117e-02  9.46936663e-03 -1.49705499e-01
 -4.38705944e-02 -3.43458615e-02  2.17414717e-03  1.24686398e-02
  5.10708662e-03 -5.66269830e-02 -6.71776757e-02  2.32361965e-02
  2.26468556e-02  1.27448048e-02  2.74424274e-02  5.90143912e-02
 -1.11900894e-02 -2.13216208e-02 -3.46651599e-02  2.27296185e-02
 -3.46706575e-03  8.22055116e-02  3.08028818e-03  5.49535416e-02
 -8.25844184e-02  6.89940006e-02 -8.49062800e-02  2.96806488e-02
 -2.76951659e-02  4.26476039e-02 -1.14964500e-01 -1.08421795e-01
  4.87509407e-02 -4.04025279e-02 -7.07694609e-03  2.13546846e-02
 -2.96655595e-02 -5.69194788e-03  1.50874944e-03 -4.61506471e-02
 -9.25660431e-02  5.21886116e-03 -5.10944910e-02 -8.08517560e-02
 -8.06989223e-02  5.31399436e-02  5.01426682e-03  1.12291008e-01
 -3.05090956e-02  4.01707850e-02  4.51434851e-02 -9.23056807e-03
  3.33000943e-02 -3.96416299e-02 -8.15230981e-03 -2.23420523e-02
  3.80136771e-04 -2.53097396e-02  8.38906467e-02 -7.46837773e-33
  4.47406843e-02  1.63427815e-02 -2.96242889e-02 -4.73398753e-02
 -5.96158840e-02 -5.55434078e-03 -6.80834502e-02 -1.25436574e-01
 -1.04046807e-01 -1.94495674e-02  3.38201574e-03  8.27295110e-02
  5.97573966e-02  1.22793932e-02 -9.25212726e-03  9.98120941e-03
  2.30172146e-02 -5.61006367e-02  3.10915709e-02  2.35373341e-02
 -6.14549359e-03  3.69862057e-02  3.58956284e-03 -4.92129698e-02
  7.30294362e-03 -4.40838654e-03 -6.64346218e-02  6.38072640e-02
  9.43335146e-02 -1.50479292e-02 -4.66686003e-02 -3.43884528e-02
  9.29106772e-03 -1.06802143e-01  5.83076030e-02 -3.11855283e-02
 -2.59492006e-02  5.26838340e-02 -2.29350794e-02  3.66513915e-02
  1.14551783e-02 -8.21067914e-02  4.29851674e-02 -1.57109983e-02
  4.07176428e-02 -5.53265028e-02 -7.68139288e-02  6.82610124e-02
  3.56690958e-02 -1.19955111e-02  6.71435054e-03 -5.13544120e-02
 -6.19683750e-02  2.16471441e-02 -5.84030105e-03  6.94069192e-02
  6.70100600e-02 -7.09840432e-02  5.45210466e-02 -7.98821449e-03
  5.49383648e-02 -3.30366641e-02  5.49104530e-03  7.50175118e-02
  6.27873167e-02 -2.47877929e-02 -3.86841893e-02 -3.91275249e-02
  1.70023236e-02  5.22097899e-03 -2.49331594e-02  3.99816446e-02
  1.74072515e-02 -5.17749302e-02  1.04065791e-01 -6.03362806e-02
  9.97565240e-02 -1.64980832e-02  6.59672543e-02 -2.78182924e-02
 -4.55797911e-02 -1.51756406e-02  5.88203557e-02 -8.25771466e-02
  2.08943756e-03 -8.14208165e-02 -3.75868827e-02 -2.49175467e-02
 -1.17675504e-02 -2.16648057e-02 -3.49745527e-02  3.83780003e-02
 -2.34560892e-02 -6.38034716e-02 -2.73387190e-02 -6.05276114e-08
 -7.01979920e-02 -2.64018066e-02  5.68137877e-03 -1.26033295e-02
  7.42954910e-02 -7.91063011e-02 -6.33268654e-02 -1.68451909e-02
 -4.51149307e-02 -2.43314877e-02 -4.09381315e-02  6.64939284e-02
  4.85759303e-02 -3.99936512e-02  8.67224038e-02  5.69400750e-03
  1.69933811e-02 -8.68587792e-02 -1.26088664e-01  5.56037575e-02
 -7.37300813e-02 -7.43398666e-02  2.56146101e-04  2.82962583e-02
  1.41821941e-02  8.19194969e-03  1.19863100e-01 -3.87512473e-03
  1.04851248e-02  1.25865579e-01 -8.15113634e-02  6.57603145e-02
 -4.61687194e-03 -1.06196851e-02  4.52333391e-02  7.60156438e-02
  2.40025800e-02 -3.51313427e-02  6.69553205e-02  5.29236794e-02
  5.46006300e-02 -9.05615389e-02 -1.77563950e-02  4.56059910e-02
  1.10793494e-01  4.00266750e-03 -1.13766296e-02 -4.89074998e-02
  7.23981708e-02  6.57946393e-02 -1.13412410e-01  1.43745644e-02
 -5.50913289e-02  5.19005656e-02 -5.23800589e-02  2.26085950e-02
  8.37976113e-03 -9.59417522e-02  7.93645009e-02  1.62359960e-02
 -8.65862414e-04  4.00133952e-02  5.71525693e-02 -3.03186178e-02]"
"/**
 * Each distinct product of a product family should have a base interface. All
 * variants of the product must implement this interface.
 */
class AbstractProductA {
 public:
  virtual ~AbstractProductA(){};
  virtual std::string UsefulFunctionA() const = 0;
};

/**
 * Concrete Products are created by corresponding Concrete Factories.
 */
class ConcreteProductA1 : public AbstractProductA {
 public:
  std::string UsefulFunctionA() const override {
    return ""The result of the product A1."";
  }
};

class ConcreteProductA2 : public AbstractProductA {
  std::string UsefulFunctionA() const override {
    return ""The result of the product A2."";
  }
};

/**
 * Here's the the base interface of another product. All products can interact
 * with each other, but proper interaction is possible only between products of
 * the same concrete variant.
 */
class AbstractProductB {
  /**
   * Product B is able to do its own thing...
   */
 public:
  virtual ~AbstractProductB(){};
  virtual std::string UsefulFunctionB() const = 0;
  /**
   * ...but it also can collaborate with the ProductA.
   *
   * The Abstract Factory makes sure that all products it creates are of the
   * same variant and thus, compatible.
   */
  virtual std::string AnotherUsefulFunctionB(const AbstractProductA &collaborator) const = 0;
};

/**
 * Concrete Products are created by corresponding Concrete Factories.
 */
class ConcreteProductB1 : public AbstractProductB {
 public:
  std::string UsefulFunctionB() const override {
    return ""The result of the product B1."";
  }
  /**
   * The variant, Product B1, is only able to work correctly with the variant,
   * Product A1. Nevertheless, it accepts any instance of AbstractProductA as an
   * argument.
   */
  std::string AnotherUsefulFunctionB(const AbstractProductA &collaborator) const override {
    const std::string result = collaborator.UsefulFunctionA();
    return ""The result of the B1 collaborating with ( "" + result + "" )"";
  }
};

class ConcreteProductB2 : public AbstractProductB {
 public:
  std::string UsefulFunctionB() const override {
    return ""The result of the product B2."";
  }
  /**
   * The variant, Product B2, is only able to work correctly with the variant,
   * Product A2. Nevertheless, it accepts any instance of AbstractProductA as an
   * argument.
   */
  std::string AnotherUsefulFunctionB(const AbstractProductA &collaborator) const override {
    const std::string result = collaborator.UsefulFunctionA();
    return ""The result of the B2 collaborating with ( "" + result + "" )"";
  }
};

/**
 * The Abstract Factory interface declares a set of methods that return
 * different abstract products. These products are called a family and are
 * related by a high-level theme or concept. Products of one family are usually
 * able to collaborate among themselves. A family of products may have several
 * variants, but the products of one variant are incompatible with products of
 * another.
 */
class AbstractFactory {
 public:
  virtual AbstractProductA *CreateProductA() const = 0;
  virtual AbstractProductB *CreateProductB() const = 0;
};

/**
 * Concrete Factories produce a family of products that belong to a single
 * variant. The factory guarantees that resulting products are compatible. Note
 * that signatures of the Concrete Factory's methods return an abstract product,
 * while inside the method a concrete product is instantiated.
 */
class ConcreteFactory1 : public AbstractFactory {
 public:
  AbstractProductA *CreateProductA() const override {
    return new ConcreteProductA1();
  }
  AbstractProductB *CreateProductB() const override {
    return new ConcreteProductB1();
  }
};

/**
 * Each Concrete Factory has a corresponding product variant.
 */
class ConcreteFactory2 : public AbstractFactory {
 public:
  AbstractProductA *CreateProductA() const override {
    return new ConcreteProductA2();
  }
  AbstractProductB *CreateProductB() const override {
    return new ConcreteProductB2();
  }
};

/**
 * The client code works with factories and products only through abstract
 * types: AbstractFactory and AbstractProduct. This lets you pass any factory or
 * product subclass to the client code without breaking it.
 */

void ClientCode(const AbstractFactory &factory) {
  const AbstractProductA *product_a = factory.CreateProductA();
  const AbstractProductB *product_b = factory.CreateProductB();
  std::cout << product_b->UsefulFunctionB() << ""\n"";
  std::cout << product_b->AnotherUsefulFunctionB(*product_a) << ""\n"";
  delete product_a;
  delete product_b;
}

int main() {
  std::cout << ""Client: Testing client code with the first factory type:\n"";
  ConcreteFactory1 *f1 = new ConcreteFactory1();
  ClientCode(*f1);
  delete f1;
  std::cout << std::endl;
  std::cout << ""Client: Testing the same client code with the second factory type:\n"";
  ConcreteFactory2 *f2 = new ConcreteFactory2();
  ClientCode(*f2);
  delete f2;
  return 0;
}",C++,Abstract Factory,Refactoring Guru,https://refactoring.guru/design-patterns/abstract-factory/cpp/example#example-0,"[-7.95732439e-02  7.87583739e-03 -1.30317938e-02 -7.15607330e-02
 -6.71889409e-02  5.71986809e-02  2.85512321e-02  4.43300232e-02
 -7.52447695e-02 -5.98530173e-02  4.43330817e-02 -8.05183575e-02
  2.92979889e-02 -4.54241671e-02  3.24851163e-02  5.66030592e-02
  2.90132724e-02  1.93385258e-02 -5.80089614e-02  5.09299599e-02
  5.90610318e-02 -4.24933918e-02 -5.09253740e-02  2.68425094e-03
 -4.56358194e-02  3.54235508e-02 -1.98881347e-02 -5.13656475e-02
  2.97293104e-02 -8.97750258e-03  3.05141900e-02  1.01849727e-01
 -6.46120161e-02  3.10175456e-02  4.24220320e-03  3.54670584e-02
 -4.79442626e-03 -4.57985923e-02 -2.39989441e-02 -3.76974158e-02
 -3.39309126e-03  6.02175184e-02 -5.47931343e-02 -2.28337403e-02
  4.51660044e-02  1.56430192e-02 -2.09763111e-03 -1.44780632e-02
  3.09996437e-02 -5.76588400e-02 -3.00095845e-02  5.41710965e-02
 -2.00785827e-02  4.83913161e-03  2.39339340e-02 -1.93749927e-02
  1.01847444e-02  4.41760980e-02 -1.13510517e-02  2.07107086e-02
  3.64708975e-02 -2.21302849e-03  2.59812903e-02 -7.22644404e-02
  7.52037764e-02  1.83532131e-03 -1.88105623e-03 -2.20479164e-03
 -3.59972455e-02  2.24969797e-02 -3.53220627e-02  4.04116921e-02
 -5.73348589e-02  5.58674410e-02 -3.40341255e-02  9.26657841e-02
 -6.00708043e-03  1.39178447e-02 -4.83233146e-02 -1.00578919e-01
  5.42962691e-04  7.91193992e-02 -2.64936648e-02 -6.57530203e-02
  7.14062899e-02  4.35520858e-02  1.47425826e-03 -6.02817051e-02
  4.30840068e-02  4.88473214e-02 -3.80703807e-02 -2.95931492e-02
 -4.98466343e-02  1.25484681e-03  4.60998826e-02 -4.95520793e-02
  9.62371007e-03 -1.88140068e-02  3.93008292e-02  8.95541459e-02
 -7.10150301e-02  3.08165401e-02  2.86607873e-02 -4.63080071e-02
 -6.41614571e-03  4.87615839e-02 -9.64007527e-02 -3.32093276e-02
 -3.72270937e-04 -1.33162690e-02 -4.68612500e-02 -4.98520508e-02
 -3.41866389e-02 -4.81652794e-03 -7.54791796e-02  8.07085913e-03
  2.75428016e-02 -3.43314819e-02  5.39186830e-03 -1.76863037e-02
  2.62748506e-02 -3.68951932e-02  8.37521330e-02  6.19952716e-02
 -4.14067246e-02 -2.94136871e-02 -3.74095291e-02  6.37826027e-33
 -3.53199504e-02 -7.16911480e-02 -7.71929249e-02  1.02985360e-01
  1.56895965e-02  1.75973680e-02  5.10340370e-02  7.47356638e-02
 -3.83943170e-02 -5.69267944e-02  2.28517898e-03 -4.05129157e-02
 -3.24518234e-02  6.50453493e-02  8.89125764e-02 -1.87781956e-02
  5.23088127e-02 -3.01621333e-02  1.33557981e-02 -3.70191447e-02
  2.34622806e-02  8.60720873e-02 -2.11330298e-02  1.05262371e-02
  6.33380329e-03 -7.11472612e-03  6.53041825e-02  5.53751597e-04
 -6.62105829e-02 -1.29201068e-02  1.60162318e-02 -4.54903487e-03
  1.65671129e-02  6.36356324e-02 -3.76795456e-02  2.97000892e-02
 -1.87121723e-02 -6.62138686e-02 -4.27093953e-02 -7.48966709e-02
 -6.23870129e-03 -8.47917050e-04  3.03226942e-03  2.30065268e-02
  7.99550265e-02 -6.10917620e-02 -6.30833581e-02  1.48991151e-02
 -1.09588364e-04 -1.15382202e-01  1.63813634e-03  1.07620716e-01
  2.43554153e-02 -6.34485036e-02 -6.92860549e-03 -4.76282910e-02
 -1.06514655e-02  2.69042533e-02 -2.51759198e-02  1.20702498e-01
 -1.38878748e-01  1.33776069e-01 -6.83456212e-02  8.05991143e-02
 -1.14803068e-01  9.75195467e-02 -5.54616563e-02 -3.85111831e-02
  1.00852057e-01  2.21961625e-02 -2.65448214e-03  5.81016252e-03
 -2.44982075e-02 -1.64474025e-02 -1.85732897e-02  9.11006797e-03
 -1.18008200e-02 -4.26260009e-02 -1.41888727e-02 -5.87496646e-02
 -2.70451549e-02  6.47254512e-02  1.80109572e-02  5.43778576e-02
 -1.21098466e-01 -3.48127261e-02 -1.58011436e-03 -2.54013687e-02
  3.69968787e-02  1.93876028e-02 -1.62998829e-02  1.11880442e-02
  6.90959208e-03  1.14413549e-03  9.02927294e-02 -7.69888629e-33
 -1.63637043e-03  3.40377688e-02  5.22578992e-02 -3.27205099e-02
  1.19597130e-02  3.57622132e-02 -1.37892226e-02 -1.13944016e-01
 -1.07425317e-01  6.59883395e-02 -3.28444503e-02 -1.78348869e-02
  8.17750916e-02 -5.43918135e-03 -2.42327116e-02 -1.07922582e-02
 -3.83535624e-02 -6.53446838e-02 -5.73676312e-03  5.82271740e-02
  7.58937327e-03  1.09473906e-01  5.83246239e-02 -2.00005993e-02
 -1.22657651e-03  2.40990613e-02 -8.24717060e-02  1.25277326e-01
  6.37068674e-02 -2.04293747e-02  1.01177217e-02 -4.70795296e-02
 -3.15058790e-02 -4.49763164e-02  9.82728302e-02 -3.48485187e-02
  1.29971104e-02  4.00924720e-02  3.47092524e-02 -7.18717799e-02
  3.71944718e-02 -4.66512255e-02 -4.90605496e-02  2.03695726e-02
  2.47119386e-02 -6.84907138e-02 -2.17227004e-02 -6.25455081e-02
  4.25215364e-02 -1.95508677e-04  2.71097627e-02  2.82348264e-02
 -3.93113606e-02 -6.72863498e-02 -7.31251016e-02  7.46759027e-03
  6.83089197e-02 -3.95016894e-02 -2.94570404e-04  2.84846500e-02
  4.91630249e-02 -2.90415604e-02  8.55015218e-02  5.68805225e-02
  7.60231093e-02 -6.06229417e-02  1.75261125e-02 -4.03671525e-02
  4.09975648e-02  2.66046319e-02 -3.98513637e-02  1.18258446e-01
 -1.75753497e-02 -2.87276674e-02  8.89659822e-02  8.42179731e-03
  2.37102224e-03  2.85576973e-02  3.50986086e-02 -1.51557708e-02
 -5.26073091e-02 -5.07869050e-02  8.12819302e-02  5.12310080e-02
 -2.71432549e-02 -2.66854875e-02 -1.66152585e-02  3.01041603e-02
  8.95343721e-03  1.70651190e-02 -1.20494431e-02  2.08919346e-02
 -7.11777732e-02  1.80453714e-02  4.78800340e-03 -4.93804819e-08
 -7.67681561e-03 -8.38707611e-02  3.94643983e-03  4.81097810e-02
  1.33308480e-02 -9.61331949e-02 -9.31057408e-02 -1.63145903e-02
 -4.67054732e-02 -6.13840595e-02 -9.62228253e-02  6.70038164e-02
 -4.77584079e-02 -1.35827111e-02  3.22068892e-02 -6.51123151e-02
 -4.71523777e-02 -1.02365226e-01 -6.08049296e-02  2.04928685e-02
  1.46950241e-02 -1.41389100e-02  1.11288868e-03  3.84647399e-02
 -8.83586109e-02 -8.80315825e-02  5.90527765e-02  6.93566501e-02
  3.81214619e-02  8.26719776e-02  4.63852361e-02  8.58305430e-04
 -5.49307019e-02  4.69173826e-02  5.39527573e-02 -3.37482654e-02
  4.89895046e-02  3.21444646e-02 -6.19620830e-02  7.44726658e-02
  5.36729805e-02  1.32369041e-03 -6.87569380e-02  5.65740354e-02
  1.14418909e-01 -4.84191179e-02 -1.28972828e-02 -1.13590851e-01
 -5.59806451e-03  1.20586313e-01 -3.09223272e-02  3.74231488e-02
 -2.29176246e-02  1.28710987e-02 -7.88930953e-02 -6.01480296e-03
 -2.44756509e-02 -9.61828157e-02  1.70772187e-02 -2.59088837e-02
 -6.50029536e-03 -1.77775752e-02  1.15462705e-01  5.02919778e-02]"
"/**
 * It makes sense to use the Builder pattern only when your products are quite
 * complex and require extensive configuration.
 *
 * Unlike in other creational patterns, different concrete builders can produce
 * unrelated products. In other words, results of various builders may not
 * always follow the same interface.
 */

class Product1{
    public:
    std::vector<std::string> parts_;
    void ListParts()const{
        std::cout << ""Product parts: "";
        for (size_t i=0;i<parts_.size();i++){
            if(parts_[i]== parts_.back()){
                std::cout << parts_[i];
            }else{
                std::cout << parts_[i] << "", "";
            }
        }
        std::cout << ""\n\n""; 
    }
};


/**
 * The Builder interface specifies methods for creating the different parts of
 * the Product objects.
 */
class Builder{
    public:
    virtual ~Builder(){}
    virtual void ProducePartA() const =0;
    virtual void ProducePartB() const =0;
    virtual void ProducePartC() const =0;
};
/**
 * The Concrete Builder classes follow the Builder interface and provide
 * specific implementations of the building steps. Your program may have several
 * variations of Builders, implemented differently.
 */
class ConcreteBuilder1 : public Builder{
    private:

    Product1* product;

    /**
     * A fresh builder instance should contain a blank product object, which is
     * used in further assembly.
     */
    public:

    ConcreteBuilder1(){
        this->Reset();
    }

    ~ConcreteBuilder1(){
        delete product;
    }

    void Reset(){
        this->product= new Product1();
    }
    /**
     * All production steps work with the same product instance.
     */

    void ProducePartA()const override{
        this->product->parts_.push_back(""PartA1"");
    }

    void ProducePartB()const override{
        this->product->parts_.push_back(""PartB1"");
    }

    void ProducePartC()const override{
        this->product->parts_.push_back(""PartC1"");
    }

    /**
     * Concrete Builders are supposed to provide their own methods for
     * retrieving results. That's because various types of builders may create
     * entirely different products that don't follow the same interface.
     * Therefore, such methods cannot be declared in the base Builder interface
     * (at least in a statically typed programming language). Note that PHP is a
     * dynamically typed language and this method CAN be in the base interface.
     * However, we won't declare it there for the sake of clarity.
     *
     * Usually, after returning the end result to the client, a builder instance
     * is expected to be ready to start producing another product. That's why
     * it's a usual practice to call the reset method at the end of the
     * `getProduct` method body. However, this behavior is not mandatory, and
     * you can make your builders wait for an explicit reset call from the
     * client code before disposing of the previous result.
     */

    /**
     * Please be careful here with the memory ownership. Once you call
     * GetProduct the user of this function is responsable to release this
     * memory. Here could be a better option to use smart pointers to avoid
     * memory leaks
     */

    Product1* GetProduct() {
        Product1* result= this->product;
        this->Reset();
        return result;
    }
};

/**
 * The Director is only responsible for executing the building steps in a
 * particular sequence. It is helpful when producing products according to a
 * specific order or configuration. Strictly speaking, the Director class is
 * optional, since the client can control builders directly.
 */
class Director{
    /**
     * @var Builder
     */
    private:
    Builder* builder;
    /**
     * The Director works with any builder instance that the client code passes
     * to it. This way, the client code may alter the final type of the newly
     * assembled product.
     */

    public:

    void set_builder(Builder* builder){
        this->builder=builder;
    }

    /**
     * The Director can construct several product variations using the same
     * building steps.
     */

    void BuildMinimalViableProduct(){
        this->builder->ProducePartA();
    }
    
    void BuildFullFeaturedProduct(){
        this->builder->ProducePartA();
        this->builder->ProducePartB();
        this->builder->ProducePartC();
    }
};
/**
 * The client code creates a builder object, passes it to the director and then
 * initiates the construction process. The end result is retrieved from the
 * builder object.
 */
/**
 * I used raw pointers for simplicity however you may prefer to use smart
 * pointers here
 */
void ClientCode(Director& director)
{
    ConcreteBuilder1* builder = new ConcreteBuilder1();
    director.set_builder(builder);
    std::cout << ""Standard basic product:\n""; 
    director.BuildMinimalViableProduct();
    
    Product1* p= builder->GetProduct();
    p->ListParts();
    delete p;

    std::cout << ""Standard full featured product:\n""; 
    director.BuildFullFeaturedProduct();

    p= builder->GetProduct();
    p->ListParts();
    delete p;

    // Remember, the Builder pattern can be used without a Director class.
    std::cout << ""Custom product:\n"";
    builder->ProducePartA();
    builder->ProducePartC();
    p=builder->GetProduct();
    p->ListParts();
    delete p;

    delete builder;
}

int main(){
    Director* director= new Director();
    ClientCode(*director);
    delete director;
    return 0;    
}",C++,Builder,Refactoring Guru,https://refactoring.guru/design-patterns/builder/cpp/example#example-0,"[-9.19442177e-02  2.42932085e-02  8.00734293e-03 -4.22671065e-02
 -5.88895492e-02  1.48109766e-02  5.41704753e-03  5.98364957e-02
 -6.05953373e-02 -3.90233845e-02  1.87478010e-02 -4.08061855e-02
  2.18682867e-02 -7.67896324e-02  2.62435209e-02  2.34421566e-02
  3.45588871e-03  3.71999070e-02 -5.22322953e-02  4.84874882e-02
  5.75280525e-02 -4.59110131e-03 -3.97729315e-02  1.32784946e-02
 -1.80504303e-02 -8.80925264e-03  9.08524016e-05 -4.93470579e-02
  5.24091758e-02 -2.18424723e-02  5.21527268e-02  5.62968403e-02
 -3.91174741e-02  5.98397218e-02  4.62318712e-06  8.87805074e-02
  2.39231084e-02 -2.59532053e-02 -9.09980461e-02 -4.53719422e-02
 -7.42029818e-03  3.07622794e-02 -1.16863869e-01  4.72880201e-03
  1.93749331e-02  1.76875927e-02 -2.82359589e-02 -4.66332585e-02
  2.73225214e-02 -7.31547549e-02 -5.44201434e-02  4.83228564e-02
 -3.66560444e-02 -1.20214429e-02  1.56873278e-02  3.79080921e-02
  6.53410852e-02  2.10667253e-02 -2.31300537e-02  2.11336408e-02
  5.19491620e-02  2.05262359e-02  2.78876279e-03 -9.86006334e-02
  6.08332455e-02 -2.51025278e-02 -1.08621018e-02  4.86432808e-03
 -4.20574984e-03  4.22339980e-03  4.40057553e-02  2.77002528e-02
 -3.02786585e-02  5.42262904e-02 -3.66372988e-02  5.59119284e-02
  8.73342156e-03  6.88828481e-03 -5.83274141e-02 -5.87825291e-02
 -1.72681808e-02  5.44320531e-02 -5.19544594e-02 -7.73611218e-02
  5.06748594e-02  6.74575791e-02  3.78132351e-02 -7.21318787e-03
  6.50546327e-02  5.42446934e-02 -3.85372229e-02 -2.88667511e-02
 -4.39944565e-02  4.17984650e-03  6.08132184e-02 -1.36573296e-02
  5.38369827e-02 -2.53008138e-02  3.57924253e-02  8.78828391e-02
 -7.36067146e-02  4.23163772e-02  4.30809818e-02 -4.65610772e-02
 -7.77472779e-02 -1.35968870e-03 -1.15167499e-01  1.87609508e-03
 -5.36271036e-02 -2.07585637e-02 -7.98884630e-02 -2.86025833e-02
 -5.19087091e-02 -1.11637693e-02 -3.57912667e-02 -3.94148380e-02
  2.25662976e-03 -2.86301672e-02  5.63054858e-03  3.81626561e-02
  9.33253169e-02 -2.07977705e-02  4.63721305e-02  7.48991445e-02
 -5.56967556e-02 -8.22206140e-02 -4.15609404e-02  2.95451909e-33
  1.51916565e-02 -9.51149911e-02 -6.15826659e-02  8.57545361e-02
 -1.24173220e-02  4.54972871e-02  9.15903226e-02  1.16021827e-01
 -6.69546938e-03 -2.46436000e-02  2.53701191e-02 -1.24801360e-01
 -5.68093322e-02  1.09482728e-01  5.43149970e-02 -5.93410246e-02
  4.76143509e-02  1.42543735e-02 -1.48716150e-02 -4.64940183e-02
  2.30873469e-02  7.40805417e-02 -5.62729053e-02  1.92076135e-02
  2.99794469e-02 -4.16655652e-02  2.45930273e-02  3.28105204e-02
 -9.07927826e-02  7.14841206e-03  7.42429122e-03  2.51136441e-03
  2.49720588e-02  3.45839001e-02 -3.25192623e-02  3.73395414e-05
 -6.61644861e-02 -3.67760248e-02 -1.64297987e-02 -7.14156330e-02
  1.78585667e-02 -4.36302982e-02  1.31584296e-03  6.83223596e-03
 -9.86905862e-03 -4.51759622e-02 -9.15513411e-02  1.87650491e-02
 -1.57606527e-02 -8.35839659e-02  9.50666983e-03  1.21862754e-01
  5.94202094e-02 -5.00287414e-02 -1.64647941e-02 -4.33840007e-02
 -5.32559045e-02 -4.05977666e-02 -6.69262260e-02  5.00167049e-02
 -9.44176614e-02  1.50113717e-01 -4.63422909e-02  5.97415976e-02
 -1.35857701e-01  6.56432435e-02 -4.20268178e-02 -3.72224972e-02
  1.09545611e-01 -6.15827180e-03 -7.38578737e-02  1.72017347e-02
 -3.79499700e-03 -3.85251082e-02 -1.21534457e-02  2.18766127e-02
 -2.02095602e-02 -2.10959166e-02 -4.72996421e-02 -8.74712169e-02
 -1.58771034e-02  1.16158463e-01  2.45421343e-02  6.26143813e-02
  1.80962048e-02 -1.40580852e-02 -8.13158043e-03 -1.82096865e-02
 -1.89458467e-02  3.35713364e-02  1.99604426e-02 -3.22930813e-02
  1.13784857e-02 -3.18712997e-03  2.19534766e-02 -5.79175507e-33
  1.19562931e-02 -1.22171389e-02  2.49207374e-02 -8.06789398e-02
 -1.18144872e-02 -8.80799722e-03 -4.33114655e-02 -8.31397176e-02
 -7.92496130e-02  4.94962409e-02 -4.88854535e-02 -1.75530631e-02
  6.88964501e-02  1.37462106e-03 -1.34374369e-02  3.67887281e-02
 -2.50255801e-02 -7.75305256e-02  1.11933788e-02  6.50055483e-02
 -1.23099554e-02  1.01509079e-01  9.41551253e-02 -6.67361915e-02
 -1.28129693e-02 -2.32870393e-02 -8.39849636e-02  1.25417367e-01
  9.28758904e-02 -3.56726386e-02  5.56275882e-02 -8.09250101e-02
 -6.51840940e-02 -2.70420266e-03  2.49127764e-02 -4.70895395e-02
 -3.69343907e-02  4.08580825e-02  6.69190511e-02 -5.77085353e-02
  1.18131943e-01 -5.06063737e-02  1.27569251e-02  3.01041491e-02
  2.57758275e-02 -8.72249231e-02  5.87857254e-02 -4.93361801e-02
  3.95247061e-03 -7.20316358e-03  2.07956396e-02  2.74544861e-02
 -2.15071738e-02 -3.71685065e-02 -3.66987102e-03  4.73352224e-02
  9.08636823e-02 -5.17901704e-02  4.04209495e-02  4.05569635e-02
 -6.99902093e-03 -2.25571147e-03  1.01090349e-01  2.71884613e-02
  6.61947504e-02 -5.48262857e-02  1.72212925e-02 -2.50936765e-02
 -6.57220953e-04 -1.99045278e-02 -4.70475033e-02  1.26099885e-01
 -2.11696252e-02  4.19049524e-03  5.40123396e-02 -6.59139641e-03
 -4.37893420e-02  3.51249799e-02  8.95681512e-03  5.06087858e-03
 -6.20367341e-02 -3.00164521e-02  1.64233185e-02  1.55175002e-02
  3.99309723e-03 -3.64256836e-02 -1.10105528e-02  1.88338626e-02
  4.35388796e-02 -3.58250551e-02 -1.36190858e-02  7.39792660e-02
 -1.02761891e-02  3.28601338e-02 -2.50036432e-03 -5.77675969e-08
 -2.08584983e-02 -8.94879922e-02 -1.92722678e-03  4.93191741e-02
  3.93100195e-02 -1.25030220e-01 -3.91360000e-02  1.14931874e-02
 -3.49643305e-02 -5.58453389e-02 -1.08963707e-02  1.44910021e-02
 -7.66091328e-03 -1.43233323e-02  1.04316799e-02 -1.17459372e-01
 -2.31951079e-03 -3.92227843e-02 -6.61688522e-02 -2.17107609e-02
 -1.37780318e-02 -2.33827494e-02  1.33132916e-02  7.46511146e-02
 -3.08726206e-02 -9.80946273e-02  7.17632473e-02  4.59884517e-02
  3.76682729e-02  4.97774817e-02  5.52575700e-02  5.00116162e-02
  1.90115571e-02  1.05551802e-01  3.21188644e-02 -3.11199483e-03
  4.71003689e-02  5.52690327e-02 -4.16308083e-02  6.11298010e-02
  4.96237092e-02  1.73023827e-02 -1.31800873e-02  4.33983803e-02
  1.24291286e-01 -4.33539078e-02 -5.94620071e-02 -8.04349557e-02
  1.31781260e-02  4.22915295e-02 -9.92213339e-02  3.98775749e-02
 -4.52729650e-02  1.85765270e-02  9.75337345e-03 -1.38996001e-02
 -3.21193449e-02 -8.79045948e-02  4.91591580e-02  1.43850071e-03
 -1.67497881e-02  9.34973732e-03  7.04760328e-02  6.20235838e-02]"
"/**
 * The Product interface declares the operations that all concrete products must
 * implement.
 */

class Product {
 public:
  virtual ~Product() {}
  virtual std::string Operation() const = 0;
};

/**
 * Concrete Products provide various implementations of the Product interface.
 */
class ConcreteProduct1 : public Product {
 public:
  std::string Operation() const override {
    return ""{Result of the ConcreteProduct1}"";
  }
};
class ConcreteProduct2 : public Product {
 public:
  std::string Operation() const override {
    return ""{Result of the ConcreteProduct2}"";
  }
};

/**
 * The Creator class declares the factory method that is supposed to return an
 * object of a Product class. The Creator's subclasses usually provide the
 * implementation of this method.
 */

class Creator {
  /**
   * Note that the Creator may also provide some default implementation of the
   * factory method.
   */
 public:
  virtual ~Creator(){};
  virtual Product* FactoryMethod() const = 0;
  /**
   * Also note that, despite its name, the Creator's primary responsibility is
   * not creating products. Usually, it contains some core business logic that
   * relies on Product objects, returned by the factory method. Subclasses can
   * indirectly change that business logic by overriding the factory method and
   * returning a different type of product from it.
   */

  std::string SomeOperation() const {
    // Call the factory method to create a Product object.
    Product* product = this->FactoryMethod();
    // Now, use the product.
    std::string result = ""Creator: The same creator's code has just worked with "" + product->Operation();
    delete product;
    return result;
  }
};

/**
 * Concrete Creators override the factory method in order to change the
 * resulting product's type.
 */
class ConcreteCreator1 : public Creator {
  /**
   * Note that the signature of the method still uses the abstract product type,
   * even though the concrete product is actually returned from the method. This
   * way the Creator can stay independent of concrete product classes.
   */
 public:
  Product* FactoryMethod() const override {
    return new ConcreteProduct1();
  }
};

class ConcreteCreator2 : public Creator {
 public:
  Product* FactoryMethod() const override {
    return new ConcreteProduct2();
  }
};

/**
 * The client code works with an instance of a concrete creator, albeit through
 * its base interface. As long as the client keeps working with the creator via
 * the base interface, you can pass it any creator's subclass.
 */
void ClientCode(const Creator& creator) {
  // ...
  std::cout << ""Client: I'm not aware of the creator's class, but it still works.\n""
            << creator.SomeOperation() << std::endl;
  // ...
}

/**
 * The Application picks a creator's type depending on the configuration or
 * environment.
 */

int main() {
  std::cout << ""App: Launched with the ConcreteCreator1.\n"";
  Creator* creator = new ConcreteCreator1();
  ClientCode(*creator);
  std::cout << std::endl;
  std::cout << ""App: Launched with the ConcreteCreator2.\n"";
  Creator* creator2 = new ConcreteCreator2();
  ClientCode(*creator2);

  delete creator;
  delete creator2;
  return 0;
}",C++,Factory Method,Refactoring Guru,https://refactoring.guru/design-patterns/factory-method/cpp/example#example-0,"[-1.05389968e-01  1.16509581e-02  2.66285613e-03 -4.67455052e-02
 -6.83947057e-02  2.01985668e-02  4.78028320e-02  3.58439870e-02
 -6.74724430e-02 -5.22792116e-02  3.75654846e-02 -6.49487525e-02
  1.06025971e-02 -7.26115927e-02 -7.60835456e-03  5.25067970e-02
  2.06278954e-02  2.89630573e-02 -2.70744152e-02  5.79619445e-02
  1.05630964e-01 -4.48419005e-02 -6.35435581e-02 -1.57576898e-04
 -4.63178158e-02  5.32448664e-03 -2.67319288e-02 -4.73234244e-02
  5.32574579e-02 -9.13134310e-03  3.36832479e-02  5.34486324e-02
 -2.92973705e-02  4.65110354e-02 -1.68163795e-02  4.25104089e-02
  5.23951761e-02 -3.16001140e-02 -4.40115854e-02 -1.97880100e-02
  1.51719656e-02  2.98465490e-02 -9.51726735e-02 -3.47555312e-03
  3.65849845e-02  2.45322064e-02 -1.31201399e-02 -3.11286505e-02
  2.44430685e-03 -7.27526769e-02 -1.02500143e-02  6.04882352e-02
  1.60176512e-02 -3.79714346e-03  5.74666448e-03 -3.44615197e-03
  4.66988683e-02  5.91001734e-02  1.55912880e-02  2.67459154e-02
  5.27283251e-02  4.23375331e-02  2.51505617e-02 -5.43271899e-02
  7.37815201e-02 -9.14016040e-04 -2.08482333e-02 -3.70820351e-02
 -3.94309089e-02 -1.19107487e-02 -8.19067750e-03  1.98784247e-02
 -5.52473180e-02  5.37738949e-02 -5.29204421e-02  3.15112770e-02
 -2.66426690e-02  2.62813419e-02 -4.14722078e-02 -6.19715974e-02
  2.42658220e-02  8.99908319e-02 -1.00128315e-02 -5.19700088e-02
  4.05033939e-02  6.83863088e-02  1.22154253e-02 -5.93220480e-02
  7.90236294e-02  8.69144648e-02 -4.30512726e-02 -3.00318375e-02
 -4.39565778e-02  8.07378534e-03  5.97176552e-02 -3.12967263e-02
  2.33447887e-02 -3.58101055e-02  2.12246343e-03  9.04176757e-02
 -9.01830569e-02  1.55080240e-02  3.12464722e-02 -4.85005230e-02
  2.00415542e-03  4.12148759e-02 -9.85322297e-02 -3.34515832e-02
 -4.19025980e-02  1.96286961e-02 -2.90554948e-02 -8.67227558e-03
 -4.80896384e-02 -3.47698526e-03 -2.17616614e-02  6.49471655e-02
 -9.50475503e-03 -8.24468583e-03  8.97659082e-03 -1.77243650e-02
  8.90945829e-03 -2.40629837e-02  6.67181760e-02  7.08325058e-02
 -5.52907214e-02 -1.09827640e-02 -2.84791980e-02  3.53176506e-33
 -3.71937454e-02 -5.86967655e-02 -7.52769262e-02  1.10502772e-01
  7.74340192e-03  2.85651032e-02  6.09366000e-02  9.76113528e-02
 -4.53079818e-03 -5.37959523e-02  2.69771069e-02 -6.06623776e-02
 -3.50389518e-02  8.69469270e-02  1.08471408e-01 -2.83230636e-02
  3.41280065e-02 -3.63110043e-02  3.48242447e-02 -7.10396618e-02
  3.02134231e-02  8.62669721e-02 -2.16048956e-02 -1.00659523e-02
  2.94496072e-03  7.66770681e-03  8.69625993e-03 -8.77780095e-03
 -5.52045889e-02 -2.27742852e-03  4.76649590e-03  9.85920150e-03
  3.28016430e-02  6.99566975e-02 -3.53700742e-02  4.38362658e-02
 -3.76255363e-02 -5.24358861e-02 -5.15079014e-02 -7.66025186e-02
  1.92366354e-02 -1.00496616e-02 -4.53803781e-03  5.10014826e-03
  2.58171801e-02 -4.55610156e-02 -5.08837029e-02  5.99243026e-03
  1.88203510e-02 -8.29564035e-02  6.44964678e-03  1.37008339e-01
  1.93725862e-02 -6.04945719e-02  7.68951187e-03 -6.49893731e-02
 -4.40147845e-03 -1.71126146e-02 -2.26740073e-02  7.51744807e-02
 -1.08210675e-01  1.08150601e-01 -3.68394293e-02  1.09825365e-01
 -1.27631038e-01  6.94858581e-02 -3.05710435e-02 -7.81210363e-02
  8.64183009e-02  2.65310910e-02 -3.81602496e-02  3.48009914e-02
 -7.89789855e-02 -2.76712272e-02 -2.53541898e-02  9.98077635e-03
 -2.07581427e-02 -1.81491747e-02 -3.44630219e-02 -3.53383757e-02
 -8.62705056e-04  9.03317258e-02  9.69675463e-03  2.88514383e-02
 -8.81375745e-02 -5.38702570e-02 -6.47322554e-03 -4.27158317e-03
  3.72993015e-02  5.31544313e-02  4.77132248e-03 -5.35228215e-02
  2.31006313e-02  1.19863730e-02  3.97842452e-02 -6.37903683e-33
 -1.22379484e-02 -1.44824311e-02  3.46201919e-02 -5.65948598e-02
 -2.46555302e-02  1.64916888e-02 -5.97508214e-02 -6.64579198e-02
 -1.28051937e-01  2.27366779e-02 -4.30629775e-03  2.61962647e-03
  9.24044177e-02  4.10686471e-02 -1.87129453e-02 -1.68235432e-02
 -3.90327759e-02 -7.64272884e-02 -2.77303364e-02  3.91367227e-02
  1.00183208e-03  1.15070492e-01  5.23021370e-02 -3.62471342e-02
 -1.71509106e-02  1.41567821e-02 -7.41165504e-02  1.59027368e-01
  6.85899779e-02 -6.15961850e-02  3.06927580e-02 -4.37228680e-02
  1.49271986e-03 -3.57138850e-02  4.93675470e-02  1.04346862e-02
 -2.75271554e-02  4.74326760e-02  4.91941534e-02 -7.80095980e-02
  9.04687420e-02 -7.78593346e-02 -5.31507507e-02  1.69439539e-02
  6.09968044e-03 -5.55088893e-02 -5.18297730e-03 -8.22974592e-02
  6.89883381e-02  1.72181334e-02  8.55363533e-03 -9.18572210e-03
 -1.86455511e-02 -8.49748254e-02 -5.97731061e-02  4.26743366e-02
  9.09211934e-02 -3.14978808e-02 -1.51451221e-02  4.89800908e-02
  4.45345640e-02 -1.37611963e-02  6.73933178e-02  7.11967424e-02
  3.65457721e-02 -5.37305400e-02  4.59816903e-02 -1.74606889e-02
  1.56194884e-02 -2.00656499e-03  2.95043434e-03  9.99333262e-02
 -3.81909050e-02 -4.56139669e-02  4.46216911e-02  4.72232606e-03
  1.07828174e-02  7.24145472e-02 -9.16742068e-03 -5.87227456e-02
 -5.41588292e-02 -6.05906956e-02  7.94725716e-02  3.88758704e-02
 -2.11033951e-02 -6.41902536e-02 -3.03370487e-02 -1.86859667e-02
  1.50017366e-02  1.25196576e-02 -1.65269952e-02  2.70114131e-02
 -1.14683017e-01  1.57177001e-02  1.26160784e-02 -5.06923321e-08
 -1.80468094e-02 -9.36251432e-02  8.85817688e-03  4.94088866e-02
  1.99596584e-02 -8.81947204e-02 -4.49883118e-02 -6.14404790e-02
 -6.64577782e-02 -5.83798401e-02 -8.91774520e-02  5.64838052e-02
 -3.50169837e-02 -2.46154070e-02  5.90410419e-02 -8.00934285e-02
 -5.21358550e-02 -6.53039142e-02 -5.38186766e-02 -3.69200646e-03
 -5.89744095e-03 -2.33826339e-02  2.41838116e-02  3.71358506e-02
 -8.76406282e-02 -7.85748586e-02  6.72348812e-02  4.97755967e-02
  3.51982452e-02  1.05338775e-01  4.20278534e-02  5.00541255e-02
 -3.55379097e-02  1.00144334e-01  1.93096269e-02 -2.57269572e-03
  1.97815825e-03  4.20396663e-02 -4.72832844e-02  6.53665811e-02
  4.55363803e-02  3.24304365e-02 -6.91022500e-02  2.71307491e-02
  7.99411759e-02  1.75715424e-02 -2.42121555e-02 -1.13706842e-01
  2.70999800e-02  1.19938381e-01 -6.32216707e-02  6.10860996e-02
 -1.22101596e-02  5.09207230e-03 -4.37665097e-02  8.15053843e-03
 -1.43959057e-02 -7.92607367e-02  9.15133581e-03  1.55308750e-03
 -3.06460690e-02 -5.12598976e-02  1.36675537e-01  4.48358282e-02]"
"using std::string;

// Prototype Design Pattern
//
// Intent: Lets you copy existing objects without making your code dependent on
// their classes.

enum Type {
  PROTOTYPE_1 = 0,
  PROTOTYPE_2
};

/**
 * The example class that has cloning ability. We'll see how the values of field
 * with different types will be cloned.
 */

class Prototype {
 protected:
  string prototype_name_;
  float prototype_field_;

 public:
  Prototype() {}
  Prototype(string prototype_name)
      : prototype_name_(prototype_name) {
  }
  virtual ~Prototype() {}
  virtual Prototype *Clone() const = 0;
  virtual void Method(float prototype_field) {
    this->prototype_field_ = prototype_field;
    std::cout << ""Call Method from "" << prototype_name_ << "" with field : "" << prototype_field << std::endl;
  }
};

/**
 * ConcretePrototype1 is a Sub-Class of Prototype and implement the Clone Method
 * In this example all data members of Prototype Class are in the Stack. If you
 * have pointers in your properties for ex: String* name_ ,you will need to
 * implement the Copy-Constructor to make sure you have a deep copy from the
 * clone method
 */

class ConcretePrototype1 : public Prototype {
 private:
  float concrete_prototype_field1_;

 public:
  ConcretePrototype1(string prototype_name, float concrete_prototype_field)
      : Prototype(prototype_name), concrete_prototype_field1_(concrete_prototype_field) {
  }

  /**
   * Notice that Clone method return a Pointer to a new ConcretePrototype1
   * replica. so, the client (who call the clone method) has the responsability
   * to free that memory. I you have smart pointer knowledge you may prefer to
   * use unique_pointer here.
   */
  Prototype *Clone() const override {
    return new ConcretePrototype1(*this);
  }
};

class ConcretePrototype2 : public Prototype {
 private:
  float concrete_prototype_field2_;

 public:
  ConcretePrototype2(string prototype_name, float concrete_prototype_field)
      : Prototype(prototype_name), concrete_prototype_field2_(concrete_prototype_field) {
  }
  Prototype *Clone() const override {
    return new ConcretePrototype2(*this);
  }
};

/**
 * In PrototypeFactory you have two concrete prototypes, one for each concrete
 * prototype class, so each time you want to create a bullet , you can use the
 * existing ones and clone those.
 */

class PrototypeFactory {
 private:
  std::unordered_map<Type, Prototype *, std::hash<int>> prototypes_;

 public:
  PrototypeFactory() {
    prototypes_[Type::PROTOTYPE_1] = new ConcretePrototype1(""PROTOTYPE_1 "", 50.f);
    prototypes_[Type::PROTOTYPE_2] = new ConcretePrototype2(""PROTOTYPE_2 "", 60.f);
  }

  /**
   * Be carefull of free all memory allocated. Again, if you have smart pointers
   * knowelege will be better to use it here.
   */

  ~PrototypeFactory() {
    delete prototypes_[Type::PROTOTYPE_1];
    delete prototypes_[Type::PROTOTYPE_2];
  }

  /**
   * Notice here that you just need to specify the type of the prototype you
   * want and the method will create from the object with this type.
   */
  Prototype *CreatePrototype(Type type) {
    return prototypes_[type]->Clone();
  }
};

void Client(PrototypeFactory &prototype_factory) {
  std::cout << ""Let's create a Prototype 1\n"";

  Prototype *prototype = prototype_factory.CreatePrototype(Type::PROTOTYPE_1);
  prototype->Method(90);
  delete prototype;

  std::cout << ""\n"";

  std::cout << ""Let's create a Prototype 2 \n"";

  prototype = prototype_factory.CreatePrototype(Type::PROTOTYPE_2);
  prototype->Method(10);

  delete prototype;
}

int main() {
  PrototypeFactory *prototype_factory = new PrototypeFactory();
  Client(*prototype_factory);
  delete prototype_factory;

  return 0;
}",C++,Prototype,Refactoring Guru,https://refactoring.guru/design-patterns/prototype/cpp/example#example-0,"[-6.37447461e-02  1.10801766e-02  4.24319990e-02 -5.68478443e-02
 -7.53225684e-02 -3.83143499e-02  2.83350013e-02  4.12516184e-02
 -3.17492634e-02 -3.00369229e-05  2.73955539e-02 -3.41516770e-02
  2.97239888e-03 -5.76434508e-02  3.56344767e-02  5.05543500e-02
 -2.89635807e-02  3.98295969e-02 -6.43728301e-02  9.30957720e-02
  2.41728891e-02 -1.07242927e-01 -2.99093779e-02  3.40913311e-02
 -2.80526951e-02  3.90051566e-02 -6.66676275e-03 -4.59383577e-02
 -1.35323312e-02 -2.24860273e-02  2.97336597e-02  3.10055781e-02
 -1.11964904e-01  3.79308611e-02 -4.62236488e-03  4.79753017e-02
 -1.48135228e-02  1.68777816e-02  8.26904271e-03 -1.76083818e-02
 -5.60617074e-02  3.14600160e-03 -1.00752726e-01  3.03488262e-02
  5.22397310e-02  3.66877243e-02  9.61153582e-03 -3.59759927e-02
  8.83312449e-02 -6.30716532e-02 -8.77346378e-03  3.87288928e-02
 -4.04940136e-02  1.16894003e-02  1.50467018e-02 -2.18990874e-02
  9.03179348e-02 -5.35080535e-03  1.97229739e-02  7.22999871e-02
  1.91031420e-03  4.74713929e-02  4.91179936e-02 -6.42327368e-02
  7.83008114e-02 -4.50078696e-02 -4.06312421e-02  1.59213152e-02
  2.83670370e-02  6.36393875e-02  3.23877297e-02  5.42264469e-02
  1.19969444e-02  3.69272307e-02 -9.74759366e-03  1.28899897e-02
 -1.76274981e-02  4.84067909e-02 -5.60903363e-02 -8.83620083e-02
 -1.76276658e-02  4.81883995e-03 -3.37961689e-02 -6.29951730e-02
 -1.47995036e-02  2.10091248e-02  2.95864232e-02  2.72108465e-02
 -3.51580326e-03  3.86803560e-02 -8.88811275e-02 -3.02208271e-02
 -3.41460072e-02  1.74706168e-02  5.19018658e-02 -5.62590659e-02
  4.05789055e-02 -6.62802979e-02  2.26480141e-02  6.72541559e-02
 -4.58109230e-02  5.07472195e-02  1.03491306e-01 -3.86646464e-02
 -1.85555555e-02 -5.03469445e-03 -7.79459178e-02 -5.62946722e-02
 -5.87971620e-02  8.69530346e-03 -2.12889742e-02 -5.67260711e-03
 -5.09930961e-02  2.98418961e-02 -9.01570730e-03  5.62743656e-02
 -4.30719666e-02 -2.12584678e-02 -8.49183009e-04  5.75817116e-02
  6.92235082e-02 -1.92111861e-02  7.08159432e-02  5.36394864e-02
 -3.51835117e-02 -4.62885462e-02 -4.34263162e-02  1.46690987e-33
  3.76673825e-02 -1.20244892e-02 -4.92104366e-02  9.47235897e-02
  2.45993137e-02 -1.94467381e-02  7.81262517e-02  1.03719711e-01
 -4.12814133e-02 -6.69211298e-02  2.87638698e-02 -7.04506412e-02
 -5.86430728e-02  4.65288647e-02  6.72629625e-02 -5.10110557e-02
  4.40130346e-02  1.63164865e-02 -1.94179034e-03 -1.29890358e-02
  3.22553925e-02  2.75312383e-02 -4.73562069e-02  3.77416871e-02
  2.53744218e-02 -2.74594221e-02 -4.59966920e-02  1.67196114e-02
 -9.74993259e-02 -3.38023645e-03  2.67980304e-02  2.68634912e-02
  1.65154077e-02  6.74141943e-02  1.54800080e-02 -1.78652890e-02
  1.55457780e-02 -4.68817055e-02 -2.23025009e-02 -1.35692999e-01
  8.01213384e-02 -2.86297798e-02  2.86795199e-02 -1.14807785e-02
  3.18953209e-02 -1.18700117e-01 -4.41571921e-02 -1.02261426e-02
 -9.59267095e-03 -9.90628973e-02  6.88789934e-02  5.84022589e-02
 -2.27073841e-02 -6.50072619e-02 -5.44692203e-03 -4.82571945e-02
 -5.83105907e-02 -3.78398336e-02 -9.11150221e-03  1.93261635e-02
 -3.52804326e-02  8.87317359e-02 -9.77915376e-02  8.99955034e-02
 -4.97254692e-02  6.98025823e-02 -6.71027973e-02 -2.15813126e-02
  1.27391487e-01  3.19395736e-02 -1.36083094e-02  1.93143561e-02
 -6.55138940e-02 -4.79694121e-02 -5.64549379e-02  3.25115174e-02
 -1.85382757e-02 -5.14489561e-02 -3.65428403e-02 -2.59370152e-02
 -7.68943727e-02  7.04185069e-02 -3.97904441e-02  2.08629537e-02
 -3.05445474e-02 -9.33626201e-03 -8.84264708e-03 -1.59642808e-02
 -2.77065523e-02  6.12491518e-02 -1.68986730e-02 -3.05914134e-02
 -6.59896359e-02 -8.78889188e-02  1.16020320e-02 -4.51053713e-33
  1.18279038e-02  4.72963788e-03  3.18054967e-02  4.74605002e-02
  3.10551543e-02  3.52612995e-02 -5.85564375e-02 -6.33408502e-02
 -1.49597183e-01  4.21515107e-02 -7.13518634e-02 -1.85975749e-02
  1.82730798e-02 -5.39937057e-02  1.26085654e-02 -2.88217627e-02
 -4.05107439e-02 -5.32235950e-02  2.35326104e-02  2.51341239e-02
  2.00609174e-02  6.73850253e-02  1.10508449e-01  5.67263970e-03
 -2.33063288e-02 -1.14705535e-02 -1.17703594e-01  9.78940725e-02
  5.89724518e-02 -1.78288054e-02 -3.08157731e-04 -2.79231016e-02
  2.13699788e-03 -1.33718387e-03  7.09444284e-02 -4.69705909e-02
  6.19785190e-02  9.76753831e-02  5.73822968e-02 -4.29875962e-02
  4.61240970e-02 -6.96585923e-02 -5.77730238e-02 -3.18997651e-02
  2.18505394e-02 -6.86766431e-02  1.58192292e-02  2.58949623e-02
  6.38257712e-02 -4.05098312e-03  2.45933123e-02 -1.71654187e-02
 -1.17776550e-01 -8.83067325e-02 -3.01802419e-02  3.74085195e-02
  6.83206916e-02 -4.98122349e-02  7.20702931e-02  3.26852240e-02
  6.91867098e-02 -8.52429792e-02  3.39736603e-02  5.98292053e-02
  5.43379784e-02 -5.41688539e-02 -1.08475899e-02  6.12141797e-03
 -4.28523310e-03  4.85794768e-02 -5.81209324e-02  1.29387602e-01
  3.93670955e-04 -3.68443653e-02  4.00576033e-02 -1.22932680e-02
  1.55373449e-02  4.38077562e-02  6.20114803e-02 -4.30754684e-02
  1.04325276e-03 -3.80978696e-02 -1.91038456e-02  5.30511849e-02
 -3.58056910e-02  3.96541990e-02 -9.19601228e-03  1.11296959e-03
 -4.33080867e-02 -4.67962027e-02 -9.14270338e-03  6.39868751e-02
 -9.51147377e-02  1.98186771e-03 -3.05033009e-02 -4.54917064e-08
  4.39677127e-02 -3.60752791e-02  3.62222865e-02  7.06556067e-02
  1.73363537e-02 -1.19339548e-01 -7.23617002e-02 -1.02650495e-02
  1.06939720e-03 -9.60913599e-02 -5.90970144e-02  5.99787235e-02
  2.89960019e-02 -2.52162595e-03  2.77255140e-02 -7.43889660e-02
  7.21333129e-03 -9.10058692e-02 -5.06058894e-02  2.04035416e-02
  1.82956345e-02 -5.49585409e-02  2.52029439e-03  8.02973211e-02
 -4.37766463e-02 -8.42161030e-02  6.35673255e-02  2.24424135e-02
  9.03825015e-02  7.71391392e-02  5.08787632e-02 -1.20986979e-02
 -2.95397639e-02  5.67527302e-02  1.05152875e-01 -3.57542187e-02
  1.52245890e-02 -8.21775571e-03 -3.66341807e-02  6.15915880e-02
  8.08072612e-02  1.57230478e-02 -4.60543633e-02  2.69506313e-02
  9.37050730e-02 -4.77531701e-02 -2.72334553e-02 -6.30570576e-02
 -2.19060807e-03  8.43585432e-02 -5.61595000e-02  8.87335092e-02
 -3.63110518e-03  1.14451796e-02 -1.02083065e-01  7.40046427e-02
  3.87165882e-02 -3.40501219e-02  3.13899033e-02 -1.93926727e-03
  3.26375701e-02 -5.21113351e-03  5.18301837e-02  4.94003184e-02]"
"/**
 * The Implementation defines the interface for all implementation classes. It
 * doesn't have to match the Abstraction's interface. In fact, the two
 * interfaces can be entirely different. Typically the Implementation interface
 * provides only primitive operations, while the Abstraction defines higher-
 * level operations based on those primitives.
 */

class Implementation {
 public:
  virtual ~Implementation() {}
  virtual std::string OperationImplementation() const = 0;
};

/**
 * Each Concrete Implementation corresponds to a specific platform and
 * implements the Implementation interface using that platform's API.
 */
class ConcreteImplementationA : public Implementation {
 public:
  std::string OperationImplementation() const override {
    return ""ConcreteImplementationA: Here's the result on the platform A.\n"";
  }
};
class ConcreteImplementationB : public Implementation {
 public:
  std::string OperationImplementation() const override {
    return ""ConcreteImplementationB: Here's the result on the platform B.\n"";
  }
};

/**
 * The Abstraction defines the interface for the ""control"" part of the two class
 * hierarchies. It maintains a reference to an object of the Implementation
 * hierarchy and delegates all of the real work to this object.
 */

class Abstraction {
  /**
   * @var Implementation
   */
 protected:
  Implementation* implementation_;

 public:
  Abstraction(Implementation* implementation) : implementation_(implementation) {
  }

  virtual ~Abstraction() {
  }

  virtual std::string Operation() const {
    return ""Abstraction: Base operation with:\n"" +
           this->implementation_->OperationImplementation();
  }
};
/**
 * You can extend the Abstraction without changing the Implementation classes.
 */
class ExtendedAbstraction : public Abstraction {
 public:
  ExtendedAbstraction(Implementation* implementation) : Abstraction(implementation) {
  }
  std::string Operation() const override {
    return ""ExtendedAbstraction: Extended operation with:\n"" +
           this->implementation_->OperationImplementation();
  }
};

/**
 * Except for the initialization phase, where an Abstraction object gets linked
 * with a specific Implementation object, the client code should only depend on
 * the Abstraction class. This way the client code can support any abstraction-
 * implementation combination.
 */
void ClientCode(const Abstraction& abstraction) {
  // ...
  std::cout << abstraction.Operation();
  // ...
}
/**
 * The client code should be able to work with any pre-configured abstraction-
 * implementation combination.
 */

int main() {
  Implementation* implementation = new ConcreteImplementationA;
  Abstraction* abstraction = new Abstraction(implementation);
  ClientCode(*abstraction);
  std::cout << std::endl;
  delete implementation;
  delete abstraction;

  implementation = new ConcreteImplementationB;
  abstraction = new ExtendedAbstraction(implementation);
  ClientCode(*abstraction);

  delete implementation;
  delete abstraction;

  return 0;
}",C++,Bridge,Refactoring Guru,https://refactoring.guru/design-patterns/bridge/cpp/example#example-0,"[-7.26985633e-02  4.74670939e-02  5.30802682e-02 -3.31686363e-02
 -9.00456607e-02  1.92203075e-02  1.09859314e-02  1.51007315e-02
 -3.33938971e-02 -7.66675472e-02 -1.40883774e-02 -2.26213820e-02
 -2.31199265e-02 -1.80648472e-02  7.05250651e-02  3.44654992e-02
  6.79877028e-02  2.45838556e-02 -1.98044293e-02  6.07996732e-02
  4.73116562e-02 -4.64209914e-02 -1.11319192e-01  1.28642367e-02
 -2.03014854e-02 -2.72056321e-03 -6.33024797e-02 -9.18626115e-02
  5.55116311e-02  9.32235494e-02  5.70888259e-02  2.98885233e-03
 -4.40171473e-02  8.05436894e-02 -8.29456747e-02  5.09281792e-02
  2.20602304e-02 -8.16145986e-02 -4.62474488e-02  2.84570549e-02
 -5.16537949e-02  9.82169583e-02 -6.57841861e-02 -8.53831414e-03
  4.03385498e-02 -2.73207612e-02 -2.63914745e-02 -4.63106073e-02
 -6.95292726e-02 -6.37060627e-02 -1.44204441e-02  4.71310094e-02
  3.34146321e-02 -7.15991668e-03  9.18988325e-03  8.64130817e-03
  5.79904206e-03  6.30795136e-02  1.68188531e-02  2.17838846e-02
 -5.06838523e-02  5.30708255e-03  3.63087580e-02 -2.14846041e-02
  2.94391531e-02  3.19593661e-02  3.23731016e-04 -5.45671135e-02
  1.48471287e-02 -3.14925499e-02 -3.35644558e-02 -2.09653340e-02
 -4.60313708e-02  2.47108746e-05 -4.81826328e-02 -8.51810165e-03
  4.93568878e-05  8.78427774e-02 -1.90232713e-02 -1.03964373e-01
  3.15266997e-02  6.07417375e-02 -2.01591328e-02 -3.59285101e-02
  6.38533682e-02  2.66653579e-02 -3.18980962e-02 -3.31607126e-02
  7.42386980e-03  6.01334795e-02  2.70916875e-02 -6.70668855e-02
 -1.32765546e-01  8.73322424e-05  1.05013266e-01 -6.69848844e-02
  1.51160201e-02 -6.92939535e-02 -7.30742095e-03  5.68422750e-02
 -9.64067876e-02  2.36644000e-02  2.94479989e-02 -4.49672826e-02
  3.53420600e-02  5.29556051e-02 -6.81321770e-02 -3.72437052e-02
 -5.99515736e-02 -5.42196594e-02 -3.83774824e-02 -3.26055512e-02
  3.00228763e-02 -2.68665561e-03 -4.34891647e-03  6.47658631e-02
  4.09129634e-02 -4.83229086e-02  4.32970598e-02 -2.45928793e-04
 -3.09567666e-03 -4.88138422e-02  6.22046515e-02  7.28028268e-02
 -2.31383424e-02 -3.63537669e-02 -3.05123907e-02  3.69637358e-33
 -3.62294875e-02 -9.41676199e-02 -6.24145381e-02  1.10111602e-01
  1.36492876e-02 -1.37762344e-02  3.51393074e-02  4.46652668e-03
 -4.57775518e-02 -6.51964173e-02  8.40988457e-02  4.02211305e-03
  1.39903894e-03  1.05677344e-01  1.14930116e-01 -4.39931154e-02
  1.00217745e-01  1.99425090e-02  7.60895088e-02 -5.78295179e-02
  2.64977627e-02  6.03104942e-02 -3.31906080e-02 -6.73695933e-03
 -2.71081198e-02  2.88226623e-02 -1.10335657e-02 -1.70833040e-02
 -1.06305644e-01 -2.61820806e-03  8.93577933e-03  3.66577655e-02
 -5.81973605e-03  5.88537380e-02 -4.71622460e-02  2.89487280e-02
 -1.22750504e-03 -5.94965927e-02 -4.11488563e-02 -1.02170929e-01
 -1.45814503e-02  2.47912742e-02  1.23759184e-03  1.00709796e-02
  4.01116200e-02 -2.12248396e-02 -6.45420626e-02 -2.34348103e-02
  4.85930182e-02 -1.07820772e-01  2.14653481e-02  1.17304914e-01
 -2.64574438e-02  4.00624890e-03  5.56691736e-02 -5.76555505e-02
 -2.68554278e-02  5.67354076e-02 -7.77889928e-03  1.44492745e-01
 -3.87931950e-02  1.97975263e-02 -6.55603856e-02  6.61037937e-02
 -3.16437557e-02  1.63836423e-02 -1.06354177e-01 -1.19782398e-02
  8.44738632e-02  6.92232884e-03 -1.07308216e-02  5.13793491e-02
 -1.63780246e-02  4.94460836e-02  1.32310847e-02 -5.07834461e-03
 -7.59505061e-03 -4.44735400e-02 -2.08098255e-02 -1.92939993e-02
 -7.89370090e-02  9.24423561e-02  7.41564333e-02  5.03263436e-02
 -2.59490553e-02 -2.13608816e-02  4.57568988e-02  2.06951443e-02
  4.80027236e-02 -2.73492336e-02 -3.65644395e-02 -5.54857031e-02
  1.93452444e-02 -2.54010037e-02  3.02875154e-02 -6.45897926e-33
  3.86542603e-02  4.11277637e-02 -3.07109002e-02 -8.25082138e-02
 -3.21066715e-02  3.28961499e-02 -2.59035937e-02 -1.22214571e-01
 -7.90574625e-02  1.84229519e-02 -4.19623926e-02 -1.57022718e-02
  8.52681398e-02  3.14130746e-02 -1.69548690e-02  3.11696786e-03
 -8.79657194e-02 -7.70515352e-02 -9.75172687e-03  4.83021177e-02
  1.46174878e-02 -8.61462299e-03  4.41003218e-02 -1.01669775e-02
  9.51518714e-02  2.68757460e-03 -1.19974278e-01  9.81239229e-02
  1.16272874e-01 -3.99495102e-02 -3.35141867e-02 -6.96214475e-03
 -7.78313493e-03 -3.04493420e-02  4.19226848e-02  4.04688120e-02
 -5.33328615e-02  6.28814250e-02  1.39905221e-03 -7.63197765e-02
  1.10358424e-01 -1.06788658e-01 -9.10200328e-02  1.91169661e-02
  5.40257096e-02  6.23211544e-03 -3.24505642e-02 -4.69531771e-03
 -2.17539538e-02 -8.56004283e-03  3.45882066e-02  2.03475545e-04
 -2.01546066e-02  1.39612285e-02 -2.38332208e-02  3.25541198e-02
  1.06683299e-01 -3.82364988e-02 -4.27872781e-03 -2.53142416e-02
  8.60870704e-02 -2.38913819e-02  5.74509539e-02  4.47571948e-02
  3.38872187e-02 -3.24211754e-02  1.02035142e-02 -5.32595105e-02
  3.22489184e-03 -7.71628553e-03 -1.60522554e-02  6.84484616e-02
 -3.85974050e-02 -2.37238444e-02  9.87436473e-02  4.41944748e-02
  3.76928262e-02  2.58581191e-02  1.91251505e-02 -1.25495736e-02
 -1.13881402e-01 -2.16418169e-02  4.29226346e-02  5.46656176e-02
 -5.01073850e-03 -3.77342664e-02 -3.37706842e-02  7.14559900e-03
 -1.23153778e-03 -1.17363371e-02  1.29423272e-02  1.79056805e-02
 -9.56893563e-02  8.43854342e-03 -7.28275348e-03 -5.38664437e-08
 -1.54662794e-02 -6.54814914e-02 -2.51721591e-02  8.98467563e-03
  5.95378950e-02 -1.60342036e-03  9.22430586e-03 -4.25130613e-02
 -7.66515210e-02 -4.93570417e-02 -7.86646232e-02  1.50686763e-02
  1.44167908e-03 -5.85009269e-02  3.24065425e-03  5.42873936e-03
 -4.30255756e-02 -9.60579664e-02 -1.48203336e-02  5.39811961e-02
 -5.01594432e-02 -3.39097306e-02 -2.96968184e-02  1.81666389e-02
 -7.92117044e-02 -7.63689354e-02  1.71468519e-02  1.15440443e-01
 -3.28000053e-03  7.60366395e-02  8.68685357e-03  3.39719318e-02
 -6.16724826e-02  4.19553742e-02  4.51335348e-02  2.93247513e-02
  1.86496489e-02 -4.07358864e-03 -1.11281322e-02  7.93693513e-02
  6.71461457e-03  2.57242168e-03 -1.22597581e-03  4.76732217e-02
  1.11823633e-01  3.58971842e-02 -5.91437742e-02 -4.41016294e-02
  6.94653811e-03  6.30439222e-02 -7.42868632e-02  3.92027162e-02
 -1.61339156e-02  6.41471893e-02 -8.73324871e-02  2.95496508e-02
 -2.66638286e-02 -8.40718597e-02 -1.00087933e-02 -1.03013851e-02
 -1.02650989e-02 -1.45321544e-02  9.63907540e-02  2.71482952e-02]"
"#include <algorithm>
#include <iostream>
#include <list>
#include <string>
/**
 * The base Component class declares common operations for both simple and
 * complex objects of a composition.
 */
class Component {
  /**
   * @var Component
   */
 protected:
  Component *parent_;
  /**
   * Optionally, the base Component can declare an interface for setting and
   * accessing a parent of the component in a tree structure. It can also
   * provide some default implementation for these methods.
   */
 public:
  virtual ~Component() {}
  void SetParent(Component *parent) {
    this->parent_ = parent;
  }
  Component *GetParent() const {
    return this->parent_;
  }
  /**
   * In some cases, it would be beneficial to define the child-management
   * operations right in the base Component class. This way, you won't need to
   * expose any concrete component classes to the client code, even during the
   * object tree assembly. The downside is that these methods will be empty for
   * the leaf-level components.
   */
  virtual void Add(Component *component) {}
  virtual void Remove(Component *component) {}
  /**
   * You can provide a method that lets the client code figure out whether a
   * component can bear children.
   */
  virtual bool IsComposite() const {
    return false;
  }
  /**
   * The base Component may implement some default behavior or leave it to
   * concrete classes (by declaring the method containing the behavior as
   * ""abstract"").
   */
  virtual std::string Operation() const = 0;
};
/**
 * The Leaf class represents the end objects of a composition. A leaf can't have
 * any children.
 *
 * Usually, it's the Leaf objects that do the actual work, whereas Composite
 * objects only delegate to their sub-components.
 */
class Leaf : public Component {
 public:
  std::string Operation() const override {
    return ""Leaf"";
  }
};
/**
 * The Composite class represents the complex components that may have children.
 * Usually, the Composite objects delegate the actual work to their children and
 * then ""sum-up"" the result.
 */
class Composite : public Component {
  /**
   * @var \SplObjectStorage
   */
 protected:
  std::list<Component *> children_;

 public:
  /**
   * A composite object can add or remove other components (both simple or
   * complex) to or from its child list.
   */
  void Add(Component *component) override {
    this->children_.push_back(component);
    component->SetParent(this);
  }
  /**
   * Have in mind that this method removes the pointer to the list but doesn't
   * frees the
   *     memory, you should do it manually or better use smart pointers.
   */
  void Remove(Component *component) override {
    children_.remove(component);
    component->SetParent(nullptr);
  }
  bool IsComposite() const override {
    return true;
  }
  /**
   * The Composite executes its primary logic in a particular way. It traverses
   * recursively through all its children, collecting and summing their results.
   * Since the composite's children pass these calls to their children and so
   * forth, the whole object tree is traversed as a result.
   */
  std::string Operation() const override {
    std::string result;
    for (const Component *c : children_) {
      if (c == children_.back()) {
        result += c->Operation();
      } else {
        result += c->Operation() + ""+"";
      }
    }
    return ""Branch("" + result + "")"";
  }
};
/**
 * The client code works with all of the components via the base interface.
 */
void ClientCode(Component *component) {
  // ...
  std::cout << ""RESULT: "" << component->Operation();
  // ...
}

/**
 * Thanks to the fact that the child-management operations are declared in the
 * base Component class, the client code can work with any component, simple or
 * complex, without depending on their concrete classes.
 */
void ClientCode2(Component *component1, Component *component2) {
  // ...
  if (component1->IsComposite()) {
    component1->Add(component2);
  }
  std::cout << ""RESULT: "" << component1->Operation();
  // ...
}

/**
 * This way the client code can support the simple leaf components...
 */

int main() {
  Component *simple = new Leaf;
  std::cout << ""Client: I've got a simple component:\n"";
  ClientCode(simple);
  std::cout << ""\n\n"";
  /**
   * ...as well as the complex composites.
   */

  Component *tree = new Composite;
  Component *branch1 = new Composite;

  Component *leaf_1 = new Leaf;
  Component *leaf_2 = new Leaf;
  Component *leaf_3 = new Leaf;
  branch1->Add(leaf_1);
  branch1->Add(leaf_2);
  Component *branch2 = new Composite;
  branch2->Add(leaf_3);
  tree->Add(branch1);
  tree->Add(branch2);
  std::cout << ""Client: Now I've got a composite tree:\n"";
  ClientCode(tree);
  std::cout << ""\n\n"";

  std::cout << ""Client: I don't need to check the components classes even when managing the tree:\n"";
  ClientCode2(tree, simple);
  std::cout << ""\n"";

  delete simple;
  delete tree;
  delete branch1;
  delete branch2;
  delete leaf_1;
  delete leaf_2;
  delete leaf_3;

  return 0;
}",C++,Composite,Refactoring Guru,https://refactoring.guru/design-patterns/composite/cpp/example#example-0,"[-2.16482654e-02  4.64109778e-02  3.37801152e-03  3.17883007e-02
 -5.21641038e-02 -2.50405096e-03 -1.70406811e-02  3.71802375e-02
  1.79075729e-03  1.11793056e-02  2.50485037e-02 -2.44220011e-02
  1.50540536e-02 -2.42888480e-02  3.97337042e-02 -1.54961124e-02
 -1.39250355e-02  8.17905217e-02 -6.40661595e-03 -1.42277209e-02
  4.75147218e-02 -3.32723670e-02 -1.03384979e-01 -1.21809244e-02
  8.47285613e-03  2.13372242e-02 -4.57039028e-02 -7.41821676e-02
  1.88674033e-02  1.93755503e-03  4.25221622e-02  3.87351215e-02
 -3.39613184e-02  1.17026992e-01 -8.59891176e-02  8.74542296e-02
  3.19962688e-02 -5.80944829e-02 -6.19855896e-02 -2.62972042e-02
  7.51274521e-04  1.03054084e-01 -9.53414589e-02 -6.79942816e-02
  3.39872018e-02  6.37703156e-03 -5.91096133e-02 -5.69420829e-02
 -4.05192524e-02 -9.60840434e-02 -3.48778404e-02  2.58575119e-02
 -2.44503608e-03  7.32245296e-02 -1.96353830e-02  2.16354653e-02
  3.21795866e-02 -2.49443166e-02  2.93340124e-02  2.56189071e-02
 -1.24921072e-02 -1.99772678e-02  2.56901663e-02 -6.96515217e-02
  1.50758130e-02 -5.51568170e-04  9.06252535e-04  6.30672229e-03
 -9.55498777e-04  1.54612232e-02 -1.37073239e-02  1.83293652e-02
 -2.38685273e-02  3.54557633e-02 -2.99684759e-02  5.63934036e-02
 -2.72578895e-02  1.41171776e-02 -3.65251601e-02 -8.83257166e-02
  2.20540762e-02  7.58610815e-02 -5.82023486e-02 -5.43048270e-02
  4.57564890e-02  9.57782120e-02 -2.29240395e-02 -3.01474500e-02
 -4.44215909e-03  2.46917717e-02 -3.01473439e-02 -2.04488784e-02
  1.85975637e-02  2.56482996e-02  8.11912343e-02  1.91920344e-02
  3.32546048e-02 -3.68364006e-02 -4.45174286e-03  5.19331619e-02
 -6.43419772e-02  4.49195243e-02  5.20178899e-02 -5.82260862e-02
 -7.50432983e-02  1.54354908e-02 -5.26500344e-02 -3.97821404e-02
 -4.99776639e-02 -7.64711499e-02 -5.57012558e-02  4.52651680e-02
 -3.97664122e-02 -4.76714633e-02 -4.45581190e-02 -1.12611484e-02
  8.53827000e-02 -1.87501218e-02  4.67348062e-02  1.47677884e-02
  8.19551572e-02 -5.22934571e-02  3.37628201e-02  9.96286944e-02
  2.52658874e-02 -9.12969261e-02 -5.17271534e-02  5.69179140e-33
 -6.03023404e-03 -3.78539562e-02 -4.83192541e-02  6.82627186e-02
  1.20488983e-02  1.65812541e-02  5.49064018e-02  4.37580906e-02
 -1.39182685e-02  4.11569886e-03 -1.66461766e-02 -7.77898580e-02
 -2.40542162e-02  3.73555645e-02  9.18206945e-02 -2.30728760e-02
  4.16098386e-02  1.72552783e-02  1.71703324e-02 -3.84142362e-02
  4.36374396e-02  7.79635981e-02 -6.51464537e-02  4.75566275e-02
  6.70249835e-02 -8.18658713e-03 -1.18445614e-02 -5.25882952e-02
 -9.07337144e-02 -2.89737843e-02  8.28600451e-02  1.11561199e-03
 -1.97014352e-03  7.53795132e-02  9.94570553e-03  1.64156370e-02
 -6.24071155e-03 -4.61438037e-02 -3.94936465e-02 -1.19646750e-01
 -2.83884592e-02 -5.12409732e-02 -1.41614974e-02  3.12367454e-02
  9.69391491e-04 -2.14776509e-02 -1.01114348e-01  1.04953451e-02
  9.99594573e-03 -2.73263920e-02  5.73762543e-02  1.77921131e-01
 -3.09766061e-03 -6.80947443e-03 -8.74327403e-03  5.53580299e-02
  1.75790600e-02  7.38089532e-02  1.22498833e-02  1.10926673e-01
 -5.88531233e-02  5.17375134e-02 -7.79727176e-02  3.86234783e-02
 -8.11466053e-02  5.62654771e-02 -8.23518038e-02 -5.01815565e-02
  8.74218047e-02 -4.25807312e-02 -6.56627193e-02  4.12890576e-02
 -4.43859100e-02 -2.15874016e-02  2.44972408e-02 -2.26820428e-02
 -3.74242067e-02 -5.96244857e-02 -4.71633039e-02 -6.13373294e-02
 -7.53956512e-02  6.36465102e-02  5.25334291e-02  1.03548050e-01
  3.88193727e-02 -7.74626583e-02 -2.38826987e-03 -7.15444516e-03
 -1.51809752e-02  1.88496653e-02  1.23266680e-02 -6.75715357e-02
  3.65008377e-02 -1.63649116e-02  5.83487712e-02 -7.28124050e-33
 -2.87266361e-04  1.35546057e-02  2.04995144e-02 -2.76490189e-02
 -4.83347550e-02 -1.90909188e-02 -8.51462632e-02 -9.93873253e-02
 -1.28309220e-01  1.56582016e-02 -2.79854387e-02  4.41773273e-02
  4.03237194e-02  1.63193755e-02 -1.03748627e-02  9.93397310e-02
 -4.93522473e-02 -3.48475166e-02  2.91496646e-02  6.06958978e-02
  1.81608070e-02  1.03109784e-01  1.13862477e-01 -1.56367421e-02
  3.09119653e-02  9.47800186e-03 -2.29397379e-02  8.86727050e-02
  8.74336287e-02 -3.17778997e-02  1.65445581e-02  1.53994816e-03
  1.87426098e-02 -5.20566516e-02  2.54633091e-02 -7.14401305e-02
 -2.97507998e-02  5.50645217e-02  2.74395831e-02 -8.66685156e-03
  7.30900466e-02 -6.18504919e-02 -4.10677493e-02  1.81545876e-02
 -1.04914736e-02 -6.98174387e-02  2.49396060e-02  6.42481446e-02
  1.45754665e-02  4.93618995e-02 -2.26056390e-02 -6.92048967e-02
 -2.21826117e-02 -3.65807414e-02  4.30445485e-02  3.60670090e-02
  7.35450462e-02 -1.49342651e-02  7.13775903e-02 -4.02052291e-02
  4.11053188e-03 -5.32638058e-02  1.46490065e-02  2.90582329e-02
  8.93809125e-02 -6.29317984e-02 -5.64644597e-02 -4.02083844e-02
  2.10160739e-03 -1.35928821e-02  8.31490196e-03  5.80652580e-02
 -1.98434424e-02 -2.22129188e-02  4.85145785e-02 -1.10679241e-02
  1.32875694e-02  6.00414276e-02  2.58741565e-02  2.53369249e-02
 -9.90641415e-02 -2.15104744e-02 -5.88254444e-03 -1.54308639e-02
  1.65794289e-03 -5.79099171e-02 -8.87825433e-03 -1.91754978e-02
  7.60934176e-03 -1.87741108e-02 -3.69408354e-02  8.26415345e-02
 -4.80612228e-03 -4.64852005e-02  3.87293287e-03 -5.74378660e-08
 -1.64264813e-02 -1.14261076e-01 -6.62669539e-02 -1.13415746e-02
  8.53004679e-02 -1.35037094e-01 -3.68116386e-02  8.11778568e-03
 -9.79226232e-02 -2.78360043e-02  3.23149795e-03  1.67464707e-02
  1.11780653e-03 -6.93679526e-02  7.05560446e-02 -4.17965092e-02
  3.68303084e-03 -7.91502744e-02 -6.79449216e-02  5.84371649e-02
 -2.28213053e-02 -8.94927792e-03 -1.21703856e-02  1.49630159e-01
 -2.27094330e-02 -9.28359851e-02  1.17398016e-01  4.16239239e-02
  7.03854039e-02  3.09815668e-02  3.48789059e-02  6.17475957e-02
 -2.19543315e-02  5.77320755e-02 -3.27409394e-02  5.29344715e-02
  5.02880290e-03  5.10766022e-02 -6.30175183e-03  8.36084560e-02
  4.46085958e-03 -1.36361010e-02  4.81029070e-04  4.28021625e-02
  5.13451509e-02  4.06356109e-03 -6.00002147e-02 -1.63471010e-02
  7.26685375e-02  3.18438038e-02 -1.49415895e-01  1.06283752e-02
 -7.66233578e-02  4.33602883e-03 -7.89989308e-02 -1.25070298e-02
  1.91927813e-02 -4.42941487e-02  8.68809074e-02  1.17935473e-02
 -2.58334670e-02 -1.02769919e-02  4.19196226e-02  1.04939565e-02]"
"/**
 * The base Component interface defines operations that can be altered by
 * decorators.
 */
class Component {
 public:
  virtual ~Component() {}
  virtual std::string Operation() const = 0;
};
/**
 * Concrete Components provide default implementations of the operations. There
 * might be several variations of these classes.
 */
class ConcreteComponent : public Component {
 public:
  std::string Operation() const override {
    return ""ConcreteComponent"";
  }
};
/**
 * The base Decorator class follows the same interface as the other components.
 * The primary purpose of this class is to define the wrapping interface for all
 * concrete decorators. The default implementation of the wrapping code might
 * include a field for storing a wrapped component and the means to initialize
 * it.
 */
class Decorator : public Component {
  /**
   * @var Component
   */
 protected:
  Component* component_;

 public:
  Decorator(Component* component) : component_(component) {
  }
  /**
   * The Decorator delegates all work to the wrapped component.
   */
  std::string Operation() const override {
    return this->component_->Operation();
  }
};
/**
 * Concrete Decorators call the wrapped object and alter its result in some way.
 */
class ConcreteDecoratorA : public Decorator {
  /**
   * Decorators may call parent implementation of the operation, instead of
   * calling the wrapped object directly. This approach simplifies extension of
   * decorator classes.
   */
 public:
  ConcreteDecoratorA(Component* component) : Decorator(component) {
  }
  std::string Operation() const override {
    return ""ConcreteDecoratorA("" + Decorator::Operation() + "")"";
  }
};
/**
 * Decorators can execute their behavior either before or after the call to a
 * wrapped object.
 */
class ConcreteDecoratorB : public Decorator {
 public:
  ConcreteDecoratorB(Component* component) : Decorator(component) {
  }

  std::string Operation() const override {
    return ""ConcreteDecoratorB("" + Decorator::Operation() + "")"";
  }
};
/**
 * The client code works with all objects using the Component interface. This
 * way it can stay independent of the concrete classes of components it works
 * with.
 */
void ClientCode(Component* component) {
  // ...
  std::cout << ""RESULT: "" << component->Operation();
  // ...
}

int main() {
  /**
   * This way the client code can support both simple components...
   */
  Component* simple = new ConcreteComponent;
  std::cout << ""Client: I've got a simple component:\n"";
  ClientCode(simple);
  std::cout << ""\n\n"";
  /**
   * ...as well as decorated ones.
   *
   * Note how decorators can wrap not only simple components but the other
   * decorators as well.
   */
  Component* decorator1 = new ConcreteDecoratorA(simple);
  Component* decorator2 = new ConcreteDecoratorB(decorator1);
  std::cout << ""Client: Now I've got a decorated component:\n"";
  ClientCode(decorator2);
  std::cout << ""\n"";

  delete simple;
  delete decorator1;
  delete decorator2;

  return 0;
}",C++,Decorator,Refactoring Guru,https://refactoring.guru/design-patterns/decorator/cpp/example#example-0,"[-5.68206310e-02  5.75034767e-02  2.49733720e-02  2.95319911e-02
 -1.06996991e-01  2.22398024e-02 -5.12313284e-03  3.19001218e-03
 -2.33542714e-02 -2.89487392e-02  1.26486514e-02 -2.64729653e-02
 -4.60550860e-02 -9.29453038e-03  5.13062179e-02 -3.95533722e-03
  8.84163845e-03  7.21578896e-02 -5.90982698e-02  8.62745941e-02
  6.17154688e-02 -5.65194115e-02 -1.01968825e-01 -1.92402415e-02
 -7.05247791e-03  3.64149292e-03 -1.96115933e-02 -7.42465779e-02
  7.26832002e-02  4.18174872e-03  8.12927336e-02 -4.20383381e-04
 -1.37029469e-01  7.64854327e-02 -1.09446734e-01  5.94862998e-02
  4.44575101e-02 -3.01341284e-02 -5.07702269e-02 -5.39966300e-03
 -5.73335681e-03  5.99958487e-02 -9.88402963e-02  2.03699619e-02
  5.33453748e-02  1.03852786e-02  2.46819630e-02 -8.14492181e-02
 -5.84010072e-02 -1.25960961e-01  8.79712217e-03  8.41921419e-02
  2.48676818e-02  7.40017146e-02 -4.23717722e-02  1.86943039e-02
  4.53735255e-02  1.32876448e-02  1.90565642e-02  4.16521616e-02
 -5.42436391e-02  2.22862288e-02  7.32986405e-02 -8.25527776e-03
  6.27674302e-03 -3.56895514e-02  2.40241364e-02  2.84435181e-03
  1.75916799e-03 -5.39659895e-03 -3.55834104e-02  1.01688653e-02
 -1.25211226e-02  3.98076922e-02 -7.72588933e-03  3.70731540e-02
 -5.53287305e-02  5.28075397e-02 -1.35000758e-02 -7.21816272e-02
  5.55775315e-02  8.19945857e-02 -3.06698717e-02 -3.92104313e-02
  6.34883940e-02  8.87299329e-02 -2.84965634e-02 -6.08638562e-02
  1.44312093e-02  6.29051775e-02  6.57436326e-02  3.57117737e-03
 -1.62256379e-02  1.85549594e-02  3.12545784e-02 -5.12528047e-02
  2.39639189e-02 -6.80320943e-03 -3.17116864e-02  6.97182789e-02
 -6.05931990e-02  1.96173042e-02  2.12349487e-03 -1.21377585e-02
 -1.59217045e-02  8.25593434e-03 -1.06203184e-01 -2.56615784e-02
 -5.81473373e-02 -5.33035882e-02 -1.42731541e-03  3.63203026e-02
 -6.62240386e-02 -5.59357554e-02  1.49335293e-02  4.11630832e-02
  2.88925972e-02 -2.19609328e-02  8.74399766e-02  1.40703153e-02
  4.27954532e-02 -6.40288815e-02  3.72331850e-02  6.59505501e-02
 -8.50754045e-03 -4.13489938e-02 -1.53218377e-02  3.91471027e-33
  1.04729529e-03 -6.33094758e-02 -8.49654898e-02  1.05360225e-01
 -1.66124366e-02  1.70115456e-02  1.03501314e-02  6.22475632e-02
 -2.79030879e-03  3.07212234e-03  2.19044928e-02 -8.25570077e-02
 -9.89504997e-03  6.29636869e-02  7.93615505e-02 -2.48516332e-02
  2.66914200e-02  1.23568280e-02  6.34752261e-03 -4.34695296e-02
  5.35281375e-02  8.24167654e-02 -2.70009506e-03  2.08792500e-02
 -3.26266582e-03  9.76433139e-03 -4.96820593e-03 -3.02676056e-02
 -9.77116600e-02 -2.99595762e-02  5.55482507e-02 -2.55474355e-02
  4.60267514e-02  1.01921000e-01 -3.19831409e-02  1.81715712e-02
 -1.60025153e-02 -5.32724075e-02 -4.90657426e-02 -1.15664877e-01
 -5.02872095e-02 -5.96036669e-03 -1.20218601e-02  8.48510023e-03
  3.35277542e-02  1.71467557e-03 -3.73234935e-02  1.76874716e-02
  2.19897758e-02 -1.00085698e-01  5.86807579e-02  1.67112038e-01
  2.66903527e-02  5.31737171e-02  8.42293724e-02  3.17886695e-02
  3.55432443e-02  4.97350143e-03 -1.89791676e-02  5.02776504e-02
 -6.48931414e-02  7.96036199e-02 -7.47286752e-02  4.02009226e-02
 -7.59167150e-02  4.37732339e-02 -1.77500602e-02 -4.09604758e-02
  5.18577062e-02 -2.38938630e-02 -5.40263467e-02  5.26105464e-02
 -1.17308885e-01 -1.43412706e-02  5.61417267e-02 -2.66610528e-04
 -3.57412174e-02 -2.06062477e-02 -3.47845023e-03 -6.67545572e-02
 -7.35632181e-02  4.92770299e-02  2.74759252e-02  8.74841213e-02
 -3.70260281e-03 -4.58246507e-02  3.33169438e-02  6.52943831e-03
  1.92465801e-02  1.42933195e-02  3.25265191e-02 -6.57469481e-02
  3.59788649e-02 -4.33348157e-02  3.48182395e-02 -6.19895991e-33
 -1.88510753e-02  3.32254730e-02 -6.39281003e-03 -3.67867239e-02
 -6.59885779e-02 -6.80889329e-03 -7.96798244e-02 -6.11373633e-02
 -9.35782269e-02 -2.12898315e-03 -1.77030899e-02  4.45404649e-02
  3.01778279e-02  6.12929128e-02 -8.97425134e-03  6.50254935e-02
 -7.77174607e-02 -4.09396701e-02  4.69189808e-02  2.12314483e-02
  1.76247861e-02  7.15825036e-02  2.66700238e-02 -2.80630104e-02
 -2.03023525e-03  3.21033760e-03 -5.94245121e-02  9.74563435e-02
  1.24548845e-01 -5.74166849e-02  3.51833142e-02 -5.31999134e-02
  1.15029328e-02 -2.70304885e-02  2.75804952e-04 -1.31862806e-02
 -5.74541949e-02  5.87720275e-02  9.13385022e-03 -4.75835726e-02
  5.30014262e-02 -6.85467348e-02 -1.62008833e-02  5.13044931e-02
 -4.96285409e-02 -6.52595907e-02 -8.11097771e-02 -1.14146282e-03
  9.93645377e-03  5.37118688e-02 -2.26647686e-02 -3.32885645e-02
 -2.54826862e-02 -4.81716804e-02 -7.59819476e-03  2.57841125e-02
  5.69079742e-02 -4.93326671e-02  1.60519406e-02  3.75956260e-02
  5.80990799e-02 -4.67577390e-02  6.63441643e-02 -5.04378404e-04
  5.38507178e-02 -2.46420745e-02  1.58020128e-02 -8.15630853e-02
  1.75635293e-02 -5.88974357e-03  9.25461426e-02  8.35424811e-02
 -8.61424580e-02 -3.00507396e-02  7.90166855e-02  2.27242243e-02
  3.08548883e-02  7.80395058e-04  2.85046045e-02 -1.09442985e-02
 -7.42137134e-02 -6.68052360e-02  4.56684791e-02 -1.60207637e-02
 -2.00979598e-02 -6.94694817e-02  2.47371793e-02 -1.60082169e-02
  4.15641107e-02 -1.07953781e-02 -7.87092652e-03  8.97822157e-02
 -2.58582253e-02 -2.11141892e-02 -1.30647076e-02 -5.29606510e-08
 -3.24733667e-02 -9.17798430e-02 -7.05172941e-02 -5.21430857e-02
 -7.97526212e-04 -7.31214136e-02  5.69439167e-03 -6.45738542e-02
 -1.27356067e-01 -5.47734536e-02 -1.16040092e-03  3.56702618e-02
 -2.04021577e-02 -7.60267526e-02  5.12059852e-02 -2.16094349e-02
 -5.49020022e-02 -9.23999771e-02 -8.41073468e-02  9.79863573e-03
 -4.74228188e-02 -1.73801091e-03 -2.25676522e-02  5.40655963e-02
 -3.60190943e-02 -4.43026386e-02  7.96781704e-02  9.04740393e-02
  5.82428798e-02  6.41215891e-02  2.56299209e-02  4.44584899e-02
 -1.13533931e-02  7.57533014e-02 -1.40076065e-02  9.20447335e-02
 -1.79772004e-02 -3.52065042e-02  3.49020511e-02  8.84105861e-02
  1.99802406e-02 -6.48036525e-02 -1.10814841e-02  5.83955087e-02
  7.60310143e-02  3.13919298e-02 -7.46758506e-02 -5.38808964e-02
  3.12602110e-02  7.75478631e-02 -7.01252744e-02  1.70403365e-02
 -6.86139911e-02  4.27346192e-02 -1.04974188e-01 -1.11230155e-02
 -5.64810820e-03 -3.46081215e-05  3.31266560e-02 -2.48360820e-03
 -7.70108849e-02 -2.28268746e-02  6.99140951e-02  6.87768916e-03]"
"/**
 * The Subsystem can accept requests either from the facade or client directly.
 * In any case, to the Subsystem, the Facade is yet another client, and it's not
 * a part of the Subsystem.
 */
class Subsystem1 {
 public:
  std::string Operation1() const {
    return ""Subsystem1: Ready!\n"";
  }
  // ...
  std::string OperationN() const {
    return ""Subsystem1: Go!\n"";
  }
};
/**
 * Some facades can work with multiple subsystems at the same time.
 */
class Subsystem2 {
 public:
  std::string Operation1() const {
    return ""Subsystem2: Get ready!\n"";
  }
  // ...
  std::string OperationZ() const {
    return ""Subsystem2: Fire!\n"";
  }
};

/**
 * The Facade class provides a simple interface to the complex logic of one or
 * several subsystems. The Facade delegates the client requests to the
 * appropriate objects within the subsystem. The Facade is also responsible for
 * managing their lifecycle. All of this shields the client from the undesired
 * complexity of the subsystem.
 */
class Facade {
 protected:
  Subsystem1 *subsystem1_;
  Subsystem2 *subsystem2_;
  /**
   * Depending on your application's needs, you can provide the Facade with
   * existing subsystem objects or force the Facade to create them on its own.
   */
 public:
  /**
   * In this case we will delegate the memory ownership to Facade Class
   */
  Facade(
      Subsystem1 *subsystem1 = nullptr,
      Subsystem2 *subsystem2 = nullptr) {
    this->subsystem1_ = subsystem1 ?: new Subsystem1;
    this->subsystem2_ = subsystem2 ?: new Subsystem2;
  }
  ~Facade() {
    delete subsystem1_;
    delete subsystem2_;
  }
  /**
   * The Facade's methods are convenient shortcuts to the sophisticated
   * functionality of the subsystems. However, clients get only to a fraction of
   * a subsystem's capabilities.
   */
  std::string Operation() {
    std::string result = ""Facade initializes subsystems:\n"";
    result += this->subsystem1_->Operation1();
    result += this->subsystem2_->Operation1();
    result += ""Facade orders subsystems to perform the action:\n"";
    result += this->subsystem1_->OperationN();
    result += this->subsystem2_->OperationZ();
    return result;
  }
};

/**
 * The client code works with complex subsystems through a simple interface
 * provided by the Facade. When a facade manages the lifecycle of the subsystem,
 * the client might not even know about the existence of the subsystem. This
 * approach lets you keep the complexity under control.
 */
void ClientCode(Facade *facade) {
  // ...
  std::cout << facade->Operation();
  // ...
}
/**
 * The client code may have some of the subsystem's objects already created. In
 * this case, it might be worthwhile to initialize the Facade with these objects
 * instead of letting the Facade create new instances.
 */

int main() {
  Subsystem1 *subsystem1 = new Subsystem1;
  Subsystem2 *subsystem2 = new Subsystem2;
  Facade *facade = new Facade(subsystem1, subsystem2);
  ClientCode(facade);

  delete facade;

  return 0;
}",C++,Facade,Refactoring Guru,https://refactoring.guru/design-patterns/facade/cpp/example#example-0,"[-5.19977473e-02  5.42088263e-02 -3.93790267e-02 -2.57981773e-02
 -1.00847110e-01 -9.21813622e-02 -8.43278989e-02  4.58157323e-02
 -3.31381783e-02  2.76463665e-02 -2.59812251e-02 -2.18738467e-02
  4.79778312e-02 -4.40135859e-02  7.42085800e-02 -2.23522931e-02
  1.49367340e-02 -6.57467125e-03 -5.74849499e-03  4.57375087e-02
  7.23692998e-02 -6.69183061e-02 -6.86292648e-02 -1.99379008e-02
 -3.15196887e-02 -4.52410914e-02 -7.44660348e-02 -2.78040785e-02
  7.50078168e-03  1.61951352e-02  8.31466243e-02  5.43378573e-03
 -5.02560921e-02  2.67994497e-02  7.94746354e-03  9.86953378e-02
  8.05780441e-02 -3.76686826e-02 -6.03145733e-02  5.46261817e-02
 -1.95105281e-02  5.60426302e-02 -1.18250802e-01 -3.93427685e-02
  1.05750409e-03 -4.31764536e-02 -6.59277439e-02 -2.25475412e-02
 -4.52581905e-02 -8.15321207e-02 -6.52983263e-02  1.24669131e-02
 -1.54454587e-02  3.95224467e-02  2.78192181e-02  5.07039577e-03
  3.87427732e-02  3.68007012e-02 -3.01448889e-02 -9.56834853e-03
 -8.23539868e-03  2.29221862e-02 -4.45903242e-02 -5.38319126e-02
  2.81257648e-02  3.64395976e-02  2.65910570e-03 -2.97030061e-03
 -2.30446551e-03  1.73327271e-02 -1.07692853e-02 -3.86077911e-02
 -2.46809945e-02  3.37152407e-02 -5.58396168e-02 -6.84481405e-04
  2.90699825e-02  1.85153224e-02 -4.70921397e-02 -1.29525930e-01
  8.33912641e-02  7.58301541e-02 -1.08429447e-01 -2.28463598e-02
  1.29231056e-02  4.89353538e-02 -3.34469900e-02 -4.27829660e-02
  5.37688248e-02  3.22075561e-02  3.24570499e-02 -7.61998072e-02
 -4.49437164e-02 -4.85536531e-02  8.95424634e-02 -3.64905261e-02
 -5.63229807e-03 -1.07509010e-02  4.89806384e-02  4.48700078e-02
 -6.13203943e-02 -2.96464134e-02  7.45007470e-02 -1.57122742e-02
 -2.89023928e-02  6.30880669e-02 -7.61333704e-02  3.31311598e-02
 -5.73077835e-02 -4.64471579e-02 -8.10143650e-02  3.28895412e-02
 -2.09201071e-02  2.25381809e-03  2.17573158e-02  3.93612906e-02
  5.67851700e-02 -1.21522537e-02  1.84614211e-02  3.43205184e-02
  6.45251125e-02 -4.38072048e-02  9.87538844e-02  8.08185339e-02
  2.53430810e-02 -2.15602219e-02 -2.28954460e-02  5.25100930e-33
 -4.78270762e-02 -4.53019962e-02 -5.50335795e-02  1.12908110e-01
  3.44950147e-02  4.50199023e-02  3.62136140e-02  7.22026080e-02
 -1.90338604e-02  6.42031282e-02 -3.05877011e-02 -6.78223521e-02
  3.52693582e-03 -1.44465722e-03  1.14549771e-01 -5.25056794e-02
  1.16256364e-01  2.10951790e-02 -2.68445462e-02 -4.73570004e-02
  9.73136127e-02  1.01677850e-01 -1.66136157e-02 -2.56149694e-02
  5.88489361e-02 -5.28052114e-02 -4.43246681e-03  1.05685573e-02
 -7.43115619e-02 -1.24562718e-02  6.34618998e-02 -4.20928886e-03
 -3.24269794e-02  1.03344932e-01 -3.06970906e-02  3.92605104e-02
  2.49526687e-02 -4.02071923e-02  2.75031999e-02 -1.23162031e-01
 -5.44405766e-02 -2.02527884e-02 -1.28570702e-02  3.23940404e-02
 -4.49692644e-03 -6.05748557e-02 -8.76127630e-02 -1.70282666e-02
 -1.42729627e-02 -6.86695948e-02  1.13304213e-01  1.05232894e-01
  7.73179391e-03  4.85709216e-03  2.07841322e-02  2.99459696e-02
 -1.73072200e-02 -3.30590792e-02  5.75757725e-03  4.11341414e-02
 -6.76252767e-02 -2.15960070e-02 -5.64269237e-02  5.72492667e-02
  6.66839164e-03  1.87552196e-03 -7.84087479e-02 -7.66898505e-03
  4.69906777e-02 -1.73231419e-02 -7.78710693e-02  3.17970179e-02
 -4.47610691e-02  4.36657593e-02 -9.02015902e-03 -1.14057008e-02
  8.27456489e-02 -5.96200190e-02 -2.43705213e-02 -4.40106317e-02
 -5.16358763e-02  6.48889840e-02 -1.14770271e-02  6.75549433e-02
  5.42440042e-02  2.55559403e-02  2.54513584e-02 -4.68955636e-02
 -5.29824290e-03  2.20373664e-02 -1.92064606e-02 -7.76824579e-02
 -3.86671796e-02 -3.83437648e-02  5.72651923e-02 -8.15134729e-33
  2.86218841e-02 -2.24297721e-04 -6.79376051e-02 -7.29754046e-02
 -7.42517039e-02  4.06138599e-03 -6.77373260e-02 -7.68904611e-02
 -1.78514764e-01  2.97903586e-02 -6.08602352e-02  3.86834629e-02
  4.98048514e-02 -2.92699803e-02  2.74420027e-02 -1.64539716e-03
  3.39680398e-03 -9.50559676e-02  9.77502204e-03  4.58465554e-02
 -4.83869687e-02  1.21386819e-01  4.19692695e-02 -3.97201441e-02
 -1.37414588e-02  2.29929723e-02 -1.07824445e-01  1.20057568e-01
  1.18631698e-01 -1.13563547e-02 -1.48963882e-02 -1.33151701e-02
  1.62101921e-03 -5.02839405e-03  5.97121418e-02  2.56086681e-02
 -2.64452584e-02  5.72409704e-02  7.45420996e-03 -9.32164118e-03
  7.11328536e-02 -6.87098876e-02 -2.80553903e-02 -1.40675399e-02
  5.47757410e-02 -4.97502857e-04 -1.69679094e-02  2.00565271e-02
 -6.45013899e-02 -1.02396328e-02 -2.69945562e-02 -3.16811092e-02
 -5.33004701e-02 -7.68422498e-04  1.16896452e-02  1.08440791e-03
  1.70844179e-02  1.08411280e-03  5.75028248e-02 -2.40746066e-02
  1.11629903e-01  6.07439084e-04 -3.40278149e-02  4.95488942e-02
  5.68265766e-02 -6.27332255e-02 -4.74848375e-02 -6.10284545e-02
  7.20647536e-03  1.50277996e-02 -1.92454811e-02  6.06570467e-02
 -7.71797821e-02 -1.09256143e-02  7.70194381e-02 -2.45654322e-02
 -7.37009197e-02  1.02886120e-02 -1.22666685e-02  2.20755786e-02
 -4.81698439e-02  3.47651578e-02 -2.00664457e-02  3.27677801e-02
 -9.11591351e-02 -5.28572425e-02  2.26463843e-02  9.09103779e-04
 -2.34170947e-02 -7.50710741e-02 -1.23124837e-03  1.35160256e-02
  4.08811495e-02 -9.98294912e-03 -7.74286594e-03 -5.66470817e-08
  6.07183538e-02 -2.66435836e-02  4.70191166e-02  1.47837922e-02
 -1.58659294e-02 -9.41399410e-02 -9.33791846e-02 -3.06731160e-03
  2.75310408e-03 -1.12814512e-02 -5.84246293e-02  5.75406365e-02
  1.09830201e-02 -4.17306013e-02 -1.17779421e-02 -2.39661559e-02
  2.05224175e-02 -8.15096051e-02 -5.71101420e-02 -3.99441487e-04
  2.17870390e-03  6.39023399e-03 -4.63752039e-02  8.27668384e-02
 -7.58037623e-03 -4.71058786e-02  5.92224635e-02  7.27030355e-03
  7.37566873e-03  7.76875988e-02  2.65347622e-02  5.23774438e-02
  1.63685605e-02  1.27079904e-01  5.01063690e-02  4.16258201e-02
 -7.33811921e-03  6.50966167e-02  3.93718630e-02 -2.22569015e-02
  4.96194214e-02  4.08134609e-03  2.27658730e-02  7.82974958e-02
  3.61740515e-02  7.61538697e-03 -1.60371959e-02 -3.31318378e-02
  8.59534219e-02  2.16301959e-02 -1.01985477e-01  2.39567216e-02
 -5.09276949e-02  8.13811868e-02 -8.54077488e-02 -8.42209253e-03
 -2.36910563e-02 -5.45644686e-02  9.39116105e-02  3.89721952e-02
 -1.96675006e-02  4.02372815e-02  3.22536342e-02 -3.73239480e-02]"
"/**
 * Flyweight Design Pattern
 *
 * Intent: Lets you fit more objects into the available amount of RAM by sharing
 * common parts of state between multiple objects, instead of keeping all of the
 * data in each object.
 */

struct SharedState
{
    std::string brand_;
    std::string model_;
    std::string color_;

    SharedState(const std::string &brand, const std::string &model, const std::string &color)
        : brand_(brand), model_(model), color_(color)
    {
    }

    friend std::ostream &operator<<(std::ostream &os, const SharedState &ss)
    {
        return os << ""[ "" << ss.brand_ << "" , "" << ss.model_ << "" , "" << ss.color_ << "" ]"";
    }
};

struct UniqueState
{
    std::string owner_;
    std::string plates_;

    UniqueState(const std::string &owner, const std::string &plates)
        : owner_(owner), plates_(plates)
    {
    }

    friend std::ostream &operator<<(std::ostream &os, const UniqueState &us)
    {
        return os << ""[ "" << us.owner_ << "" , "" << us.plates_ << "" ]"";
    }
};

/**
 * The Flyweight stores a common portion of the state (also called intrinsic
 * state) that belongs to multiple real business entities. The Flyweight accepts
 * the rest of the state (extrinsic state, unique for each entity) via its
 * method parameters.
 */
class Flyweight
{
private:
    SharedState *shared_state_;

public:
    Flyweight(const SharedState *shared_state) : shared_state_(new SharedState(*shared_state))
    {
    }
    Flyweight(const Flyweight &other) : shared_state_(new SharedState(*other.shared_state_))
    {
    }
    ~Flyweight()
    {
        delete shared_state_;
    }
    SharedState *shared_state() const
    {
        return shared_state_;
    }
    void Operation(const UniqueState &unique_state) const
    {
        std::cout << ""Flyweight: Displaying shared ("" << *shared_state_ << "") and unique ("" << unique_state << "") state.\n"";
    }
};
/**
 * The Flyweight Factory creates and manages the Flyweight objects. It ensures
 * that flyweights are shared correctly. When the client requests a flyweight,
 * the factory either returns an existing instance or creates a new one, if it
 * doesn't exist yet.
 */
class FlyweightFactory
{
    /**
     * @var Flyweight[]
     */
private:
    std::unordered_map<std::string, Flyweight> flyweights_;
    /**
     * Returns a Flyweight's string hash for a given state.
     */
    std::string GetKey(const SharedState &ss) const
    {
        return ss.brand_ + ""_"" + ss.model_ + ""_"" + ss.color_;
    }

public:
    FlyweightFactory(std::initializer_list<SharedState> share_states)
    {
        for (const SharedState &ss : share_states)
        {
            this->flyweights_.insert(std::make_pair<std::string, Flyweight>(this->GetKey(ss), Flyweight(&ss)));
        }
    }

    /**
     * Returns an existing Flyweight with a given state or creates a new one.
     */
    Flyweight GetFlyweight(const SharedState &shared_state)
    {
        std::string key = this->GetKey(shared_state);
        if (this->flyweights_.find(key) == this->flyweights_.end())
        {
            std::cout << ""FlyweightFactory: Can't find a flyweight, creating new one.\n"";
            this->flyweights_.insert(std::make_pair(key, Flyweight(&shared_state)));
        }
        else
        {
            std::cout << ""FlyweightFactory: Reusing existing flyweight.\n"";
        }
        return this->flyweights_.at(key);
    }
    void ListFlyweights() const
    {
        size_t count = this->flyweights_.size();
        std::cout << ""\nFlyweightFactory: I have "" << count << "" flyweights:\n"";
        for (std::pair<std::string, Flyweight> pair : this->flyweights_)
        {
            std::cout << pair.first << ""\n"";
        }
    }
};

// ...
void AddCarToPoliceDatabase(
    FlyweightFactory &ff, const std::string &plates, const std::string &owner,
    const std::string &brand, const std::string &model, const std::string &color)
{
    std::cout << ""\nClient: Adding a car to database.\n"";
    const Flyweight &flyweight = ff.GetFlyweight({brand, model, color});
    // The client code either stores or calculates extrinsic state and passes it
    // to the flyweight's methods.
    flyweight.Operation({owner, plates});
}

/**
 * The client code usually creates a bunch of pre-populated flyweights in the
 * initialization stage of the application.
 */

int main()
{
    FlyweightFactory *factory = new FlyweightFactory({{""Chevrolet"", ""Camaro2018"", ""pink""}, {""Mercedes Benz"", ""C300"", ""black""}, {""Mercedes Benz"", ""C500"", ""red""}, {""BMW"", ""M5"", ""red""}, {""BMW"", ""X6"", ""white""}});
    factory->ListFlyweights();

    AddCarToPoliceDatabase(*factory,
                            ""CL234IR"",
                            ""James Doe"",
                            ""BMW"",
                            ""M5"",
                            ""red"");

    AddCarToPoliceDatabase(*factory,
                            ""CL234IR"",
                            ""James Doe"",
                            ""BMW"",
                            ""X1"",
                            ""red"");
    factory->ListFlyweights();
    delete factory;

    return 0;
}",C++,Flyweight,Refactoring Guru,https://refactoring.guru/design-patterns/flyweight/cpp/example#example-0,"[-1.42604131e-02  5.23659289e-02 -3.75819243e-02  1.38213504e-02
 -4.55508232e-02  5.88019639e-02  5.57556488e-02 -1.56745482e-02
 -7.67893493e-02 -3.53943519e-02  7.17288777e-02 -5.83762936e-02
  2.09612884e-02 -9.54574868e-02 -1.49695631e-02  4.54197079e-02
 -1.09112803e-02 -1.50718750e-03 -9.03236791e-02  2.95621213e-02
  8.81016999e-02 -5.47263678e-03 -5.35924137e-02  3.34411412e-02
 -2.91726124e-02  3.57769765e-02 -3.21043991e-02  2.38338504e-02
 -2.49711499e-02 -7.01914728e-02  3.85313444e-02  3.07666268e-02
 -1.94461569e-02  8.91063288e-02  3.99425393e-03 -1.56127775e-04
 -2.97668148e-02 -8.17830637e-02 -6.86833933e-02 -7.00754896e-02
 -5.18404925e-03  4.68968377e-02 -2.92908326e-02  3.81984450e-02
 -4.22271751e-02  6.40850216e-02 -1.65500753e-02  5.53506613e-02
  5.84971160e-02 -4.85573262e-02 -5.21890819e-02  1.56722143e-02
 -1.20090293e-02  4.67276946e-02  8.18949044e-02  6.16317876e-02
 -1.34738870e-02 -4.75666560e-02 -6.43617734e-02 -1.23422742e-01
  3.09429634e-02  2.00300664e-02  7.16404095e-02 -5.06511424e-03
  6.01372682e-02 -3.96915972e-02 -2.53290385e-02 -1.96769889e-02
  6.31241733e-03 -1.50562450e-02  6.20038956e-02  5.67139313e-03
 -3.28275561e-02  8.87951925e-02 -7.05213174e-02  1.08463407e-01
  3.91339771e-02 -5.34242503e-02 -1.93487722e-02 -4.02613683e-03
 -1.09113857e-01  4.32773447e-03 -5.30146770e-02 -1.39695928e-02
  1.13194942e-01 -2.12547705e-02 -3.53585295e-02 -6.98754042e-02
  1.26231287e-04  4.84980084e-02 -6.77986816e-02  1.69487633e-02
 -3.56490649e-02  4.17977246e-03 -3.99888605e-02  6.22400418e-02
  4.50862832e-02 -8.81836787e-02 -1.90806016e-02  7.50845969e-02
 -6.05115294e-02  5.68101257e-02  1.28674835e-01  4.40774523e-02
 -1.06203206e-01 -3.47567955e-03  3.92535562e-03 -1.25076855e-02
 -7.42626488e-02 -6.94870278e-02 -3.62921576e-03  3.60419862e-02
 -1.04476302e-03  8.37975740e-03 -8.69063362e-02  7.88357982e-04
  1.06703555e-02 -6.40061051e-02  2.11408231e-02  2.29619127e-02
  2.42871102e-02 -5.00410907e-02  2.57223528e-02  1.24341240e-02
 -3.12157851e-02 -5.19639067e-02 -1.11921325e-01  3.29972174e-33
 -5.41928187e-02 -1.18515722e-01 -2.36201994e-02  6.12405874e-02
 -1.92622375e-02 -1.08158858e-02 -1.49820624e-02  6.36663511e-02
 -6.32144064e-02 -1.31397238e-02 -1.14668896e-02 -5.06334119e-02
  3.00342347e-02  1.88722350e-02  6.46124631e-02 -5.08377627e-02
  7.52268583e-02 -1.58314817e-02  4.54897732e-02 -5.13447672e-02
  2.48862784e-02  1.74885280e-02 -2.99471617e-02 -4.48203385e-02
  3.46635729e-02  5.42530492e-02  1.86211802e-03 -4.27001528e-02
 -2.81610377e-02  3.15399356e-02  7.87213072e-02  2.76538711e-02
 -1.48253348e-02  3.06399595e-02  1.96355097e-02  2.09397487e-02
 -7.43995421e-03 -4.18852530e-02 -7.88319558e-02 -9.68293324e-02
  4.87625748e-02 -2.57630087e-02 -3.89035381e-02 -3.27567896e-03
 -3.48182209e-02  7.18272617e-03 -4.00733091e-02  2.35165060e-02
 -5.70761086e-03 -1.43292136e-02  2.86553055e-03  3.99491265e-02
  2.01131143e-02 -2.69229971e-02 -2.92969178e-02  1.11479789e-03
 -1.13468943e-02 -4.17741900e-03  2.68865339e-02  5.43945059e-02
 -9.22479630e-02  1.04736641e-01 -2.99999006e-02  4.83185500e-02
  6.87000081e-02  6.76021278e-02 -2.57139076e-02 -2.60087401e-02
  5.26415445e-02  3.24854441e-03  2.47643627e-02 -2.68321447e-02
  2.51603425e-02  2.50088777e-02 -6.47248526e-05 -1.68051627e-02
  1.40919276e-02 -1.17481962e-01 -7.62155354e-02 -9.04299170e-02
 -1.60964124e-03  7.83165731e-03 -3.54209840e-02  4.39408012e-02
 -1.15974573e-02 -6.75337315e-02  1.83271058e-03 -4.49798889e-02
 -6.80178870e-03  6.52231425e-02 -1.53964227e-02 -2.23640651e-02
  4.00957949e-02 -7.15896711e-02 -5.88969737e-02 -4.68504992e-33
 -1.94432456e-02 -3.25039960e-02  8.58622196e-04 -1.39150666e-02
  8.16856623e-02 -7.69065740e-03  9.79763921e-03 -8.26328248e-02
 -1.12255767e-01  1.83249544e-02 -6.71508834e-02  6.52864249e-03
  1.55698517e-02 -1.27688451e-02  9.21281055e-02  7.11599216e-02
 -2.86198524e-03 -5.26467338e-02 -1.61020160e-02  2.07374860e-02
 -3.90697382e-02  1.11861549e-01  1.99457370e-02  4.69573699e-02
 -2.06385534e-02  1.83522664e-02 -3.15572433e-02  1.11027874e-01
 -1.22078648e-02 -7.14570954e-02  2.33600326e-02 -2.57788971e-02
 -2.66834977e-03  4.62812148e-02 -1.16794999e-03 -4.68297973e-02
  1.60930585e-02  4.09065820e-02  2.08171690e-03  6.18802197e-02
  6.92998841e-02 -6.41564205e-02 -6.97269291e-02 -2.22003274e-02
  3.77287269e-02 -9.33712274e-02  3.26837966e-04 -1.28929329e-03
  4.64307629e-02 -1.68439299e-02  3.92643474e-02 -5.60892858e-02
 -9.57509950e-02  1.73574854e-02  3.28550637e-02  5.55980206e-02
  1.05022259e-01  3.56694218e-03  1.25515655e-01 -3.51618044e-02
 -2.47436389e-02 -6.09632544e-02 -9.78732295e-03  5.76528199e-02
  6.42581731e-02 -1.19466931e-01  3.75710838e-02 -5.74111938e-02
 -1.43822124e-02  3.95051502e-02 -1.06073722e-01  7.82842264e-02
  5.15213273e-02 -1.91318162e-03 -7.96324108e-03 -4.86046858e-02
  3.19422707e-02  3.95855382e-02  7.94290677e-02 -2.67790165e-02
 -4.81576882e-02 -4.52711321e-02  1.11462891e-01  4.70687337e-02
  2.80331653e-02  6.23695087e-03 -3.17045189e-02  2.92666070e-02
 -4.56746370e-02 -1.73337720e-02 -3.24034914e-02  7.13377073e-02
 -3.12517732e-02  6.65826350e-03 -4.00076099e-02 -5.10662446e-08
  5.18933637e-03 -7.99030289e-02  4.82317293e-03  8.19944218e-02
  7.93238431e-02 -8.03428143e-02  5.09654507e-02 -1.27540529e-02
 -2.89504174e-02 -1.83687173e-02  4.95091937e-02  2.07722839e-02
  4.12576646e-02  3.40574654e-03  3.50724943e-02 -7.42718801e-02
 -8.28087404e-02 -3.11256088e-02 -8.01998526e-02  2.73403246e-02
 -4.85193655e-02  4.53000143e-02 -6.39212877e-02  7.89679810e-02
  1.78198554e-02 -3.74748260e-02  6.03363775e-02 -1.72720514e-02
  9.85278189e-02  5.73734790e-02  3.40606645e-02  8.83571729e-02
  9.44804847e-02  1.48903001e-02 -3.77131402e-02 -2.83572823e-02
 -5.10272710e-03  8.15459341e-02  5.48535027e-04  6.58359528e-02
  1.69259328e-02  1.09242424e-01 -3.30817550e-02  7.39633664e-03
  1.05696976e-01 -2.70606391e-02 -4.06305790e-02 -1.38109960e-02
  1.66927669e-02  2.52626128e-02 -6.38849735e-02  1.05890324e-02
 -4.27491032e-02  6.19819425e-02 -6.95683658e-02 -5.66099063e-02
  4.85669560e-04 -2.50196680e-02  3.25552560e-02 -8.18969868e-03
  8.49029198e-02 -8.90669748e-02 -1.55798849e-02  3.38397585e-02]"
"#include <iostream>
/**
 * The Subject interface declares common operations for both RealSubject and the
 * Proxy. As long as the client works with RealSubject using this interface,
 * you'll be able to pass it a proxy instead of a real subject.
 */
class Subject {
 public:
  virtual void Request() const = 0;
};
/**
 * The RealSubject contains some core business logic. Usually, RealSubjects are
 * capable of doing some useful work which may also be very slow or sensitive -
 * e.g. correcting input data. A Proxy can solve these issues without any
 * changes to the RealSubject's code.
 */
class RealSubject : public Subject {
 public:
  void Request() const override {
    std::cout << ""RealSubject: Handling request.\n"";
  }
};
/**
 * The Proxy has an interface identical to the RealSubject.
 */
class Proxy : public Subject {
  /**
   * @var RealSubject
   */
 private:
  RealSubject *real_subject_;

  bool CheckAccess() const {
    // Some real checks should go here.
    std::cout << ""Proxy: Checking access prior to firing a real request.\n"";
    return true;
  }
  void LogAccess() const {
    std::cout << ""Proxy: Logging the time of request.\n"";
  }

  /**
   * The Proxy maintains a reference to an object of the RealSubject class. It
   * can be either lazy-loaded or passed to the Proxy by the client.
   */
 public:
  Proxy(RealSubject *real_subject) : real_subject_(new RealSubject(*real_subject)) {
  }

  ~Proxy() {
    delete real_subject_;
  }
  /**
   * The most common applications of the Proxy pattern are lazy loading,
   * caching, controlling the access, logging, etc. A Proxy can perform one of
   * these things and then, depending on the result, pass the execution to the
   * same method in a linked RealSubject object.
   */
  void Request() const override {
    if (this->CheckAccess()) {
      this->real_subject_->Request();
      this->LogAccess();
    }
  }
};
/**
 * The client code is supposed to work with all objects (both subjects and
 * proxies) via the Subject interface in order to support both real subjects and
 * proxies. In real life, however, clients mostly work with their real subjects
 * directly. In this case, to implement the pattern more easily, you can extend
 * your proxy from the real subject's class.
 */
void ClientCode(const Subject &subject) {
  // ...
  subject.Request();
  // ...
}

int main() {
  std::cout << ""Client: Executing the client code with a real subject:\n"";
  RealSubject *real_subject = new RealSubject;
  ClientCode(*real_subject);
  std::cout << ""\n"";
  std::cout << ""Client: Executing the same client code with a proxy:\n"";
  Proxy *proxy = new Proxy(real_subject);
  ClientCode(*proxy);

  delete real_subject;
  delete proxy;
  return 0;
}",C++,Proxy,Refactoring Guru,https://refactoring.guru/design-patterns/proxy/cpp/example#example-0,"[-8.62510130e-02  1.58020072e-02 -2.63312049e-02 -3.92978713e-02
 -8.14523175e-02 -2.59305183e-02  1.96286999e-02 -2.70974897e-02
 -3.35569232e-04  3.96749899e-02 -5.15399985e-02 -3.12607939e-04
 -2.97178011e-02  1.47690484e-03  7.52517581e-02 -4.22156267e-02
  3.53062823e-02  2.13337801e-02 -1.21890120e-02  4.64839675e-02
  7.53528923e-02 -6.98426515e-02 -6.23470880e-02 -2.23817211e-02
 -5.57915382e-02 -9.00559053e-02  2.01397648e-04 -1.54661253e-01
 -1.21750515e-02 -4.87048132e-03  7.79424533e-02  4.40282449e-02
 -1.85524046e-01  4.21396643e-02 -1.09042287e-01  6.21087439e-02
  6.79791300e-03 -8.76385495e-02 -2.46295445e-02 -3.60037782e-03
 -1.61306560e-02  6.04335740e-02 -2.76672915e-02  5.54070482e-03
  5.43280020e-02  1.71885174e-02 -1.46669839e-02  5.93657978e-02
  2.19188090e-02 -6.92855418e-02 -8.49429518e-02  7.37821544e-03
  8.68877210e-03  1.34772152e-01  1.31845055e-02  3.00053693e-03
  5.50345937e-03  4.12007496e-02  6.08629286e-02  7.46784955e-02
 -8.86887312e-02  3.65811251e-02  3.87148969e-02 -6.00998756e-03
 -2.55915597e-02 -3.88746597e-02 -6.69506118e-02  5.85792474e-02
  8.84211361e-02  4.53119539e-02 -6.85418025e-02  2.06967909e-02
 -5.01146317e-02  2.54600476e-02  6.80595413e-02 -1.68419499e-02
 -4.89359386e-02 -1.26093104e-02  1.83693916e-02 -8.80344808e-02
  4.83098701e-02  2.05418374e-03 -7.81093761e-02  1.14703539e-03
  7.98916742e-02  4.38359305e-02  2.31459998e-02 -7.00724050e-02
  4.13725264e-02  3.16822454e-02  2.13861596e-02 -1.22116236e-02
 -4.09183800e-02  5.39233275e-02  6.26732484e-02  4.25593257e-02
  4.87946942e-02  3.44576091e-02  5.58776315e-03  6.17793873e-02
 -3.05416305e-02  2.95544229e-02 -5.46802813e-03  2.15796512e-02
 -8.41539446e-03 -2.99147759e-02 -1.20334271e-02 -4.28682193e-04
  7.57244008e-04  9.93918534e-03 -6.76124170e-02  8.77113547e-03
 -5.70836738e-02 -3.85105945e-02 -1.06702279e-02  6.66169003e-02
  1.53872654e-01 -3.47417481e-02 -2.04680767e-02 -2.89314650e-02
 -2.14809068e-02 -3.40711838e-03  5.21980673e-02  2.07500774e-02
  8.87191743e-02 -7.42788613e-02  1.81579888e-02  3.55779822e-33
  2.62365527e-02 -8.73028636e-02 -4.10300195e-02  6.61827251e-02
 -1.93400625e-02  3.26453336e-02  3.84919867e-02  8.48600864e-02
  9.33089480e-03  6.41856063e-03  2.96999491e-03 -1.22636016e-02
  2.93288813e-05  1.55484946e-02  6.69790581e-02 -3.47348712e-02
 -5.26849478e-02 -5.00358641e-03  8.29429030e-02  2.10710373e-02
  2.53599845e-02 -2.29771417e-02 -5.02991192e-02 -3.20704021e-02
 -1.15624173e-02  2.16426924e-02 -8.67925398e-03  7.07791885e-03
 -6.26602024e-02  1.86656993e-02  1.06999524e-01  1.48335565e-02
 -3.03970110e-02  3.82497087e-02 -1.22250747e-02 -2.31687743e-02
  2.25390289e-02 -3.80740338e-03 -7.86538348e-02 -7.19136968e-02
  6.94799609e-03 -2.30479967e-02  2.79031526e-02 -1.84263065e-02
 -2.83849984e-02 -8.63940120e-02 -4.48952131e-02  1.03829680e-02
  8.22804049e-02 -3.46057005e-02  8.97366107e-02  9.01278630e-02
  1.89256631e-02 -5.17242253e-02  2.45593693e-02  1.80282649e-02
 -2.17692107e-02  5.94511069e-02 -2.96587795e-02  5.88571317e-02
  2.10652817e-02  8.61992501e-03 -2.63883900e-02  5.24525978e-02
  2.77719479e-02  5.14468141e-02 -5.38807251e-02 -4.70516458e-02
  9.43278894e-02 -4.70720716e-02 -6.00428022e-02 -1.64333396e-02
 -3.27844918e-02 -3.77360992e-02  1.17448634e-02  5.78644387e-02
 -5.52191362e-02  3.18796113e-02 -3.45363244e-02 -4.75304713e-03
  1.64483506e-02 -3.75102693e-03 -1.13815060e-02  8.14516842e-02
 -2.79909242e-02 -2.09436156e-02  2.99478658e-02 -1.00740723e-01
 -2.02389210e-02  9.48477257e-03  1.58819358e-03  1.90704607e-03
  3.82353505e-03 -6.05579466e-03  2.07291320e-02 -5.64721886e-33
 -4.24875654e-02 -9.34584008e-04 -4.62603383e-02 -6.86907070e-03
 -4.13044281e-02 -2.55071092e-02  1.71186812e-02 -5.74581660e-02
 -3.01043056e-02  5.41602820e-02 -3.86869423e-02  1.06126480e-02
  5.21301180e-02  3.79022285e-02 -1.17289424e-02  1.75973331e-03
 -7.48870149e-02 -7.08361790e-02 -6.56045005e-02  8.20116550e-02
 -2.62588020e-02  1.17862970e-01  7.01168329e-02 -3.46999094e-02
  3.32255885e-02  3.82145829e-02 -2.07743030e-02  1.11876667e-01
  3.20428349e-02 -1.69936046e-02 -7.21027981e-03 -2.28619226e-03
 -3.01462952e-02 -2.29381248e-02  3.09059937e-02 -4.35661450e-02
  2.08234303e-02  1.16580039e-01  1.78974103e-02 -1.09901361e-01
  1.64844200e-01 -6.90396875e-02 -5.62014543e-02 -1.00018969e-02
  4.38148826e-02 -2.34807860e-02 -7.84945786e-02  7.47892782e-02
 -1.67802498e-02  6.55211136e-02 -6.87673390e-02 -1.53139103e-02
  2.07799170e-02  1.06301755e-02  3.18731852e-02  3.83256003e-02
 -3.22766341e-02 -1.88543426e-03  6.80170730e-02  4.73192073e-02
  5.36352545e-02 -5.80751039e-02 -4.02046181e-03 -1.77679192e-02
  6.47336468e-02 -4.68627065e-02 -4.16302308e-02 -4.99193966e-02
  5.76553009e-02 -3.65981436e-03  3.43803577e-02  3.46815959e-02
 -5.02117202e-02 -6.99761882e-02  5.83886430e-02  7.86672905e-03
  5.48938662e-02 -4.49558310e-02 -2.56701577e-02  8.81364420e-02
 -3.10090706e-02 -7.17411702e-03 -3.50503027e-02  1.10265054e-02
  1.38596864e-03  3.23205930e-03 -7.34163970e-02 -1.02425907e-02
  7.49068800e-03 -4.10275385e-02 -6.84129894e-02  7.46540353e-02
 -3.82551104e-02 -7.57300183e-02 -2.30317023e-02 -5.19465928e-08
  3.09730880e-03 -5.01913764e-02  4.60990854e-02  7.27321953e-02
 -1.00907767e-02  7.84006808e-03 -1.33314162e-01 -1.31532103e-01
 -1.01287991e-01  8.19122046e-03 -5.26094474e-02  1.18390368e-02
  3.06750406e-02 -1.77451279e-02  3.01909409e-02 -1.17279686e-01
 -3.38670127e-02 -9.17470306e-02 -5.79926074e-02  2.63566151e-02
 -2.62435097e-02 -3.86828482e-02 -2.65976246e-02  1.05631538e-01
 -3.73837240e-02  2.33475324e-02  1.13688372e-01 -2.22789142e-02
 -3.04990895e-02  4.39843871e-02  1.47294914e-02  4.35247906e-02
 -2.16177967e-03  6.29737526e-02 -9.99701545e-02  7.32610151e-02
 -1.44723412e-02  1.97568629e-02 -2.99835987e-02  4.42856885e-02
  5.51144332e-02 -1.01742567e-02 -2.13110689e-02  2.94630677e-02
  5.04840799e-02  2.09629834e-02 -1.23189604e-02 -3.54937725e-02
  8.07310119e-02  6.85321093e-02 -7.92556629e-02 -2.91036684e-02
 -4.70293649e-02  3.59560386e-03 -3.63123938e-02 -4.17003818e-02
 -2.65856925e-02 -8.44010711e-02 -1.73743721e-02  4.54612076e-02
  5.99484853e-02  3.99348326e-02 -1.72033850e-02  3.99426855e-02]"
"/**
 * The Handler interface declares a method for building the chain of handlers.
 * It also declares a method for executing a request.
 */
class Handler {
 public:
  virtual Handler *SetNext(Handler *handler) = 0;
  virtual std::string Handle(std::string request) = 0;
};
/**
 * The default chaining behavior can be implemented inside a base handler class.
 */
class AbstractHandler : public Handler {
  /**
   * @var Handler
   */
 private:
  Handler *next_handler_;

 public:
  AbstractHandler() : next_handler_(nullptr) {
  }
  Handler *SetNext(Handler *handler) override {
    this->next_handler_ = handler;
    // Returning a handler from here will let us link handlers in a convenient
    // way like this:
    // $monkey->setNext($squirrel)->setNext($dog);
    return handler;
  }
  std::string Handle(std::string request) override {
    if (this->next_handler_) {
      return this->next_handler_->Handle(request);
    }

    return {};
  }
};
/**
 * All Concrete Handlers either handle a request or pass it to the next handler
 * in the chain.
 */
class MonkeyHandler : public AbstractHandler {
 public:
  std::string Handle(std::string request) override {
    if (request == ""Banana"") {
      return ""Monkey: I'll eat the "" + request + "".\n"";
    } else {
      return AbstractHandler::Handle(request);
    }
  }
};
class SquirrelHandler : public AbstractHandler {
 public:
  std::string Handle(std::string request) override {
    if (request == ""Nut"") {
      return ""Squirrel: I'll eat the "" + request + "".\n"";
    } else {
      return AbstractHandler::Handle(request);
    }
  }
};
class DogHandler : public AbstractHandler {
 public:
  std::string Handle(std::string request) override {
    if (request == ""MeatBall"") {
      return ""Dog: I'll eat the "" + request + "".\n"";
    } else {
      return AbstractHandler::Handle(request);
    }
  }
};
/**
 * The client code is usually suited to work with a single handler. In most
 * cases, it is not even aware that the handler is part of a chain.
 */
void ClientCode(Handler &handler) {
  std::vector<std::string> food = {""Nut"", ""Banana"", ""Cup of coffee""};
  for (const std::string &f : food) {
    std::cout << ""Client: Who wants a "" << f << ""?\n"";
    const std::string result = handler.Handle(f);
    if (!result.empty()) {
      std::cout << ""  "" << result;
    } else {
      std::cout << ""  "" << f << "" was left untouched.\n"";
    }
  }
}
/**
 * The other part of the client code constructs the actual chain.
 */
int main() {
  MonkeyHandler *monkey = new MonkeyHandler;
  SquirrelHandler *squirrel = new SquirrelHandler;
  DogHandler *dog = new DogHandler;
  monkey->SetNext(squirrel)->SetNext(dog);

  /**
   * The client should be able to send a request to any handler, not just the
   * first one in the chain.
   */
  std::cout << ""Chain: Monkey > Squirrel > Dog\n\n"";
  ClientCode(*monkey);
  std::cout << ""\n"";
  std::cout << ""Subchain: Squirrel > Dog\n\n"";
  ClientCode(*squirrel);

  delete monkey;
  delete squirrel;
  delete dog;

  return 0;
}",C++,Chain of Responsibility,Refactoring Guru,https://refactoring.guru/design-patterns/chain-of-responsibility/cpp/example#example-0,"[-6.38317317e-02  5.82779534e-02  3.76637653e-02  4.90625389e-04
 -7.66019300e-02  9.88258980e-03  2.40433533e-02 -1.73454303e-02
  7.58693460e-03 -1.89938974e-02  5.38714416e-02 -3.50425020e-02
 -1.57664362e-02 -3.17589678e-02  2.64494438e-02  1.16286650e-02
  2.43550539e-02  6.19711652e-02 -2.74930354e-02  2.03784145e-02
  4.52807322e-02  1.47665199e-03 -4.49138619e-02 -2.50804666e-02
 -1.41631767e-01 -1.87692996e-02 -4.78594415e-02 -9.67928395e-02
  4.16060397e-03 -1.58078352e-03  5.11438623e-02 -2.26754285e-02
 -1.10972546e-01  6.70447573e-02 -7.39339814e-02  8.70915949e-02
  2.83817984e-02 -1.09561503e-01 -4.35880944e-02  5.75636094e-03
 -4.73394021e-02  6.98526502e-02 -5.19519523e-02 -9.76513699e-03
 -8.22330453e-03  2.22905241e-02 -6.60930350e-02  3.81707251e-02
 -2.22756919e-02 -6.37375489e-02 -5.13062580e-03  3.76596972e-02
  4.63088714e-02  1.35111436e-02  3.42999473e-02 -9.60237999e-03
 -1.33154297e-03 -9.17196423e-02  5.59805136e-04  2.44347118e-02
  1.34201990e-02 -2.68611428e-03  1.89444292e-02 -2.69444082e-02
  3.49793844e-02 -3.75133418e-02 -2.91290544e-02  3.86566781e-02
  1.27167972e-02  1.83369452e-03 -4.80551086e-02  1.44509627e-02
 -8.90920535e-02  6.62550628e-02 -5.03675751e-02  3.27098742e-02
 -4.91581857e-02 -4.71018441e-03 -3.04620173e-02 -4.83870693e-02
 -1.05701352e-03  2.51442753e-02 -4.02663536e-02 -4.84206043e-02
  6.56173974e-02  9.25394669e-02 -4.07883674e-02 -4.68640812e-02
  3.47197689e-02  3.57269719e-02 -5.53248301e-02 -3.99203179e-03
 -3.40425968e-02  1.49926282e-02  7.36678913e-02  3.73274907e-02
  1.65495630e-02  1.24120631e-03 -2.92591453e-02  1.08272351e-01
 -1.86087545e-02  4.92243469e-02  1.88015122e-02 -6.70755133e-02
  3.40940356e-02  5.30721508e-02 -6.96630552e-02 -1.70447864e-02
 -5.93891740e-02 -5.36071323e-02 -6.11329228e-02  2.72823088e-02
 -2.56485250e-02 -2.29824930e-02 -4.37509231e-02  3.19795795e-02
  7.48257861e-02 -1.22819245e-02  3.89615893e-02  2.71572149e-03
  9.00533795e-02 -7.16770738e-02 -2.89195613e-03  8.34075585e-02
 -1.33734639e-03 -7.24795610e-02  6.97891740e-03  5.32956686e-33
 -1.33214286e-02 -9.59652215e-02 -7.36152381e-02  3.39493528e-02
  9.11401305e-03  4.31408919e-02  1.99218486e-02  5.04700616e-02
  3.25879967e-03 -2.53970418e-02 -3.27710807e-03 -8.76785591e-02
  3.27695534e-03  3.31957862e-02  6.27561137e-02 -6.17442653e-02
  9.85539183e-02  1.97810656e-03  8.24379250e-02 -4.67090309e-02
  2.84401551e-02  2.50844918e-02 -3.28179002e-02  2.21588053e-02
  1.25302756e-02  2.31161248e-02 -4.73590121e-02 -7.20343962e-02
 -4.55324911e-03 -2.99889296e-02  9.10934582e-02 -7.63775930e-02
 -2.84616593e-02  4.17986251e-02  1.69114899e-02  4.75218222e-02
  3.41552272e-02 -2.07228418e-02 -1.04494289e-01 -1.10732630e-01
 -7.59765739e-03 -4.54574749e-02  7.36219401e-04  3.70806269e-02
 -5.41829355e-02 -3.17434222e-02 -7.88412094e-02 -6.08423119e-03
 -6.48924485e-02 -7.61430860e-02  7.52768666e-02  1.02377914e-01
  9.53040197e-02 -2.32997984e-02  5.23586245e-03 -3.64971757e-02
 -3.42422538e-02  1.32547049e-02 -7.71600902e-02  1.05435483e-01
 -1.66314878e-02  5.47944047e-02 -4.24185060e-02  6.26833066e-02
 -3.61018931e-03  1.06220506e-02 -2.82327551e-02 -2.65328996e-02
  1.05542965e-01 -8.10067076e-03 -7.23753422e-02  2.63027586e-02
  1.72777474e-02 -9.57740191e-03  7.94699136e-03  7.71360646e-04
 -5.26944399e-02 -5.81235960e-02  2.46051569e-02 -5.47580943e-02
 -8.07754137e-03  1.03228074e-02 -2.76606064e-03  1.04011685e-01
 -3.49634774e-02 -8.27197172e-03  2.85959058e-02 -7.65118524e-02
  6.58481792e-02  3.68770361e-02 -3.48187722e-02 -2.79295668e-02
  4.96204011e-02 -1.20089557e-02  5.57377264e-02 -7.32952980e-33
  2.62625515e-03  3.17168757e-02 -1.58841666e-02 -1.12839779e-02
 -5.94303273e-02  5.83121926e-02 -1.36081688e-03 -5.45462072e-02
 -8.82401317e-02 -3.64069939e-02 -9.45308506e-02  6.05721585e-02
  5.34033999e-02  4.98680063e-02  6.45415485e-02  7.49717057e-02
 -7.67582208e-02 -2.17009597e-02 -3.21657583e-02  3.23628783e-02
 -5.18888980e-02  8.10016170e-02  5.62525988e-02  6.83688093e-03
  4.40238342e-02  5.24200276e-02 -1.36846695e-02  9.42502394e-02
 -9.89776663e-03 -4.83038761e-02  1.76446587e-02 -5.38637415e-02
  3.09060737e-02 -2.31884308e-02  5.50394505e-02 -3.18539143e-02
  3.09354626e-02  1.32433325e-01  3.83169129e-02  2.74949428e-02
  1.44473001e-01 -4.64630462e-02 -4.18042466e-02  4.35338169e-02
  7.93568417e-03 -2.55121626e-02 -2.35471502e-02 -1.01200575e-02
 -1.82743110e-02  2.33291183e-02 -4.85381670e-02 -5.88729233e-02
 -5.71297929e-02 -8.22803527e-02  2.62049120e-02  3.08194645e-02
  4.70953546e-02 -3.89502160e-02  3.86041403e-02 -2.57039466e-03
  3.94558860e-03 -1.84936263e-02 -1.35569163e-02  7.54177123e-02
  8.87765288e-02 -1.22575283e-01 -6.03850279e-03 -1.23114109e-01
  3.76020297e-02 -1.21779405e-02 -2.05226969e-02  1.05374679e-01
 -3.59775461e-02 -4.74695638e-02  9.83917117e-02  1.68042202e-02
  7.50738522e-03 -6.35737181e-02 -4.40141372e-03  5.74471988e-02
 -7.70430416e-02 -3.78306992e-02  4.29312773e-02  6.76247925e-02
 -9.57365520e-03 -2.75012273e-02  1.54800303e-02  2.78122239e-02
  2.61430326e-03 -8.99900310e-03  2.15068702e-02  5.86010031e-02
 -1.70095228e-02  1.55153237e-02 -1.53907575e-02 -5.10795068e-08
  6.05691830e-03 -1.04228668e-01 -3.73718925e-02  3.17216851e-02
  5.95275462e-02  2.65455283e-02 -4.69804965e-02 -1.06677942e-01
 -8.28678980e-02 -3.59805189e-02 -3.66811156e-02  7.74187073e-02
 -1.39974225e-02 -5.69762327e-02  3.32143642e-02 -6.82758093e-02
 -7.46018300e-03 -9.31444094e-02 -6.96776211e-02  6.39268905e-02
 -2.18054131e-02  4.30416092e-02 -3.65547948e-02  7.18976781e-02
 -3.80066410e-02 -8.15554559e-02  1.06759712e-01  7.52546266e-02
  5.51627530e-03  1.51022142e-02  6.81248009e-02  6.39820173e-02
 -3.61103341e-02  5.39849252e-02 -3.79841253e-02  5.58762252e-02
 -5.09160869e-02  1.52596962e-02  1.43967699e-02  8.89033675e-02
  2.02704277e-02  4.89718020e-02 -5.40839471e-02  2.17277501e-02
  6.54353574e-02 -1.74422450e-02 -3.75101417e-02 -7.76927099e-02
  4.55882326e-02  5.99861927e-02 -1.26247838e-01  2.98954118e-02
 -1.49880443e-03  5.97039536e-02 -3.87806408e-02 -4.59096991e-02
  8.84573441e-03 -6.82955235e-02 -6.99095149e-03  3.07418648e-02
  1.34940809e-02 -1.33015811e-02  2.97847446e-02  2.96714343e-02]"
"/**
 * Iterator Design Pattern
 *
 * Intent: Lets you traverse elements of a collection without exposing its
 * underlying representation (list, stack, tree, etc.).
 */

#include <iostream>
#include <string>
#include <vector>

/**
 * C++ has its own implementation of iterator that works with a different
 * generics containers defined by the standard library.
 */

template <typename T, typename U>
class Iterator {
 public:
  typedef typename std::vector<T>::iterator iter_type;
  Iterator(U *p_data, bool reverse = false) : m_p_data_(p_data) {
    m_it_ = m_p_data_->m_data_.begin();
  }

  void First() {
    m_it_ = m_p_data_->m_data_.begin();
  }

  void Next() {
    m_it_++;
  }

  bool IsDone() {
    return (m_it_ == m_p_data_->m_data_.end());
  }

  iter_type Current() {
    return m_it_;
  }

 private:
  U *m_p_data_;
  iter_type m_it_;
};

/**
 * Generic Collections/Containers provides one or several methods for retrieving
 * fresh iterator instances, compatible with the collection class.
 */

template <class T>
class Container {
  friend class Iterator<T, Container>;

 public:
  void Add(T a) {
    m_data_.push_back(a);
  }

  Iterator<T, Container> *CreateIterator() {
    return new Iterator<T, Container>(this);
  }

 private:
  std::vector<T> m_data_;
};

class Data {
 public:
  Data(int a = 0) : m_data_(a) {}

  void set_data(int a) {
    m_data_ = a;
  }

  int data() {
    return m_data_;
  }

 private:
  int m_data_;
};

/**
 * The client code may or may not know about the Concrete Iterator or Collection
 * classes, for this implementation the container is generic so you can used
 * with an int or with a custom class.
 */
void ClientCode() {
  std::cout << ""________________Iterator with int______________________________________"" << std::endl;
  Container<int> cont;

  for (int i = 0; i < 10; i++) {
    cont.Add(i);
  }

  Iterator<int, Container<int>> *it = cont.CreateIterator();
  for (it->First(); !it->IsDone(); it->Next()) {
    std::cout << *it->Current() << std::endl;
  }

  Container<Data> cont2;
  Data a(100), b(1000), c(10000);
  cont2.Add(a);
  cont2.Add(b);
  cont2.Add(c);

  std::cout << ""________________Iterator with custom Class______________________________"" << std::endl;
  Iterator<Data, Container<Data>> *it2 = cont2.CreateIterator();
  for (it2->First(); !it2->IsDone(); it2->Next()) {
    std::cout << it2->Current()->data() << std::endl;
  }
  delete it;
  delete it2;
}

int main() {
  ClientCode();
  return 0;
}",C++,Iterator,Refactoring Guru,https://refactoring.guru/design-patterns/iterator/cpp/example#example-0,"[-2.98216864e-02  7.35420361e-02 -2.84856316e-02 -6.59724399e-02
 -7.82951415e-02 -2.19692849e-02  7.35155167e-03  5.50879389e-02
 -3.53061408e-02 -2.53294036e-02  5.42101599e-02 -3.06748529e-03
  1.04853436e-02 -6.82300031e-02 -7.38986954e-03  3.00655724e-03
 -3.11095398e-02  7.00776428e-02  1.28573384e-02  2.66432296e-02
  2.53099333e-02  4.33818549e-02 -7.56801888e-02  4.98899445e-02
 -4.91495840e-02  4.27815318e-02 -2.38043945e-02 -8.19022283e-02
  8.86180904e-03  2.36698557e-02  5.23118824e-02  5.36577497e-03
 -7.33423829e-02  1.13426909e-01 -4.57401611e-02  4.01015133e-02
  1.00155277e-02 -6.12972006e-02 -7.24058375e-02 -3.05913831e-03
 -6.19342923e-02  7.50708878e-02 -1.00269519e-01 -3.82268392e-02
  1.64784156e-02 -7.70435482e-03 -3.17833386e-02 -2.71541122e-02
 -2.30791755e-02 -9.45860893e-02 -4.00865823e-02  9.47396457e-02
 -9.72487591e-03 -4.08420898e-02  2.60929652e-02 -4.25450280e-02
  2.56003570e-02  1.36032666e-03  1.11121563e-02  5.30536063e-02
  2.29092687e-03  3.13522555e-02  1.74275264e-02 -1.59210451e-02
  6.03625365e-02 -1.86416432e-02  1.37963705e-02  7.06158057e-02
  6.48138970e-02 -6.39404450e-03 -6.73210472e-02  2.60960720e-02
 -3.40555049e-02  3.76419276e-02 -1.72434077e-02  2.07360014e-02
 -1.69476785e-03  4.72169966e-02 -7.24738613e-02 -4.11880836e-02
 -3.15763801e-02  7.25623146e-02 -1.99957360e-02 -1.05686933e-01
  4.10651490e-02  1.33301727e-02 -4.10705842e-02  1.61630902e-02
  3.61526981e-02  2.06377972e-02 -2.52494365e-02  7.48878391e-03
 -9.63536650e-02  3.96716632e-02  9.22258645e-02  7.58071255e-04
  8.33146274e-02 -4.10654806e-02  3.70615423e-02  5.80861457e-02
 -1.60301998e-02  3.69595625e-02 -5.40303532e-03 -2.16926523e-02
 -2.17048004e-02 -4.32470925e-02 -3.69072035e-02 -2.39007398e-02
 -5.15727215e-02 -8.37122872e-02 -3.74510325e-02 -1.94100011e-02
 -3.29427235e-02 -4.43297774e-02  1.37412017e-02 -3.58316191e-02
 -4.10054401e-02 -7.39129900e-04  2.53194645e-02  2.10031699e-02
  1.51624838e-02 -1.09511673e-01  1.09802093e-02  6.80338666e-02
 -2.49299463e-02 -6.42042607e-02 -6.84403479e-02  2.82152495e-33
 -8.85434821e-03 -9.39677581e-02 -5.78864291e-02  6.93143457e-02
 -1.94422882e-02  1.60105638e-02  6.85608536e-02  5.64146228e-02
 -6.25804905e-03 -8.69254523e-04  4.38069813e-02 -5.66624552e-02
 -3.02370097e-02  1.23432577e-01  4.33259420e-02 -5.61821572e-02
  7.51317963e-02 -3.70738702e-03  1.78360548e-02 -1.08561203e-01
  9.83722210e-02  5.21882698e-02 -2.60245148e-02 -1.50881121e-02
  3.01610515e-03  3.25626582e-02 -2.14497782e-02 -3.27767953e-02
 -6.89356178e-02 -2.94227595e-03  5.20070046e-02 -2.93095410e-02
  3.04330569e-02  2.85629611e-02  3.06605007e-02  2.29612272e-02
  3.83112803e-02 -3.14568169e-02  1.24912383e-02 -1.30262613e-01
  3.13629285e-02 -2.37148460e-02  5.09408191e-02  4.30717506e-02
  2.04469543e-03 -3.01407911e-02 -9.88457054e-02 -2.78885383e-03
 -7.27329999e-02 -8.84011462e-02  4.91347201e-02  6.48138076e-02
 -8.62570852e-02  1.78507660e-02 -2.09231395e-02 -5.57700032e-03
 -3.40510570e-02  5.01813367e-02  2.25233822e-03  1.55555934e-01
 -1.05890982e-01  8.59250948e-02 -3.81937362e-02  5.03500625e-02
 -3.02823931e-02 -8.36709421e-03 -9.69726294e-02 -1.90872382e-02
  9.71844047e-02  4.91866190e-03 -3.10823377e-02  5.06879613e-02
 -9.27579869e-03 -1.16923889e-04  1.39885060e-02  2.08990816e-02
 -3.10393143e-02 -6.66421577e-02 -1.04203917e-01 -1.13241717e-01
 -3.49887349e-02  3.49997655e-02  2.42318735e-02  5.98452650e-02
 -1.44166574e-02 -4.66947928e-02  2.97219655e-03 -2.70427074e-02
  4.09763306e-02  3.36399265e-02 -7.36755952e-02 -1.67785622e-02
  7.01778382e-02 -7.82755762e-02  1.77272074e-02 -6.37264140e-33
  1.81005355e-02  6.05610870e-02 -1.69331226e-02  3.65322689e-03
  6.23214524e-03  6.47465559e-03  1.09572513e-02 -6.02827184e-02
 -9.48407352e-02 -3.51123116e-03 -7.78609887e-02  1.08467210e-02
  1.06840678e-01  1.53120328e-02  5.80008887e-02  5.01647517e-02
 -3.48887667e-02 -8.65154564e-02 -3.39219570e-02  6.29170537e-02
 -6.88629374e-02  2.72578001e-02  1.23870939e-01 -4.24626209e-02
 -6.89576438e-04  1.91146769e-02 -5.25244847e-02  7.62363002e-02
  6.45671412e-02 -5.61086163e-02  4.82608899e-02 -1.56480484e-02
  5.26922420e-02 -3.81675772e-02  1.71648487e-02 -4.29260731e-02
  2.56028064e-02  1.89396236e-02  2.96895094e-02  6.85483404e-03
  1.25973418e-01 -3.67720127e-02 -1.60228144e-02 -2.06033252e-02
 -8.43723118e-03 -3.81765701e-02 -3.00250147e-02  2.72530075e-02
 -3.23457201e-03 -9.25940368e-03  2.26185354e-03 -5.78393601e-02
 -3.90196666e-02  1.32093159e-02  4.13103513e-02  5.64853922e-02
  6.44654706e-02 -3.24049331e-02  5.56905717e-02 -2.49664474e-04
  4.48820926e-02 -9.62869301e-02  4.95444536e-02  3.63369361e-02
  1.02337502e-01 -6.68741688e-02 -2.66208127e-02 -1.11848123e-01
 -4.77147773e-02  4.72467281e-02  2.68081445e-02  8.18711743e-02
 -6.60914481e-02 -3.65449004e-02  3.09767132e-03 -2.34865546e-02
  4.20194119e-03 -9.70020052e-03  3.81849185e-02 -1.85779892e-02
 -1.06679820e-01 -1.13848858e-02  1.45056117e-02 -2.46680435e-02
  2.79626399e-02 -2.02679094e-02  4.47926335e-02 -8.18403158e-03
 -5.94920702e-02 -7.45212361e-02  3.41043621e-03  5.78809790e-02
 -3.13834772e-02 -1.94041841e-02  1.38319749e-02 -5.46545387e-08
 -3.69412713e-02 -1.73053637e-01  1.63264722e-02  7.38279372e-02
  7.39010125e-02 -7.79551789e-02  1.36816147e-04  2.16877349e-02
 -3.06223296e-02 -7.96742216e-02  4.57900111e-03 -1.31816221e-02
  5.28076990e-03 -5.56821413e-02  8.84025469e-02 -4.90206555e-02
  1.73565261e-02 -1.21717609e-01 -5.06879464e-02  2.25442294e-02
 -5.28597683e-02 -1.59206074e-02 -2.04794332e-02  4.27645221e-02
 -1.27163185e-02 -2.57862452e-02  8.20096359e-02  6.34905770e-02
  1.02182940e-01  2.86446568e-02  1.96703617e-02  4.11675759e-02
  9.00572352e-03  3.66220251e-02  4.64485623e-02  4.43008095e-02
 -1.18227480e-02  4.50004712e-02 -3.65624167e-02  4.14802134e-02
  4.11761925e-03 -1.32005857e-02 -2.47128145e-03  4.43774834e-02
  8.69102404e-02 -3.48572992e-02 -3.29102054e-02 -4.14814148e-03
  4.91747819e-02  7.40781352e-02 -1.09914541e-01  6.62381947e-02
  3.40982191e-02  2.83270329e-02 -3.13103870e-02 -2.88865753e-02
 -3.52140963e-02 -6.64512888e-02 -5.80510648e-04  1.02330726e-02
 -8.33417103e-03 -2.72832885e-02 -9.29762982e-03  7.75576904e-02]"
"/**
 * The Memento interface provides a way to retrieve the memento's metadata, such
 * as creation date or name. However, it doesn't expose the Originator's state.
 */
class Memento {
 public:
  virtual ~Memento() {}
  virtual std::string GetName() const = 0;
  virtual std::string date() const = 0;
  virtual std::string state() const = 0;
};

/**
 * The Concrete Memento contains the infrastructure for storing the Originator's
 * state.
 */
class ConcreteMemento : public Memento {
 private:
  std::string state_;
  std::string date_;

 public:
  ConcreteMemento(std::string state) : state_(state) {
    this->state_ = state;
    std::time_t now = std::time(0);
    this->date_ = std::ctime(&now);
  }
  /**
   * The Originator uses this method when restoring its state.
   */
  std::string state() const override {
    return this->state_;
  }
  /**
   * The rest of the methods are used by the Caretaker to display metadata.
   */
  std::string GetName() const override {
    return this->date_ + "" / ("" + this->state_.substr(0, 9) + ""...)"";
  }
  std::string date() const override {
    return this->date_;
  }
};

/**
 * The Originator holds some important state that may change over time. It also
 * defines a method for saving the state inside a memento and another method for
 * restoring the state from it.
 */
class Originator {
  /**
   * @var string For the sake of simplicity, the originator's state is stored
   * inside a single variable.
   */
 private:
  std::string state_;

  std::string GenerateRandomString(int length = 10) {
    const char alphanum[] =
        ""0123456789""
        ""ABCDEFGHIJKLMNOPQRSTUVWXYZ""
        ""abcdefghijklmnopqrstuvwxyz"";
    int stringLength = sizeof(alphanum) - 1;

    std::string random_string;
    for (int i = 0; i < length; i++) {
      random_string += alphanum[std::rand() % stringLength];
    }
    return random_string;
  }

 public:
  Originator(std::string state) : state_(state) {
    std::cout << ""Originator: My initial state is: "" << this->state_ << ""\n"";
  }
  /**
   * The Originator's business logic may affect its internal state. Therefore,
   * the client should backup the state before launching methods of the business
   * logic via the save() method.
   */
  void DoSomething() {
    std::cout << ""Originator: I'm doing something important.\n"";
    this->state_ = this->GenerateRandomString(30);
    std::cout << ""Originator: and my state has changed to: "" << this->state_ << ""\n"";
  }

  /**
   * Saves the current state inside a memento.
   */
  Memento *Save() {
    return new ConcreteMemento(this->state_);
  }
  /**
   * Restores the Originator's state from a memento object.
   */
  void Restore(Memento *memento) {
    this->state_ = memento->state();
    std::cout << ""Originator: My state has changed to: "" << this->state_ << ""\n"";
  }
};

/**
 * The Caretaker doesn't depend on the Concrete Memento class. Therefore, it
 * doesn't have access to the originator's state, stored inside the memento. It
 * works with all mementos via the base Memento interface.
 */
class Caretaker {
  /**
   * @var Memento[]
   */
 private:
  std::vector<Memento *> mementos_;

  /**
   * @var Originator
   */
  Originator *originator_;

 public:
     Caretaker(Originator* originator) : originator_(originator) {
     }

     ~Caretaker() {
         for (auto m : mementos_) delete m;
     }

  void Backup() {
    std::cout << ""\nCaretaker: Saving Originator's state...\n"";
    this->mementos_.push_back(this->originator_->Save());
  }
  void Undo() {
    if (!this->mementos_.size()) {
      return;
    }
    Memento *memento = this->mementos_.back();
    this->mementos_.pop_back();
    std::cout << ""Caretaker: Restoring state to: "" << memento->GetName() << ""\n"";
    try {
      this->originator_->Restore(memento);
    } catch (...) {
      this->Undo();
    }
  }
  void ShowHistory() const {
    std::cout << ""Caretaker: Here's the list of mementos:\n"";
    for (Memento *memento : this->mementos_) {
      std::cout << memento->GetName() << ""\n"";
    }
  }
};
/**
 * Client code.
 */

void ClientCode() {
  Originator *originator = new Originator(""Super-duper-super-puper-super."");
  Caretaker *caretaker = new Caretaker(originator);
  caretaker->Backup();
  originator->DoSomething();
  caretaker->Backup();
  originator->DoSomething();
  caretaker->Backup();
  originator->DoSomething();
  std::cout << ""\n"";
  caretaker->ShowHistory();
  std::cout << ""\nClient: Now, let's rollback!\n\n"";
  caretaker->Undo();
  std::cout << ""\nClient: Once more!\n\n"";
  caretaker->Undo();

  delete originator;
  delete caretaker;
}

int main() {
  std::srand(static_cast<unsigned int>(std::time(NULL)));
  ClientCode();
  return 0;
}",C++,Memento,Refactoring Guru,https://refactoring.guru/design-patterns/memento/cpp/example#example-0,"[-5.10017984e-02  9.08323377e-02 -4.50830571e-02 -5.08960076e-02
 -6.83737248e-02  1.70952268e-02  6.26169564e-03  3.05675715e-02
  1.72612201e-02 -1.10582914e-02  7.64339492e-02 -4.53902669e-02
  3.05100833e-03 -1.02744065e-01 -6.85205758e-02 -1.38617279e-02
 -8.05625618e-02  6.34075925e-02 -4.61568683e-02  1.82562508e-02
  2.08600853e-02 -3.05330940e-02 -9.54001769e-02 -4.33334475e-03
  1.59191415e-02  4.19373214e-02  5.42960083e-03 -1.85789205e-02
  5.31233698e-02 -1.22628575e-02  4.16567661e-02  8.88641458e-03
 -1.43066598e-02  3.14794704e-02 -2.33818926e-02  1.20252714e-01
 -6.20925277e-02 -6.32639900e-02 -7.02860579e-02 -5.10013616e-03
 -5.77153414e-02  4.84187528e-02 -7.76573345e-02 -2.52780188e-02
  1.83477104e-02  2.51405817e-02 -5.95046505e-02  1.14639271e-02
  8.61253496e-03 -5.87283969e-02 -1.03202881e-02  8.77418071e-02
  7.19873933e-03  1.84524916e-02  2.66266093e-02  4.36008461e-02
  4.88751717e-02 -3.21644098e-02 -4.96272147e-02  2.69057974e-02
 -2.09184624e-02  6.36586696e-02  3.07551101e-02 -5.05241118e-02
  5.29357716e-02 -1.06600961e-02  1.43702561e-02 -1.28570450e-02
  2.88992599e-02 -1.48016615e-02 -7.57811815e-02  1.71713289e-02
 -3.98752056e-02  8.10942277e-02 -5.61769791e-02  1.71381868e-02
 -6.72554821e-02 -2.34492440e-02 -4.00772877e-02 -6.96262419e-02
  2.60532834e-02  4.88642789e-03 -8.61436478e-04 -2.39047520e-02
  7.14414716e-02  6.96938634e-02 -2.34147627e-02 -3.81387547e-02
  8.03224593e-02  6.59574792e-02 -2.67284699e-02 -4.44754809e-02
  4.43733716e-03 -1.08130267e-02  2.21011471e-02  1.32570844e-02
  6.12987354e-02  1.07617015e-02 -1.36339292e-02  1.12068586e-01
 -3.91900390e-02  5.82248904e-02  9.05075576e-03  3.05597093e-02
 -6.09775968e-02 -1.31196680e-03 -4.25987393e-02 -1.93716120e-02
 -4.48789150e-02 -4.07032296e-02 -4.57997397e-02  4.63845618e-02
 -2.02953219e-02  8.42087157e-03  4.16552424e-02  9.28610284e-03
  7.93422200e-03  1.69969872e-02  1.78824402e-02  2.79322602e-02
  4.96668816e-02 -6.88312724e-02 -4.34185863e-02  7.73524120e-02
 -8.20222422e-02 -5.48758619e-02  6.89650699e-02  4.95858158e-33
 -1.93074029e-05 -8.11580494e-02 -6.79703802e-02  4.90558334e-02
 -2.52567139e-02  9.73753333e-02 -5.70282899e-03  7.86709636e-02
 -1.12763084e-02 -6.40595779e-02  5.65416366e-02 -9.22327191e-02
  9.82688740e-03  3.75398435e-02  3.62061597e-02 -1.03199959e-01
  6.54019266e-02  3.08523439e-02  5.52966781e-02 -6.68481141e-02
  8.32545012e-02  7.71978498e-02 -3.99912372e-02 -3.29004638e-02
  7.34583708e-03  3.01818196e-02  1.78541045e-03  7.13455770e-03
 -3.20203677e-02 -2.04388388e-02  4.70500737e-02 -4.04530242e-02
 -2.57316418e-02  1.62540711e-02  7.15883151e-02  4.26679216e-02
  5.93034178e-03 -5.22990897e-02 -8.61742347e-02 -1.22189417e-01
 -4.48035114e-02 -5.52743115e-02 -5.55996411e-03 -2.65121441e-02
 -1.74946077e-02 -7.78443292e-02 -2.10338738e-02 -1.97088913e-04
 -5.03931567e-02 -6.18206635e-02  4.07065377e-02  1.32967487e-01
 -2.51255576e-02 -6.58653677e-02 -2.92215999e-02  4.50621918e-03
  5.31160831e-03  3.63466388e-04 -7.14864656e-02  9.02608037e-02
  6.63886033e-03  9.54594612e-02 -3.77958687e-03  6.90037236e-02
 -1.82950567e-03  2.44081896e-02 -3.10157835e-02 -2.39170305e-02
  1.28504425e-01  1.77975930e-02 -1.02032177e-01  2.57869717e-03
  4.76617664e-02 -9.22300573e-03 -3.24196443e-02  2.15668231e-02
 -6.27063029e-03 -2.92923003e-02 -8.74659792e-02 -1.07209638e-01
 -2.33382490e-02 -1.16811441e-02 -3.01397163e-02  4.35784087e-02
  6.88845813e-02 -8.12671632e-02  2.77032424e-02 -9.43518654e-02
  2.37099715e-02  6.91168457e-02  8.37771408e-03 -7.52398074e-02
  5.85792512e-02  2.02935524e-02 -1.63098648e-02 -8.04288002e-33
  3.36193480e-02 -4.46167812e-02  1.93781629e-02 -2.44056024e-02
 -3.32758203e-02 -2.42982227e-02 -4.53913473e-02  1.83570087e-02
 -1.37029245e-01 -5.67175671e-02 -5.41080013e-02  6.51193634e-02
  7.72834122e-02  2.81105973e-02  7.31487200e-02  7.57800117e-02
 -1.65958833e-02 -2.95175537e-02 -8.88215899e-02  6.83410615e-02
 -2.58195326e-02  6.47402331e-02  5.52023500e-02  1.20988023e-02
 -2.12965533e-03  3.53368297e-02  3.13424435e-03  9.46039781e-02
  3.33473943e-02 -4.72538248e-02  3.67125347e-02  3.12243676e-04
 -5.13697192e-02 -8.45472969e-04  2.17662398e-02 -4.29010615e-02
 -1.36075513e-02  2.17840876e-02 -1.98718086e-02  2.33193468e-02
  1.24277636e-01  1.66905075e-02 -3.13149430e-02  9.86551587e-03
  5.82812994e-04  1.94621962e-02 -5.04852347e-02  3.33712399e-02
  6.38992786e-02  1.08661996e-02 -1.44554190e-02 -1.04822956e-01
 -5.19789569e-02 -7.30828494e-02  4.03931327e-02  5.74384779e-02
  7.22164884e-02 -3.63736339e-02  3.62940021e-02  1.88925918e-02
 -3.82908471e-02 -4.05537374e-02 -3.51073476e-03  2.40270346e-02
  5.95696941e-02 -8.18569064e-02 -6.16737222e-03 -1.02663804e-02
 -2.34663486e-02 -3.58790606e-02  6.40529320e-02  1.06437325e-01
 -4.80153859e-02 -5.45730777e-02  5.48590943e-02 -1.15462625e-02
 -1.52740357e-02 -3.09793148e-02 -1.14212837e-03 -3.01562957e-02
 -5.81987761e-02 -2.13909950e-02  6.47055358e-03  7.83894584e-03
 -5.41060530e-02 -2.86736768e-02 -5.00480868e-02 -8.85332283e-03
  7.70839024e-03 -5.85640222e-02 -3.18524055e-02  1.09751754e-01
 -1.75965242e-02 -1.32221021e-02 -2.75054723e-02 -5.61221718e-08
 -4.13230062e-02 -1.10227644e-01  6.09776899e-02  4.92514186e-02
  1.01919606e-01 -1.18538119e-01 -1.90826096e-02 -7.57834241e-02
 -7.57439807e-02 -7.75795206e-02  2.80023683e-02 -8.33303668e-03
 -2.44331751e-02 -1.17898270e-01  5.69132306e-02 -8.61393809e-02
 -2.53890920e-02 -7.96449706e-02 -4.57359031e-02  1.69033988e-03
 -2.32468024e-02 -3.06506101e-02 -7.15200696e-03  4.90558520e-02
 -1.94576737e-02 -5.53338416e-02  9.32701528e-02  1.01659857e-01
  4.78434078e-02  4.70982082e-02  1.13600940e-01  6.69865757e-02
  6.62355348e-02  3.39617729e-02 -3.48326713e-02  3.66345122e-02
  3.19555923e-02  2.15799268e-02  1.68235917e-02  5.45684434e-02
  6.68722391e-02  2.14913860e-02 -2.84112524e-02  4.81629781e-02
  1.31357377e-02 -1.60006545e-02 -7.18135759e-03 -3.98897156e-02
  4.91191298e-02 -2.71935388e-02 -1.21720083e-01 -1.51275890e-02
  5.56847372e-04  5.04453443e-02  4.15412616e-03 -3.28105278e-02
  2.62688398e-02 -3.95057872e-02  1.29738161e-02  8.60055313e-02
 -1.49863784e-03  8.47127754e-03  2.60510948e-02  1.47394361e-02]"
"#include <iostream>
#include <typeinfo>
/**
 * The base State class declares methods that all Concrete State should
 * implement and also provides a backreference to the Context object, associated
 * with the State. This backreference can be used by States to transition the
 * Context to another State.
 */

class Context;

class State {
  /**
   * @var Context
   */
 protected:
  Context *context_;

 public:
  virtual ~State() {
  }

  void set_context(Context *context) {
    this->context_ = context;
  }

  virtual void Handle1() = 0;
  virtual void Handle2() = 0;
};

/**
 * The Context defines the interface of interest to clients. It also maintains a
 * reference to an instance of a State subclass, which represents the current
 * state of the Context.
 */
class Context {
  /**
   * @var State A reference to the current state of the Context.
   */
 private:
  State *state_;

 public:
  Context(State *state) : state_(nullptr) {
    this->TransitionTo(state);
  }
  ~Context() {
    delete state_;
  }
  /**
   * The Context allows changing the State object at runtime.
   */
  void TransitionTo(State *state) {
    std::cout << ""Context: Transition to "" << typeid(*state).name() << "".\n"";
    if (this->state_ != nullptr)
      delete this->state_;
    this->state_ = state;
    this->state_->set_context(this);
  }
  /**
   * The Context delegates part of its behavior to the current State object.
   */
  void Request1() {
    this->state_->Handle1();
  }
  void Request2() {
    this->state_->Handle2();
  }
};

/**
 * Concrete States implement various behaviors, associated with a state of the
 * Context.
 */

class ConcreteStateA : public State {
 public:
  void Handle1() override;

  void Handle2() override {
    std::cout << ""ConcreteStateA handles request2.\n"";
  }
};

class ConcreteStateB : public State {
 public:
  void Handle1() override {
    std::cout << ""ConcreteStateB handles request1.\n"";
  }
  void Handle2() override {
    std::cout << ""ConcreteStateB handles request2.\n"";
    std::cout << ""ConcreteStateB wants to change the state of the context.\n"";
    this->context_->TransitionTo(new ConcreteStateA);
  }
};

void ConcreteStateA::Handle1() {
  {
    std::cout << ""ConcreteStateA handles request1.\n"";
    std::cout << ""ConcreteStateA wants to change the state of the context.\n"";

    this->context_->TransitionTo(new ConcreteStateB);
  }
}

/**
 * The client code.
 */
void ClientCode() {
  Context *context = new Context(new ConcreteStateA);
  context->Request1();
  context->Request2();
  delete context;
}

int main() {
  ClientCode();
  return 0;
}",C++,State,Refactoring Guru,https://refactoring.guru/design-patterns/state/cpp/example#example-0,"[-6.99451789e-02  2.75813919e-02 -7.41037214e-03 -4.23491299e-02
 -7.90010765e-02  6.49701897e-03  5.33791706e-02  2.86036693e-02
  6.42230036e-03 -5.20969965e-02  1.58320647e-02 -8.30682144e-02
 -1.52015954e-03 -6.34899512e-02  3.97881716e-02  3.03052366e-02
 -2.61535663e-02  4.88029793e-02 -2.22067032e-02  8.99159834e-02
  8.73203501e-02 -1.36549976e-02 -1.00856826e-01 -2.74603944e-02
 -5.06848581e-02  5.96656129e-02 -4.55297567e-02 -9.48931798e-02
  5.70251197e-02  6.87508052e-03  3.38329859e-02  3.32628228e-02
 -1.00777239e-01  2.54630521e-02 -3.53440642e-02  1.00573368e-01
  3.88281816e-03 -5.19304611e-02 -7.46850669e-02  8.03715456e-03
 -4.96558473e-02  5.92246987e-02 -3.58430743e-02 -8.53442959e-03
 -2.61918548e-03  1.72253083e-02 -7.99455680e-03  3.25301336e-03
 -4.75503877e-02 -8.08465853e-02 -3.43007073e-02  3.25166360e-02
 -6.71732763e-04  2.92558409e-02 -3.55985976e-04  4.19634581e-02
  8.31902325e-02  6.37566149e-02  1.50413262e-02  9.81581025e-03
 -3.28968726e-02  5.63248731e-02  1.70684792e-02 -6.22118264e-03
  8.16380531e-02  8.50183703e-03  7.89282285e-03 -5.35114408e-02
  3.41340005e-02 -2.93083712e-02 -7.29006231e-02  3.16477008e-02
 -1.46862715e-02  3.40317748e-02 -3.70790847e-02 -2.95664798e-02
 -7.22433627e-02  4.16425429e-02 -3.93879600e-02 -1.22894250e-01
  6.22774698e-02  4.81639430e-02 -3.40693514e-03 -5.92232496e-02
  7.48251006e-02  6.53154254e-02 -5.84060214e-02 -1.09641947e-01
  6.69260621e-02  6.54592738e-02 -1.19698150e-02 -9.33155604e-03
 -5.92475338e-03  4.41954620e-02  5.89221418e-02  4.50932048e-03
  3.20715234e-02 -3.26265022e-02  3.68034020e-02  1.35273740e-01
 -4.40235101e-02  5.31140380e-02 -1.54222297e-02  1.72600336e-02
 -1.84064377e-02 -2.97886640e-04 -8.30950961e-02 -2.18081865e-02
 -9.06589106e-02 -3.87261584e-02 -1.41692590e-02 -4.59798519e-03
 -1.92553252e-02 -5.90937631e-03 -6.74274191e-03  2.37987041e-02
  6.57989532e-02  4.25519655e-03  2.39944533e-02  3.55058089e-02
  2.24745963e-02 -9.23512205e-02 -3.05585526e-02  1.55989137e-02
 -5.98674603e-02 -1.01272784e-01 -2.68379934e-02  6.56868227e-33
  3.27796750e-02 -1.44279122e-01 -9.91593823e-02  8.29301029e-02
  8.73718003e-04  5.27959503e-02  4.64760438e-02  1.22415926e-02
 -2.91667227e-02 -6.99500665e-02  1.11873522e-01 -2.88297869e-02
  6.17487682e-03  4.85247970e-02  7.47068152e-02 -9.17384177e-02
  5.99504709e-02  4.90967557e-02  7.78592601e-02 -6.13203272e-02
  4.92140576e-02  8.02166685e-02 -5.71842641e-02 -2.05971599e-02
  6.19249512e-03  6.25089407e-02 -9.80637595e-03 -6.92078378e-03
 -5.33989854e-02 -5.90432948e-03  4.30050194e-02  3.58720368e-04
 -6.36318699e-02  9.35074463e-02  4.20390479e-02  4.13019024e-02
  1.61564946e-02 -2.75118537e-02 -6.73248246e-02 -1.68155894e-01
  5.01897244e-04 -4.58650365e-02 -1.54383704e-02  2.69297939e-02
 -5.37269097e-03 -8.65681842e-02 -7.48091862e-02  4.34010755e-03
 -6.77838698e-02 -9.79399085e-02  5.68327866e-02  1.13467813e-01
 -1.31965950e-02 -4.18885015e-02  1.09822601e-02 -4.46235202e-02
 -8.09978992e-02  3.66152674e-02 -4.57719527e-02  9.85548198e-02
 -1.45851914e-02  6.15069531e-02 -5.55510037e-02  8.47440958e-02
 -7.97480717e-03  5.26005551e-02 -9.62677896e-02 -5.01204878e-02
  1.17281936e-01 -3.29749435e-02 -5.90268672e-02  4.31936495e-02
  1.49473734e-02  4.63316105e-02 -4.92115179e-03  1.37574989e-02
 -4.48350906e-02 -1.50760459e-02 -7.94286653e-02 -5.96203953e-02
  6.02709269e-03  2.29649097e-02 -2.20458973e-02  8.28444213e-02
 -5.23490505e-03 -4.28652689e-02  1.33878943e-02 -7.38631636e-02
 -6.18628971e-03  3.82809900e-02 -4.86481152e-02 -6.09837547e-02
  6.61896989e-02  3.46011855e-03  3.02012172e-02 -8.60902308e-33
  3.96986865e-02  8.44144728e-03 -9.89394169e-03 -1.57922450e-02
 -3.72059643e-02  1.40053453e-02 -8.79042875e-03 -7.38748908e-02
 -9.51285362e-02  6.14066143e-03 -4.60886955e-02  2.72155255e-02
  6.05697259e-02  4.00871448e-02 -1.93561558e-02  2.66095679e-02
  6.64303591e-03 -5.42737022e-02 -6.89734742e-02  6.36728853e-02
 -1.81734934e-02  6.84987977e-02 -2.26779934e-02  1.22540426e-02
 -2.03511063e-02  1.37351472e-02 -7.88622200e-02  6.91407397e-02
  2.10592896e-02  2.04012357e-02 -1.39335757e-02 -3.00778039e-02
 -1.21218972e-02  2.59124059e-02  2.11729519e-02  3.56091512e-03
 -2.44402420e-02  5.01469821e-02 -7.08031282e-03 -5.08803083e-03
  1.23450942e-01 -4.63415869e-02  3.10353190e-02 -9.35534760e-03
  4.65877205e-02  1.90814398e-02 -1.73717234e-02  2.53353212e-02
 -3.72305661e-02 -3.88190970e-02 -1.93307772e-02 -2.73171570e-02
 -4.81132679e-02 -5.06350584e-02  2.25207806e-02  6.80823252e-02
  9.73402187e-02 -5.62803335e-02  6.52875751e-03 -1.94610339e-02
  5.20506129e-02 -3.35633159e-02 -8.52097943e-03  4.86200862e-02
  9.87173617e-02 -7.86550194e-02 -2.63506696e-02 -5.91143854e-02
  4.09038216e-02 -1.76853836e-02  8.66110029e-04  4.87370268e-02
  7.36976182e-03 -5.79362027e-02  1.10644177e-01 -6.19114451e-02
  4.44665700e-02 -4.76517379e-02 -6.29936578e-03  1.86595861e-02
 -6.17636181e-02 -3.96452099e-02  1.65208895e-02  5.55928331e-03
 -1.59746762e-02  6.33857846e-02 -4.39581424e-02  4.60904324e-03
  5.63854026e-03 -8.19280185e-03 -2.48751566e-02  6.80600405e-02
 -1.50284804e-02 -7.49544008e-03 -3.13992761e-02 -5.19389154e-08
 -9.86153726e-03 -6.19435571e-02  2.90991627e-02  5.23256436e-02
  3.19047086e-02 -1.48763023e-02 -2.34492458e-02 -3.30490954e-02
 -6.20338321e-02 -8.33710805e-02 -5.81643023e-02  6.21373691e-02
  2.35944372e-02 -6.42037615e-02 -4.15627984e-03 -6.58332780e-02
 -4.93717240e-03 -8.45453292e-02 -3.73009220e-02 -1.38656674e-02
 -2.72633135e-02 -5.53992577e-02  1.85611681e-03  9.64977890e-02
 -3.41200829e-02 -7.28884041e-02  1.18457958e-01  7.81832486e-02
  2.77025513e-02  5.39552011e-02  3.02280542e-02  8.40499699e-02
 -1.13908332e-02  5.56070134e-02 -2.96737868e-02  4.68712226e-02
  9.91967693e-03  1.75730940e-02  1.28734838e-02  7.68095925e-02
  5.87551408e-02  4.68804530e-04 -5.99261634e-02  6.72481954e-02
  5.53840324e-02  2.21011676e-02 -8.17393884e-03 -3.64137255e-02
  4.53875139e-02  7.65698915e-03 -1.11206815e-01  2.95477398e-02
 -1.57750770e-02  7.93367550e-02 -1.87478457e-02  1.97574496e-02
  1.05678095e-02 -5.10848314e-02 -1.59280412e-02  7.02019557e-02
 -3.63835953e-02  2.00757831e-02  1.54494029e-02  1.48281846e-02]"
"/**
 * The Abstract Class defines a template method that contains a skeleton of some
 * algorithm, composed of calls to (usually) abstract primitive operations.
 *
 * Concrete subclasses should implement these operations, but leave the template
 * method itself intact.
 */
class AbstractClass {
  /**
   * The template method defines the skeleton of an algorithm.
   */
 public:
  void TemplateMethod() const {
    this->BaseOperation1();
    this->RequiredOperations1();
    this->BaseOperation2();
    this->Hook1();
    this->RequiredOperation2();
    this->BaseOperation3();
    this->Hook2();
  }
  /**
   * These operations already have implementations.
   */
 protected:
  void BaseOperation1() const {
    std::cout << ""AbstractClass says: I am doing the bulk of the work\n"";
  }
  void BaseOperation2() const {
    std::cout << ""AbstractClass says: But I let subclasses override some operations\n"";
  }
  void BaseOperation3() const {
    std::cout << ""AbstractClass says: But I am doing the bulk of the work anyway\n"";
  }
  /**
   * These operations have to be implemented in subclasses.
   */
  virtual void RequiredOperations1() const = 0;
  virtual void RequiredOperation2() const = 0;
  /**
   * These are ""hooks."" Subclasses may override them, but it's not mandatory
   * since the hooks already have default (but empty) implementation. Hooks
   * provide additional extension points in some crucial places of the
   * algorithm.
   */
  virtual void Hook1() const {}
  virtual void Hook2() const {}
};
/**
 * Concrete classes have to implement all abstract operations of the base class.
 * They can also override some operations with a default implementation.
 */
class ConcreteClass1 : public AbstractClass {
 protected:
  void RequiredOperations1() const override {
    std::cout << ""ConcreteClass1 says: Implemented Operation1\n"";
  }
  void RequiredOperation2() const override {
    std::cout << ""ConcreteClass1 says: Implemented Operation2\n"";
  }
};
/**
 * Usually, concrete classes override only a fraction of base class' operations.
 */
class ConcreteClass2 : public AbstractClass {
 protected:
  void RequiredOperations1() const override {
    std::cout << ""ConcreteClass2 says: Implemented Operation1\n"";
  }
  void RequiredOperation2() const override {
    std::cout << ""ConcreteClass2 says: Implemented Operation2\n"";
  }
  void Hook1() const override {
    std::cout << ""ConcreteClass2 says: Overridden Hook1\n"";
  }
};
/**
 * The client code calls the template method to execute the algorithm. Client
 * code does not have to know the concrete class of an object it works with, as
 * long as it works with objects through the interface of their base class.
 */
void ClientCode(AbstractClass *class_) {
  // ...
  class_->TemplateMethod();
  // ...
}

int main() {
  std::cout << ""Same client code can work with different subclasses:\n"";
  ConcreteClass1 *concreteClass1 = new ConcreteClass1;
  ClientCode(concreteClass1);
  std::cout << ""\n"";
  std::cout << ""Same client code can work with different subclasses:\n"";
  ConcreteClass2 *concreteClass2 = new ConcreteClass2;
  ClientCode(concreteClass2);
  delete concreteClass1;
  delete concreteClass2;
  return 0;
}",C++,Template Method,Refactoring Guru,https://refactoring.guru/design-patterns/template-method/cpp/example#example-0,"[-7.06640109e-02  5.54985143e-02  7.18145519e-02 -9.07897428e-02
 -9.81526822e-02 -1.63396094e-02 -2.57830136e-02  1.23591591e-02
 -3.41586210e-02 -4.26631719e-02  2.82154325e-03 -2.92026289e-02
 -3.87778915e-02 -4.85565625e-02  6.14648685e-03  4.68836725e-02
  3.44077647e-02  5.62859699e-02 -2.74425279e-02  7.11835325e-02
  6.94636777e-02 -2.94514503e-02 -1.03345223e-01  3.66530903e-02
 -3.54935527e-02  2.41196342e-02 -7.14084581e-02 -4.47200239e-02
  5.26789613e-02  4.15104739e-02 -8.94669909e-03  2.06574574e-02
 -9.61319078e-03  9.56366360e-02 -5.68364598e-02  5.25448583e-02
  4.98482473e-02 -6.54832572e-02 -3.97108011e-02  6.57073483e-02
 -8.52614716e-02  5.91740757e-02 -6.09785840e-02 -2.71153008e-03
  5.80444410e-02  3.08842156e-02 -1.24869235e-02 -6.74010292e-02
 -6.15497567e-02 -2.97149438e-02  1.26395635e-02  7.20231831e-02
  2.53224671e-02  2.30736919e-02 -2.86876522e-02 -2.57311147e-02
  4.09730636e-02 -6.49894774e-03  2.93355118e-02 -1.73169207e-02
 -1.69348828e-02 -1.54207903e-03  3.25767659e-02  1.02407988e-02
  1.97965205e-02 -1.02500827e-03  9.15659312e-03 -2.57111266e-02
  2.46007685e-02  5.61982468e-02 -5.93393818e-02  1.20112924e-02
 -3.09972074e-02  4.46977727e-02 -7.00524375e-02  4.20240685e-02
  1.00136455e-02  6.76637366e-02 -8.60364512e-02 -1.26146629e-01
  3.63583863e-02  6.69409186e-02 -3.87876574e-03 -9.69828740e-02
  8.04182440e-02  1.17736394e-02 -5.59162870e-02 -6.20513745e-02
  3.06516252e-02  4.44094054e-02  2.11565252e-02 -1.20017044e-02
 -8.68640617e-02 -2.21895557e-02  6.37254193e-02 -2.85750851e-02
  5.23368977e-02 -6.14580372e-03  2.04198956e-02  9.12499875e-02
 -4.97247875e-02  6.43410012e-02  1.16083939e-02 -4.51013409e-02
  6.86019212e-02  4.70826998e-02 -5.34894839e-02 -6.15231879e-02
 -4.23116647e-02 -6.88771755e-02 -2.75374316e-02 -5.46037182e-02
 -2.69842043e-04 -5.15378602e-02 -8.87109060e-03  5.92790395e-02
  5.44469021e-02  7.84406811e-03  1.69939809e-02  2.09656637e-02
  8.16320721e-03 -7.36239105e-02  4.36266959e-02  7.49349967e-02
  1.74651959e-03 -5.96236512e-02 -8.18362013e-02  4.66266373e-33
  2.24688016e-02 -8.70779231e-02 -8.89686719e-02  8.40094015e-02
 -5.92752313e-03 -1.23058753e-02  2.15222277e-02  1.77560598e-02
 -3.78417931e-02 -2.38193721e-02  6.70932978e-02 -6.47809729e-02
  5.04288636e-02  4.83566672e-02  1.27648398e-01 -6.74468745e-03
  6.15758821e-02 -6.23499742e-03  5.13551049e-02 -3.67100239e-02
  5.21314070e-02  2.51507200e-02 -3.26558612e-02  3.80971916e-02
 -2.14812905e-02  5.17774932e-02  1.12800635e-02 -6.03682101e-02
 -9.34987515e-02 -8.81279260e-03  1.11626592e-02  6.83153979e-03
  5.16793914e-02  8.58943909e-02 -1.33371232e-02  4.10959423e-02
  4.86268364e-02 -4.41241674e-02 -5.43073565e-02 -9.07717049e-02
  1.02888215e-02 -3.92860873e-03 -1.17087634e-02 -2.02585999e-02
  1.05355799e-01 -7.66016170e-02 -7.06622303e-02 -1.04848854e-02
  2.42257211e-02 -9.41027701e-02  5.40314391e-02  1.08420469e-01
 -8.07082839e-03 -4.90746945e-02  3.25853415e-02 -4.18083705e-02
 -1.20552443e-02  2.84453221e-02 -3.11756339e-02  9.64126065e-02
 -9.49096233e-02  3.15981135e-02 -4.68266197e-02  5.73830195e-02
 -9.33608934e-02 -2.38978071e-03 -1.03754036e-01 -1.14982501e-02
  9.37644988e-02  9.16689110e-04 -4.02136669e-02  3.47782560e-02
 -6.71964660e-02  4.69258763e-02  3.64309089e-04  2.66325511e-02
  6.19311295e-02 -6.33846447e-02  1.48564159e-05 -2.56332327e-02
 -3.72963995e-02  4.38395813e-02  7.04165846e-02  1.02501363e-02
 -3.59858125e-02 -3.72430533e-02  5.76876141e-02 -9.68937762e-03
  2.16117743e-02  2.41691228e-02 -4.04965393e-02 -4.14057113e-02
  1.74250025e-02 -1.66973863e-02  7.11966828e-02 -7.37576420e-33
  1.77446771e-02  8.10173526e-02 -5.26722930e-02 -2.79380418e-02
 -6.92921132e-02  8.81722420e-02 -6.78335130e-02 -1.47643104e-01
 -9.39629376e-02  8.90181167e-04 -5.09684964e-04  1.34429373e-02
  2.88858116e-02  4.62635094e-03  2.32449155e-02 -1.86094847e-02
 -8.66738036e-02 -7.35565796e-02 -4.23741750e-02  9.69050005e-02
  1.55216251e-02  6.53065741e-02  5.12134433e-02  2.62544528e-02
  4.77857217e-02  5.63613698e-02 -1.07035443e-01  1.22987971e-01
  7.68232420e-02 -8.29694048e-03 -3.05809285e-02 -9.09047667e-03
 -5.61767211e-03  5.56380348e-03  9.50539261e-02  4.14627567e-02
 -2.76616532e-02  1.00647770e-01  2.50030253e-02 -1.72311235e-02
  8.57549980e-02 -6.61863387e-02 -3.93548831e-02 -1.60475224e-02
 -1.06453681e-02 -5.08251935e-02 -3.81841580e-03 -1.74272731e-02
 -2.46837959e-02 -2.28537209e-02 -3.18198390e-02 -3.65219265e-02
 -4.56330068e-02  1.62607189e-02 -2.65368018e-02  5.86232170e-02
  1.31636625e-02 -2.38578711e-02  1.83002856e-02  3.38884816e-02
  7.68946782e-02 -1.20408116e-02  2.39157155e-02  3.14773470e-02
  4.50853631e-02 -1.86655074e-02  8.78729485e-03 -6.45504054e-03
 -3.38419378e-02  4.05133404e-02 -4.82877903e-02  5.75211644e-02
 -1.92126203e-02 -3.36803943e-02  5.99927790e-02  2.19306704e-02
  4.17124592e-02  9.18502733e-03 -3.70806530e-02 -6.44125836e-03
 -7.23601952e-02 -4.23641317e-02  1.79868247e-02  2.80226860e-02
 -4.51928228e-02 -7.88827147e-03 -1.61719006e-02 -8.08860362e-03
 -3.05416156e-02 -5.19804396e-02 -1.01290620e-03  4.01376262e-02
 -5.43559045e-02 -6.97159991e-02 -2.70973928e-02 -4.86219420e-08
  7.77437678e-03 -5.34020290e-02  2.73173619e-02  1.11193373e-03
  9.20262411e-02 -4.28813323e-02 -2.77462993e-02 -2.14054659e-02
 -9.63444784e-02 -6.67098239e-02 -6.09856918e-02  6.62146658e-02
 -9.03620757e-03 -6.39147907e-02 -6.37473818e-03 -5.72366826e-02
 -7.49612600e-02 -1.04640275e-01 -6.07005246e-02  2.82634031e-02
 -7.28357732e-02 -3.04675717e-02 -1.20169474e-02  4.15986869e-03
 -9.47450176e-02 -4.49211113e-02  5.90121672e-02  9.77518559e-02
  3.70178707e-02  8.18854868e-02  3.00366781e-03  5.43643795e-02
 -2.94268709e-02  6.57736510e-02  5.80391027e-02 -9.01819672e-03
  6.52852654e-02 -6.89689629e-03 -7.75634870e-02  2.29359176e-02
  2.72750333e-02 -1.80529915e-02 -1.01413457e-02  2.90022474e-02
  7.20199123e-02  8.88301712e-03 -2.77287457e-02 -5.36675379e-02
  2.08893325e-02  8.94485041e-02 -6.43934160e-02  4.87054475e-02
  2.02826876e-03  7.54206181e-02 -7.65909925e-02  5.17848274e-03
  5.05285757e-03 -8.50524008e-02 -5.75911300e-03 -2.84135481e-03
 -3.55444364e-02 -6.15864573e-03  9.14549083e-02 -7.27699185e-03]"
"/**
 * The Command interface declares a method for executing a command.
 */
class Command {
 public:
  virtual ~Command() {
  }
  virtual void Execute() const = 0;
};
/**
 * Some commands can implement simple operations on their own.
 */
class SimpleCommand : public Command {
 private:
  std::string pay_load_;

 public:
  explicit SimpleCommand(std::string pay_load) : pay_load_(pay_load) {
  }
  void Execute() const override {
    std::cout << ""SimpleCommand: See, I can do simple things like printing ("" << this->pay_load_ << "")\n"";
  }
};

/**
 * The Receiver classes contain some important business logic. They know how to
 * perform all kinds of operations, associated with carrying out a request. In
 * fact, any class may serve as a Receiver.
 */
class Receiver {
 public:
  void DoSomething(const std::string &a) {
    std::cout << ""Receiver: Working on ("" << a << "".)\n"";
  }
  void DoSomethingElse(const std::string &b) {
    std::cout << ""Receiver: Also working on ("" << b << "".)\n"";
  }
};

/**
 * However, some commands can delegate more complex operations to other objects,
 * called ""receivers.""
 */
class ComplexCommand : public Command {
  /**
   * @var Receiver
   */
 private:
  Receiver *receiver_;
  /**
   * Context data, required for launching the receiver's methods.
   */
  std::string a_;
  std::string b_;
  /**
   * Complex commands can accept one or several receiver objects along with any
   * context data via the constructor.
   */
 public:
  ComplexCommand(Receiver *receiver, std::string a, std::string b) : receiver_(receiver), a_(a), b_(b) {
  }
  /**
   * Commands can delegate to any methods of a receiver.
   */
  void Execute() const override {
    std::cout << ""ComplexCommand: Complex stuff should be done by a receiver object.\n"";
    this->receiver_->DoSomething(this->a_);
    this->receiver_->DoSomethingElse(this->b_);
  }
};

/**
 * The Invoker is associated with one or several commands. It sends a request to
 * the command.
 */
class Invoker {
  /**
   * @var Command
   */
 private:
  Command *on_start_;
  /**
   * @var Command
   */
  Command *on_finish_;
  /**
   * Initialize commands.
   */
 public:
  ~Invoker() {
    delete on_start_;
    delete on_finish_;
  }

  void SetOnStart(Command *command) {
    this->on_start_ = command;
  }
  void SetOnFinish(Command *command) {
    this->on_finish_ = command;
  }
  /**
   * The Invoker does not depend on concrete command or receiver classes. The
   * Invoker passes a request to a receiver indirectly, by executing a command.
   */
  void DoSomethingImportant() {
    std::cout << ""Invoker: Does anybody want something done before I begin?\n"";
    if (this->on_start_) {
      this->on_start_->Execute();
    }
    std::cout << ""Invoker: ...doing something really important...\n"";
    std::cout << ""Invoker: Does anybody want something done after I finish?\n"";
    if (this->on_finish_) {
      this->on_finish_->Execute();
    }
  }
};
/**
 * The client code can parameterize an invoker with any commands.
 */

int main() {
  Invoker *invoker = new Invoker;
  invoker->SetOnStart(new SimpleCommand(""Say Hi!""));
  Receiver *receiver = new Receiver;
  invoker->SetOnFinish(new ComplexCommand(receiver, ""Send email"", ""Save report""));
  invoker->DoSomethingImportant();

  delete invoker;
  delete receiver;

  return 0;
}",C++,Command,Refactoring Guru,https://refactoring.guru/design-patterns/command/cpp/example#example-0,"[-4.75376882e-02  5.88282496e-02 -6.64715618e-02 -2.10253056e-02
 -5.74124120e-02 -2.57878248e-02  2.00827643e-02  2.70202197e-02
 -4.38004127e-03  5.47011271e-02  2.03454196e-02 -5.90960830e-02
  4.68076393e-02 -4.23218049e-02  1.86285079e-02  2.19883658e-02
  7.92054285e-04  1.53542752e-03 -5.94842359e-02  5.05546667e-02
  5.17873131e-02  4.56146616e-03 -5.57602681e-02  1.48159778e-02
 -4.00777794e-02 -4.90857810e-02 -4.11593542e-02 -8.96385610e-02
 -7.01934770e-02 -1.50733395e-02  1.60003845e-02  1.84214842e-02
 -6.34388020e-03  6.64936006e-02 -7.46428743e-02  1.30347058e-01
  6.88739419e-02  1.21159805e-02 -4.01193574e-02 -5.05699366e-02
 -1.69766769e-02  2.38102861e-02 -8.74672309e-02 -4.69630957e-02
 -2.28495374e-02  9.14342585e-04 -1.01982526e-01 -6.81850433e-05
 -3.48414592e-02 -5.15597761e-02 -3.02927159e-02  3.74329239e-02
  3.91463703e-03  8.39843974e-02 -9.41716367e-04 -1.29482402e-02
  3.00937295e-02  7.36931153e-03  9.35448520e-03  1.08234107e-03
 -3.04737259e-02  5.40720075e-02 -3.36356051e-02 -4.29820456e-02
  4.21998501e-02 -2.02391613e-02 -6.36864873e-03  8.09360389e-03
  1.48903590e-03  1.45384707e-02 -6.35738894e-02  6.57639559e-03
 -1.24453768e-01  9.60359871e-02  4.19741943e-02  1.67096015e-02
 -8.27006879e-04  2.76061408e-02 -1.06587566e-01 -1.59059241e-02
  9.95286275e-03  7.95131177e-03 -6.20630607e-02 -3.37829404e-02
  5.28801791e-02  7.12187886e-02 -3.08557022e-02 -4.90744263e-02
  7.77084604e-02  3.98682207e-02 -6.07973225e-02  1.54479407e-02
 -2.84679104e-02 -4.48965840e-03  1.38884624e-02 -2.95934342e-02
 -2.07014717e-02 -4.97670770e-02  6.61435863e-03  7.62577727e-02
  5.78987375e-02  3.09598707e-02  5.91853121e-03 -4.94537167e-02
 -2.99647972e-02 -5.10905497e-02  1.17327152e-02 -4.46967408e-02
 -4.56103235e-02 -4.58326004e-02 -2.05525849e-02 -3.09401527e-02
 -2.16520093e-02 -7.14819357e-02  5.89467026e-02  1.03042364e-01
  9.54886712e-03  1.08557113e-01  5.39159924e-02  1.64443720e-02
  1.54800406e-02 -5.07559627e-02 -4.46562469e-02  6.64506108e-02
  2.73853354e-02 -6.37281612e-02  4.84219939e-02  4.01437713e-33
  7.71173928e-03 -7.41738752e-02 -7.50526413e-02  8.68311301e-02
  2.56468542e-02  9.70439687e-02  5.77572025e-02  1.04765937e-01
  3.01820617e-02 -5.81115969e-02 -8.34405143e-03 -6.27044588e-02
  5.16987331e-02  5.43079972e-02  1.68136600e-02 -2.94531025e-02
  7.06066936e-02  5.00966161e-02  4.11436446e-02 -2.26836167e-02
  9.51719955e-02  2.58785952e-02 -5.12002520e-02  5.63388392e-02
  5.87627441e-02 -1.90294068e-02  1.41605400e-02 -8.94161221e-03
 -4.17327471e-02 -5.11877332e-03  6.94458634e-02  5.56926280e-02
 -3.43935750e-02  1.07156448e-01 -2.15111580e-02  4.32405435e-03
 -6.45918772e-02 -3.76372784e-03 -1.27916818e-03 -9.86154601e-02
 -4.32988182e-02 -1.60730407e-02 -7.41854832e-02  1.86758507e-02
 -2.90981978e-02 -9.20810923e-02 -2.93661468e-02 -5.37120551e-02
  4.62508127e-02 -6.97273910e-02  7.82855600e-02  7.19560906e-02
 -1.46286180e-02 -5.28142117e-02 -3.32533754e-03 -2.71610380e-03
 -1.05131334e-02 -3.17400433e-02 -2.57887077e-02  2.11197939e-02
 -4.16982211e-02  7.70844519e-02  5.18216100e-03  5.64665198e-02
  2.15085074e-02 -3.62259597e-02 -8.27443153e-02 -2.95722522e-02
  4.69934009e-02 -4.28881086e-02 -9.05230790e-02  3.18572745e-02
 -1.69867557e-02 -4.33137193e-02  1.16956339e-03  2.30956972e-02
 -1.15528554e-02 -5.94225340e-02 -1.33197894e-02 -1.41822258e-02
 -1.15220677e-02  2.11072825e-02 -2.33373847e-02  4.37110886e-02
  1.96069796e-02  2.72360202e-02  7.31767947e-03 -4.34055626e-02
  2.07445323e-02  3.95493433e-02 -1.49840526e-02  2.87787151e-03
 -6.08195662e-02  2.93211006e-02  3.30042131e-02 -7.21551126e-33
  3.54841389e-02  8.47416520e-02 -5.94249070e-02  1.10660559e-02
 -6.46525025e-02  5.41302040e-02  1.36471801e-02 -8.29325691e-02
 -1.24400243e-01 -7.03586126e-03 -7.13299811e-02  2.86115240e-02
 -2.15407163e-02  1.26405368e-02  6.04587644e-02 -1.12466402e-02
  7.19592441e-03 -3.24924365e-02 -9.51615274e-02  5.91826588e-02
 -2.10483056e-02  5.06859869e-02  7.45446533e-02 -1.42783858e-02
 -3.91400829e-02 -3.31954360e-02 -4.34626527e-02  1.41458437e-01
  2.86570750e-02 -2.76193232e-03  6.77579343e-02  2.49817763e-02
  1.56794321e-02 -3.10829170e-02  1.71666164e-02 -4.76167835e-02
  5.47778197e-02  9.12642106e-02  6.55715689e-02  4.11341861e-02
  1.39330104e-01 -2.10173782e-02  8.48071743e-03 -2.83837710e-02
  1.99211165e-02 -5.19826598e-02  1.60574447e-03 -9.74114332e-03
 -3.22447307e-02  5.09454161e-02 -5.61170392e-02 -5.96600585e-02
 -5.75121120e-02 -4.92156707e-02 -6.46963017e-03  6.66619763e-02
  7.50806406e-02 -1.96449775e-02  6.24798648e-02 -2.78300289e-02
 -2.01476477e-02 -1.42673030e-02  2.62344331e-02  9.93705261e-03
  7.69939125e-02 -4.28171940e-02  9.09554958e-02  1.29602002e-02
  9.00150985e-02 -1.13763660e-02  1.42079843e-02  2.87643746e-02
 -1.03727989e-02 -5.12079038e-02  7.92874321e-02 -7.49475462e-03
 -2.15555169e-02 -7.31286481e-02 -5.45603856e-02  3.10598314e-02
 -9.13711451e-03 -3.67784724e-02 -3.98578448e-03  5.92370797e-03
 -5.23416176e-02 -4.46692901e-03  4.11410164e-03 -7.27801677e-03
  2.46397518e-02 -4.30955030e-02 -2.11389110e-04  6.08756356e-02
  2.24042349e-02 -7.08262622e-02 -3.85248661e-02 -5.49160184e-08
  3.38395238e-02 -9.85962525e-02  1.41877891e-03  8.13037530e-02
  3.07729449e-02 -8.10908601e-02 -4.99645397e-02 -3.32311317e-02
 -1.66417342e-02 -4.42467928e-02 -4.94327061e-02 -2.27014497e-02
 -1.25688128e-02 -7.86910877e-02  8.63704830e-02 -1.45764872e-01
  1.32261496e-02 -1.46983311e-01 -5.45309335e-02 -1.07404012e-02
  4.00013523e-03 -7.38678947e-02 -4.77858856e-02  6.28535226e-02
 -1.05260191e-02 -4.79413494e-02  7.99557492e-02  8.67937878e-02
  1.00052711e-02  2.53409781e-02  3.80885638e-02  4.74276394e-02
 -1.23442635e-02  5.19153476e-02 -2.05809064e-02  6.16457835e-02
  1.35732368e-02 -3.51445898e-02 -3.91225703e-02  2.70020887e-02
  7.46652633e-02  3.48424725e-02 -4.94734198e-02  5.26732095e-02
  8.62287078e-03  3.15310620e-02 -7.54682207e-03 -1.17163293e-01
  3.79485302e-02  3.89299542e-02 -9.09314305e-02  7.74410963e-02
  7.90105574e-03  1.37438402e-01 -7.79279023e-02 -1.38618909e-02
  2.02983972e-02 -1.63105801e-01  3.15893739e-02  6.34995550e-02
  3.59164588e-02  2.20862180e-02 -2.17322838e-02 -1.17939906e-02]"
"#include <iostream>
#include <string>
/**
 * The Mediator interface declares a method used by components to notify the
 * mediator about various events. The Mediator may react to these events and
 * pass the execution to other components.
 */
class BaseComponent;
class Mediator {
 public:
  virtual void Notify(BaseComponent *sender, std::string event) const = 0;
};

/**
 * The Base Component provides the basic functionality of storing a mediator's
 * instance inside component objects.
 */
class BaseComponent {
 protected:
  Mediator *mediator_;

 public:
  BaseComponent(Mediator *mediator = nullptr) : mediator_(mediator) {
  }
  void set_mediator(Mediator *mediator) {
    this->mediator_ = mediator;
  }
};

/**
 * Concrete Components implement various functionality. They don't depend on
 * other components. They also don't depend on any concrete mediator classes.
 */
class Component1 : public BaseComponent {
 public:
  void DoA() {
    std::cout << ""Component 1 does A.\n"";
    this->mediator_->Notify(this, ""A"");
  }
  void DoB() {
    std::cout << ""Component 1 does B.\n"";
    this->mediator_->Notify(this, ""B"");
  }
};

class Component2 : public BaseComponent {
 public:
  void DoC() {
    std::cout << ""Component 2 does C.\n"";
    this->mediator_->Notify(this, ""C"");
  }
  void DoD() {
    std::cout << ""Component 2 does D.\n"";
    this->mediator_->Notify(this, ""D"");
  }
};

/**
 * Concrete Mediators implement cooperative behavior by coordinating several
 * components.
 */
class ConcreteMediator : public Mediator {
 private:
  Component1 *component1_;
  Component2 *component2_;

 public:
  ConcreteMediator(Component1 *c1, Component2 *c2) : component1_(c1), component2_(c2) {
    this->component1_->set_mediator(this);
    this->component2_->set_mediator(this);
  }
  void Notify(BaseComponent *sender, std::string event) const override {
    if (event == ""A"") {
      std::cout << ""Mediator reacts on A and triggers following operations:\n"";
      this->component2_->DoC();
    }
    if (event == ""D"") {
      std::cout << ""Mediator reacts on D and triggers following operations:\n"";
      this->component1_->DoB();
      this->component2_->DoC();
    }
  }
};

/**
 * The client code.
 */

void ClientCode() {
  Component1 *c1 = new Component1;
  Component2 *c2 = new Component2;
  ConcreteMediator *mediator = new ConcreteMediator(c1, c2);
  std::cout << ""Client triggers operation A.\n"";
  c1->DoA();
  std::cout << ""\n"";
  std::cout << ""Client triggers operation D.\n"";
  c2->DoD();

  delete c1;
  delete c2;
  delete mediator;
}

int main() {
  ClientCode();
  return 0;
}",C++,Mediator,Refactoring Guru,https://refactoring.guru/design-patterns/mediator/cpp/example#example-0,"[-7.94357061e-03 -2.45143920e-02  1.86209753e-02 -6.86073378e-02
 -3.90293710e-02  4.49900292e-02  6.21261597e-02  4.99898307e-02
  6.92413449e-02 -3.46244429e-03  5.32424226e-02 -4.80905771e-02
  2.78775543e-02 -4.98743169e-02  6.57277182e-03  1.27409780e-02
 -4.26898673e-02  4.04547341e-02 -9.45080519e-02  6.00491231e-03
 -2.99469288e-03 -3.89304161e-02 -9.28781033e-02 -3.34579237e-02
 -5.10191843e-02  1.03467908e-02  1.21309534e-02 -7.18083829e-02
  2.29502879e-02 -2.11233888e-02  8.91876072e-02 -2.70480942e-02
 -8.18770826e-02  4.20064814e-02 -4.51920666e-02  7.13035166e-02
 -4.99236258e-03 -6.64436296e-02 -1.02996647e-01  1.00415889e-02
 -1.89099275e-02  3.81931216e-02 -7.34724924e-02 -3.85640003e-02
 -5.16770035e-03  8.53239372e-03 -5.67518733e-02  9.27332882e-03
 -7.56135806e-02 -9.37697366e-02 -5.65602444e-02  4.90427501e-02
 -1.69462495e-04  4.39999960e-02  2.13606507e-02 -5.14176674e-02
  3.13851610e-02  2.57965848e-02  3.74721810e-02 -1.25908135e-02
 -3.01732477e-02  5.45657333e-03  2.71667968e-02 -1.67698339e-02
  6.18548766e-02 -1.03272749e-02 -2.65143975e-03  1.47451982e-02
 -6.20394945e-03 -7.29983440e-04 -8.25178847e-02  2.50007287e-02
  2.94913948e-02  5.37613034e-02 -2.57189609e-02 -1.34951184e-02
 -3.31752859e-02  3.53783816e-02 -4.11506742e-02 -8.39833096e-02
  3.62000987e-02  4.23748009e-02 -2.57100295e-02 -5.85844852e-02
  6.12730272e-02  3.69756967e-02 -7.64978454e-02 -4.49793823e-02
  1.18368454e-02  1.28785642e-02 -2.31636986e-02  4.96507576e-03
 -2.99988221e-03  3.85796987e-02  5.36718220e-02 -8.86807125e-03
  3.74396183e-02 -1.12139257e-02  5.70670478e-02  8.90996382e-02
 -4.79276739e-02  3.17433067e-02 -2.80046780e-02 -1.19194519e-02
 -3.04341484e-02 -3.73562686e-02 -1.13353290e-01 -1.36046307e-02
 -1.78369060e-02 -8.12871307e-02 -6.16795607e-02 -1.17965862e-02
 -4.86763045e-02 -2.55081914e-02 -8.52255523e-03  2.79871132e-02
  6.73274323e-02  2.63720211e-02  5.17451689e-02 -3.44362929e-02
  8.48313794e-02 -8.03533718e-02 -3.95300891e-03  3.63573916e-02
  1.23737957e-02 -7.29057565e-02 -3.17806676e-02  5.81656682e-33
  6.15089294e-03 -8.81129131e-02 -1.02500781e-01  7.87050426e-02
  1.72210820e-02  4.47788797e-02  4.81443815e-02  4.30756025e-02
  6.84509636e-04 -4.95125279e-02  2.77704354e-02 -6.07293509e-02
 -4.40216511e-02  4.44138199e-02  4.81662638e-02 -8.83044973e-02
  5.62178083e-02  4.94513698e-02  1.52280135e-02 -6.78222328e-02
  8.65981132e-02  5.74545600e-02 -4.70148921e-02  5.46997525e-02
  4.52323332e-02  1.58757134e-03 -4.10441123e-03 -3.58943194e-02
 -5.41663058e-02 -5.08953594e-02  2.99919471e-02  1.81937367e-02
  5.29820658e-02  6.62891418e-02  1.06286556e-02 -9.83152818e-03
 -7.05368444e-02 -1.81297231e-02 -2.21892837e-02 -1.21934369e-01
 -4.53562522e-03 -4.55287658e-02 -2.85411123e-02 -2.50069946e-02
  1.07242828e-02 -6.51668832e-02 -1.04925178e-01  1.16532659e-02
  6.41491404e-03 -1.20706499e-01  1.20069988e-01  1.18599035e-01
  5.12843430e-02  7.47685181e-03  6.25416860e-02  2.88074352e-02
 -5.85249066e-02 -1.96609255e-02 -3.78513597e-02  8.21153745e-02
 -6.41323999e-02  7.65185505e-02 -3.42831165e-02  5.12642376e-02
 -5.34301102e-02  3.01468782e-02 -3.97504009e-02 -6.00543171e-02
  1.34029388e-01 -1.02349911e-02 -4.32695858e-02  5.05620874e-02
  8.75075348e-03 -1.99212823e-02  2.72774864e-02  1.84713565e-02
 -8.54422003e-02 -5.97869605e-02 -6.28932044e-02 -4.08615731e-02
 -5.76349534e-02  2.85594705e-02  9.37328022e-03  1.13982297e-01
 -2.57547610e-02 -5.43374904e-02 -2.46285256e-02 -5.75712286e-02
 -5.56147434e-02  6.15909472e-02 -4.67731012e-03  1.35811919e-04
  7.57583752e-02 -1.23662027e-02  6.78675547e-02 -8.11999686e-33
 -1.93755925e-02  2.66875811e-02 -2.23409478e-02  1.60121010e-04
 -2.36436091e-02  3.09618134e-02 -4.98882085e-02 -1.11069933e-01
 -8.77316371e-02  1.34089440e-02 -4.18999866e-02  5.46073541e-02
  1.23374735e-03 -9.40939528e-04 -4.89233285e-02  7.58050978e-02
  4.23490666e-02  1.95736485e-03 -7.98424147e-03  3.25364061e-02
 -7.83952698e-03  9.25002843e-02  6.28157929e-02  9.81827383e-04
  2.22780388e-02  1.63047910e-02  1.68438088e-02  1.01917014e-01
  7.24040493e-02 -6.42465753e-03 -3.21018919e-02  7.82195758e-03
  1.34687908e-02 -2.64555998e-02  8.39227661e-02 -4.93379571e-02
  3.23665217e-02  5.82412370e-02 -1.71419010e-02 -1.19357910e-02
  1.36007845e-01 -1.78692583e-02  7.81380630e-04  5.14466129e-02
 -1.57291628e-02 -4.69028242e-02  6.56689098e-03  1.51243294e-02
 -1.27734635e-02  1.65096615e-02 -4.67330478e-02 -1.06264777e-01
 -4.05086437e-04 -4.26475406e-02  1.04894033e-02  9.10149068e-02
  8.88466015e-02 -4.07842807e-02  1.99172404e-02  2.41744611e-02
  2.24315766e-02 -6.29329905e-02  2.05608904e-02  7.40357861e-02
  9.27953646e-02 -8.61462485e-03 -1.29370783e-02 -3.17881256e-03
  4.00904827e-02  5.39664738e-03  7.79386088e-02  6.33298010e-02
 -2.64144130e-02 -5.54059893e-02  7.54477158e-02 -4.02537407e-03
 -2.23176982e-02 -2.63368785e-02  8.24981648e-03 -3.18078287e-02
 -7.17542097e-02 -2.40024868e-02  4.44856547e-02 -1.98902953e-02
 -3.67350876e-02  4.00302783e-02  1.31859379e-02 -1.76422168e-02
  2.08207462e-02 -3.26934680e-02 -3.62289622e-02  9.32707638e-02
  6.20460585e-02 -4.03344147e-02 -4.85890657e-02 -5.08681417e-08
 -4.72764438e-03 -1.24399289e-01 -1.82960797e-02 -2.13042554e-02
  1.78402029e-02 -1.29583225e-01 -2.52347738e-02 -5.66381738e-02
 -7.13144392e-02 -6.01168126e-02 -3.11161932e-02  7.80616130e-04
  4.96848784e-02 -9.77615118e-02  6.71601668e-02 -5.07430956e-02
 -1.46207251e-02 -9.17686000e-02 -8.54830742e-02 -1.75645929e-02
  4.96884482e-03 -5.53414458e-03 -1.89492442e-02  7.37957284e-02
 -2.85779014e-02 -7.57843629e-02  1.10886484e-01  1.01289622e-01
  9.66606587e-02  2.50691753e-02  1.32166585e-02  2.54194736e-02
 -1.90718321e-03  3.95819843e-02  2.00831462e-02  6.49492741e-02
  4.37692255e-02 -7.03680292e-02 -4.00048401e-03  5.50333038e-02
  2.73934510e-02 -4.61003650e-03 -2.61832997e-02  5.94783649e-02
  9.00886208e-02  2.05062516e-02 -5.17825112e-02 -5.06099500e-02
  4.39194590e-02  6.84790760e-02 -1.09726630e-01  5.19196540e-02
 -2.93591190e-02  6.01288788e-02 -3.73326316e-02 -4.76231128e-02
  3.27648744e-02 -1.49077941e-02  7.16995671e-02  1.53600276e-02
 -4.24583033e-02  3.65579203e-02  1.52590452e-02  1.75210387e-02]"
"/**
 * Observer Design Pattern
 *
 * Intent: Lets you define a subscription mechanism to notify multiple objects
 * about any events that happen to the object they're observing.
 *
 * Note that there's a lot of different terms with similar meaning associated
 * with this pattern. Just remember that the Subject is also called the
 * Publisher and the Observer is often called the Subscriber and vice versa.
 * Also the verbs ""observe"", ""listen"" or ""track"" usually mean the same thing.
 */

#include <iostream>
#include <list>
#include <string>

class IObserver {
 public:
  virtual ~IObserver(){};
  virtual void Update(const std::string &message_from_subject) = 0;
};

class ISubject {
 public:
  virtual ~ISubject(){};
  virtual void Attach(IObserver *observer) = 0;
  virtual void Detach(IObserver *observer) = 0;
  virtual void Notify() = 0;
};

/**
 * The Subject owns some important state and notifies observers when the state
 * changes.
 */

class Subject : public ISubject {
 public:
  virtual ~Subject() {
    std::cout << ""Goodbye, I was the Subject.\n"";
  }

  /**
   * The subscription management methods.
   */
  void Attach(IObserver *observer) override {
    list_observer_.push_back(observer);
  }
  void Detach(IObserver *observer) override {
    list_observer_.remove(observer);
  }
  void Notify() override {
    std::list<IObserver *>::iterator iterator = list_observer_.begin();
    HowManyObserver();
    while (iterator != list_observer_.end()) {
      (*iterator)->Update(message_);
      ++iterator;
    }
  }

  void CreateMessage(std::string message = ""Empty"") {
    this->message_ = message;
    Notify();
  }
  void HowManyObserver() {
    std::cout << ""There are "" << list_observer_.size() << "" observers in the list.\n"";
  }

  /**
   * Usually, the subscription logic is only a fraction of what a Subject can
   * really do. Subjects commonly hold some important business logic, that
   * triggers a notification method whenever something important is about to
   * happen (or after it).
   */
  void SomeBusinessLogic() {
    this->message_ = ""change message message"";
    Notify();
    std::cout << ""I'm about to do some thing important\n"";
  }

 private:
  std::list<IObserver *> list_observer_;
  std::string message_;
};

class Observer : public IObserver {
 public:
  Observer(Subject &subject) : subject_(subject) {
    this->subject_.Attach(this);
    std::cout << ""Hi, I'm the Observer \"""" << ++Observer::static_number_ << ""\"".\n"";
    this->number_ = Observer::static_number_;
  }
  virtual ~Observer() {
    std::cout << ""Goodbye, I was the Observer \"""" << this->number_ << ""\"".\n"";
  }

  void Update(const std::string &message_from_subject) override {
    message_from_subject_ = message_from_subject;
    PrintInfo();
  }
  void RemoveMeFromTheList() {
    subject_.Detach(this);
    std::cout << ""Observer \"""" << number_ << ""\"" removed from the list.\n"";
  }
  void PrintInfo() {
    std::cout << ""Observer \"""" << this->number_ << ""\"": a new message is available --> "" << this->message_from_subject_ << ""\n"";
  }

 private:
  std::string message_from_subject_;
  Subject &subject_;
  static int static_number_;
  int number_;
};

int Observer::static_number_ = 0;

void ClientCode() {
  Subject *subject = new Subject;
  Observer *observer1 = new Observer(*subject);
  Observer *observer2 = new Observer(*subject);
  Observer *observer3 = new Observer(*subject);
  Observer *observer4;
  Observer *observer5;

  subject->CreateMessage(""Hello World! :D"");
  observer3->RemoveMeFromTheList();

  subject->CreateMessage(""The weather is hot today! :p"");
  observer4 = new Observer(*subject);

  observer2->RemoveMeFromTheList();
  observer5 = new Observer(*subject);

  subject->CreateMessage(""My new car is great! ;)"");
  observer5->RemoveMeFromTheList();

  observer4->RemoveMeFromTheList();
  observer1->RemoveMeFromTheList();

  delete observer5;
  delete observer4;
  delete observer3;
  delete observer2;
  delete observer1;
  delete subject;
}

int main() {
  ClientCode();
  return 0;
}",C++,Observer,Refactoring Guru,https://refactoring.guru/design-patterns/observer/cpp/example#example-0,"[-6.61140773e-03  2.50027161e-02 -1.11513603e-02 -1.80250723e-02
  1.23948855e-02 -2.08336879e-02  8.88265073e-02 -2.78616734e-02
  4.07607667e-02  9.45821404e-03  5.19572385e-02 -5.61859682e-02
  1.40910838e-02 -5.07587269e-02 -3.31854485e-02  1.31368674e-02
 -1.21329119e-02 -2.55045859e-04 -6.87330440e-02 -1.66606512e-02
  2.81551685e-02 -4.38479986e-03 -8.91654193e-02  1.59722194e-02
 -3.87522243e-02  8.70738551e-03  4.57170559e-03 -4.09329832e-02
 -2.22919695e-03 -5.96506335e-03  4.41998765e-02 -1.19118840e-02
 -1.13490820e-02  7.99944401e-02 -8.12602881e-03  4.73764427e-02
  1.46792624e-02 -4.71633337e-02 -9.96061936e-02  2.22197175e-02
 -4.51302901e-02  4.35259775e-04 -7.39547163e-02 -5.31774685e-02
  8.89144372e-03  1.86002627e-02 -8.90284255e-02  3.99506986e-02
  3.13239428e-03 -5.45755811e-02 -6.29531071e-02  3.11540011e-02
 -1.91421285e-02  3.55482027e-02  3.01107857e-02  6.56706141e-03
  1.09390803e-02 -2.77755633e-02  1.70303893e-03 -3.72072980e-02
  1.25200721e-02  7.03024119e-02 -4.43231827e-03 -1.77830737e-02
  1.00880414e-02 -2.32311711e-02 -2.94984458e-03  6.03882894e-02
  3.17291059e-02  3.79634649e-02 -7.77384639e-02  9.45739672e-02
 -3.72411050e-02  6.19974546e-02 -2.41489336e-02 -8.82813614e-03
 -2.04695184e-02 -2.81178728e-02 -3.31849754e-02 -4.51708063e-02
 -2.79345177e-02 -4.54922467e-02 -4.91763838e-02 -5.20176440e-02
  2.26646941e-02 -4.39850474e-03 -2.93740947e-02 -9.09972657e-03
  1.52837243e-02  2.85817068e-02 -6.76519722e-02 -1.18602309e-02
  3.99926770e-03  4.65631820e-02  6.19374290e-02  2.97243595e-02
  8.03747308e-03  6.15173392e-03  2.49243109e-03  1.34115979e-01
 -2.62412522e-02  4.88216802e-02 -3.23057510e-02  3.32987607e-02
 -2.21452024e-02 -2.60899495e-02 -7.46056139e-02 -5.60717396e-02
 -4.78792489e-02 -3.29501852e-02 -7.46658817e-02  5.04940674e-02
 -8.09165742e-03 -2.23029256e-02  2.87860744e-02  3.50835286e-02
  8.87517929e-02  1.22440860e-01  5.06029557e-03  5.62180253e-03
  9.85013619e-02 -5.18503450e-02 -1.54957734e-02  5.99054024e-02
  1.10045923e-02 -5.61997667e-02  2.47277413e-02  4.85002026e-33
  3.38482969e-02 -9.63804275e-02 -6.66304529e-02  8.10336992e-02
  3.33306938e-02  8.21220055e-02  8.96314159e-03  7.00696409e-02
  3.16761211e-02 -3.89456600e-02  3.57667245e-02 -7.63752162e-02
  6.42406568e-02  1.58756357e-02  6.47598952e-02 -1.25656575e-01
  3.23923603e-02  5.29254451e-02  1.93750151e-02 -3.51525955e-02
  1.69696659e-02  1.27186012e-02 -5.65822646e-02  2.34040078e-02
 -1.07956165e-02  8.10570121e-02  3.90108153e-02  1.56934913e-02
 -7.38893682e-03 -1.34975528e-02  6.34864867e-02 -2.54860357e-03
 -1.66407786e-02  4.46905084e-02 -9.51701775e-04  9.85276420e-03
 -6.22094087e-02 -3.97148877e-02 -1.79675352e-02 -1.15208924e-01
  8.11662897e-03 -5.39568253e-02 -4.58148830e-02 -3.70955430e-02
 -4.56316695e-02 -6.55911788e-02 -7.21874982e-02  3.38242538e-02
 -8.66636913e-03 -8.20231140e-02  7.33361393e-02  5.59837483e-02
 -3.14404303e-03 -8.02282766e-02 -6.06736494e-03 -7.06096238e-04
 -2.47116201e-03  3.84737621e-03 -3.75927538e-02  7.03940168e-02
 -3.75860371e-02  9.03941989e-02  1.57102793e-02  9.84433480e-03
  6.37265369e-02  2.11419035e-02 -4.31112312e-02 -7.77544752e-02
  9.00810733e-02 -5.88342585e-02 -4.55278195e-02  5.63431792e-02
  6.16191514e-02  1.55899227e-02 -5.26576564e-02  3.42061520e-02
 -4.88706343e-02 -2.41342336e-02 -7.40254968e-02 -8.07704255e-02
 -2.12785285e-02 -2.61782645e-03  8.08806345e-03  4.23238277e-02
  5.27442023e-02 -6.73923343e-02  6.40893867e-03 -5.98086640e-02
 -4.27784659e-02  4.46583480e-02 -3.36172171e-02  6.56723045e-03
  4.74307761e-02 -4.48032506e-02 -5.78918774e-03 -7.34885640e-33
 -1.78791266e-02  3.79004367e-02 -6.04247488e-02 -2.83859186e-02
 -1.48442099e-02  1.99192762e-03 -4.57846969e-02 -1.97109226e-02
 -1.11470021e-01 -8.09617434e-03 -9.26200077e-02  5.01319824e-04
 -7.22109762e-05  2.59331800e-02  6.10621199e-02  2.89837401e-02
  3.06773651e-03 -1.67620592e-02 -8.90566334e-02  5.36661632e-02
 -5.41926064e-02  1.38141319e-01  5.14239557e-02 -4.84347977e-02
 -2.01012585e-02  2.27004499e-03  6.57540709e-02  1.01770103e-01
  2.42716838e-02 -6.26044795e-02  7.80888600e-03 -1.30235991e-02
 -4.90301400e-02 -4.74581681e-03  8.11830163e-02 -4.19409052e-02
  5.25381304e-02  2.23918073e-02 -5.55975037e-03 -1.06788296e-02
  1.06267534e-01 -1.80079136e-02 -3.41760740e-02 -2.42338963e-02
 -7.39511987e-03 -2.19833218e-02 -3.13029811e-02  7.05059096e-02
  1.02117434e-02  5.43241166e-02 -5.08702844e-02 -1.17491178e-01
 -2.61572078e-02 -2.02282500e-02  1.95545219e-02  1.03601776e-01
  4.13270518e-02 -5.22284657e-02  1.01109140e-01 -1.21305615e-03
 -5.10823168e-03 -5.76032326e-02  4.25217450e-02  1.29176052e-02
  1.26756251e-01 -2.07131542e-02 -3.68975848e-02  6.96906680e-03
 -5.43732103e-03 -2.66355034e-02  3.52533460e-02  6.30586967e-02
 -1.25912070e-01 -6.83528483e-02  7.84207880e-02  2.32102685e-02
 -1.48960447e-03 -3.64030190e-02 -7.02534020e-02  9.19170026e-03
 -9.95731577e-02 -6.77039567e-03  2.99683828e-02  1.92923769e-02
 -3.69275808e-02 -3.83122750e-02  1.64568573e-02 -1.91659352e-03
 -1.13581982e-03 -2.91345082e-02 -5.38696200e-02  8.12262744e-02
  6.52605072e-02  1.21588856e-02 -6.23623580e-02 -5.42028715e-08
 -8.33390281e-02 -1.27862185e-01  8.09404533e-03  5.34714498e-02
  5.47511317e-02 -3.53597514e-02 -2.50910316e-02 -7.70185515e-02
 -6.44239038e-02 -7.68861100e-02 -2.95159984e-02 -2.68846694e-02
  1.48676056e-02  8.40195268e-03  1.05709493e-01 -1.21658333e-01
 -4.77940701e-02 -8.53164271e-02 -7.35250190e-02 -2.23148353e-02
  5.30487075e-02  1.56232435e-02 -1.87882427e-02  4.60958593e-02
  3.58611606e-02 -4.91509140e-02  1.15519449e-01  7.36991838e-02
  1.97180808e-02  1.57843865e-02  3.65255326e-02  7.49234036e-02
  2.13503782e-02  1.34993438e-02 -1.73938815e-02  3.45481113e-02
  1.28114410e-02 -7.96901807e-03  3.58192138e-02  7.04390034e-02
  6.78708032e-02  4.39150184e-02 -8.15881863e-02  1.07547887e-01
  9.87414718e-02 -3.04153487e-02 -3.79228331e-02 -1.04254261e-01
  7.09966347e-02  4.31141332e-02 -1.47325814e-01  2.32214686e-02
  2.77272630e-02 -1.81627739e-02 -5.84675372e-02 -2.24657394e-02
  5.50503656e-02 -4.87859286e-02  4.67096306e-02  8.54168683e-02
  9.79261193e-03  6.93951026e-02 -5.06095141e-02  3.81459892e-02]"
"/**
 * The Strategy interface declares operations common to all supported versions
 * of some algorithm.
 *
 * The Context uses this interface to call the algorithm defined by Concrete
 * Strategies.
 */
class Strategy
{
public:
    virtual ~Strategy() = default;
    virtual std::string doAlgorithm(std::string_view data) const = 0;
};

/**
 * The Context defines the interface of interest to clients.
 */

class Context
{
    /**
     * @var Strategy The Context maintains a reference to one of the Strategy
     * objects. The Context does not know the concrete class of a strategy. It
     * should work with all strategies via the Strategy interface.
     */
private:
    std::unique_ptr<Strategy> strategy_;
    /**
     * Usually, the Context accepts a strategy through the constructor, but also
     * provides a setter to change it at runtime.
     */
public:
    explicit Context(std::unique_ptr<Strategy> &&strategy = {}) : strategy_(std::move(strategy))
    {
    }
    /**
     * Usually, the Context allows replacing a Strategy object at runtime.
     */
    void set_strategy(std::unique_ptr<Strategy> &&strategy)
    {
        strategy_ = std::move(strategy);
    }
    /**
     * The Context delegates some work to the Strategy object instead of
     * implementing +multiple versions of the algorithm on its own.
     */
    void doSomeBusinessLogic() const
    {
        if (strategy_) {
            std::cout << ""Context: Sorting data using the strategy (not sure how it'll do it)\n"";
            std::string result = strategy_->doAlgorithm(""aecbd"");
            std::cout << result << ""\n"";
        } else {
            std::cout << ""Context: Strategy isn't set\n"";
        }
    }
};

/**
 * Concrete Strategies implement the algorithm while following the base Strategy
 * interface. The interface makes them interchangeable in the Context.
 */
class ConcreteStrategyA : public Strategy
{
public:
    std::string doAlgorithm(std::string_view data) const override
    {
        std::string result(data);
        std::sort(std::begin(result), std::end(result));

        return result;
    }
};
class ConcreteStrategyB : public Strategy
{
    std::string doAlgorithm(std::string_view data) const override
    {
        std::string result(data);
        std::sort(std::begin(result), std::end(result), std::greater<>());

        return result;
    }
};
/**
 * The client code picks a concrete strategy and passes it to the context. The
 * client should be aware of the differences between strategies in order to make
 * the right choice.
 */

void clientCode()
{
    Context context(std::make_unique<ConcreteStrategyA>());
    std::cout << ""Client: Strategy is set to normal sorting.\n"";
    context.doSomeBusinessLogic();
    std::cout << ""\n"";
    std::cout << ""Client: Strategy is set to reverse sorting.\n"";
    context.set_strategy(std::make_unique<ConcreteStrategyB>());
    context.doSomeBusinessLogic();
}

int main()
{
    clientCode();
    return 0;
}",C++,Strategy,Refactoring Guru,https://refactoring.guru/design-patterns/strategy/cpp/example#example-0,"[-2.32943017e-02  6.92714825e-02 -1.78245325e-02 -7.06477538e-02
 -1.12513028e-01  2.31984798e-02  1.42451404e-02  4.27797921e-02
 -1.31758051e-02 -3.36553939e-02  6.61358684e-02  6.43657986e-03
  1.13345291e-02 -8.31815526e-02 -3.67404632e-02  1.66777968e-02
 -2.26857304e-03  1.33791137e-02 -3.39356102e-02  2.09686020e-03
  3.90224420e-02 -6.89736102e-03 -6.73642233e-02 -2.07731202e-02
 -1.83992051e-02  5.75325042e-02 -1.58714838e-02  1.12499471e-03
  1.77208800e-02  7.39615550e-03  6.05974384e-02  5.65922968e-02
 -2.84226276e-02  7.67333210e-02 -8.74568820e-02  6.06748387e-02
 -1.07064247e-01 -1.11188419e-01 -3.65464315e-02  3.71510759e-02
 -1.32118225e-01  9.57553238e-02 -4.00456972e-02 -2.10530274e-02
 -8.12976249e-03  1.62471235e-02 -6.94450289e-02  4.91507165e-03
  5.56845963e-03 -7.11133555e-02 -7.69362450e-02  7.49475285e-02
 -3.01006753e-02 -2.84959748e-02 -4.36028372e-03  4.54983152e-02
 -3.89538682e-03  7.29741622e-03 -1.35534294e-02  2.66127725e-04
 -2.39867833e-03 -3.41583975e-03  4.39196341e-02 -4.11947723e-03
  2.73356866e-02 -2.10116524e-02  3.53782885e-02  2.13346016e-02
  1.93352047e-02 -3.82096060e-02 -1.11000780e-02  3.97779383e-02
 -8.59678350e-03  7.12004676e-02 -9.09453183e-02  4.35994240e-03
 -3.28413732e-02  9.67749022e-03 -4.01284508e-02 -8.47993717e-02
 -1.24766538e-02  2.87537556e-02 -3.45322527e-02 -5.56729920e-03
  1.40409753e-01  1.52221462e-02 -5.06717786e-02 -5.03359474e-02
  6.82875142e-02  3.73074226e-02 -2.89342720e-02  2.07315888e-02
 -7.56927058e-02  4.44784760e-02  9.58905965e-02  3.82537134e-02
  4.11713906e-02 -3.71391512e-02  2.12200801e-03  1.18135497e-01
 -5.16783930e-02  5.71349971e-02  1.66512411e-02  1.76796336e-02
  7.43986049e-04 -1.67230517e-02 -2.77910084e-02 -3.14095058e-02
 -4.85417023e-02 -1.13949217e-01 -1.54695436e-02  5.09109199e-02
 -4.47076466e-03 -1.42144375e-02 -5.76467402e-02  5.22246957e-03
  1.27348052e-02 -9.17392597e-03 -8.25418998e-03  9.32317879e-03
  1.90065484e-02 -5.98048754e-02 -8.02801829e-03  6.71116114e-02
 -6.54918402e-02  8.20123882e-04  1.05106942e-02  5.63912999e-33
  4.39090515e-03 -1.12873413e-01 -1.82877835e-02  4.89182547e-02
  1.01165064e-02  5.32271154e-02  1.12728914e-02  2.68767253e-02
 -5.04782349e-02 -2.21719965e-02  2.31341403e-02 -2.40927115e-02
  1.09736770e-02  6.40351400e-02  1.16426431e-01 -7.10041076e-02
  9.28580686e-02  4.58312444e-02 -1.76705010e-02 -1.09466992e-01
  8.08135867e-02  3.79451402e-02  7.27874401e-04 -8.15520659e-02
  9.31083318e-03  3.56033854e-02 -1.17394663e-02 -3.83241996e-02
 -4.74445969e-02 -1.57108493e-02  1.55022889e-02 -7.93407261e-02
 -5.20721963e-03  5.65430857e-02  4.03442383e-02  7.96294957e-02
 -1.76742654e-02 -4.71664444e-02 -4.29632589e-02 -6.99592829e-02
 -2.92116832e-02 -1.21344309e-02  1.51972668e-02 -2.26744246e-02
  2.16477904e-02  2.43747458e-02 -9.61494967e-02  6.65751770e-02
 -4.04583402e-02 -9.50824544e-02  1.91864907e-03  6.79403767e-02
  1.98870338e-02 -7.64376577e-03 -2.06286423e-02 -8.15464333e-02
 -3.74417678e-02  7.38514718e-05 -7.69114494e-02  1.17633618e-01
 -3.09288520e-02  4.97970283e-02 -3.54816243e-02  8.18840042e-02
 -4.06538993e-02  3.85489352e-02 -3.75660360e-02 -8.63860250e-02
  1.44264683e-01 -5.16640488e-03 -5.26926890e-02  3.72885279e-02
 -2.77736410e-03  3.20044868e-02  3.84235010e-02  3.65712866e-02
 -3.13603133e-02 -6.81223348e-02 -5.00301309e-02 -9.90127176e-02
 -9.23404377e-03  4.55521941e-02  4.60654795e-02  6.77544922e-02
 -1.19156670e-02  7.73460697e-03  3.90431322e-02 -8.00121799e-02
  3.88455801e-02  3.00055053e-02 -1.01974957e-01 -5.38845621e-02
  2.62252148e-02  1.07026519e-02  9.93878096e-02 -7.83480356e-33
 -1.61368123e-04  3.33976522e-02  2.72940900e-02 -4.30492498e-02
  2.94749234e-02  5.62254619e-03 -2.54887957e-02 -6.39837235e-02
 -1.13899849e-01 -2.66650692e-02 -5.52505925e-02  4.35184799e-02
  6.27551600e-02  3.21414554e-03  9.23808143e-02  1.76531691e-02
 -2.45594624e-02 -3.84952500e-02 -6.63894266e-02  5.97700514e-02
 -1.06162094e-02  7.59700835e-02 -1.14400731e-02 -2.98772450e-03
  4.44858186e-02  4.46328856e-02  1.14120226e-02  3.52008119e-02
  3.99930999e-02 -7.12487772e-02  3.41886245e-02 -1.99408941e-02
 -5.24345227e-02  2.51652859e-02  1.34272175e-02  2.93948464e-02
  3.35971452e-02  7.88976531e-03 -2.49068122e-02  1.10755093e-01
  5.44799082e-02 -5.17040342e-02 -4.82614785e-02  1.19645968e-02
  2.33324841e-02 -3.34350727e-02 -2.13738973e-03 -2.40224898e-02
  2.33758148e-02 -6.27231151e-02  1.87933557e-02  9.40439571e-03
 -7.55151659e-02 -8.20165500e-02  1.69039890e-02  5.80499843e-02
  2.26408597e-02 -1.59389735e-03 -2.78697372e-03  3.46293747e-02
  4.13695462e-02 -1.36099728e-02  5.21738417e-02  2.83926297e-02
  4.03255001e-02 -3.36069874e-02 -6.33356199e-02 -6.26660958e-02
  1.44515578e-02 -2.62425914e-02 -3.39419954e-02  8.02361816e-02
 -4.64764498e-02 -4.05684970e-02  3.63201872e-02 -5.30531630e-03
  1.53802168e-02  2.45598815e-02  3.83432619e-02  7.19733685e-02
 -1.33391740e-02 -2.10498683e-02  6.13649115e-02  8.94925818e-02
 -2.60722134e-02  3.80205326e-02  1.84608307e-02 -1.74917448e-02
 -3.52255329e-02 -3.88731398e-02 -1.46989664e-02  4.52709757e-03
 -2.18172334e-02  2.99884975e-02 -1.98162366e-02 -5.44613812e-08
 -8.06624293e-02 -1.14057332e-01 -3.35272169e-03  8.28856006e-02
  5.13234958e-02 -2.74029132e-02 -5.17883617e-03 -4.87606786e-02
 -1.08477049e-01 -9.37560275e-02 -9.20285657e-03  7.00315610e-02
 -5.09184152e-02 -5.37265018e-02  4.04450595e-02 -3.71354148e-02
 -3.11490800e-02 -1.43480107e-01 -6.78083375e-02  2.44265422e-02
  2.79691927e-02 -5.23476768e-03 -1.79816186e-02  2.33586635e-02
  9.58955288e-03 -7.97275752e-02  6.54400960e-02  1.30525112e-01
  9.98622701e-02  1.16706043e-01  8.54299143e-02  3.43610905e-02
  8.86538718e-03  4.77827489e-02 -1.14097018e-02  1.87988263e-02
 -1.53390784e-02  2.01085042e-02  1.46032181e-02  1.31941978e-02
 -1.03519799e-03  2.39358991e-02  3.83083932e-02  8.04197714e-02
  8.24916735e-02  1.81986522e-02 -1.93312112e-03 -8.27998221e-02
  7.95348659e-02 -4.84834844e-03 -1.33899480e-01  7.93509558e-03
 -1.13230320e-02  5.14342710e-02 -2.28060167e-02 -2.08930075e-02
 -4.00506891e-02 -9.05336440e-02 -3.84349786e-02 -2.29379013e-02
 -4.30040546e-02 -4.90640961e-02 -3.31888115e-03  3.94834504e-02]"
"/**
 * The Visitor Interface declares a set of visiting methods that correspond to
 * component classes. The signature of a visiting method allows the visitor to
 * identify the exact class of the component that it's dealing with.
 */
class ConcreteComponentA;
class ConcreteComponentB;

class Visitor {
 public:
  virtual void VisitConcreteComponentA(const ConcreteComponentA *element) const = 0;
  virtual void VisitConcreteComponentB(const ConcreteComponentB *element) const = 0;
};

/**
 * The Component interface declares an `accept` method that should take the base
 * visitor interface as an argument.
 */

class Component {
 public:
  virtual ~Component() {}
  virtual void Accept(Visitor *visitor) const = 0;
};

/**
 * Each Concrete Component must implement the `Accept` method in such a way that
 * it calls the visitor's method corresponding to the component's class.
 */
class ConcreteComponentA : public Component {
  /**
   * Note that we're calling `visitConcreteComponentA`, which matches the
   * current class name. This way we let the visitor know the class of the
   * component it works with.
   */
 public:
  void Accept(Visitor *visitor) const override {
    visitor->VisitConcreteComponentA(this);
  }
  /**
   * Concrete Components may have special methods that don't exist in their base
   * class or interface. The Visitor is still able to use these methods since
   * it's aware of the component's concrete class.
   */
  std::string ExclusiveMethodOfConcreteComponentA() const {
    return ""A"";
  }
};

class ConcreteComponentB : public Component {
  /**
   * Same here: visitConcreteComponentB => ConcreteComponentB
   */
 public:
  void Accept(Visitor *visitor) const override {
    visitor->VisitConcreteComponentB(this);
  }
  std::string SpecialMethodOfConcreteComponentB() const {
    return ""B"";
  }
};

/**
 * Concrete Visitors implement several versions of the same algorithm, which can
 * work with all concrete component classes.
 *
 * You can experience the biggest benefit of the Visitor pattern when using it
 * with a complex object structure, such as a Composite tree. In this case, it
 * might be helpful to store some intermediate state of the algorithm while
 * executing visitor's methods over various objects of the structure.
 */
class ConcreteVisitor1 : public Visitor {
 public:
  void VisitConcreteComponentA(const ConcreteComponentA *element) const override {
    std::cout << element->ExclusiveMethodOfConcreteComponentA() << "" + ConcreteVisitor1\n"";
  }

  void VisitConcreteComponentB(const ConcreteComponentB *element) const override {
    std::cout << element->SpecialMethodOfConcreteComponentB() << "" + ConcreteVisitor1\n"";
  }
};

class ConcreteVisitor2 : public Visitor {
 public:
  void VisitConcreteComponentA(const ConcreteComponentA *element) const override {
    std::cout << element->ExclusiveMethodOfConcreteComponentA() << "" + ConcreteVisitor2\n"";
  }
  void VisitConcreteComponentB(const ConcreteComponentB *element) const override {
    std::cout << element->SpecialMethodOfConcreteComponentB() << "" + ConcreteVisitor2\n"";
  }
};
/**
 * The client code can run visitor operations over any set of elements without
 * figuring out their concrete classes. The accept operation directs a call to
 * the appropriate operation in the visitor object.
 */
void ClientCode(std::array<const Component *, 2> components, Visitor *visitor) {
  // ...
  for (const Component *comp : components) {
    comp->Accept(visitor);
  }
  // ...
}

int main() {
  std::array<const Component *, 2> components = {new ConcreteComponentA, new ConcreteComponentB};
  std::cout << ""The client code works with all visitors via the base Visitor interface:\n"";
  ConcreteVisitor1 *visitor1 = new ConcreteVisitor1;
  ClientCode(components, visitor1);
  std::cout << ""\n"";
  std::cout << ""It allows the same client code to work with different types of visitors:\n"";
  ConcreteVisitor2 *visitor2 = new ConcreteVisitor2;
  ClientCode(components, visitor2);

  for (const Component *comp : components) {
    delete comp;
  }
  delete visitor1;
  delete visitor2;

  return 0;
}",C++,Visitor,Refactoring Guru,https://refactoring.guru/design-patterns/visitor/cpp/example#example-0,"[-3.65672298e-02  4.45945635e-02  1.15814423e-02 -1.22067388e-02
 -5.41726984e-02  2.28761043e-03  3.98191288e-02  2.79230140e-02
  2.82225228e-04 -2.92035118e-02  2.65242606e-02 -6.14725724e-02
  1.18172029e-02 -5.76323420e-02  4.37277146e-02  1.50381168e-02
 -1.88503123e-03  3.37052457e-02  4.36539799e-02  8.51255432e-02
 -4.30931803e-03 -5.97611479e-02 -1.14763319e-01 -2.15767715e-02
 -4.30552848e-02  4.77447286e-02 -2.10430287e-02 -9.84362662e-02
  1.00397632e-01  2.17299778e-02  6.28971606e-02  7.40095749e-02
 -3.20146531e-02  1.01103291e-01 -9.11904797e-02  9.93220359e-02
  3.22514237e-03 -9.91498977e-02 -3.98822874e-02  4.08694930e-02
 -7.57678598e-02  1.20666124e-01 -4.74707223e-02 -2.09047012e-02
  4.58304174e-02 -3.95613275e-02 -5.12559414e-02 -4.11718525e-02
 -1.07527798e-04 -4.79184426e-02  1.75548419e-02  4.24061231e-02
  4.22997698e-02  3.08834072e-02 -3.41354199e-02 -1.54259270e-02
 -4.76524845e-04 -9.72225703e-03  1.65340770e-02  6.88794302e-03
 -8.67785420e-03 -5.44030778e-03  4.27361466e-02 -3.52612473e-02
  7.72795305e-02  1.79715769e-03 -6.94379807e-02 -2.17972137e-02
  5.65424971e-02 -1.64700635e-02 -6.10189103e-02  3.50241959e-02
 -1.56834419e-03  1.99924447e-02 -2.94743348e-02  1.59862563e-02
 -7.39258677e-02  1.49963079e-02 -1.46571640e-02 -1.13013834e-01
  4.44474891e-02  1.25186890e-02 -1.10506453e-02 -4.36856076e-02
  1.03208840e-01  9.35385600e-02 -5.11182658e-02 -7.20794722e-02
  4.65246756e-03  4.61427495e-02  3.14131714e-02  7.25142611e-03
 -2.29024459e-02 -2.23242305e-03  3.87180857e-02 -4.71987799e-02
  4.92830761e-02 -1.46523649e-02  1.64476503e-03  9.82643515e-02
 -4.33537848e-02  1.06593527e-01  2.48754509e-02  9.46523994e-03
 -3.34382802e-02 -1.88442338e-02 -2.45922711e-02 -3.45185772e-02
 -2.17211116e-02 -6.84391782e-02 -2.59955041e-02 -1.39013082e-02
  6.22049067e-03 -4.72187363e-02 -2.96988506e-02 -4.18229587e-02
  5.38108908e-02 -3.29519436e-02  7.04353750e-02  3.64987515e-02
  5.55187017e-02 -7.44619071e-02 -1.23566426e-02  5.83065860e-02
  1.68326274e-02 -1.12444088e-01  1.84804425e-02  7.03042674e-33
  2.41298713e-02 -1.95232704e-02 -1.13787375e-01  5.00151105e-02
  3.24559622e-02  2.67187338e-02  6.87149167e-03  2.77989935e-02
 -5.73101304e-02 -1.80648565e-02  6.99517429e-02 -4.39971462e-02
  6.04688041e-02  1.04185067e-01  7.06820115e-02 -1.28138959e-02
  9.60001871e-02  1.59188416e-02  3.41611691e-02 -6.00462817e-02
  7.11064488e-02  2.80902032e-02 -2.39000320e-02  7.25348890e-02
  3.46649624e-02  2.78070313e-03 -4.59984643e-03  8.65766872e-03
 -7.58895278e-02 -1.66899264e-02  5.37121668e-02  2.85305288e-02
  2.75741122e-03  1.02294497e-01  3.41820717e-02  3.23262252e-02
  2.13832390e-02 -6.31206930e-02 -1.80626567e-02 -1.18224695e-01
 -5.84272034e-02 -3.22978832e-02 -2.69759563e-03 -1.64219197e-02
 -9.24071763e-04 -2.84889992e-02 -5.88576794e-02  1.79844629e-02
 -2.69152150e-02 -5.54342121e-02  5.69777051e-03  1.47012219e-01
 -6.72663003e-02  3.24423052e-02  1.14842644e-02 -1.67417116e-02
 -2.31876466e-02  3.46074402e-02 -2.65893508e-02  8.68184194e-02
 -5.53178303e-02  1.16037063e-01 -4.70866039e-02  2.82114819e-02
 -5.70454001e-02  4.68081416e-04 -1.08363606e-01 -5.66725284e-02
  9.10791233e-02  3.70707586e-02 -4.01344001e-02  6.14629053e-02
 -4.91700098e-02  1.49438735e-02 -2.73652803e-02 -9.84525960e-03
 -6.70806020e-02 -1.86806023e-02  1.79402009e-02 -3.68126631e-02
 -6.71257675e-02  1.47823617e-02  4.86119688e-02  5.74051104e-02
  5.33013698e-03 -4.31608930e-02  2.40836926e-02 -6.06589504e-02
 -1.06565030e-02 -3.46469246e-02  2.60602646e-02 -4.03853543e-02
  5.48882447e-02 -4.00770083e-02  2.16576345e-02 -8.67118763e-33
 -8.17088410e-03  4.63436581e-02 -3.28788571e-02 -6.19336516e-02
 -1.19961292e-01  3.16840336e-02 -5.01764640e-02 -1.45276055e-01
 -9.68431905e-02  2.41048988e-02  7.48588657e-03  9.65214819e-02
  5.38704731e-02  2.22574491e-02  3.11321896e-02  7.53635243e-02
 -1.93265360e-02 -6.94982335e-02 -3.56154367e-02  4.74407300e-02
  4.00774600e-03  2.93126162e-02  2.10983139e-02 -1.79388076e-02
  3.17991264e-02  3.92825305e-02 -2.32472718e-02  4.17042598e-02
  5.13495654e-02 -4.65541333e-02 -2.69600414e-02  5.73353434e-04
 -2.66232230e-02 -5.14725707e-02  7.01903850e-02 -9.95891984e-04
 -3.32241990e-02  8.88240114e-02 -4.70240461e-03  2.98230397e-03
  6.39731213e-02 -6.33361936e-02  3.09173558e-02 -2.74109077e-02
  7.09727034e-03 -3.00817620e-02 -4.35354002e-02  5.41675314e-02
  1.62144341e-02 -6.80629676e-03 -3.63682210e-02 -5.02719916e-02
 -2.80667357e-02 -3.19952741e-02 -1.67915821e-02  4.95413132e-02
  1.09447092e-02 -3.20568942e-02  3.92929576e-02 -1.60916504e-02
  2.48151552e-02 -4.14040871e-02  3.26957554e-02  6.58538938e-02
  1.78722013e-02 -8.80572051e-02 -4.59955521e-02  3.94207163e-04
  1.28345680e-03 -1.22643877e-02  1.02513405e-02  8.17459524e-02
  1.31755946e-02 -3.76106389e-02  2.33147908e-02 -4.96612974e-02
  8.93145427e-02 -3.69803957e-03  2.82559898e-02  9.90349613e-03
 -6.23576194e-02  1.65304057e-02  6.44906387e-02 -2.04278044e-02
  5.22057200e-03 -5.20551801e-02 -6.75318167e-02 -4.63350788e-02
 -2.09463481e-03 -3.58116888e-02 -4.04909253e-02  7.65686929e-02
  1.74278417e-03 -8.03679153e-02 -1.45650352e-03 -5.19644452e-08
 -5.15035726e-02 -9.47458223e-02 -5.38423806e-02 -4.52393778e-02
  6.04593381e-02 -1.01496391e-01 -3.38921472e-02 -5.32916673e-02
 -1.12625472e-01 -5.01979142e-02 -2.63748597e-02  4.69459258e-02
 -2.07079258e-02 -7.87276253e-02  8.02489445e-02 -1.10918637e-02
 -2.91502196e-02 -1.11700729e-01 -8.02302957e-02  7.73398811e-03
 -7.01293200e-02 -5.68863079e-02  1.83460079e-02  8.19203407e-02
 -2.21433230e-02 -2.15717535e-02  1.10484652e-01  2.57016830e-02
  5.52442446e-02  5.88143356e-02  5.43469738e-04  7.94466808e-02
 -2.24870164e-02  8.99109431e-03  6.73657283e-02  7.23693743e-02
  2.80636381e-02 -1.34233693e-02 -1.74390583e-03  6.62851259e-02
  1.97593682e-02 -4.58734892e-02 -3.39824967e-02  6.16235696e-02
  7.03838468e-02  2.60927808e-02  1.83189437e-02 -5.29101118e-02
  6.00716285e-02  3.35681476e-02 -8.48459825e-02  2.30124462e-02
 -3.94251570e-02  1.19479530e-01 -6.24458082e-02 -2.58299932e-02
 -1.69875380e-02 -8.78976062e-02  4.14380133e-02  1.92405898e-02
 -2.62696110e-02  3.22773643e-02  6.55540675e-02 -2.26867069e-02]"
"#[derive(Clone)]
struct Circle {
    pub x: u32,
    pub y: u32,
    pub radius: u32,
}

fn main() {
    let circle1 = Circle {
        x: 10,
        y: 15,
        radius: 10,
    };

    // Prototype in action.
    let mut circle2 = circle1.clone();
    circle2.radius = 77;

    println!(""Circle 1: {}, {}, {}"", circle1.x, circle1.y, circle1.radius);
    println!(""Circle 2: {}, {}, {}"", circle2.x, circle2.y, circle2.radius);
}",Rust,Prototype,Refactoring Guru,https://refactoring.guru/design-patterns/prototype/rust/example#example-0,"[-2.46207640e-02  2.73403637e-02 -4.74066585e-02  1.32393942e-03
  3.08764298e-02 -9.42211375e-02  3.44416276e-02  4.46294025e-02
 -1.35104582e-02 -8.61598849e-02  3.59496363e-02 -1.62896216e-02
 -1.18371099e-02  3.87591571e-02  4.60614525e-02 -2.89403275e-02
 -1.08852766e-01  6.45301118e-02  3.91867049e-02 -2.14864127e-02
  2.51914319e-02 -3.52800153e-02  4.21541184e-02  8.25560763e-02
  6.12930879e-02  6.89906999e-02 -5.11392066e-03 -6.95049167e-02
  6.09617196e-02 -7.06151873e-02 -2.81142108e-02  5.31227551e-02
 -2.57376730e-02  2.40956116e-02 -4.68417667e-02  3.77142057e-03
 -3.25315306e-03 -4.23554750e-03  6.95598423e-02 -5.95832020e-02
 -4.50672470e-02  3.22209150e-02  5.14303818e-02 -4.58663190e-03
 -4.54324596e-02  1.06636226e-01 -2.32754219e-02  8.57890695e-02
 -9.89077892e-03  2.42781602e-02 -1.61016248e-02 -4.95401993e-02
 -4.66809832e-02 -3.88060212e-02  1.58869669e-01  4.69979681e-02
 -3.85348201e-02 -1.54044898e-02  6.71218336e-02 -2.52075661e-02
 -6.19370816e-03 -5.99944219e-03  2.14151144e-02  1.97162968e-03
  3.17502953e-03 -6.02658316e-02  2.80553345e-02  9.00157448e-03
 -3.18370275e-02 -8.27620924e-03  4.41416092e-02  6.53780699e-02
  3.15210186e-02 -6.91375742e-03 -7.80645199e-03  1.01267785e-01
 -4.92337383e-02  5.34524955e-02 -7.10230395e-02  3.74782234e-02
 -6.26060814e-02  3.81775550e-03  4.86980416e-02  1.03905629e-02
 -1.84446666e-02  6.61376566e-02  8.84057081e-04 -1.30079597e-01
 -5.98400533e-02  5.72758131e-02  9.10689309e-03  2.54313592e-02
 -2.94360798e-02  9.29726381e-03 -6.53151423e-02 -3.03623378e-02
  1.59575995e-02 -1.77923907e-02 -3.51212807e-02  8.27013701e-02
 -5.67204272e-03  4.65163514e-02  1.23147488e-01 -3.41812707e-02
 -8.38770997e-03 -2.57269051e-02  1.05328085e-02 -6.27431422e-02
 -3.18266042e-02  2.32473258e-02  4.97679710e-02  8.14925472e-04
 -3.27914171e-02 -9.69236437e-03 -8.59895349e-03 -8.80699884e-03
 -2.62161493e-02 -3.26473429e-03  4.88040596e-02 -1.15355467e-02
  5.75718507e-02  3.23793180e-02  7.61019532e-03  3.42037082e-02
 -4.85138372e-02 -4.24497798e-02 -8.25174823e-02  1.44803419e-33
  1.63015462e-02  1.39370458e-02 -5.28827310e-02 -2.65184809e-02
 -1.65262967e-02 -5.71456291e-02  1.33506460e-02 -1.54169230e-02
  1.31670684e-02 -6.61952943e-02 -3.15685384e-02 -1.67525318e-02
  2.88628284e-02 -1.89883597e-02  5.92446178e-02 -7.96994492e-02
  1.38487607e-01 -1.09525705e-02  3.34002916e-03 -2.27822475e-02
  1.22917835e-02  5.47659248e-02 -4.00180593e-02 -2.79596448e-02
 -1.93091817e-02 -3.16268355e-02 -2.00367384e-02  3.62794548e-02
 -5.63228037e-03  2.37267539e-02 -5.05316034e-02 -1.00776050e-02
  3.37549075e-02  8.28173533e-02  6.38343319e-02 -2.62673646e-02
  3.66513543e-02 -1.08351163e-03 -4.81917746e-02 -1.12096943e-01
  9.04394686e-02 -5.00885770e-02 -5.70893474e-02  5.44446446e-02
  4.19133008e-02  2.04036757e-02  3.60041531e-03  6.51808307e-02
 -1.49095142e-02 -1.73712838e-02 -6.64415136e-02  9.64453295e-02
 -8.80341083e-02 -5.46095259e-02  2.64973491e-02 -2.89192777e-02
  2.97327079e-02 -4.94744144e-02 -5.22178449e-02  1.02292679e-01
 -5.05763963e-02  9.11908448e-02  2.45083799e-03  2.30494644e-02
 -9.22587216e-02  5.46799563e-02 -1.28562644e-01 -8.37563500e-02
  6.53538480e-02  1.78841054e-02 -2.27530338e-02  3.74739952e-02
 -7.67792314e-02  6.73123300e-02 -3.18436623e-02 -1.78802516e-02
 -4.49699759e-02  1.36373369e-02  9.25733745e-02 -7.70728886e-02
 -6.29446805e-02  1.14215039e-01 -7.40281120e-02 -1.93726867e-02
  8.57338216e-03 -1.48179354e-02  5.57950921e-02 -4.47745854e-03
 -4.67569903e-02  2.67963875e-02 -2.86331400e-02 -6.69840127e-02
  8.71862695e-02 -3.59529369e-02 -2.47474643e-03 -2.92706010e-33
 -1.83417611e-02 -3.31142619e-02  6.76254258e-02  3.87965739e-02
 -9.06728357e-02 -2.81377546e-02 -1.71227492e-02 -6.09226748e-02
 -7.23186582e-02  7.37040341e-02 -9.02034938e-02 -1.62490178e-02
  2.56897733e-02 -3.02554686e-02  4.17136699e-02  2.12007239e-02
  1.84267666e-02 -5.36896363e-02 -1.48800537e-02 -3.00038084e-02
  1.65966973e-02  7.70899877e-02  1.91299710e-02  4.15467611e-03
 -6.62440807e-02  3.64543572e-02 -7.21865427e-03 -2.89716162e-02
  3.53550017e-02  3.60478833e-02 -1.09043844e-01 -9.56001878e-02
 -1.71669461e-02  4.24541086e-02  2.15455294e-02 -6.37322664e-02
  7.88560882e-02  2.73395590e-02  2.92344503e-02 -9.47972387e-02
 -1.56792291e-02 -3.11677307e-02 -2.42938399e-02  2.14099530e-02
  2.66615283e-02  2.60795839e-02  1.15812063e-01  5.04500531e-02
 -8.55686292e-02 -7.84346983e-02  3.62086669e-02 -8.69510602e-03
  4.16370519e-02 -9.77283418e-02 -4.14589085e-02 -6.81952760e-03
  3.64565700e-02  2.45386027e-02  1.25201598e-01  1.05918609e-02
 -8.26419424e-03 -1.39632970e-01  2.50352677e-02  6.43790066e-02
  4.94253002e-02 -7.63524994e-02  7.61905871e-03 -2.10740938e-04
 -3.28500085e-02  5.87091781e-02 -1.28070926e-02  9.05416161e-02
 -3.85499187e-02 -4.01382744e-02  1.03373677e-02 -1.63903143e-02
  4.60814871e-02  2.67538941e-03  3.12077329e-02  5.34411462e-04
  4.62053169e-04  2.77265441e-02 -1.15241660e-02  1.73865892e-02
  2.53653061e-02 -8.52425247e-02  1.12081006e-01  1.83058176e-02
  2.07496788e-02  8.28856006e-02 -1.38013624e-02  8.76044035e-02
 -4.96643968e-02  4.99643013e-02  1.24016538e-01 -4.28707772e-08
 -1.01950198e-01 -4.88102250e-02 -2.20864527e-02  5.19148633e-02
  5.36068454e-02 -7.01926276e-02 -5.05080912e-03 -1.71126588e-03
 -2.90779974e-02 -6.42789900e-02 -4.98022437e-02  1.00605585e-01
 -1.58546735e-02 -1.68060651e-03  3.36179584e-02 -4.55595292e-02
  2.07922584e-03  1.50871659e-02 -6.73650997e-03  3.34292501e-02
  1.19802719e-02 -6.59427270e-02  3.69660966e-02 -1.18552828e-02
 -3.81195284e-02 -9.25442502e-02  2.13143136e-02 -1.16651868e-02
  3.50479484e-02 -3.16512269e-05  4.01369222e-02  8.55123159e-03
 -1.84078459e-02  1.42978430e-02  4.80588619e-03 -1.23068430e-01
  2.74757948e-03  3.06868274e-02 -2.93687992e-02  8.36049765e-02
 -4.37597707e-02 -2.46722363e-02 -5.43893315e-02  1.33960657e-02
  2.29705554e-02 -4.55439033e-04 -3.82882059e-02  2.39935215e-03
 -7.50061870e-02  1.62010081e-02  2.00424474e-02  3.31351832e-02
  6.18341863e-02 -5.99587848e-03 -5.69646172e-02 -8.05573463e-02
  5.60347885e-02  3.38544063e-02 -4.88538444e-02  6.86230585e-02
 -1.50062656e-02  5.44778518e-02  8.81791562e-02 -5.13893832e-03]"
"//! A pure safe way to implement Singleton in Rust is using no static variables
//! and passing everything around through function arguments.
//! The oldest living variable is an object created at the start of the `main()`.

fn change(global_state: &mut u32) {
    *global_state += 1;
}

fn main() {
    let mut global_state = 0u32;

    change(&mut global_state);

    println!(""Final state: {}"", global_state);
}",Rust,Singleton,Refactoring Guru,https://refactoring.guru/design-patterns/singleton/rust/example#example-0,"[-9.58139300e-02 -3.46734538e-03 -6.28394168e-03  4.84156683e-02
 -4.27727913e-03  3.63445543e-02  2.21610777e-02  9.60590597e-03
 -4.44494523e-02 -8.35359320e-02 -5.13962843e-03  9.72169451e-04
 -2.59474094e-04  2.14249268e-02 -1.69504993e-02 -2.78235003e-02
 -3.85486782e-02 -2.98267212e-02 -4.09556273e-03 -3.83739988e-03
  2.89798342e-03 -3.14723328e-02 -2.46614572e-02  2.90623736e-02
 -3.87429111e-02 -1.00091733e-02 -2.53039561e-02 -7.40827294e-03
  1.16479643e-01  1.87816974e-02  2.63007134e-02  1.86907165e-02
  9.70957917e-04 -1.41933085e-02 -4.29914519e-02  6.52195364e-02
 -3.36464122e-02 -7.84228742e-02 -6.11973703e-02  2.82327831e-03
 -6.54338971e-02  4.35517468e-02 -7.66642839e-02 -2.12896932e-02
  1.01026334e-02  3.31661813e-02  7.77474493e-02  4.47113514e-02
  1.29799638e-03 -6.63097808e-03  8.68557841e-02  4.77957614e-02
  4.08058055e-02 -2.19999421e-02  1.72600284e-01  1.24646658e-02
  5.44146039e-02 -3.87122594e-02 -6.15616441e-02  1.62319131e-02
 -5.00286035e-02  4.29338180e-02  9.97729748e-02 -1.33325746e-02
  7.86256567e-02  4.32533864e-03  2.46448275e-02  9.22667831e-02
  6.03073761e-02 -7.19381543e-03  1.67583451e-02 -2.90862191e-03
  2.69497707e-02  3.22809406e-02 -6.20203093e-02  8.97071045e-03
 -2.38091238e-02 -2.71020234e-02 -2.92370152e-02  7.19788373e-02
 -5.47585040e-02  1.54821649e-02  3.58711369e-02 -1.04920059e-01
  4.61357981e-02 -1.78096686e-02 -4.89573441e-02 -2.49139965e-02
  3.38178314e-02  1.10285595e-01 -1.60417408e-02  2.95516197e-03
  9.63585079e-03 -2.13628691e-02  2.96468250e-02  1.74266063e-02
 -2.14479733e-02  4.18434180e-02  2.52048136e-03  5.64545095e-02
 -4.70224209e-02  1.46909384e-02  8.48928615e-02  8.16759914e-02
  3.06549463e-02 -1.23463841e-02 -6.30733371e-02 -5.53955138e-02
 -8.22382644e-02 -1.54242367e-02  4.06377167e-02 -1.53654804e-02
 -1.71282142e-02  1.93093182e-03 -6.22575777e-03 -1.41653037e-02
  1.22857252e-02  1.02110719e-02  7.74626732e-02  1.39645055e-01
  2.87893750e-02 -3.31969559e-03 -8.69829208e-03  6.56431466e-02
 -4.75084521e-02  2.11933888e-02  6.07847162e-02  3.48540504e-33
  4.06095609e-02 -6.55881912e-02 -8.39351714e-02  2.97515374e-02
 -9.59701687e-02  5.67140291e-03  1.02251386e-02  3.34969051e-02
 -6.66701272e-02  2.94837379e-03  6.01428635e-02  2.67136693e-02
  3.44950147e-02 -2.84180492e-02 -3.87825482e-02 -2.68942956e-02
  7.31528699e-02 -7.55397528e-02  4.62331958e-02 -2.55193133e-02
  5.75811826e-02  5.80359101e-02 -4.06497382e-02 -1.08743168e-01
 -2.27003898e-02 -3.16942073e-02 -2.31973082e-03 -4.32996266e-02
 -3.70137915e-02  3.74071230e-03 -1.16418162e-02 -2.61663906e-02
 -3.21347341e-02  9.91561189e-02  3.63853313e-02 -5.36510609e-02
 -2.02790871e-02  6.53062835e-02 -9.39286351e-02 -1.28755242e-01
  5.70304319e-02  2.07792614e-02 -1.81040894e-02  3.39578986e-02
  1.12083666e-01 -2.92052682e-02 -2.80244481e-02  5.22201806e-02
 -4.29988503e-02 -9.82858092e-02 -6.45727804e-03  4.05538231e-02
 -3.16385441e-02 -1.70338787e-02 -4.57456149e-02 -5.31227291e-02
  1.56006329e-02 -8.66838172e-02 -5.65281808e-02  2.91033052e-02
  1.64857879e-02 -2.66953697e-03 -1.43668735e-02  6.53182790e-02
  2.70916913e-02  2.19536889e-02 -1.02953650e-01  1.20735914e-03
  7.71274499e-04  1.24989441e-02  2.00470575e-04  2.73284651e-02
 -8.29952806e-02 -1.82859842e-02 -5.02111465e-02 -1.60958674e-02
  8.88179913e-02 -3.60516794e-02 -7.03760982e-02 -5.33098951e-02
 -6.74860692e-03  6.87710792e-02 -3.44834328e-02  1.58427939e-01
 -4.10680957e-02  3.60222757e-02 -1.06967418e-02  1.30753648e-02
 -4.97648455e-02  5.72388135e-02  4.42720763e-02 -5.36423698e-02
  7.48832002e-02 -9.03372988e-02 -1.45029742e-02 -5.76118340e-33
  2.07888763e-02  1.42594771e-02 -2.58293208e-02 -3.40405740e-02
 -4.47721593e-02  1.01086302e-02 -2.62962207e-02  1.30625740e-02
 -8.40752795e-02  1.61797013e-02 -6.10130280e-02  8.10139161e-03
  7.41188899e-02  3.36851999e-02 -3.80190164e-02  3.47298533e-02
 -5.13978451e-02 -2.10212339e-02 -8.80329870e-03  7.00213164e-02
 -4.38414328e-02 -3.61967199e-02 -3.50703858e-02 -2.03783233e-02
  3.50485146e-02  1.15805008e-02 -7.23416507e-02 -1.48457000e-02
  3.88852805e-02  5.33274300e-02 -6.84712231e-02 -3.99802588e-02
 -3.83306853e-02 -2.35825265e-03  7.67498091e-03 -4.56663072e-02
 -6.68837316e-03 -5.07238694e-02  1.14912037e-02 -8.43770336e-03
  3.30217630e-02  1.26481885e-02 -7.23580495e-02  5.33328094e-02
  4.96901423e-02  9.63790491e-02 -4.10894081e-02  1.63244754e-02
 -6.57672063e-02 -3.37750837e-02 -4.64134775e-02 -8.75777844e-03
 -2.32732333e-02 -3.56643870e-02 -3.83212231e-02 -3.85243744e-02
 -1.21736592e-02  2.20728554e-02  2.42090859e-02  9.31914151e-02
  1.28147587e-01 -7.97033533e-02 -6.10566437e-02  9.04086009e-02
 -8.41422155e-02 -1.00886591e-01  2.63043344e-02  4.10640240e-02
 -3.66803408e-02 -2.44383030e-02  1.05095677e-01  6.17113486e-02
 -6.00490384e-02 -5.38926944e-02 -3.73353697e-02  3.16017941e-02
  5.89039400e-02 -4.68946956e-02  4.47711498e-02  3.91932204e-02
  2.87651736e-03  1.08213956e-02 -9.02019367e-02 -4.57698144e-02
  4.63131778e-02 -4.28044088e-02  8.63172114e-02  1.44306999e-02
 -1.81676690e-02  2.37620510e-02 -6.56526759e-02  2.44626235e-02
 -1.26157492e-01 -6.45580739e-02 -7.71724433e-02 -5.47925119e-08
  2.08675917e-02  6.88887993e-03  1.67599693e-02  6.20520264e-02
 -2.53948011e-03 -4.25780332e-03  4.91914004e-02 -8.34391266e-02
 -5.96033633e-02  5.11801802e-02  2.22550724e-02  4.70256992e-02
  5.69272004e-02 -4.31125686e-02 -3.10648698e-02  4.57458012e-02
  5.10580838e-02 -2.91122142e-02 -5.24236076e-02  2.80686524e-02
  1.77779868e-02  2.29499377e-02 -5.49165867e-02 -8.73823743e-03
 -1.05607949e-01 -4.73217890e-02  7.06701726e-02  4.44130450e-02
  8.46357346e-02 -4.39695157e-02  2.24294923e-02  2.65461523e-02
  4.04738486e-02  8.82948041e-02 -4.33978699e-02  3.51169258e-02
 -1.19334787e-01  1.09531544e-01 -3.02146561e-02  1.16383387e-02
 -8.90310109e-02 -4.27360833e-02 -4.55214307e-02 -1.08268149e-02
 -6.33514076e-02  6.66696355e-02  1.37551539e-02 -3.43303904e-02
 -3.86169069e-02  4.33447435e-02  1.90707892e-02  3.64222354e-03
  2.80518215e-02  9.13707092e-02  2.31027436e-02  4.12886813e-02
  1.01836741e-01 -4.78104167e-02 -7.70372106e-03  1.89689621e-02
 -1.00268841e-01 -2.51533203e-02 -3.35950293e-02  1.92400031e-02]"
"use std::io::{BufReader, Cursor, Read};

fn main() {
    let mut buf = [0u8; 10];

    // A buffered reader decorates a vector reader which wraps input data.
    let mut input = BufReader::new(Cursor::new(""Input data""));

    input.read(&mut buf).ok();

    print!(""Read from a buffered reader: "");

    for byte in buf {
        print!(""{}"", char::from(byte));
    }

    println!();
}",Rust,Decorator,Refactoring Guru,https://refactoring.guru/design-patterns/decorator/rust/example#example-0,"[ 2.09989166e-03  2.25618165e-02 -2.94668004e-02 -4.40290011e-02
 -5.42367660e-02  1.24902371e-02  4.02648896e-02  2.62539666e-02
 -1.52367670e-02 -6.01682328e-02 -1.78599693e-02  1.89078618e-02
  1.82814579e-02 -7.25687435e-03 -8.20995420e-02 -4.88206707e-02
 -9.10742432e-02  4.79165800e-02  1.04460854e-03  3.15722376e-02
  1.50641566e-02  4.31487225e-02 -1.83965415e-02 -4.85444441e-03
 -5.71262725e-02  6.28298149e-02  1.56750660e-02 -7.25195482e-02
  1.14447167e-02 -2.78450139e-02  5.16513661e-02 -1.65763609e-02
 -1.56341307e-02  4.84810695e-02 -5.48347086e-02  2.21034032e-04
  4.88880388e-02 -7.04955012e-02 -1.03132583e-01 -7.36553269e-03
  5.35220690e-02 -2.98819393e-02 -8.66638869e-02  1.69415884e-02
  9.63021740e-02  3.48637637e-04  2.91296300e-02  5.22110704e-03
  7.62248188e-02  6.96265250e-02 -3.68871279e-02  5.15223406e-02
 -2.27723955e-04  6.71448037e-02  4.67499755e-02  1.16377361e-02
  3.19774002e-02 -2.43931897e-02 -2.84041241e-02  2.39606351e-02
 -8.34963098e-02 -1.41650746e-02  4.18019295e-02  1.57778393e-02
  5.78299649e-02  6.18884340e-03  5.41401580e-02  1.08189024e-01
 -9.41071473e-03 -3.53542641e-02  1.79496538e-02  4.81884778e-02
 -8.24299902e-02  1.28024770e-03 -6.90240180e-03  2.84317471e-02
 -1.97220147e-02 -1.03913192e-02  4.09070309e-03  2.96120886e-02
 -4.50359546e-02 -3.08083054e-02 -6.46688649e-03 -2.67687421e-02
  2.46372297e-02  8.86733010e-02 -3.40161249e-02  2.00331900e-02
 -6.71460386e-03  3.91271077e-02 -1.86999682e-02 -1.23630175e-02
 -3.85558084e-02  4.67840731e-02  1.46328076e-03  9.26797837e-03
  1.05761610e-01 -4.26470302e-03  4.45218682e-02  4.12057526e-02
 -1.02354154e-01  6.11323342e-02  4.27716710e-02  2.53761914e-02
 -4.54392768e-02 -2.14076582e-02  2.72570327e-02  9.59650520e-03
 -6.68736324e-02 -7.01922849e-02  4.18921039e-02  2.18708254e-02
  2.10408890e-03  9.18299076e-04  3.44513506e-02 -3.84223461e-02
 -2.86498796e-02 -3.06436494e-02  3.87355871e-02 -2.29949248e-03
 -1.92624610e-02  2.20876071e-03 -1.75458893e-01  1.13533191e-01
 -1.66470762e-02 -3.32609303e-02 -2.26538791e-03  4.62753261e-33
 -2.68852320e-02 -2.75737718e-02  7.71764619e-03  2.28028707e-02
 -1.26712307e-01  2.23588478e-02  3.41971288e-03 -9.01056686e-04
 -2.47347578e-02 -4.55435626e-02 -1.42158289e-02 -6.96763247e-02
  3.28000262e-02  5.98352626e-02  6.80263415e-02 -7.53113180e-02
  7.06703588e-02 -1.63511280e-02  5.26155680e-02 -1.14655762e-03
  6.74090013e-02  6.34184256e-02 -4.06692624e-02 -6.53686970e-02
 -4.84185293e-02 -9.36438888e-03 -3.19388136e-02 -1.88448243e-02
 -2.29701363e-02  4.49882308e-03  3.60828601e-02 -3.88310365e-02
  1.02512892e-02 -6.89390674e-02 -2.06007063e-02 -1.09185927e-01
  1.75806284e-02  2.60789804e-02 -8.03625286e-02 -3.71012986e-02
  6.12076372e-02 -1.79213341e-02 -1.20981298e-02  7.37190247e-02
 -4.10612626e-03 -1.97716132e-02 -3.50438431e-02 -4.77870926e-02
 -2.27364711e-02 -4.66661416e-02 -1.90241542e-03  9.23954323e-02
 -7.76355714e-02  2.40975362e-03  5.42300455e-02 -7.34183341e-02
  3.71875390e-02 -1.89448260e-02 -5.11119515e-02  6.58041015e-02
  1.14682307e-02  1.34879559e-01  6.73031360e-02  4.35952134e-02
 -4.75917570e-02 -5.28874286e-02  2.99991062e-03 -1.73118676e-03
  2.66515110e-02 -3.82966287e-02 -5.73175289e-02 -7.66666187e-03
 -1.91026051e-02 -3.48786125e-03 -6.26521930e-02  5.20215780e-02
 -5.72867952e-02 -9.28222165e-02  2.99200378e-02 -5.93369417e-02
  3.04227117e-02  4.62328643e-02  2.69309897e-02  3.68463621e-02
 -1.29479440e-02  5.50710596e-03  3.70077463e-03 -8.92441198e-02
  3.28197815e-02 -5.87715916e-02 -2.08378825e-02 -6.86885417e-02
  7.87154362e-02 -1.35286093e-01 -2.88234781e-02 -5.39216340e-33
  4.59755696e-02  2.05565849e-03  3.34548801e-02  6.99532107e-02
 -1.35580078e-01  4.50813249e-02  3.34438719e-02  4.65595257e-03
 -1.52978366e-02  5.56042232e-02 -1.01466656e-01  3.74242403e-02
  8.61891955e-02 -5.20575270e-02  7.24395365e-02  5.95919508e-03
 -1.65482815e-02 -1.27658760e-03 -1.81697272e-02 -4.00480488e-03
 -3.18895131e-02 -7.42921531e-02  1.56042933e-01  2.44104378e-02
  7.87981749e-02  8.47054925e-03  2.08583772e-02  1.70495696e-02
 -3.38104330e-02 -4.07228135e-02 -3.87081280e-02 -4.84120697e-02
  3.15227844e-02  4.70816623e-03 -5.92565769e-03 -2.81883273e-02
  5.58041483e-02  8.88037216e-03  2.21038051e-02  6.31169090e-03
  8.06511492e-02  4.68850508e-03 -2.02251738e-03 -6.80779759e-03
 -6.89482838e-02  2.22739410e-02 -4.34350483e-02  4.78083789e-02
  6.02001175e-02 -3.36039602e-03  3.67094181e-03  5.07830009e-02
 -4.65034600e-03 -7.23930895e-02 -2.40943842e-02 -2.06928048e-02
  5.99594302e-02 -2.72739194e-02  6.63397312e-02  8.95683654e-03
 -4.88315783e-02 -8.87044519e-02  3.45109403e-03 -3.28657962e-02
  5.58592528e-02 -4.29302603e-02  5.33391051e-02 -3.60792615e-02
 -3.13255042e-02 -4.87655140e-02  4.80003431e-02  1.52107142e-02
  2.49158461e-02  4.42954302e-02  4.63390984e-02  1.84392259e-02
 -3.86528634e-02 -1.01760603e-01 -4.54239867e-04  7.81459212e-02
  8.27921182e-03  1.21415844e-02  1.75513048e-02  7.22291544e-02
  7.25256279e-02  2.68590506e-02  1.07820891e-02 -1.11243099e-01
  1.48800062e-02 -3.00420988e-02 -1.68910921e-02  7.68705234e-02
 -1.43813547e-02 -3.37221362e-02  6.29796321e-03 -4.74360249e-08
  2.27797367e-02 -1.52594641e-01 -1.76114775e-02  5.73062599e-02
  2.95306146e-02 -7.64390975e-02 -7.98005313e-02 -7.99148306e-02
 -2.66008917e-02 -4.42798659e-02 -2.92010559e-03 -7.43520185e-02
 -2.84060296e-02 -9.32956040e-02  1.42823532e-01 -2.12039892e-03
  1.12301365e-01 -9.04052630e-02 -1.14259040e-02 -4.06148732e-02
  3.66891511e-02  6.84810355e-02 -4.84301969e-02  5.90435565e-02
  1.04308603e-02 -5.24141360e-03 -1.24849416e-02  3.51833589e-02
  1.43331334e-01 -6.25856295e-02  9.35143679e-02 -4.92340587e-05
  2.35143192e-02  5.63619658e-02  3.45674157e-03 -7.96562713e-03
  3.16782743e-02  1.08089402e-01 -3.97681855e-02  1.14484929e-01
  1.43827870e-02 -1.32431807e-02 -3.09453849e-02  1.97032318e-02
 -6.60605058e-02 -6.93189818e-03 -2.46947445e-02  4.78853956e-02
  1.79925491e-03  3.54631543e-02  6.51819166e-03 -2.86047347e-02
  4.82646786e-02  5.10919653e-02 -9.36680883e-02 -6.20217212e-02
 -3.46280709e-02 -1.08209252e-01 -2.20357515e-02  7.05904141e-02
 -8.73631984e-03  2.65905689e-02 -1.18820486e-03  5.31987548e-02]"
"trait Memento<T> {
    fn restore(self) -> T;
    fn print(&self);
}

struct Originator {
    state: u32,
}

impl Originator {
    pub fn save(&self) -> OriginatorBackup {
        OriginatorBackup {
            state: self.state.to_string(),
        }
    }
}

struct OriginatorBackup {
    state: String,
}

impl Memento<Originator> for OriginatorBackup {
    fn restore(self) -> Originator {
        Originator {
            state: self.state.parse().unwrap(),
        }
    }

    fn print(&self) {
        println!(""Originator backup: '{}'"", self.state);
    }
}

fn main() {
    let mut history = Vec::<OriginatorBackup>::new();

    let mut originator = Originator { state: 0 };

    originator.state = 1;
    history.push(originator.save());

    originator.state = 2;
    history.push(originator.save());

    for moment in history.iter() {
        moment.print();
    }

    let originator = history.pop().unwrap().restore();
    println!(""Restored to state: {}"", originator.state);

    let originator = history.pop().unwrap().restore();
    println!(""Restored to state: {}"", originator.state);
}",Rust,Memento,Refactoring Guru,https://refactoring.guru/design-patterns/memento/rust/example#example-0,"[-7.42820576e-02  5.63842617e-02 -1.23605086e-02  2.37412471e-02
  1.51136229e-02  1.51590481e-02 -2.72541996e-02  1.73137505e-02
 -7.68179744e-02 -5.19618765e-02  7.00178817e-02 -4.88211736e-02
 -4.28674035e-02  6.85819564e-03 -1.23078125e-02  2.01581754e-02
 -1.16294175e-01  7.86049515e-02 -5.87533750e-02 -9.42254160e-03
  5.08523956e-02  2.35339273e-02  2.75263637e-02  1.92299075e-02
  5.08212931e-02  6.76240921e-02  2.46529114e-02 -1.66741107e-02
  7.17572570e-02 -3.84131931e-02  9.17033479e-03 -4.47171321e-03
 -2.33904123e-02  2.00088769e-02 -2.25809626e-02  1.10570170e-01
 -7.87622929e-02 -4.96920459e-02 -2.00786237e-02 -1.11361854e-01
 -2.49185618e-02  2.56512389e-02 -6.24375157e-02 -2.51091495e-02
 -1.56870969e-02  2.49938387e-02 -2.39758193e-03  2.85361242e-02
  7.37549691e-03  2.03377400e-02  1.18208788e-02  3.90209705e-02
 -1.61742084e-02  2.40601245e-02  8.11745897e-02  1.25511497e-01
  2.18393430e-02 -1.69967674e-02 -7.89983794e-02  9.43862554e-03
 -2.67364383e-02 -4.38059773e-03 -7.90594053e-03 -5.64782023e-02
  2.78884526e-02  4.94144037e-02  5.01207784e-02  5.23922741e-02
  2.33195201e-02  4.27484000e-03  4.98414151e-02 -2.01045759e-02
  1.43131092e-02 -2.08477173e-02 -1.85642429e-02  1.53655803e-03
 -4.70202751e-02  4.02207151e-02 -6.79058805e-02  2.50429643e-04
 -1.95477833e-03 -3.71710323e-02  1.49098085e-02 -1.55108720e-02
  2.48455890e-02  1.59880500e-02 -3.77444848e-02 -1.37510344e-01
  5.13913445e-02  9.46112350e-02  4.13234066e-03 -4.13249880e-02
  5.31905219e-02 -1.74524616e-02 -1.39244758e-02  4.14541326e-02
  3.48958783e-02  6.56533018e-02  2.33603958e-02  1.00065507e-01
  2.75497343e-02  2.92166285e-02  2.28187367e-02  4.07143608e-02
 -4.76476140e-02 -5.71172200e-02 -5.76182175e-03 -1.66262072e-02
 -8.65307301e-02  2.25436352e-02 -2.57516309e-04  7.75213093e-02
 -1.82632182e-03  3.88059802e-02 -1.27462167e-02 -6.61599189e-02
 -3.94177660e-02  2.24037915e-02  3.11718024e-02  1.94403380e-02
  1.38363261e-02 -2.77056415e-02  3.33251655e-02 -1.70750804e-02
 -8.01358595e-02 -3.33829708e-02 -4.32528295e-02  4.94067255e-33
  4.11110669e-02 -3.49977948e-02 -9.70230252e-02  1.32922763e-02
 -4.18505035e-02  8.21975544e-02 -3.77856977e-02 -1.39886495e-02
 -5.67242056e-02 -8.90115425e-02  3.38187994e-04  1.63146779e-02
 -2.39718426e-02 -2.15996262e-02 -1.97919905e-02 -1.49015486e-01
  3.74756195e-02  5.44253066e-02  7.23228008e-02 -1.28767162e-03
  9.30363685e-02  9.67074707e-02 -3.28232497e-02 -1.02134526e-01
 -1.55742168e-02  3.92673612e-02  4.23850641e-02  2.28784829e-02
 -1.27057403e-01  1.50263412e-02  2.16555726e-02 -5.44507802e-02
  1.88890453e-02  1.52744101e-02  5.74138016e-02  1.19195804e-02
  1.73923094e-02 -2.31392980e-02 -1.30251750e-01 -1.39719918e-01
  2.09543500e-02  1.89187396e-02 -5.90427220e-02  9.20697581e-03
  8.60087294e-03 -1.06029056e-01  2.51588691e-02  6.87868372e-02
 -1.97411552e-02 -3.09529379e-02  1.70606002e-02  2.27924101e-02
 -5.50764799e-02 -1.13049604e-01 -2.58231275e-02  2.31113564e-02
  2.06100997e-02  3.21159698e-02 -4.40838886e-03  3.02020162e-02
 -1.14844292e-02  1.09808832e-01  3.72893806e-03  2.90302504e-02
  3.38171929e-04  1.25988975e-01 -8.23139995e-02 -1.17627177e-02
  8.40745643e-02 -2.47104019e-02 -4.11524847e-02  1.04086911e-02
 -7.40100741e-02  4.86599887e-03  5.00633265e-04 -1.70600489e-02
 -2.55178921e-02 -2.49115806e-02 -7.04752579e-02 -1.12324968e-01
 -1.84215549e-02 -2.10639252e-03 -1.10189557e-01  1.16452619e-01
  7.73969963e-02  1.38814151e-02  2.29799710e-02 -7.57062584e-02
  1.23176118e-02  3.57728004e-02  1.35726044e-02 -8.09265673e-02
  9.49457884e-02 -6.93602860e-02  1.32849850e-02 -5.29434537e-33
  5.88084050e-02 -6.66188002e-02  2.75260247e-02  1.82917826e-02
 -6.42362190e-03 -6.35776296e-02  3.97987701e-02  8.71671811e-02
 -7.75166005e-02 -3.50707956e-02 -7.33934492e-02  1.56145198e-02
  7.96590075e-02 -8.45618732e-03 -1.21656135e-02  8.29052702e-02
  3.06952689e-02 -3.04405689e-02 -1.65393148e-02 -1.34945568e-02
 -1.09903757e-02  4.39542644e-02  2.53106952e-02  4.80460376e-02
 -4.86945547e-02  1.46319084e-02 -2.33206083e-03  4.83088195e-02
  2.81769950e-02 -5.03986366e-02  3.78670134e-02 -5.60689420e-02
 -4.85241488e-02  2.42594220e-02  4.44653211e-03 -3.59243080e-02
 -2.82670744e-02  3.53306495e-02 -5.01284143e-04  4.84701172e-02
  4.36483845e-02  2.93247402e-02 -8.64534304e-02  5.79370894e-02
 -3.43951993e-02  5.50532006e-02 -3.32264602e-02  4.83129285e-02
  1.76145826e-02 -3.82374451e-02  3.72492857e-02 -4.48500216e-02
 -5.24214171e-02 -5.71502745e-02  6.79646945e-03 -2.47810073e-02
  1.16182387e-01 -7.26204589e-02 -3.69724408e-02  3.85027677e-02
 -4.48268987e-02 -9.20495316e-02  4.32896204e-02  1.74865965e-02
  1.00778967e-01 -6.79139197e-02  4.39936994e-03 -5.07103465e-03
 -1.67876799e-02 -1.92914438e-02  7.20186755e-02  4.15649042e-02
 -2.91369427e-02 -5.27895950e-02  1.50682628e-01 -2.23942753e-02
 -6.59331530e-02  1.55352941e-02  6.76722452e-02 -4.41786125e-02
 -7.83093274e-02  1.13842043e-05 -6.46156147e-02 -9.05700959e-03
  3.25171836e-02 -8.14754143e-02  2.84082559e-03  7.98965096e-02
  4.54418585e-02  2.04576459e-02  7.35807233e-03  6.10440671e-02
 -5.00670634e-02  4.68808673e-02  4.28158268e-02 -4.91402368e-08
 -9.29309577e-02 -6.69765249e-02  1.10206129e-02  1.21993072e-01
  9.11883265e-02 -5.35730086e-02  4.48469399e-03 -7.34096318e-02
 -4.14683297e-03 -9.38556641e-02 -4.73807529e-02  4.74649817e-02
 -7.67262504e-02 -6.53152540e-02  2.19239704e-02 -3.81085053e-02
  4.31812778e-02  2.10197642e-02 -6.00599945e-02  1.96247026e-02
 -4.79049841e-03 -5.39078638e-02 -2.68853065e-02  5.66637442e-02
 -4.49829176e-03 -3.53729911e-02  1.79253444e-02  6.29274175e-02
  8.43560696e-02  3.62807103e-02  5.73392808e-02  2.85793506e-02
  4.79642302e-02  1.43194497e-02 -4.89597581e-02  9.27001238e-03
  2.88250726e-02  2.74272449e-03  8.47984198e-03  7.24867061e-02
  5.66021055e-02 -4.06615669e-03 -5.44049591e-02  5.66540174e-02
  2.48789112e-03 -3.98183763e-02 -1.12150302e-02  2.54455134e-02
  2.79461276e-02  1.55826313e-02 -5.03606088e-02 -7.01865852e-02
  2.35322621e-02  3.28066535e-02 -2.95133367e-02 -3.53997685e-02
  5.09875193e-02 -2.08098791e-03  3.37876789e-02  4.37269956e-02
  7.57119209e-02  4.09277715e-03  5.91442548e-03 -8.21596105e-03]"
"trait TemplateMethod {
    fn template_method(&self) {
        self.base_operation1();
        self.required_operations1();
        self.base_operation2();
        self.hook1();
        self.required_operations2();
        self.base_operation3();
        self.hook2();
    }

    fn base_operation1(&self) {
        println!(""TemplateMethod says: I am doing the bulk of the work"");
    }

    fn base_operation2(&self) {
        println!(""TemplateMethod says: But I let subclasses override some operations"");
    }

    fn base_operation3(&self) {
        println!(""TemplateMethod says: But I am doing the bulk of the work anyway"");
    }

    fn hook1(&self) {}
    fn hook2(&self) {}

    fn required_operations1(&self);
    fn required_operations2(&self);
}

struct ConcreteStruct1;

impl TemplateMethod for ConcreteStruct1 {
    fn required_operations1(&self) {
        println!(""ConcreteStruct1 says: Implemented Operation1"")
    }

    fn required_operations2(&self) {
        println!(""ConcreteStruct1 says: Implemented Operation2"")
    }
}

struct ConcreteStruct2;

impl TemplateMethod for ConcreteStruct2 {
    fn required_operations1(&self) {
        println!(""ConcreteStruct2 says: Implemented Operation1"")
    }

    fn required_operations2(&self) {
        println!(""ConcreteStruct2 says: Implemented Operation2"")
    }
}

fn client_code(concrete: impl TemplateMethod) {
    concrete.template_method()
}

fn main() {
    println!(""Same client code can work with different concrete implementations:"");
    client_code(ConcreteStruct1);
    println!();

    println!(""Same client code can work with different concrete implementations:"");
    client_code(ConcreteStruct2);
}",Rust,Template Method,Refactoring Guru,https://refactoring.guru/design-patterns/template-method/rust/example#example-0,"[-6.72629401e-02  3.31020914e-02  1.43068451e-02 -2.53794938e-02
 -1.00675792e-01 -3.38085294e-02 -4.62283520e-03  6.97911605e-02
 -6.88619912e-02 -7.17492178e-02  5.25075980e-02 -4.28991877e-02
 -3.71959172e-02  1.60698965e-02  5.11378199e-02  1.84687134e-02
 -6.50152788e-02  6.36223331e-02 -4.38470729e-02  3.59227955e-02
  7.62583986e-02  2.07990203e-02 -3.48116793e-02  5.64508550e-02
 -3.61830257e-02  1.09014213e-02 -6.23220727e-02 -6.62111165e-03
  2.54174843e-02 -1.44373691e-02  3.29409502e-02  6.08303696e-02
 -4.76834401e-02  8.14411193e-02 -6.19476326e-02  4.73775305e-02
  4.45666537e-03 -4.18366343e-02 -5.89662865e-02 -2.89807003e-02
 -7.68976659e-02  3.85593995e-02 -8.37889537e-02 -2.47879364e-02
  2.42145024e-02 -2.36027967e-02 -6.37895707e-03 -1.23965507e-02
 -2.51316745e-02 -2.95219733e-03 -3.75360660e-02  6.41399920e-02
 -6.56745955e-03  1.05939517e-02  3.21009196e-02 -3.31367529e-03
  5.06705865e-02  4.69923317e-02 -2.67696125e-03 -4.14454052e-03
 -4.87191491e-02  3.63319218e-02 -6.41259458e-03  6.89760130e-03
  3.37983556e-02  4.99995612e-02  3.68675292e-02 -2.69880500e-02
  5.88504458e-03  5.72804138e-02  1.79808605e-02 -3.28245275e-02
 -2.91657411e-02  5.62094292e-03 -3.66487242e-02  7.16801286e-02
  2.45473124e-02  6.24332502e-02 -8.25681090e-02 -1.39367342e-01
 -2.49839351e-02  6.44253716e-02 -5.97690940e-02 -6.98768348e-02
  2.25651246e-02  1.65205020e-02 -5.72995059e-02 -7.29247853e-02
  2.66099293e-02  7.35126734e-02  6.04667701e-02  2.29165871e-02
 -8.26081187e-02 -7.91763812e-02  3.80405262e-02  1.08334888e-03
  5.78739308e-02  2.47015804e-02  2.17150543e-02  8.17800239e-02
 -4.01267670e-02  4.30236645e-02  2.84132920e-02  2.66672932e-02
  7.03610554e-02  1.17771346e-02 -3.84734459e-02 -7.96355233e-02
 -6.88776821e-02 -6.39270768e-02 -1.18133062e-02 -1.29719628e-02
 -8.39507114e-03 -4.08319160e-02  5.14025707e-03  2.85112616e-02
  4.09025513e-02  2.09636595e-02 -1.24152936e-02  6.90399855e-02
  1.98439714e-02 -3.43796052e-02  9.63738263e-02  2.96084490e-02
 -2.03088336e-02 -6.16755150e-02 -9.48168933e-02  6.45810205e-33
  8.17730185e-03 -8.33415613e-02 -1.22815415e-01  7.76748210e-02
  6.58898428e-03  7.62925390e-03  2.87245512e-02  6.18303902e-02
 -6.79360032e-02 -8.19235481e-03  7.22416304e-03 -2.63968073e-02
  3.75952683e-02 -1.08890999e-02  6.20175526e-02 -1.54343955e-02
  4.79941033e-02 -1.00543033e-02  4.98148426e-02  1.01447925e-02
  1.20754525e-01  1.15244882e-02 -1.78295076e-02  1.38176838e-02
 -4.84904647e-03  7.72491097e-02  4.71121892e-02  2.89282966e-02
 -1.32546768e-01  1.45163517e-02  5.63550964e-02 -7.53384754e-02
  5.12377396e-02  4.12784815e-02 -2.06933171e-03 -4.47977632e-02
  3.98427472e-02 -4.56426814e-02 -5.32825328e-02 -1.22042961e-01
  7.45430775e-03  7.26544671e-03 -1.88301075e-02  1.59817766e-02
  6.91440627e-02 -7.60861710e-02 -1.04468413e-01  6.63942024e-02
  2.44095791e-02 -3.57483402e-02  5.83087392e-02  5.99897504e-02
  5.82100004e-02 -4.78526019e-03  3.74261104e-02 -2.43084948e-03
 -2.70510968e-02  5.59585690e-02  5.02454001e-04  9.25329402e-02
 -9.41572860e-02  7.49689862e-02 -1.03934973e-01  6.00827336e-02
 -3.12153827e-02  3.90140265e-02 -8.30752477e-02 -3.05520743e-03
  8.67885724e-02 -5.98864770e-03 -1.21908095e-02  3.45641375e-02
 -5.52250072e-02  2.30378620e-02 -2.53345016e-02 -2.67278496e-02
  1.87538695e-02 -9.13049355e-02 -1.58595759e-02 -6.64199740e-02
 -6.84726238e-02  1.07681893e-01  8.76877550e-03  7.70288482e-02
 -3.43460999e-02  4.02200110e-02  6.90624788e-02 -4.23402619e-03
 -1.59869045e-02  5.06165698e-02 -7.52055412e-03  6.59038499e-03
  6.64050728e-02 -9.89618078e-02  8.14764723e-02 -6.75359414e-33
  7.76375458e-03  5.35323322e-02 -4.57703508e-02 -3.77030186e-02
 -4.84031625e-03  2.39852890e-02  4.05782042e-03 -1.17296971e-01
 -8.10034648e-02  3.30247991e-02 -4.64287587e-02 -6.03579581e-02
  3.52022797e-02 -2.18259301e-02  2.36117411e-02 -9.61907860e-03
 -6.68780208e-02 -8.98990855e-02 -3.19305584e-02  8.33391175e-02
 -4.69638072e-02  7.94814080e-02  4.41242829e-02  2.62150653e-02
  3.10587510e-02  1.18847536e-02 -1.16665967e-01  1.13674566e-01
  4.87274714e-02  2.62279264e-05  2.13892944e-02  1.90725736e-03
 -1.41827445e-02  5.02321078e-03  1.15668580e-01 -2.26518605e-03
 -3.33364904e-02  6.32307604e-02  2.95565985e-02 -1.33180115e-02
  6.30708560e-02 -3.79078090e-02 -5.79965934e-02  2.03674696e-02
 -4.26803529e-02 -2.86191795e-03 -2.42703203e-02 -2.07858980e-02
  1.72039785e-03 -7.03146756e-02 -1.70147810e-02 -5.36295772e-02
 -7.64626935e-02  3.80479917e-02 -2.19058935e-02  2.06801705e-02
  1.02207892e-01 -5.07996902e-02 -1.14068892e-02  5.98839633e-02
  1.05449736e-01 -9.95196104e-02  8.32545534e-02  4.74247001e-02
  8.85598138e-02 -6.58541992e-02  3.95663343e-02 -4.51100878e-02
 -2.14080513e-02  3.94529365e-02 -1.28878541e-02  5.26995547e-02
 -2.67940555e-02 -1.41658327e-02  4.17296998e-02 -7.62074254e-04
 -9.64314304e-03  9.97511018e-03  1.46489656e-02 -1.99196092e-03
 -1.10654114e-02 -2.16594748e-02 -4.81179133e-02  3.33444886e-02
 -3.96657065e-02 -4.50133570e-02  2.59008911e-02  9.20440108e-02
 -4.88803089e-02 -2.83782482e-02  1.91945191e-02  6.17973693e-02
 -3.54083925e-02 -1.30407074e-02  1.94931980e-02 -4.81633364e-08
 -1.74622040e-03 -8.75281096e-02  3.09005249e-02  5.53531609e-02
  4.48702760e-02 -3.91223915e-02 -3.31749618e-02 -3.20090912e-02
 -2.68419664e-02 -6.09392114e-02 -8.18340257e-02  5.98826408e-02
 -4.79689166e-02 -1.29563762e-02  1.24661187e-02 -9.74099264e-02
 -5.13004363e-02 -4.15361859e-02 -8.55643228e-02 -5.44793392e-03
 -6.54113516e-02 -3.74829606e-03 -6.02142550e-02 -2.25028489e-02
 -9.74775553e-02 -6.93170056e-02  4.23300005e-02  7.76251405e-02
  6.95478395e-02  4.51159552e-02  1.46748796e-02  8.77343304e-03
 -4.06396389e-02  6.19830340e-02  2.30182558e-02 -2.36436371e-02
  4.02189717e-02  3.24947201e-02 -3.89120542e-02  6.42158240e-02
  2.35734042e-02 -3.28523815e-02 -5.71877323e-02  4.94948700e-02
  6.19010217e-02 -4.68061902e-02 -5.36083058e-02 -4.90335654e-03
  3.64583321e-02  7.80448392e-02 -4.26187441e-02  1.27981165e-02
  2.02018954e-02  2.77945381e-02 -9.39415768e-02 -9.73154604e-03
  2.82100644e-02 -7.55526423e-02  1.68404002e-02  2.93074083e-02
 -2.38430202e-02 -1.64287742e-02  8.36511701e-02 -1.55924493e-02]"
"/// Defines an injectable strategy for building routes.
trait RouteStrategy {
    fn build_route(&self, from: &str, to: &str);
}

struct WalkingStrategy;

impl RouteStrategy for WalkingStrategy {
    fn build_route(&self, from: &str, to: &str) {
        println!(""Walking route from {} to {}: 4 km, 30 min"", from, to);
    }
}

struct PublicTransportStrategy;

impl RouteStrategy for PublicTransportStrategy {
    fn build_route(&self, from: &str, to: &str) {
        println!(
            ""Public transport route from {} to {}: 3 km, 5 min"",
            from, to
        );
    }
}

struct Navigator<T: RouteStrategy> {
    route_strategy: T,
}

impl<T: RouteStrategy> Navigator<T> {
    pub fn new(route_strategy: T) -> Self {
        Self { route_strategy }
    }

    pub fn route(&self, from: &str, to: &str) {
        self.route_strategy.build_route(from, to);
    }
}

fn main() {
    let navigator = Navigator::new(WalkingStrategy);
    navigator.route(""Home"", ""Club"");
    navigator.route(""Club"", ""Work"");

    let navigator = Navigator::new(PublicTransportStrategy);
    navigator.route(""Home"", ""Club"");
    navigator.route(""Club"", ""Work"");
}",Rust,Strategy,Refactoring Guru,https://refactoring.guru/design-patterns/strategy/rust/example#example-0,"[ 3.38253304e-02  2.73520760e-02 -3.60396802e-02  1.00662485e-02
 -2.17494052e-02  3.79005894e-02  3.53579316e-03  4.73351553e-02
 -1.02470592e-01 -1.47859678e-02  2.52688527e-02 -8.56360514e-03
 -3.20154466e-02  5.38777560e-02  5.78220598e-02  4.08778936e-02
 -9.29715857e-02  2.10537482e-02 -3.61343380e-03  9.96618532e-03
  7.65735656e-02  3.46101709e-02  4.25251462e-02  3.88109982e-02
 -1.72827505e-02 -2.90962476e-02  3.12272105e-02 -6.59205541e-02
 -1.68677084e-02 -3.96339670e-02  4.22944650e-02  3.88003960e-02
 -1.02182813e-01  4.63658050e-02 -7.99406320e-02  3.05781309e-02
  1.02083746e-03 -3.30625549e-02 -1.68081690e-02 -3.86311896e-02
 -3.51883024e-02  4.40132581e-02 -3.35756429e-02 -3.34237167e-03
  9.59778391e-03 -4.42902520e-02 -8.73274915e-03  1.36386603e-02
  3.24045531e-02  5.07396609e-02 -6.63264245e-02 -6.26983792e-02
 -6.66770265e-02 -4.19272594e-02  4.28214781e-02  8.36825073e-02
 -8.74817893e-02  1.46794580e-02  3.09658777e-02 -3.68277915e-02
  7.17072561e-02 -9.58455820e-03 -2.19905842e-02 -4.40780707e-02
 -3.33179496e-02 -4.83718812e-02  1.44165056e-02  2.60370094e-02
  3.76811698e-02  1.39397234e-02  4.04436216e-02 -2.11559236e-02
  2.98682135e-02  1.46335354e-02  8.19241069e-03 -2.54958291e-02
 -1.00080911e-02  3.47966477e-02 -5.72343022e-02 -9.01100934e-02
  7.24392850e-03 -4.71937796e-03 -6.56157359e-02  5.54535761e-02
  7.38289207e-02  2.07130122e-03 -1.27343880e-02 -1.09238200e-01
  4.23130505e-02  1.69644449e-02 -2.49396469e-02  1.59917250e-02
 -2.67116576e-02  2.08308753e-02  5.45354187e-02  2.91370079e-02
 -2.93401964e-02 -3.02507281e-02  4.43454552e-03  9.68765020e-02
 -2.40358543e-02  3.03470176e-02  2.19446663e-02  1.02153890e-01
 -1.11396434e-02 -3.74218747e-02  3.62476730e-03  1.05147585e-02
 -7.63299763e-02  8.69536251e-02 -6.04740530e-03  2.70307921e-02
  1.32473418e-02 -4.10984067e-04 -6.31792545e-02  2.92307115e-03
 -7.02006668e-02 -1.05424142e-02  2.02003345e-02  1.08169451e-01
  2.23973747e-02 -1.71376988e-02  8.78306031e-02 -8.97947326e-03
 -2.97010001e-02 -6.69841319e-02  5.43974116e-02  4.17140995e-33
  1.46256769e-02  2.00845607e-05 -4.99794669e-02  1.03363827e-01
  8.46260786e-03  2.06233305e-03  4.22237860e-03  1.02159642e-02
 -2.78280228e-02 -2.07811147e-02 -6.76406994e-02  6.95822714e-03
 -2.58003082e-02  4.30489033e-02  7.93866888e-02 -9.18840617e-02
  4.49551642e-02  3.76739749e-03  2.72713266e-02 -3.21392566e-02
  1.08873673e-01 -2.64958665e-02 -6.60596862e-02 -8.11101198e-02
  9.37747359e-02  3.79414260e-02 -2.38460414e-02  3.19026187e-02
 -1.33994281e-01  2.85932943e-02  2.77920831e-02 -2.50083376e-02
 -2.13030651e-02  4.04598936e-02  4.88439091e-02 -9.56001412e-03
 -2.56365631e-03 -8.84728692e-03 -9.36619788e-02 -5.15385196e-02
  9.24745225e-04 -4.61390615e-02 -4.37384695e-02  7.37453764e-03
 -3.18727866e-02 -4.55847010e-02  1.37184709e-02  5.08526675e-02
 -4.54465970e-02  3.91110592e-02 -4.88900132e-02  1.13042565e-02
 -7.56122638e-03 -7.94654191e-02  6.98664738e-03 -4.29775044e-02
 -3.68004814e-02  4.98071425e-02 -3.11437584e-02  1.80225279e-02
 -4.68530431e-02  2.90414132e-02 -9.58664715e-03  8.19955096e-02
  2.31774319e-02  1.08096771e-01 -1.18388712e-01  2.08912734e-02
  1.44081801e-01 -6.24077953e-02 -9.38852597e-03 -1.34880869e-02
  1.48407351e-02  3.26066725e-02 -5.80895366e-03  1.36242537e-02
 -6.05284199e-02 -5.38065583e-02 -5.18921427e-02 -7.35656917e-02
 -5.68723418e-02  1.57618541e-02 -6.56033903e-02  1.07129887e-01
  4.74668927e-02 -1.88535713e-02  1.00483537e-01 -8.78194943e-02
  2.95245033e-02  6.54679909e-02 -1.22324757e-01  3.28171663e-02
 -1.09157423e-02 -4.78350371e-02  4.90145385e-02 -4.90947309e-33
  2.70249657e-02  1.93705112e-02  9.67924390e-03 -2.17946284e-02
 -5.00876345e-02 -3.62883396e-02  1.20958559e-01 -3.34084220e-02
  2.32764473e-03  6.85436204e-02 -1.15197800e-01  2.78484472e-03
  1.14908703e-01 -6.23476133e-02 -1.24795642e-03  5.63414022e-03
  5.44057302e-02 -7.66197592e-02 -2.09577568e-02  1.49106495e-02
 -6.52245060e-02  6.50971830e-02 -3.65092494e-02 -7.12543428e-02
  1.22262999e-01  2.15279479e-02  6.09858707e-02  2.38194130e-02
 -6.85585663e-02 -2.39010453e-02  5.55243418e-02 -7.44843930e-02
  4.08649258e-02 -7.95253552e-03  5.57158031e-02  6.98922127e-02
 -4.38166037e-02  1.16665363e-01  2.40078047e-02 -2.00544018e-02
  6.70941100e-02 -3.57813202e-02 -2.02953666e-02  3.54746357e-02
 -3.28266323e-02 -3.48115824e-02  6.73355609e-02  2.33459249e-02
 -3.84751074e-02 -3.03121414e-02  9.92223173e-02 -1.00456337e-02
 -7.97614530e-02 -4.05657031e-02  2.65979134e-02  1.21326027e-02
  6.99515641e-02 -9.18210819e-02  1.82459317e-02 -1.92630086e-02
  5.64320125e-02 -5.53369150e-02 -3.47494893e-02  8.98173973e-02
  1.26348466e-01 -1.39168590e-01 -5.28107472e-02 -1.84289422e-02
  3.42483148e-02  1.95057057e-02 -5.81160560e-02  7.17634633e-02
  2.76387297e-02  1.42277339e-02  6.30058125e-02 -5.67962490e-02
  3.55437994e-02  6.56516403e-02  6.26963601e-02 -3.91406193e-02
 -2.04563085e-02 -4.21590135e-02 -1.34608923e-02 -4.79915179e-02
 -4.82887542e-03 -1.81305110e-02 -1.61801390e-02  6.43495619e-02
 -2.96154581e-02  1.62142627e-02  5.75721115e-02  4.47227322e-02
 -4.24116962e-02  3.99886677e-03 -5.57727627e-02 -4.25011777e-08
 -7.53830448e-02  1.76045708e-02 -4.05695895e-03  9.92845446e-02
  2.79931016e-02 -3.32056843e-02  5.37765026e-02 -2.34737936e-02
 -7.66481855e-04 -2.32603382e-02 -1.89607088e-02  1.02270983e-01
 -4.11713049e-02  4.38925512e-02  2.91647948e-02 -1.11235425e-01
  2.68259551e-04  1.83342397e-02 -9.28794891e-02  2.31329575e-02
 -7.10787997e-02 -1.49882967e-02 -7.03472868e-02  3.00483368e-02
  1.80097613e-02 -4.20374982e-02 -2.52931975e-02 -8.79387185e-03
  9.48292091e-02  7.76642039e-02  3.34779359e-02  2.61094347e-02
 -1.99424922e-02  6.79610297e-02 -8.58293474e-02  1.26454271e-02
 -3.46532930e-03  9.48021412e-02 -2.66904905e-02  7.83548653e-02
  2.55035590e-02 -3.10307201e-02 -4.32695299e-02  1.15538649e-02
 -2.78141648e-02 -1.53941773e-02 -5.54475039e-02 -2.22177655e-02
  2.82842405e-02  4.50628856e-03 -9.95019525e-02 -1.59332603e-02
  4.77871858e-02 -4.19770405e-02  1.51236579e-02  1.35161830e-02
  1.60394832e-02 -8.19156170e-02 -4.24609259e-02 -4.47284989e-02
 -2.18329877e-02  1.65487044e-02 -8.67964607e-03 -2.72268727e-02]"
"// We have a class or ""concrete factory"" for each vehicle type
class Car {
    constructor () {
        this.name = ""Car""
        this.wheels = 4
    }
    turnOn = () => console.log(""Chacabúm!!"")
}

class Truck {
    constructor () {
        this.name = ""Truck""
        this.wheels = 8
    }
    turnOn = () => console.log(""RRRRRRRRUUUUUUUUUMMMMMMMMMM!!"")
}

class Motorcycle {
    constructor () {
        this.name = ""Motorcycle""
        this.wheels = 2
    }
    turnOn = () => console.log(""sssssssssssssssssssssssssssssshhhhhhhhhhham!!"")
}

// And and abstract factory that works as a single point of interaction for our clients
// Given the type parameter it receives, it will call the corresponding concrete factory
const vehicleFactory = {
    createVehicle: function (type) {
        switch (type) {
            case ""car"":
                return new Car()
            case ""truck"":
                return new Truck()
            case ""motorcycle"":
                return new Motorcycle()
            default:
                return null
        }
    }
}

const car = vehicleFactory.createVehicle(""car"") // Car { turnOn: [Function: turnOn], name: 'Car', wheels: 4 }
const truck = vehicleFactory.createVehicle(""truck"") // Truck { turnOn: [Function: turnOn], name: 'Truck', wheels: 8 }
const motorcycle = vehicleFactory.createVehicle(""motorcycle"") // Motorcycle { turnOn: [Function: turnOn], name: 'Motorcycle', wheels: 2 }",Abstract Factory,JavaScript,freeCodeCamp,https://www.freecodecamp.org/news/javascript-design-patterns-explained/,"[-7.99117312e-02  7.66007155e-02  3.72527018e-02  5.49991801e-02
 -1.14015294e-02  4.02541719e-02  6.47258312e-02  1.28262127e-02
 -1.16574001e-02 -8.51444080e-02  1.96245313e-02 -3.96899953e-02
 -5.15162870e-02  5.85301258e-02  8.83787274e-02  6.87361732e-02
 -2.58048512e-02 -1.53982248e-02 -3.44617218e-02  3.23797241e-02
  8.49583298e-02 -2.29926128e-02 -3.06563964e-03 -3.66989262e-02
 -9.23566371e-02 -1.41703328e-02  1.49722826e-02 -7.51320347e-02
  1.33533301e-02 -3.15195769e-02  1.06837219e-02  7.52014965e-02
 -1.21615030e-01  1.52829494e-02 -8.68185312e-02  2.15096064e-02
 -4.94649587e-03  4.80906991e-03  6.29134029e-02 -4.26313914e-02
  3.35763842e-02  6.10275194e-02 -5.57848765e-03 -9.13574323e-02
  6.14420697e-02 -5.61311319e-02 -3.36100832e-02  1.56523865e-02
  4.84647043e-02 -2.23275162e-02 -1.73220802e-02  9.62827634e-03
  1.37888938e-02 -1.62225571e-02  1.25350105e-03 -9.46850237e-03
 -3.47832963e-02  4.47088890e-02  1.44103803e-02  1.25328824e-02
  1.23797562e-02 -6.50119931e-02  5.26341200e-02 -3.83930095e-02
  3.93142030e-02 -3.81106324e-02  1.35325827e-02  6.95234723e-03
 -3.08334753e-02  8.51628557e-02  3.57426479e-02  1.25618940e-02
  3.54963951e-02 -5.79509884e-03  4.69551701e-03 -3.76388878e-02
 -1.92733631e-02  3.45395878e-02 -2.06369720e-02 -2.21200800e-03
 -2.13610791e-02 -1.59483869e-02 -1.28255216e-02 -2.18639504e-02
  4.25549485e-02  7.14687929e-02 -5.44779887e-03 -3.67033146e-02
 -2.42101308e-02  8.90143961e-03 -1.11455560e-01 -4.89527583e-02
 -6.97519034e-02  3.56339067e-02  3.31961811e-02  4.44994532e-02
 -2.82940064e-02 -4.01973203e-02  1.75261628e-02  8.56383219e-02
 -1.34679032e-02  2.19026115e-02  7.30327666e-02  6.80579524e-03
  1.00488113e-02  1.56555437e-02 -8.06822926e-02 -5.00132442e-02
 -1.06494218e-01  5.80212511e-02  3.24742161e-02  3.57621349e-02
 -1.29269110e-02  5.37473671e-02 -8.52014795e-02 -1.63242035e-02
  1.12733175e-03 -6.63218498e-02 -3.46653908e-02  9.25318897e-02
  7.63111934e-02  9.41909663e-03  6.95053041e-02  1.14868069e-02
  1.70099046e-02 -9.55533516e-03  1.53612504e-02  4.71001154e-33
  3.20256092e-02  3.00431270e-02 -7.34671950e-02  6.19628206e-02
  3.34249735e-02  2.43105320e-03  9.65674594e-03  6.73386753e-02
 -3.92068736e-02  3.37779522e-02 -3.03251692e-03  2.20190436e-02
 -3.80270220e-02 -4.44725975e-02  2.62219012e-02  6.05572760e-03
 -1.61045380e-02 -2.08491888e-02 -3.52377109e-02 -6.55699074e-02
 -7.14946655e-04  7.51586482e-02 -5.35794348e-02  2.63297441e-03
  3.29837464e-02 -1.25197945e-02  2.07189396e-02  2.09917943e-03
 -1.12770706e-01 -1.85360312e-02  6.80970252e-02  2.57185847e-02
 -2.34647561e-02  8.27541947e-02  5.32154329e-02  2.50636451e-02
 -3.29785980e-02 -2.00932957e-02 -1.17332973e-01 -8.42521340e-02
  8.58185366e-02 -6.48572203e-03 -3.96163054e-02  1.15570119e-02
 -4.71612886e-02 -7.70359784e-02  6.37027472e-02  8.50950927e-03
  1.91075029e-03 -4.25519608e-02 -9.22328532e-02  4.88239340e-02
  3.42136286e-02 -6.63912073e-02  3.54914628e-02  3.80824949e-03
  5.24990894e-02  4.49786521e-02  7.30129750e-03 -1.51533047e-02
 -6.48963302e-02  3.17855552e-02 -4.11591008e-02  2.00883322e-03
 -7.74327666e-02  2.57290564e-02 -5.03606051e-02 -3.39902677e-02
  1.13214605e-01 -6.89696297e-02  7.57666528e-02 -2.19257008e-02
 -3.91207337e-02  1.68959554e-02  5.12332171e-02  1.80761106e-02
 -7.23992214e-02 -3.34704667e-03 -2.91839503e-02 -5.39517067e-02
  2.04709116e-02 -9.87155456e-03 -7.42341578e-02  1.03058718e-01
  1.50374770e-02  1.29255522e-02 -3.64173166e-02 -1.30813755e-02
  1.62022971e-02  7.12223276e-02 -1.26410261e-01  3.36661376e-02
 -3.87353972e-02 -2.03187368e-03  3.33176367e-02 -5.79488997e-33
 -6.31134305e-03 -4.78133792e-03  3.16360779e-02  9.38458089e-03
  1.66521431e-03 -5.06394282e-02  2.30301591e-03 -2.33230274e-03
 -4.73377183e-02  6.58140704e-02 -3.14309411e-02 -2.20289244e-03
  1.27689809e-01 -1.89144276e-02  2.43260544e-02  6.27076998e-02
 -5.21507114e-02 -1.04333222e-01  3.58839631e-02 -2.31424719e-02
  3.48526926e-04  7.11852163e-02  1.22409826e-02  3.44327725e-02
 -6.73379749e-02  6.45551085e-02 -4.01713476e-02  8.60636681e-02
  2.75725015e-02  1.92329492e-02 -7.36753196e-02 -9.26917046e-02
  2.77108289e-02  5.00568151e-02  5.04121631e-02 -4.43296395e-02
  3.40992324e-02  1.10993482e-01 -3.01385229e-03  6.99921511e-03
 -2.60112882e-02 -8.14809799e-02 -8.62395838e-02  5.13651259e-02
 -1.84624325e-02 -1.17817909e-01  5.76066785e-02  1.37303425e-02
  6.80851862e-02 -2.41853781e-02  8.77300370e-03 -1.45595204e-02
 -5.98809123e-02  1.16479220e-02 -6.73282519e-02 -4.92583588e-02
  8.03374723e-02 -1.67871878e-01  4.45032213e-03  7.99245834e-02
  4.97650243e-02 -3.26440111e-02  1.00567807e-02  8.47904086e-02
  2.15671808e-02 -1.64395630e-01 -3.04893386e-02 -1.07097872e-01
  6.66438341e-02  4.25870903e-02 -5.25226332e-02  5.72284982e-02
  7.23163709e-02 -7.96277970e-02  7.86391050e-02 -4.76742126e-02
  9.45142470e-03 -2.65632309e-02  1.14914075e-01 -4.34939936e-02
 -5.00183478e-02 -5.98140620e-02  4.92976047e-02  4.27845605e-02
  2.15275940e-02  3.84737644e-03  1.17841468e-03  7.46316910e-02
  3.81801068e-03  3.72428074e-02  2.72729993e-02  1.75852999e-02
 -8.24291483e-02 -2.97222193e-03 -6.38128445e-02 -4.99774657e-08
 -6.77094236e-02 -1.32053299e-02 -8.89178889e-04  1.65226515e-02
  3.38894781e-03 -1.14205845e-01  3.15232165e-02  1.64188202e-02
 -7.06858039e-02  1.99218951e-02 -5.89346699e-02  1.05538130e-01
  3.49099711e-02  2.95871440e-02  5.91722578e-02 -5.34106940e-02
 -4.61830432e-03  2.31742207e-02 -8.38815197e-02  6.04730658e-02
  2.67471131e-02 -6.47636279e-02 -1.85504695e-03  4.40241098e-02
  2.64134016e-02 -4.73181680e-02  6.52382225e-02  1.60073005e-02
  1.63972545e-02  1.00668855e-01 -9.14566666e-02  6.16609044e-02
 -1.62969716e-02  1.73627716e-02 -6.11667000e-02 -5.97860590e-02
  5.58618130e-03  3.06610875e-02  2.63431240e-02  2.71480810e-02
  5.83730191e-02 -2.98341811e-02 -6.58703223e-02  2.68564299e-02
  3.92426625e-02  1.30307442e-02 -2.84404568e-02 -3.13761458e-02
  8.33983719e-02  7.63567239e-02 -5.00828028e-02 -5.47626950e-02
 -3.54093872e-02 -6.17870595e-03 -2.68040299e-02  2.29348632e-04
  2.35517658e-02 -1.26780616e-02  5.28277755e-02 -6.81870058e-02
  2.28429902e-02 -3.21305320e-02  4.66948636e-02 -3.08727454e-02]"
"// We declare our objects
const bug1 = {
    name: ""Buggy McFly"",
    phrase: ""Your debugger doesn't work with me!""
}

const bug2 = {
    name: ""Martiniano Buggland"",
    phrase: ""Can't touch this! Na na na na...""
}

// These functions take an object as parameter and add a method to them
const addFlyingAbility = obj => {
    obj.fly = () => console.log(`Now ${obj.name} can fly!`)
}

const addSpeechAbility = obj => {
    obj.saySmthg = () => console.log(`${obj.name} walks the walk and talks the talk!`)
}

// Finally we call the builder functions passing the objects as parameters
addFlyingAbility(bug1)
bug1.fly() // output: ""Now Buggy McFly can fly!""

addSpeechAbility(bug2)
bug2.saySmthg() // output: ""Martiniano Buggland walks the walk and talks the talk!""",Builder,JavaScript,freeCodeCamp,https://www.freecodecamp.org/news/javascript-design-patterns-explained/,"[-6.72444105e-02  2.79980656e-02  6.31483123e-02  1.19633503e-01
 -1.66608542e-02 -1.98393501e-02  8.99900049e-02  1.42896883e-02
 -5.04594333e-02  3.65154371e-02 -2.17867717e-02 -5.15718237e-02
 -8.24580491e-02 -1.22862309e-02  6.30554482e-02  9.18014199e-02
  3.50656882e-02  1.98966842e-02 -5.56037910e-02  2.39349250e-02
  9.25106779e-02 -3.67053645e-03 -5.62639050e-02  1.11367861e-02
 -1.02651659e-02  1.15954708e-02 -4.74266633e-02 -2.25041229e-02
  4.95738313e-02 -4.12912108e-02  3.25229913e-02  4.65818867e-02
 -8.90994966e-02  4.95178923e-02 -3.99137437e-02  6.67984635e-02
 -4.69440259e-02 -1.79461055e-02 -1.24269929e-02 -7.89043233e-02
 -5.22555597e-03  1.27521232e-01 -7.08212256e-02 -8.91943052e-02
  7.04202661e-03 -5.14264219e-02 -4.63335961e-02  4.28738818e-02
  2.68700607e-02 -3.45294736e-02  9.90700442e-04  2.11955956e-03
  1.16908764e-02 -1.42045906e-02  1.12550557e-01  7.13494048e-02
  3.80236725e-03 -1.03324307e-02 -2.58655753e-02 -5.23239002e-02
 -8.11627228e-03  1.14744836e-02  3.43173109e-02  3.02047306e-03
  7.97104910e-02 -4.75302413e-02 -1.81528963e-02  7.38205612e-02
  1.40348542e-02  8.57302994e-02 -3.85838561e-02  2.04742979e-02
  1.47505533e-02  1.42060118e-02  1.69891138e-02  4.34654988e-02
 -3.23429517e-02  3.52625996e-02  3.61801847e-03  8.11279519e-04
 -5.42833880e-02 -8.55956748e-02 -1.84471048e-02 -3.99040543e-02
  1.26693100e-01  1.02994725e-01  3.81035432e-02  3.81451123e-03
  1.78220198e-02  2.92534791e-02 -2.45317388e-02 -6.09460734e-02
 -1.26899881e-02  3.96944769e-02  2.25746557e-02 -2.74741538e-02
  7.02746119e-03 -2.59955544e-02 -1.35560213e-02  7.12197721e-02
 -7.98995346e-02  6.99885041e-02  1.05389066e-01 -2.98219100e-02
 -1.83382109e-02 -3.48486006e-02  1.60083990e-03 -1.17519692e-01
  2.75338162e-02  5.07863685e-02 -4.72138934e-02  9.34813023e-02
  6.56725988e-02  4.98080254e-03 -3.52756754e-02 -4.96211201e-02
 -1.65274320e-03 -1.03455648e-01  1.12656921e-01  1.53681971e-02
  1.81070670e-01  2.83193346e-02  3.26912776e-02  1.02462852e-02
  8.80130753e-03  1.89885497e-02 -2.50945818e-02  5.61402510e-33
  7.73308724e-02 -2.09527947e-02 -2.82900035e-02  5.67419529e-02
  6.95821270e-02  4.51381542e-02 -3.31057087e-02  6.82354644e-02
 -3.44695449e-02  4.45141010e-02 -4.03811224e-02 -3.00608966e-02
  7.15542212e-02 -4.10728380e-02  2.95404606e-02  5.36883846e-02
  8.61286931e-03 -6.26155287e-02 -1.34286769e-02  2.69307811e-02
  6.75106468e-03 -2.37621032e-02 -4.45660762e-02 -1.20498585e-02
  7.75079131e-02 -4.79204720e-03  2.36447994e-02  1.63322329e-04
 -6.32424727e-02  3.41556519e-02  4.07431126e-02 -4.83307987e-02
 -2.97284927e-02  1.10487334e-01  1.83827542e-02 -5.42438105e-02
 -6.19717315e-03 -5.89747876e-02 -1.08947955e-01 -1.02559879e-01
 -1.97749715e-02 -4.28406633e-02 -8.39891732e-02 -1.00777596e-02
 -4.92432900e-02 -1.02658302e-01 -1.80785954e-02 -6.40334422e-03
  1.77554302e-02 -1.24871237e-02 -4.52863500e-02  1.13472551e-01
  6.33527711e-02 -3.18353698e-02  5.86006120e-02 -1.71391182e-02
  5.26881590e-02 -5.42203784e-02 -2.15239674e-02 -1.96696036e-02
 -1.15590589e-02  2.25239135e-02 -6.41485956e-03 -2.50754897e-02
  8.26076865e-02  5.49892113e-02 -6.17127754e-02  7.23348698e-03
  6.05607480e-02 -7.23326132e-02  3.01825386e-02 -1.18265990e-02
 -1.14941247e-01  2.86742710e-02 -7.62491440e-03 -1.08371219e-02
 -4.83170636e-02 -6.80977106e-02 -8.92862584e-03 -5.13975173e-02
  2.03947276e-02 -2.21800506e-02 -2.18083020e-02  8.73005986e-02
  4.25485149e-02 -2.64663678e-02 -3.68616567e-03 -3.42978649e-02
 -2.26859655e-02  9.37151238e-02 -3.60951573e-02 -1.33413970e-02
 -6.39962917e-03 -2.69951746e-02 -3.20147425e-02 -5.80201383e-33
 -5.57756908e-02  2.76664943e-02 -8.87215659e-02  4.66550477e-02
 -3.49447019e-02 -7.81837292e-03 -4.70749587e-02 -5.96398376e-02
  1.75411962e-02 -5.34075275e-02 -1.14757523e-01  1.38524435e-02
  1.37907723e-02 -1.93943121e-02  6.53337464e-02  3.86786275e-02
 -7.19113275e-02 -8.91036540e-02  2.23184116e-02 -3.79085615e-02
  2.54394040e-02  3.49078737e-02 -5.52491378e-03 -4.26207334e-02
 -9.75979120e-02  1.07203936e-03  5.42763546e-02  3.40773016e-02
  4.15109657e-02 -5.45448735e-02 -2.79569887e-02  3.93524319e-02
 -2.89413612e-02  7.29139000e-02 -2.22536884e-02 -2.63346285e-02
  2.50177197e-02  2.17627324e-02  4.94521484e-03 -3.55356634e-02
  5.49498498e-02  3.96607071e-02 -1.97090092e-03 -3.67824920e-02
  1.24093685e-02 -1.96112739e-03 -2.14613974e-02  2.25805882e-02
  4.78116050e-02 -3.13262306e-02  3.74349914e-02 -7.52855018e-02
 -4.71753590e-02  4.71980982e-02 -4.63402458e-02 -6.62680417e-02
  3.08134332e-02 -1.25563577e-01  8.69548619e-02  7.14599192e-02
 -2.92553231e-02 -3.42230760e-02  6.22659139e-02 -4.75265346e-02
 -6.90333247e-02 -3.75703983e-02 -4.80806418e-02  4.06049602e-02
  1.02483943e-01 -2.88508758e-02  3.08259507e-03  1.50446901e-02
 -1.19630061e-03 -3.33541147e-02 -6.45113690e-03  4.25328091e-02
  1.77150816e-02 -9.82255861e-02  8.40538964e-02 -5.49435653e-02
  3.88382338e-02 -3.12465262e-02  2.23030914e-02 -7.29948748e-03
 -1.25521664e-02 -2.07856502e-02 -3.89453135e-02  7.22533315e-02
 -2.31590178e-02 -3.30259791e-04 -1.76767316e-02  7.27616474e-02
 -8.01064074e-02  3.27464268e-02 -6.71360344e-02 -5.61365567e-08
 -4.01430987e-02 -4.09300178e-02 -4.65904102e-02 -2.77627409e-02
  3.94040793e-02  2.54328176e-02  4.72452901e-02 -1.06917955e-02
 -9.18221194e-03 -1.29697509e-02  4.96046208e-02  2.76174005e-02
  6.71463907e-02  1.48576880e-02  2.82959081e-02 -1.59341693e-02
 -5.74797988e-02  4.48254012e-02 -9.26141962e-02 -2.23731482e-03
  1.75267085e-02  2.63653677e-02 -4.34469171e-02  5.35905808e-02
 -9.86469258e-03 -6.05223179e-02  3.28454301e-02  1.25074452e-02
  6.77824095e-02  3.16826031e-02 -7.30191171e-02  1.87905729e-01
  2.48117782e-02  8.00029114e-02 -1.17026813e-01 -9.37150791e-03
  2.16480475e-02  2.03720443e-02  4.16401476e-02  2.86117084e-02
  9.45715904e-02  2.13704742e-02 -5.82985394e-02  1.64472517e-02
 -1.90173853e-02 -9.73055605e-03  1.80226360e-02 -6.13721907e-02
  1.55261271e-02  1.58284251e-02  1.12751620e-02  4.39022928e-02
 -3.20707709e-02  6.38872758e-02 -1.00002438e-01 -5.30148111e-03
  2.11011358e-02 -4.20616642e-02  1.66365467e-02 -1.06041795e-02
 -7.89724663e-03 -6.89159557e-02  1.39301913e-02  2.17004474e-02]"
"// We declare our prototype object with two methods
const enemy = {
    attack: () => console.log(""Pim Pam Pum!""),
    flyAway: () => console.log(""Flyyyy like an eagle!"")
}

// We declare another object that will inherit from our prototype
const bug1 = {
    name: ""Buggy McFly"",
    phrase: ""Your debugger doesn't work with me!""
}

// With setPrototypeOf we set the prototype of our object
Object.setPrototypeOf(bug1, enemy)

// With getPrototypeOf we read the prototype and confirm the previous has worked
console.log(Object.getPrototypeOf(bug1)) // { attack: [Function: attack], flyAway: [Function: flyAway] }

console.log(bug1.phrase) // Your debugger doesn't work with me!
console.log(bug1.attack()) // Pim Pam Pum!
console.log(bug1.flyAway()) // Flyyyy like an eagle!",Prototype,JavaScript,freeCodeCamp,https://www.freecodecamp.org/news/javascript-design-patterns-explained/,"[-7.21942857e-02  9.06683132e-03  4.97617722e-02  5.38728014e-02
  3.01862787e-02 -2.41955165e-02  9.64184701e-02  4.91378456e-02
 -2.06862986e-02  3.59402820e-02 -1.01737091e-02 -3.50693353e-02
 -7.34165385e-02  1.25173386e-03  4.94558811e-02  5.47283292e-02
  1.78382918e-02 -2.20314804e-02  4.28945124e-02  7.94630274e-02
 -2.60966308e-02 -9.11062434e-02  8.43810663e-03  2.43054274e-02
 -9.69515815e-02  1.04448264e-02  6.75959187e-03 -3.98338772e-02
  1.72945543e-03 -6.91620782e-02  8.99690576e-03  1.86700579e-02
 -8.19403008e-02  2.20510960e-02 -6.81551024e-02  1.68363303e-02
 -1.44348796e-02 -1.70704871e-02  3.32477391e-02 -9.34744626e-03
 -3.30209881e-02  5.94884418e-02 -7.10108504e-02 -3.51129621e-02
  1.92772038e-02  3.05847339e-02 -2.16604788e-02  6.84941337e-02
  1.61623359e-02 -3.27563100e-02  1.43707655e-02  5.45671023e-03
  6.22854941e-03 -1.79796070e-02  4.03023325e-02  3.07618994e-02
  1.75615842e-03  3.29729058e-02  9.62858796e-02  5.46375252e-02
 -8.13785568e-02 -2.85046129e-03  1.73413418e-02 -5.06575219e-03
  5.91656789e-02 -5.20347394e-02  6.42625913e-02  1.24005368e-02
 -3.62941884e-02  8.23684335e-02  3.06272786e-02  3.77434902e-02
  4.62692901e-02  6.82712048e-02 -1.32365357e-02  3.16106640e-02
 -9.17878747e-03  4.67981510e-02  1.18731754e-02 -6.54986873e-03
 -4.57145981e-02 -1.45748928e-02 -3.94496555e-03  1.94669496e-02
  8.32086653e-02  1.29762053e-01  6.50966763e-02 -6.89719757e-03
 -2.18768604e-02  8.11451301e-02 -7.82364160e-02 -9.88877267e-02
 -6.29011821e-03  4.49968502e-02  1.92749463e-02 -7.74618164e-02
 -2.84610447e-02 -2.88137067e-02 -2.94615026e-03  7.09544271e-02
 -5.44666983e-02  3.16034071e-02  1.33604899e-01 -2.76656039e-02
  4.11893129e-02  4.80743460e-02 -3.85172926e-02 -1.07362650e-01
  6.05221689e-02  7.04176202e-02 -2.91920081e-03  1.61225833e-02
 -3.51309292e-02  2.48826165e-02 -1.63959283e-02  7.02436035e-03
 -3.15898061e-02 -7.96513259e-02  6.98414296e-02  2.77761687e-02
  1.23404182e-01  2.73738690e-02  6.25270531e-02  2.77150776e-02
 -1.11231999e-02  7.15915933e-02 -4.35721353e-02  1.52799287e-33
  1.69541948e-02 -3.45927589e-02 -3.44549790e-02  7.72692189e-02
  5.58582172e-02  1.99223142e-02  1.14582162e-02  4.68194485e-02
 -1.06271833e-01  1.18872831e-02 -8.56282040e-02 -2.56793816e-02
 -3.32995574e-03 -3.62981223e-02  6.92786276e-02  8.18791091e-02
  1.14236132e-03 -3.88678499e-02 -8.40809848e-03  2.94350218e-02
 -3.19679826e-02  3.94469835e-02 -3.43253836e-02 -5.62537611e-02
  3.93057093e-02  4.70098965e-02 -1.20342122e-02  1.65009201e-02
 -7.77008310e-02  2.14803889e-02  9.73941293e-03 -3.31065990e-02
 -6.19485334e-04  7.73732066e-02 -1.51378782e-02 -1.08414538e-01
 -5.62457414e-03 -8.27609897e-02 -7.99219683e-02 -4.70553786e-02
  3.80204320e-02 -5.57229258e-02 -4.65309285e-02 -2.94726398e-02
 -1.59110781e-02 -1.15434013e-01  1.49957407e-02  2.63966620e-03
 -1.22593145e-03 -4.71362052e-03 -4.47808877e-02  5.61104342e-02
  2.63756867e-02 -6.93199858e-02  3.83447930e-02 -2.09192242e-02
  1.91973858e-02 -2.82236636e-02  1.58894584e-02 -6.05616160e-02
  4.98188362e-02  5.28414510e-02  1.08464120e-03 -3.66116986e-02
 -4.85989340e-02  3.80461179e-02 -8.89317319e-02  3.80995944e-02
  4.28687036e-02  1.17244637e-02  6.10462092e-02  5.51818451e-03
 -8.53150636e-02  1.20059624e-02 -6.42043119e-03  1.52391782e-02
  1.19671905e-02  3.56986113e-02  2.71428935e-02 -2.26682685e-02
  3.25680561e-02  4.38796878e-02  8.76419712e-03  1.00754023e-01
 -6.66992217e-02 -4.91080689e-04  3.92320827e-02 -3.02547310e-02
 -4.17514285e-03  1.05715230e-01 -1.58937145e-02 -2.53670104e-02
 -5.00036478e-02  6.02622982e-03 -8.00481960e-02 -3.91778088e-33
 -9.16020200e-02  1.15535446e-02 -7.56118894e-02  2.48780269e-02
 -3.91063690e-02 -1.51459174e-02 -1.28735462e-02 -2.41053887e-02
 -3.08595337e-02 -3.32449488e-02 -4.01454046e-02 -1.01366006e-02
 -4.45745550e-02 -6.52497336e-02  6.03395924e-02 -9.99196619e-03
 -1.29149318e-01 -6.31739125e-02  4.15666625e-02 -5.84895574e-02
  4.92745787e-02  1.73761304e-02  4.00102660e-02 -2.07817604e-04
 -4.36205342e-02 -6.67230459e-04  5.50891720e-02  4.61247563e-02
  3.71918790e-02 -2.80435532e-02 -5.05536832e-02  2.15472057e-02
 -5.32595403e-02  5.09677939e-02  4.18245085e-02 -4.12501879e-02
  1.79945529e-02  6.64395094e-02  1.59122273e-02 -1.01846687e-01
 -2.64820419e-02  1.93174277e-02 -4.49100658e-02 -4.20820825e-02
  2.14920915e-03  2.92934068e-02  8.40924755e-02  1.33585650e-03
  1.58458024e-01 -3.17730270e-02  1.22446101e-02 -8.35195556e-02
  5.93640767e-02 -1.63383000e-02 -1.46882862e-01 -4.93340492e-02
  6.24097846e-02 -1.21018939e-01  3.50842960e-02  1.07075505e-01
  3.38524319e-02 -8.62591639e-02 -2.50236802e-02  5.41631244e-02
 -4.13692929e-02 -3.92493829e-02 -5.64818904e-02  5.66360094e-02
  5.66458963e-02 -1.02080256e-02 -4.80394624e-02 -1.28857866e-02
  2.93431971e-02 -5.34558706e-02 -2.89947111e-02 -1.99405686e-03
 -1.20407837e-02 -1.25497311e-01  6.18413240e-02  3.50287855e-02
  2.14336999e-02  6.24915166e-03 -2.82938089e-02 -9.27516259e-04
  1.50386831e-02  2.92836744e-02 -5.72439581e-02  3.64961140e-02
 -2.70595755e-02  2.38727983e-02  7.77916610e-03  5.51368594e-02
 -1.06718600e-01  4.18973006e-02 -6.15042597e-02 -5.02165847e-08
  2.32271310e-02  2.27777120e-02  2.92638261e-02 -4.01554108e-02
  4.53537926e-02 -5.25826253e-02 -5.37404716e-02 -9.16492268e-02
 -3.56202573e-02 -5.54038249e-02 -7.72601292e-02  6.49095699e-02
  9.71051008e-02  2.23099850e-02  7.57043436e-02 -4.32034284e-02
 -5.52491508e-02  2.17813570e-02 -5.56349009e-02  4.96311439e-03
 -2.48696227e-02 -1.81612242e-02  5.79658570e-03 -9.09059681e-03
 -3.85123938e-02 -5.51586039e-02  2.08723173e-02  5.83344996e-02
 -1.03290156e-02  8.49520192e-02 -1.18964404e-01  1.34040251e-01
 -6.72093555e-02  1.38660632e-02 -2.62319436e-03  3.38971056e-02
 -5.34672616e-03  6.38496410e-03  3.10295150e-02  8.78822431e-03
  6.22087978e-02 -5.10560982e-02 -5.19701056e-02  2.86660567e-02
 -4.13878560e-02 -8.22925661e-03  6.05417714e-02 -4.54336219e-02
  2.72647962e-02  7.51140863e-02  5.90470210e-02  7.84299150e-02
 -4.46484126e-02  2.08370369e-02 -6.92435401e-03  1.70933492e-02
  1.24126924e-02 -1.27683744e-01  2.32462189e-03 -5.69772720e-02
  3.66436201e-03 -3.71891037e-02  7.28804320e-02  3.02454177e-02]"
"// Our array of cities
const citiesHabitantsInMillions = [
    { city: ""London"", habitants: 8.9 },
    { city: ""Rome"", habitants: 2.8 },
    { city: ""New york"", habitants: 8.8 },
    { city: ""Paris"", habitants: 2.1 },
] 

// The new city we want to add
const BuenosAires = {
    city: ""Buenos Aires"",
    habitants: 3100000
}

// Our adapter function takes our city and converts the habitants property to the same format all the other cities have
const toMillionsAdapter = city => { city.habitants = parseFloat((city.habitants/1000000).toFixed(1)) }

toMillionsAdapter(BuenosAires)

// We add the new city to the array
citiesHabitantsInMillions.push(BuenosAires)

// And this function returns the largest habitants number
const MostHabitantsInMillions = () => {
    return Math.max(...citiesHabitantsInMillions.map(city => city.habitants))
}

console.log(MostHabitantsInMillions()) // 8.9",Adapter,JavaScript,freeCodeCamp,https://www.freecodecamp.org/news/javascript-design-patterns-explained/,"[ 1.14556417e-01  1.30903833e-02  4.66520451e-02 -4.92276363e-02
 -2.68954728e-02  2.61119823e-03 -5.98601159e-03 -3.56966542e-04
 -6.05496019e-02  2.98231337e-02 -4.88126278e-02 -8.44845623e-02
 -5.99575937e-02  5.78348450e-02  2.97316071e-02  6.27269596e-03
 -1.20034672e-01  6.95283934e-02 -5.19898236e-02 -5.55991866e-02
  7.40121752e-02 -7.82497525e-02 -2.00960543e-02 -1.90356784e-02
  6.69574440e-02  9.57051069e-02  2.12793965e-02 -9.67583712e-03
  1.23514794e-02 -4.68289992e-03  5.14099887e-03 -1.61100447e-03
  7.93933943e-02 -7.94982631e-03 -4.42307256e-02 -1.11405738e-02
 -8.12644213e-02 -8.01574253e-03  6.62907958e-02  9.23985522e-03
  6.57968735e-03  6.40520900e-02  2.22151354e-02 -9.44845602e-02
 -9.24887776e-04  1.62437893e-02 -1.47691211e-02  5.85502051e-02
  6.27336428e-02  8.35759044e-02  5.57886958e-02  7.09057152e-02
 -3.97734642e-02 -5.97697347e-02  2.84505766e-02  1.08505376e-02
 -2.99286544e-02 -5.50464727e-02  2.54428107e-02 -8.94916430e-02
  1.03245126e-02  1.03016002e-02  9.02033523e-02 -5.49790508e-04
  1.01279296e-01 -5.78655861e-02  2.93367766e-02  1.12239666e-01
 -4.19508740e-02  4.83291447e-02  6.34255484e-02  6.05317950e-02
  8.71021450e-02 -5.34219220e-02  3.85743678e-02 -3.27335596e-02
 -6.57621175e-02 -7.97717459e-03  2.27603000e-02  4.52392735e-02
 -3.08314571e-03 -3.01816948e-02  2.85158698e-02  2.05398798e-02
  2.72809938e-02  4.33178134e-02 -6.10096566e-02 -1.49958553e-02
  6.59302995e-02 -3.08376420e-02 -3.02689411e-02  5.94581142e-02
 -3.52575183e-02  1.01036705e-01 -1.64350197e-02  3.63293327e-02
 -4.60306145e-02 -2.70629581e-02 -1.59219950e-02  4.66146506e-02
 -2.26105284e-02 -2.74752174e-02  8.14720169e-02 -2.02977750e-02
  1.18895052e-02 -1.19886823e-01 -3.85367796e-02 -3.34583297e-02
 -1.21817328e-01  5.58063313e-02  9.06806812e-02  3.07709854e-02
  3.78955640e-02  6.45341948e-02 -5.66633642e-02 -1.82759911e-02
  4.79489285e-03 -2.37775105e-03  1.60671026e-02  3.74483578e-02
  7.29673132e-02  5.14298864e-02  3.54199596e-02  5.02568968e-02
 -5.22520430e-02  3.61038633e-02 -4.28880798e-03  4.52362075e-33
 -3.57572958e-02 -5.84136322e-02  5.38364351e-02  9.31262225e-03
 -3.58214579e-03 -3.32956873e-02 -7.91664794e-02  3.69347632e-03
 -6.82213530e-02 -2.09290795e-02 -2.70511396e-02  6.98841065e-02
  5.04272208e-02  3.62804867e-02  5.70511594e-02 -3.30084525e-02
  7.91028589e-02  5.03269061e-02 -6.38197511e-02 -5.30926250e-02
 -4.59567755e-02  1.43360663e-02 -1.12762460e-02 -3.32460478e-02
  2.37308405e-02 -1.14140082e-02 -1.44276346e-04  8.67279693e-02
 -9.47566405e-02 -4.34702300e-02  2.41236910e-02  4.39907238e-02
 -1.40857045e-02  2.37556938e-02  1.30689442e-01 -1.90476142e-02
  8.52290839e-02 -1.83817912e-02 -8.61587897e-02 -1.83864571e-02
 -3.68591864e-03  3.35265440e-03 -5.66741335e-04  2.27344185e-02
  4.93650027e-02  2.52540894e-02  6.59746155e-02  3.70983072e-02
  5.64244092e-02  3.46528850e-02 -3.52002569e-02  6.97835069e-03
 -1.10643514e-01 -1.11216074e-02 -2.79068481e-02 -1.68657191e-02
  6.15934283e-02  1.24250017e-02  5.72613217e-02  4.65630181e-02
 -1.08648136e-01  1.93332285e-02  6.50430396e-02  3.58411819e-02
 -6.90119807e-03  2.72833575e-02  3.02017084e-03  5.31123802e-02
  4.24665399e-02  6.55228179e-03  2.68425904e-02  1.78988394e-03
 -9.45171434e-03  8.00061971e-03  4.73722965e-02 -6.36379123e-02
  7.46256392e-03 -1.93580089e-03 -8.36976171e-02 -8.60727876e-02
 -3.09071951e-02  9.00725485e-04 -3.44827250e-02  1.50314514e-02
  4.85682152e-02  1.32315205e-02 -2.42862422e-02  6.07049325e-03
  6.48896694e-02  5.28894141e-02 -4.54959832e-02 -2.01477930e-02
 -5.64815924e-02 -8.27596933e-02 -3.28892954e-02 -4.24054628e-33
 -7.33916834e-02 -1.91755872e-02  5.41415215e-02  2.77580526e-02
 -7.15497583e-02 -8.06051567e-02  2.83348374e-02 -2.08673812e-02
  8.95645563e-03  2.25659125e-02 -2.94887796e-02 -1.11182583e-02
  1.05801657e-01 -7.02222139e-02  2.29097530e-03  2.34031584e-02
  7.81780202e-03 -1.67887472e-02  2.73468066e-02 -1.18838757e-01
  3.42439599e-02  2.41494067e-02  8.72234930e-04  2.25255936e-02
 -8.56606066e-02 -8.39124620e-03 -7.91656300e-02 -2.21825596e-02
 -8.21539294e-03 -8.59984234e-02 -1.18788388e-02 -6.73690960e-02
 -3.95854600e-02  4.03224491e-02  1.20275270e-03 -9.34342109e-03
  6.05536029e-02  7.97774047e-02 -1.79918129e-02  5.28924949e-02
 -8.92582685e-02 -1.04771979e-01 -9.00948420e-03  1.94360316e-02
  1.37306126e-02  2.86160107e-03  4.10526581e-02 -1.27663184e-03
  3.16108316e-02 -6.17303103e-02  4.09403890e-02 -3.78087275e-02
 -6.38793558e-02  4.08678576e-02 -2.70409063e-02 -6.35341695e-03
 -5.36510833e-02 -6.78003728e-02  5.22765219e-02 -4.96345423e-02
 -3.20529402e-03 -7.67799243e-02  9.54144169e-04  7.22025409e-02
  3.93021405e-02 -6.64899275e-02 -3.88590395e-02 -6.22730292e-02
  8.47480297e-02  4.84943092e-02 -3.17646936e-02  6.11418895e-02
  6.54496476e-02 -2.05022767e-02 -7.33408555e-02 -6.17028326e-02
  1.56731997e-02 -3.03632095e-02  1.05658993e-01 -7.77128618e-03
 -6.06346354e-02  1.81057751e-02  1.71893816e-02  1.23020392e-02
 -4.11312170e-02 -9.70142521e-03  8.82584304e-02 -2.28819009e-02
  4.85877972e-03  5.22587374e-02 -5.63065708e-02  1.08717360e-01
 -9.33927149e-02 -7.62049779e-02 -5.51676415e-02 -5.04783095e-08
 -5.24012186e-02 -8.09686538e-03 -1.20696634e-01  4.56052907e-02
  3.84834111e-02 -4.95164245e-02  5.93938567e-02  5.61819300e-02
  1.02875801e-02  9.70254373e-03  4.87362258e-02  7.60462582e-02
  3.64758330e-03 -8.77287798e-03  2.57977378e-02 -8.56805220e-02
  5.16357459e-03  8.80666263e-03 -4.70639169e-02  2.74829101e-02
 -8.80236644e-03  5.28225526e-02 -1.38250049e-02 -1.51864886e-02
  8.39640945e-02 -3.01644225e-02  1.40933990e-02  3.77420299e-02
  3.81383896e-02  8.44317377e-02  4.32491535e-03 -5.92195354e-02
  3.25574465e-02  5.44029996e-02 -1.50171034e-02 -7.71117732e-02
 -5.35188578e-02  7.21268505e-02  8.41067359e-03  2.02191919e-02
  3.31213959e-02 -4.15515900e-02 -5.81164882e-02  2.64467765e-02
  4.17046435e-02 -9.30221900e-02 -5.17156199e-02 -2.54519284e-02
  1.27497643e-01 -4.12659422e-02 -8.03420879e-03  1.18640615e-02
 -1.74980555e-02 -2.07235795e-02 -2.41041463e-02 -1.19225450e-01
 -8.81579965e-02  5.26451208e-02  1.14641152e-02  7.05212504e-02
 -1.68550834e-02 -4.53878157e-02 -6.76406994e-02 -1.41609963e-02]"
"import * as React from 'react';
import Table from '@mui/material/Table';
import TableBody from '@mui/material/TableBody';
import TableCell from '@mui/material/TableCell';
import TableContainer from '@mui/material/TableContainer';
import TableHead from '@mui/material/TableHead';
import TableRow from '@mui/material/TableRow';
import Paper from '@mui/material/Paper';

function createData(
  name: string,
  calories: number,
  fat: number,
  carbs: number,
  protein: number,
) {
  return { name, calories, fat, carbs, protein };
}

const rows = [
  createData('Frozen yoghurt', 159, 6.0, 24, 4.0),
  createData('Ice cream sandwich', 237, 9.0, 37, 4.3),
  createData('Eclair', 262, 16.0, 24, 6.0),
  createData('Cupcake', 305, 3.7, 67, 4.3),
  createData('Gingerbread', 356, 16.0, 49, 3.9),
];

export default function BasicTable() {
  return (
    <TableContainer component={Paper}>
      <Table sx={{ minWidth: 650 }} aria-label=""simple table"">
        <TableHead>
          <TableRow>
            <TableCell>Dessert (100g serving)</TableCell>
            <TableCell align=""right"">Calories</TableCell>
            <TableCell align=""right"">Fat&nbsp;(g)</TableCell>
            <TableCell align=""right"">Carbs&nbsp;(g)</TableCell>
            <TableCell align=""right"">Protein&nbsp;(g)</TableCell>
          </TableRow>
        </TableHead>
        <TableBody>
          {rows.map((row) => (
            <TableRow
              key={row.name}
              sx={{ '&:last-child td, &:last-child th': { border: 0 } }}
            >
              <TableCell component=""th"" scope=""row"">
                {row.name}
              </TableCell>
              <TableCell align=""right"">{row.calories}</TableCell>
              <TableCell align=""right"">{row.fat}</TableCell>
              <TableCell align=""right"">{row.carbs}</TableCell>
              <TableCell align=""right"">{row.protein}</TableCell>
            </TableRow>
          ))}
        </TableBody>
      </Table>
    </TableContainer>
  );
}",Façade,JavaScript,freeCodeCamp,https://www.freecodecamp.org/news/javascript-design-patterns-explained/,"[-7.01234071e-03  3.91011052e-02 -4.74563520e-03  5.35942875e-02
 -2.16839425e-02  1.20050527e-01  9.00461059e-03  5.62083423e-02
  8.64734966e-03  3.26531380e-02  1.13100773e-02 -5.46030179e-02
 -1.65813789e-02 -5.17557897e-02  2.19265372e-03 -4.33062464e-02
 -2.80854404e-02 -8.30786303e-03 -5.66129684e-02 -2.63721459e-02
  3.85281593e-02  1.25069004e-02  6.05046563e-02 -5.20246960e-02
  6.02326095e-02  8.13694224e-02  5.60064688e-02 -1.87423397e-02
 -7.47971833e-02 -2.50217747e-02 -6.74053701e-03 -5.04910909e-02
 -4.03094105e-03  4.82127108e-02 -8.77177790e-02 -3.15679759e-02
 -2.86120269e-02 -4.06694189e-02  3.18684317e-02 -1.91090703e-02
  3.74523399e-04 -2.04528440e-02 -1.36114229e-02 -7.14573488e-02
  6.50098100e-02 -1.95456110e-02 -8.49602595e-02 -4.72356565e-02
  5.89950643e-02  2.79037841e-02 -9.60301533e-02  5.00502996e-03
  8.64002705e-02  1.71429105e-02  6.52867043e-03  4.94643953e-03
 -4.90618637e-03 -4.66484167e-02  1.09118275e-01  2.31737308e-02
  4.96531911e-02 -4.14597765e-02  3.35434228e-02 -1.68485120e-02
  7.37042651e-02 -8.43389854e-02 -5.35874106e-02  3.78050506e-02
 -6.06418625e-02  6.74227998e-02 -4.58652154e-03  1.46546941e-02
  5.67864515e-02  1.59209445e-02  7.28742499e-03 -5.91049269e-02
 -3.94026153e-02  1.70545038e-02  3.95570584e-02  6.09962121e-02
 -4.22045514e-02  9.55681037e-03 -5.12150079e-02  3.31885889e-02
 -8.79561296e-04  4.56777252e-02 -2.82381102e-02 -1.74966659e-02
 -9.72823799e-02 -9.73592475e-02 -4.90757776e-03  3.88905890e-02
  2.90967301e-02  1.17085949e-01 -6.48528114e-02  3.60554494e-02
 -4.33901697e-03 -8.12457800e-02 -3.25357579e-02  1.00225098e-02
 -2.05094963e-02  4.65674652e-03 -4.20929026e-03  7.03461915e-02
 -5.53743131e-02 -9.75069478e-02 -2.04799734e-02 -3.91546637e-03
  7.22041447e-03  2.06312723e-02 -2.66439561e-02  6.89107478e-02
 -8.09226334e-02  1.80629119e-02 -1.46888420e-01 -5.17429002e-02
  1.75363123e-02 -7.51141310e-02  5.05262949e-02 -2.82566901e-02
  1.77727975e-02  2.78320201e-02 -6.95873126e-02  4.94553745e-02
 -3.16180401e-02 -1.02704000e-02  3.35380547e-02  4.27133872e-33
 -8.81255791e-02 -6.76602796e-02  6.94426522e-02 -4.85418458e-03
  8.10513869e-02 -3.58884111e-02 -2.31059510e-02  3.33384015e-02
  3.58272456e-02  6.45397231e-02  1.08197937e-03 -4.39825505e-02
 -4.60431390e-02 -1.24617303e-02 -4.14879844e-02 -2.32903697e-02
 -8.05711001e-02 -1.56659447e-02 -8.90270807e-03  3.78503953e-03
 -7.07741007e-02  1.49282990e-02  4.47004884e-02  6.02282165e-03
 -9.17411782e-03  2.07952298e-02  1.54779218e-02  3.22316960e-02
 -9.15068015e-02 -1.74426269e-02  1.18948489e-01  1.86093263e-02
 -3.22325883e-04 -7.58061558e-02  1.22978641e-02 -5.11873374e-03
  6.15002494e-03  5.34702688e-02 -6.81857839e-02  4.37246934e-02
  3.52577046e-02 -3.56847979e-03  3.11109014e-02 -7.51606375e-03
 -1.83892064e-02  2.25635860e-02  1.13209695e-01  6.22521751e-02
 -7.98441004e-03 -1.63803548e-02 -3.83836627e-02 -7.14424718e-03
  2.66991574e-02 -3.85760970e-04  1.63149871e-02  5.30651733e-02
 -3.51688117e-02  7.01539814e-02  1.82532724e-02 -1.75681582e-03
 -1.32496702e-02  8.68718047e-03  1.72263775e-02 -2.75127981e-02
 -1.11642711e-01  6.39726296e-02 -5.83606586e-02 -2.74715908e-02
  6.93666786e-02 -2.66148522e-02  3.33660021e-02 -6.54876083e-02
  1.35257408e-01 -2.88381167e-02  3.71404476e-02  4.66761030e-02
 -7.71991313e-02 -1.05034463e-01 -5.04356958e-02 -9.03464705e-02
  6.49213567e-02  7.62414327e-03 -8.69554430e-02  2.89881416e-02
 -4.15888131e-02 -1.76334567e-02 -5.75607643e-02 -3.23824994e-02
  4.33376580e-02  8.83207321e-02 -8.35979581e-02 -7.89208338e-02
  3.00457515e-02 -2.08830684e-02 -4.18940857e-02 -4.34843866e-33
  6.64441288e-02  4.39016894e-02  3.32131982e-02  1.61675494e-02
  7.07193241e-02 -5.70203252e-02  7.21870959e-02  2.40982417e-02
 -1.66777696e-03  5.63202649e-02  4.38449085e-02 -7.20589608e-03
 -2.32874881e-02 -5.39591014e-02 -1.94423851e-02  2.26882935e-01
  2.12199371e-02  4.16206717e-02 -1.82943810e-02 -9.40637887e-02
 -1.58429332e-02  5.42823486e-02  2.87692007e-02  6.76977485e-02
 -2.08261441e-02  3.39109339e-02  6.37622103e-02  5.14795594e-02
 -1.01838149e-02 -1.14840232e-02  3.75060886e-02 -5.07617332e-02
 -2.94012460e-03  8.74952674e-02 -9.50321835e-03 -6.66891709e-02
 -4.43267345e-04  4.62971255e-02  6.18771911e-02  2.54883710e-02
 -3.11962981e-02 -5.91124445e-02  8.98065045e-03  3.62849683e-02
  6.47352962e-03 -4.02176939e-02  6.61796406e-02  3.11188269e-02
 -5.01930825e-02 -3.40392673e-03  1.70783754e-02 -9.10693482e-02
 -4.55860011e-02 -4.57499139e-02  9.56086908e-03  4.26380225e-02
 -2.12211926e-02  3.68498312e-03  3.83816212e-02 -5.47067709e-02
 -3.82147245e-02  2.70179007e-02  7.28744194e-02  3.42698023e-02
  1.04763255e-01 -2.01591756e-02 -5.85122555e-02 -3.88917923e-02
  3.50926928e-02  4.48351987e-02 -8.56858790e-02  9.34307799e-02
  6.93236440e-02 -3.70809697e-02  8.12250599e-02  2.05646977e-02
 -6.05968237e-02 -6.23014756e-03 -2.31123320e-03 -4.63167764e-02
 -1.32442713e-02 -3.14149186e-02  4.20994591e-03 -1.01839073e-01
  3.35099138e-02 -9.06841364e-03 -3.89471240e-02  1.32640572e-02
 -2.22220868e-02  3.97005379e-02 -2.26901770e-02 -8.78381133e-02
  1.11690874e-03 -1.69674866e-02  1.34131610e-02 -4.53580817e-08
  4.37247604e-02 -9.50952247e-02 -1.59163140e-02 -2.29810998e-02
 -3.18811648e-02 -7.92403892e-02  5.50056994e-02  2.16485057e-02
 -1.24186592e-03 -4.36259136e-02  6.58319965e-02  1.58657104e-01
  1.74476374e-02  3.14522944e-02 -2.19241455e-02  5.55455172e-03
 -7.24038705e-02  6.39208499e-03 -1.03346091e-02  2.00253483e-02
  1.52077861e-02  1.33884456e-02 -1.16490005e-02  7.74801075e-02
  9.03177410e-02 -8.31460208e-02 -1.03612870e-01  3.01190224e-02
  6.43231198e-02  4.10564281e-02  3.26700136e-02 -6.85956655e-03
  8.85780007e-02  2.81035509e-02  2.12300941e-02 -7.67282993e-02
 -1.83184389e-02 -3.02051026e-02 -1.40893701e-02  8.14878419e-02
 -2.76391506e-02  8.35493300e-03 -1.00247562e-02  1.11494521e-02
  7.35157728e-03  1.37508009e-02 -8.00404176e-02  9.00268033e-02
  7.63999224e-02  1.42639214e-02  2.08186731e-02 -7.14651048e-02
 -6.24138787e-02 -7.15479255e-02 -4.96028997e-02 -1.85760893e-02
 -1.74928028e-02  4.77902777e-02  4.95371372e-02  5.20772822e-02
 -1.03156511e-02  1.29927639e-02  2.67177615e-02 -3.92017961e-02]"
"var singleton = (function() {
    // private singleton value which gets initialized only once
    var config;

    function initializeConfiguration(values){
        this.randomNumber = Math.random();
        values = values || {};
        this.number = values.number || 5;
        this.size = values.size || 10;
    }

    // we export the centralized method for retrieving the singleton value
    return {
        getConfig: function(values) {
            // we initialize the singleton value only once
            if (config === undefined) {
                config = new initializeConfiguration(values);
            }

            // and return the same config value wherever it is asked for
            return config;
        }
    };
})();

var configObject = singleton.getConfig({ ""size"": 8 });
// prints number: 5, size: 8, randomNumber: someRandomDecimalValue
console.log(configObject);
var configObject1 = singleton.getConfig({ ""number"": 8 });
// prints number: 5, size: 8, randomNumber: same randomDecimalValue as in first config
console.log(configObject1);",Singleton,JavaScript,Toptal,https://www.toptal.com/javascript/comprehensive-guide-javascript-design-patterns,"[-4.77573536e-02  1.28724705e-02 -2.82189883e-02  6.01639673e-02
 -4.80243471e-03 -1.45680727e-02  7.69927204e-02 -1.64823476e-02
  2.77138017e-02 -4.08953018e-02  1.28751025e-02  2.13957541e-02
 -2.92347539e-02 -2.10971870e-02  5.54168820e-02 -2.70188302e-02
 -2.67538708e-02 -7.45208338e-02 -5.27445152e-02 -2.58654840e-02
  6.50604442e-02 -2.55312473e-02 -2.83495244e-02 -1.49290385e-02
  2.98114363e-02 -4.36429679e-02 -2.99520791e-02 -4.07833792e-02
  7.55515695e-02 -2.38535870e-02  1.79186240e-02  1.03480145e-02
 -1.03277162e-01  3.23583111e-02 -2.11535525e-02  5.95116951e-02
 -6.46012574e-02 -2.45967042e-02  1.88020188e-02  4.00995128e-02
  9.22099315e-03  1.28254354e-01 -5.78400791e-02 -6.61163852e-02
  4.77650687e-02 -8.62649549e-03 -7.10313320e-02  4.18609865e-02
  3.86510082e-02 -1.83832869e-02  7.85851255e-02  2.80513112e-02
 -5.86514361e-02 -3.22351009e-02  1.15874551e-01  3.62986811e-02
  1.23580890e-02 -2.99591534e-02  1.60339382e-02  2.92495769e-02
 -5.70095319e-04 -1.76801104e-02  3.37364562e-02  7.80557422e-03
  8.72579515e-02 -7.04794452e-02  3.16680856e-02  6.31214231e-02
  4.03520130e-02 -1.35027673e-02 -1.12383850e-02  7.50881657e-02
  1.15009531e-01  1.54978372e-02  1.39991334e-03 -3.83976549e-02
 -1.09187968e-01 -2.66706683e-02 -1.37441587e-02  1.74608994e-02
 -3.96016389e-02  1.99071858e-02  5.16006574e-02  6.00433685e-02
  2.11406555e-02  2.12552096e-03  3.88093330e-02  3.29446718e-02
  4.83373851e-02  2.13156063e-02 -1.15412146e-01  1.63881145e-02
 -1.05951637e-01  5.55665530e-02  2.82508451e-02  6.15375638e-02
 -2.54393220e-02 -1.88277792e-02  1.32753840e-02  1.03566712e-02
  2.15123221e-02 -2.89020371e-02  1.12984091e-01  4.00617421e-02
  2.61898506e-02 -9.49937627e-02 -2.52339877e-02 -5.76101132e-02
 -2.26558442e-03  2.96404883e-02  2.01855364e-04  7.07293525e-02
  3.36068235e-02  4.77692820e-02 -3.31238797e-03 -9.09028389e-03
  3.38792577e-02 -7.34405965e-03  5.60628660e-02  1.42280310e-01
  3.70618440e-02  1.37162628e-03  1.15141839e-01 -2.83250120e-02
 -9.23681166e-03  5.37649244e-02  6.82271793e-02  6.49103646e-33
  1.04416739e-02 -8.63844603e-02 -7.55844265e-03  3.43251005e-02
  8.35333578e-03  1.83447860e-02 -1.09218694e-02  2.51775626e-02
 -4.05239463e-02  1.31066041e-02  2.17331648e-02  1.00934260e-01
 -3.38557400e-02 -8.20267294e-03 -2.60047778e-03 -5.18390164e-03
  8.18289369e-02  4.28330936e-02  3.57932113e-02 -4.67503490e-03
  2.96412446e-02  5.60204163e-02 -2.32283808e-02 -5.67397885e-02
  4.57467362e-02 -4.29607965e-02 -2.69349329e-02  6.28002435e-02
 -1.18908972e-01  1.23390332e-02  8.26033056e-02  6.10950440e-02
 -3.37846354e-02  6.85520843e-02 -9.97633906e-04 -5.28867804e-02
  8.46075565e-02  4.82313037e-02 -1.43848017e-01 -9.77932960e-02
  5.75927533e-02  2.86690798e-03 -5.78247989e-03  1.14214504e-02
 -2.09439304e-02 -8.18645954e-02 -3.07509825e-02 -1.92112033e-03
  9.98571888e-02 -1.24577731e-01 -4.57140170e-02  7.44687915e-02
  8.02260451e-03 -6.06495254e-02 -8.65496788e-03 -4.14764956e-02
  3.76153290e-02 -1.12081341e-01 -4.99345213e-02 -1.27040269e-02
 -6.34944513e-02 -2.53853835e-02 -9.04733092e-02  2.82680858e-02
  2.71878783e-02  1.80343762e-02 -3.69752832e-02 -7.01973811e-02
  6.18096739e-02 -4.17906530e-02  6.08672248e-03 -2.00856961e-02
 -6.55610114e-02 -4.64874692e-02 -1.84975192e-02  2.47227922e-02
 -2.17771996e-02  3.66554745e-02 -8.69859606e-02 -5.96721694e-02
  1.50117073e-02  6.91209286e-02 -8.55735242e-02  1.53387934e-01
  1.60830710e-02  7.37645254e-02  6.20609242e-03  3.79304215e-03
  3.31303924e-02  6.20576292e-02 -5.17529622e-02 -1.63499862e-02
  4.93456572e-02 -1.18907765e-01 -5.48265427e-02 -7.55773954e-33
 -4.62355949e-02  1.98236387e-02 -1.08012753e-02  3.32817063e-02
  4.44152877e-02  7.60449655e-03 -1.66110713e-02 -9.70458786e-05
  2.37461156e-03  1.91136878e-02 -2.76489463e-02  2.47790618e-03
  2.94627696e-02 -3.75682302e-03 -4.92731370e-02  6.96075857e-02
 -6.87928945e-02 -1.62811242e-02  8.01943988e-02 -2.99809463e-02
  4.30066213e-02 -2.14322321e-02  7.01311454e-02 -7.04805739e-03
  7.85541441e-03  5.32381907e-02 -8.16251561e-02 -3.83764040e-03
 -5.34549076e-03 -8.97526648e-03 -7.38680214e-02 -3.14308740e-02
  2.14442424e-02  3.48694128e-04 -5.90215437e-02 -1.14282660e-01
  2.11345423e-02  7.00588077e-02  2.08650716e-02  5.44783399e-02
 -1.10152466e-02 -2.13089678e-02 -6.24923632e-02 -2.01967135e-02
  4.36329842e-02 -6.29795343e-02  6.16466925e-02 -7.94893876e-03
  8.71113688e-03 -6.36474648e-03 -7.25963525e-03 -4.82414663e-02
 -8.33215788e-02 -5.18931868e-03 -5.88096343e-02 -2.41743270e-02
 -3.26869078e-02 -8.24486371e-03  5.89864291e-02  1.01165004e-01
  6.81073666e-02 -1.03268363e-01 -4.66571748e-02  9.11626592e-02
 -6.93349689e-02 -2.72065978e-02 -3.11979689e-02 -3.28386873e-02
 -2.03913340e-04  2.92841159e-02 -4.90837209e-02 -1.32809561e-02
  5.09770401e-02 -6.60760552e-02 -3.09356414e-02  1.63953938e-02
 -1.58651229e-02 -8.60807002e-02  7.68007264e-02  6.57973066e-02
 -5.43984724e-03  3.46350111e-03 -6.02522381e-02 -8.48826468e-02
  2.95988992e-02 -3.61596309e-02  9.24462304e-02 -1.32240471e-03
  6.08318225e-02  4.97114137e-02 -6.09495454e-02  1.22135226e-02
 -1.13332011e-01 -7.98856691e-02 -1.14695355e-01 -5.11081595e-08
 -3.47827412e-02 -1.80648491e-02 -1.11955637e-02  5.33822812e-02
  2.25252882e-02 -2.74830479e-02  4.90288511e-02 -1.06136044e-02
  2.35509183e-02 -2.39917878e-02  1.19669847e-02  5.07406518e-02
  2.60676220e-02  1.67835262e-02 -1.61912683e-02 -2.13526711e-02
  2.44120918e-02 -3.70853506e-02 -4.52920198e-02 -7.79886823e-03
 -1.88686308e-02  1.87595305e-03  1.84962302e-02  1.62546653e-02
 -2.28074212e-02  7.01279053e-03  3.42790559e-02  4.66825180e-02
  3.57175097e-02  4.80683930e-02 -1.25520855e-01  4.62564901e-02
  2.66283043e-02  3.31411697e-02 -9.39914957e-02 -5.34472289e-03
 -1.00377209e-01  2.99249254e-02  5.71994334e-02 -3.62647735e-02
  1.00913562e-01 -3.19100581e-02  5.65270195e-03  2.78182775e-02
  1.29374629e-02 -2.62226816e-02  3.19549628e-02  1.95636190e-02
  9.78314877e-02 -2.11650133e-02 -3.77808847e-02 -2.31116451e-02
 -4.53239456e-02  7.68761337e-03  1.23041216e-02 -5.75324334e-02
 -3.99865918e-02 -4.68288586e-02  2.14770511e-02  1.60547085e-02
 -7.99203068e-02 -6.69370145e-02 -5.69390953e-02 -4.10878547e-02]"
"var publisherSubscriber = {};

// we send in a container object which will handle the subscriptions and publishings
(function(container) {
    // the id represents a unique subscription id to a topic
    var id = 0;

    // we subscribe to a specific topic by sending in
    // a callback function to be executed on event firing
    container.subscribe = function(topic, f) {
        if (!(topic in container)) {
          container[topic] = [];
        }

        container[topic].push({
            ""id"": ++id,
            ""callback"": f
        });

        return id;
    }

    // each subscription has its own unique ID, which we use
    // to remove a subscriber from a certain topic
    container.unsubscribe = function(topic, id) {
        var subscribers = [];
        for (var subscriber of container[topic]) {
            if (subscriber.id !== id) {
                subscribers.push(subscriber);
            }
        }
        container[topic] = subscribers;
    }

    container.publish = function(topic, data) {
        for (var subscriber of container[topic]) {
            // when executing a callback, it is usually helpful to read
            // the documentation to know which arguments will be
            // passed to our callbacks by the object firing the event
            subscriber.callback(data);
        }
    }

})(publisherSubscriber);

var subscriptionID1 = publisherSubscriber.subscribe(""mouseClicked"", function(data) {
    console.log(""I am Bob's callback function for a mouse clicked event and this is my event data: "" + JSON.stringify(data));
});

var subscriptionID2 = publisherSubscriber.subscribe(""mouseHovered"", function(data) {
    console.log(""I am Bob's callback function for a hovered mouse event and this is my event data: "" + JSON.stringify(data));
});

var subscriptionID3 = publisherSubscriber.subscribe(""mouseClicked"", function(data) {
    console.log(""I am Alice's callback function for a mouse clicked event and this is my event data: "" + JSON.stringify(data));
});

// NOTE: after publishing an event with its data, all of the
// subscribed callbacks will execute and will receive
// a data object from the object firing the event
// there are 3 console.logs executed
publisherSubscriber.publish(""mouseClicked"", {""data"": ""data1""});
publisherSubscriber.publish(""mouseHovered"", {""data"": ""data2""});

// we unsubscribe from an event by removing the subscription ID
publisherSubscriber.unsubscribe(""mouseClicked"", subscriptionID3);

// there are 2 console.logs executed
publisherSubscriber.publish(""mouseClicked"", {""data"": ""data1""});
publisherSubscriber.publish(""mouseHovered"", {""data"": ""data2""});",Observer,JavaScript,Toptal,https://www.toptal.com/javascript/comprehensive-guide-javascript-design-patterns,"[-2.26875208e-02  1.64812140e-03  4.98635806e-02  5.43934144e-02
  2.61313561e-02 -6.96033165e-02  5.18685393e-02 -5.94865754e-02
  9.13102478e-02 -3.34760733e-02 -3.22494432e-02  3.65899727e-02
 -2.48957667e-02  6.04020781e-04  3.27812210e-02  1.79958660e-02
 -3.73749994e-02  1.65253691e-02 -1.34408116e-01 -4.36818227e-02
  1.52487261e-02 -6.99979300e-03 -3.20495665e-02  3.87680746e-04
 -2.97401944e-04 -4.58972789e-02  2.20933240e-02 -1.30262554e-01
 -2.10831128e-02  2.62974612e-02  8.74015242e-02 -1.41738206e-01
 -7.37019703e-02 -6.03801869e-02 -1.61067843e-02 -3.03213540e-02
 -6.78007081e-02 -2.90013384e-02 -8.35700426e-03  2.73415986e-02
  9.53340530e-02  2.72064209e-02 -7.10575953e-02 -6.29692003e-02
  1.64203793e-02 -4.77437265e-02 -1.00577965e-01  1.32372528e-02
 -3.07081267e-02  1.00318581e-01  8.36508647e-02 -3.14961523e-02
 -6.88343272e-02  7.26851001e-02  6.05094060e-02  7.41286501e-02
 -3.42075974e-02  1.22487750e-02  7.80989602e-02 -6.36237534e-03
  5.45682497e-02 -2.61813402e-02 -3.96920033e-02  4.24270220e-02
  5.92575148e-02 -4.52281013e-02  1.74719915e-02  2.18570102e-02
 -1.75156351e-02  7.38805979e-02  5.62942289e-02  5.56546971e-02
  8.72397650e-05 -7.58244423e-04  4.67304401e-02 -7.17471763e-02
 -7.05045313e-02 -2.83554588e-02 -8.21771799e-04  2.38273293e-02
 -5.69394836e-03 -7.22995400e-02 -3.61559838e-02  1.18725477e-02
 -3.69063416e-03  2.44042440e-03 -1.04599549e-02 -4.59301658e-03
 -5.14513366e-02 -2.25141086e-02 -7.87798911e-02  5.54995574e-02
  4.93395627e-02  6.32849708e-02 -1.20517854e-02  3.51654701e-02
 -1.65582988e-02  1.63369775e-02  4.06700857e-02  3.32416221e-02
 -2.11894065e-02  4.30957712e-02 -3.07530388e-02  7.76075050e-02
  4.29342240e-02 -1.05489947e-01 -9.06860903e-02 -6.32838607e-02
 -9.70318466e-02  1.33672997e-01 -1.98453851e-02  6.86468333e-02
 -3.84391323e-02  5.48341088e-02 -6.08803518e-03  9.22361016e-02
  9.04810578e-02  5.10919765e-02 -5.90259209e-03  3.57659906e-02
  8.10604990e-02 -9.14220419e-03  7.70735145e-02  1.52790442e-03
  3.43723148e-02 -5.05566411e-03  3.00955623e-02  1.53872954e-33
  3.39794308e-02 -6.33301660e-02 -8.17289948e-02  5.70755173e-03
  8.88994709e-02  4.04962040e-02  2.21854299e-02 -4.09747735e-02
 -2.94580236e-02  5.19033223e-02 -2.26421244e-02  8.72857422e-02
  9.12257377e-03 -3.40865627e-02 -5.00987191e-03 -6.34013265e-02
  6.66604489e-02  7.95681626e-02 -5.44042774e-02 -1.90802738e-02
 -1.03128981e-02  7.20814988e-02 -2.62221247e-02  4.18367870e-02
 -9.93036758e-03 -3.06443032e-03 -2.84928661e-02  7.60260373e-02
 -6.48077950e-02 -2.35887733e-03  1.77613087e-02  2.07853019e-02
 -4.86281924e-02  5.67698888e-02  4.95936489e-03 -3.65200788e-02
 -3.51865496e-03 -7.57855996e-02 -5.10870628e-02 -2.45479103e-02
  6.04279824e-02 -2.32389942e-02 -9.32306498e-02 -9.41492468e-02
 -8.02593902e-02 -2.51289401e-02 -6.44624466e-03 -1.20203793e-01
  6.03423230e-02 -8.85172784e-02  2.04458181e-02  5.03858291e-02
  6.84291422e-02 -6.12516031e-02  4.94512506e-02 -5.58505859e-03
  1.09577281e-02 -5.84517978e-02 -3.77250612e-02 -1.44649427e-02
 -3.28160897e-02  2.42683515e-02  6.77631721e-02 -6.74586452e-04
 -2.67135110e-02  6.26486540e-02 -7.88485482e-02 -2.36645844e-02
  3.58578712e-02 -8.30885544e-02  3.22825089e-02  1.79293547e-02
  2.86018588e-02 -4.59374078e-02  2.13284008e-02  3.96413207e-02
 -1.26284823e-01  3.45016941e-02 -4.32096012e-02  1.87706463e-02
  2.47307476e-02 -1.50553081e-02 -9.82807800e-02  1.21088311e-01
  3.91416252e-02  4.56481352e-02 -6.59710169e-02 -1.56427976e-02
 -4.17313762e-02  1.12290837e-01  1.58799384e-02  8.04095566e-02
 -3.45976576e-02 -6.50398284e-02 -2.53104195e-02 -3.75863511e-33
 -4.96510379e-02  4.90016490e-02 -3.18491831e-02  5.52657843e-02
 -2.85351351e-02 -3.04519385e-02 -4.32747826e-02  1.78436805e-02
  1.80990770e-02 -3.86486501e-02 -4.69241515e-02 -3.59645672e-02
 -1.96850859e-02  4.47788611e-02  1.81006566e-02  1.04918510e-01
 -1.74719468e-03 -4.81653884e-02 -2.65801102e-02 -1.10168092e-01
  4.80280109e-02  2.01008692e-02  2.75178496e-02 -2.80365348e-03
 -6.98800310e-02 -4.22472917e-02  4.58134562e-02  9.51265916e-03
  2.97391135e-02 -6.37695864e-02 -2.39393823e-02  3.28480974e-02
  3.52174928e-03  8.13842111e-04  3.02818641e-02 -8.76964554e-02
  8.80251080e-02  1.09394208e-01 -9.19019897e-03 -8.38180482e-02
  4.50167768e-02 -5.42787127e-02  8.86748731e-03  5.05327843e-02
  3.25330608e-02 -6.44516870e-02  2.80053522e-02  9.18416679e-02
  1.03479028e-01  1.82930324e-02 -7.95062184e-02 -8.45579803e-02
  3.00695505e-02  4.83056381e-02 -5.29702604e-02  3.80410627e-03
  4.41386737e-02 -1.00209303e-01  7.52746537e-02  5.26666045e-02
  3.20240040e-03 -5.66625446e-02  2.42575607e-03  3.56733836e-02
  3.72793190e-02 -5.13037061e-03  2.52741519e-02 -1.72243286e-02
  7.64324293e-02 -8.77406728e-03 -1.71745103e-02 -1.96489077e-02
  3.95835154e-02 -6.60640374e-02  6.16322234e-02  1.25174141e-02
 -2.16250308e-02 -9.43665430e-02  5.97349592e-02 -1.69156697e-02
 -1.97640192e-02  7.90033583e-03  9.78311175e-04 -4.29023132e-02
  1.97613072e-02 -3.13461758e-02  3.10086738e-02 -1.35135725e-02
 -1.97291709e-02 -4.06515487e-02  2.68955752e-02 -3.11165815e-03
 -5.62358983e-02 -3.31645869e-02 -4.61028032e-02 -4.89919003e-08
 -5.39168492e-02  2.11005416e-02 -3.44621837e-02 -1.81207675e-02
  8.18206556e-03  4.93440824e-03 -2.73408089e-02  1.98152475e-02
  2.03118380e-02 -4.74602431e-02 -3.31462622e-02  4.20580357e-02
  5.04646972e-02  1.18762655e-02  2.88921874e-02 -4.42367792e-02
  2.08973158e-02 -5.15379906e-02 -3.37108150e-02  5.88245504e-02
 -5.52057009e-03  1.27866417e-02 -1.33819953e-02 -2.11636126e-02
  3.25083397e-02  3.46549228e-03  8.02896917e-02  8.50515589e-02
  2.21273932e-03 -1.33815408e-02 -8.29864070e-02  4.08315621e-02
 -1.25280861e-02  8.01791921e-02 -4.05175947e-02 -9.36879963e-03
  5.74633256e-02 -4.78637293e-02 -2.22026999e-03  4.29594405e-02
  1.34179085e-01 -6.35740813e-03 -9.53556504e-03  6.50121719e-02
 -2.00376734e-02 -1.38546282e-03 -3.07602156e-02  5.00153750e-03
  7.73703605e-02  3.23475562e-02 -7.06615597e-02 -2.85485201e-02
  4.08342890e-02 -7.07101598e-02  3.31890828e-04 -4.61274274e-02
 -2.76759197e-03 -2.08425354e-02  3.73552144e-02  6.98713511e-02
  4.79540676e-02 -2.34732293e-02 -7.37322494e-02 -2.92663164e-02]"
"// the object which knows how to execute the command
var invoker = {
    add: function(x, y) {
        return x + y;
    },
    subtract: function(x, y) {
        return x - y;
    }
}

// the object which is used as an abstraction layer when
// executing commands; it represents an interface
// toward the invoker object
var manager = {
    execute: function(name, args) {
        if (name in invoker) {
            return invoker[name].apply(invoker, [].slice.call(arguments, 1));
        }
        return false;
    }
}

// prints 8
console.log(manager.execute(""add"", 3, 5));
// prints 2
console.log(manager.execute(""subtract"", 5, 3));",Command,JavaScript,Toptal,https://www.toptal.com/javascript/comprehensive-guide-javascript-design-patterns,"[-8.01616758e-02  7.80733116e-03 -2.51878356e-03  2.44715177e-02
 -7.32970014e-02 -9.15934369e-02 -1.96126960e-02  6.18556365e-02
  4.22243997e-02 -8.92235246e-03 -7.03328755e-04 -3.58565077e-02
 -4.22653817e-02  1.05282513e-03  7.66926035e-02  3.43149155e-02
 -3.25046442e-02  2.28689238e-02 -1.09273912e-02 -1.00631125e-01
  1.21750005e-01 -4.35598493e-02 -8.80258381e-02  1.38054332e-02
  9.75101627e-03 -5.05659431e-02 -6.81829304e-02 -7.51290545e-02
  1.62143856e-02 -6.72365958e-03  2.95082238e-02 -4.14748713e-02
  5.81243215e-03  5.65726645e-02 -1.16674379e-01  1.20902814e-01
 -1.58852793e-03 -6.94967899e-03  3.64983152e-03 -2.48450078e-02
  1.48001481e-02 -1.09828599e-02 -8.42370838e-02 -9.02032033e-02
  2.88383383e-02 -2.20031869e-02 -1.19738482e-01 -4.60097641e-02
  5.74007398e-03  3.24570504e-03  1.27600525e-02  4.37413864e-02
 -8.33415762e-02 -1.16552738e-02  4.73091565e-02  4.61294912e-02
  3.02135311e-02  2.30233259e-02 -1.56424090e-03 -2.46236287e-02
 -4.93214391e-02  5.68327913e-03 -4.70868386e-02  4.98836264e-02
  9.74371880e-02 -7.53170252e-02  2.12415098e-03 -4.68373438e-03
  1.07591236e-02  3.95494252e-02  4.03156430e-02  2.38794815e-02
 -1.53838808e-03 -8.48931354e-03 -3.58704999e-02 -7.38975033e-02
  1.54555459e-02  4.36225273e-02 -5.66996522e-02 -2.82392558e-02
  3.38540450e-02 -2.19730157e-02 -3.16532999e-02  8.01203027e-02
  1.52810337e-02  5.90827987e-02 -3.08191534e-02 -3.93062346e-02
  3.45873497e-02  6.76600561e-02 -3.14354710e-02 -9.19767190e-03
 -1.15153464e-02  3.04081738e-02  3.02159339e-02  1.12492153e-02
 -1.20109340e-04 -2.71575712e-02 -3.65990885e-02  5.26825823e-02
 -6.85726628e-02 -1.47364251e-02 -1.39872404e-02 -8.28415453e-02
  4.60399799e-02  3.40534537e-03 -1.71472423e-03 -1.18275851e-01
 -5.19263186e-02 -4.08142284e-02  5.50587662e-03 -2.04739701e-02
 -1.04942883e-03  1.37051649e-03  1.41885263e-04  1.76067483e-02
  7.00659156e-02 -1.67663731e-02  8.09823796e-02  2.96052154e-02
  1.08368032e-01  1.12361930e-01  4.65338975e-02  3.92676219e-02
 -2.07025558e-03  4.62767817e-02  7.03102201e-02 -6.15345625e-34
  8.18462577e-03 -1.19354442e-01  4.65880195e-03  8.85628387e-02
  2.21014880e-02  6.41965792e-02  5.46032973e-02  5.29255206e-03
 -4.64137234e-02  1.79275125e-02 -5.83919464e-03  3.30387875e-02
 -4.30877274e-03  4.53695282e-02  6.90924376e-02 -3.83564457e-03
  6.76552206e-02  4.20713462e-02 -2.27197725e-02 -2.42568478e-02
  1.56333856e-02  3.63380387e-02 -5.63603230e-02  8.84565637e-02
  2.10123304e-02 -3.35537503e-03 -5.61096892e-02  9.02902521e-03
 -2.81468779e-02  9.98019334e-03  3.34863774e-02  5.62066138e-02
 -1.11914158e-01  7.12941960e-02  2.80425195e-02  5.00010140e-02
  2.00159047e-02 -1.54235074e-02 -1.81985442e-02 -7.63517842e-02
 -7.11928532e-02 -5.41854538e-02 -6.59386590e-02 -1.73252635e-02
 -7.80064762e-02 -7.73013681e-02 -5.29968143e-02 -2.22983621e-02
  6.65857792e-02  5.78648895e-02 -2.69279331e-02  6.74030259e-02
  5.42775542e-02 -6.47237375e-02  2.38043685e-02  6.69994503e-02
  4.38590012e-02  2.92272195e-02  4.09120843e-02  5.11997901e-02
  1.92765170e-03  5.92644773e-02 -2.93377787e-02  8.23823810e-02
 -6.42426312e-02  2.04699989e-02 -4.50283475e-02 -4.95218635e-02
  5.83022088e-02  5.12560718e-02 -6.84491396e-02  4.79376242e-02
 -1.96718741e-02  6.49502082e-03  7.42344633e-02 -6.06402420e-02
 -7.34771490e-02 -9.05225426e-02 -4.47564833e-02 -6.73946068e-02
  2.07106257e-03  6.42262176e-02  1.06084123e-02  4.89024632e-02
  5.21342792e-02  7.73252696e-02 -9.35317203e-03  1.50581170e-02
  7.50158951e-02  4.00434323e-02 -8.21835399e-02 -5.25361672e-02
 -5.22589646e-02  2.33816239e-03 -6.86479174e-03 -2.78369460e-33
  3.92644703e-02  4.33906280e-02 -3.70895900e-02  5.72207198e-02
 -1.09382167e-01 -3.20117287e-02 -1.14643881e-02 -5.49737252e-02
 -3.90026197e-02 -7.15641817e-03 -9.89392325e-02  9.07486528e-02
  1.93718914e-02  2.84945462e-02  5.45253120e-02  3.42861488e-02
 -1.28283665e-01 -7.81644657e-02  5.76445833e-04 -7.15506971e-02
  8.77643842e-03  1.98615119e-02  7.07026273e-02  8.51112418e-03
 -4.03334163e-02 -1.07411174e-02 -2.36343872e-02  1.98221300e-03
  8.79031047e-02 -2.86115017e-02 -5.97801916e-02  3.93003598e-03
  2.25561019e-02 -1.32248215e-02  1.78182665e-02 -3.65581252e-02
  7.32201263e-02  9.27449912e-02  2.96438392e-02 -5.42938560e-02
 -3.77467461e-03 -6.67069927e-02  8.79834145e-02 -1.08640054e-02
  1.34935528e-02  9.12680477e-03  1.23047698e-02  3.23779061e-02
 -6.35825470e-02 -7.73750320e-02 -6.04282990e-02 -4.37285379e-02
 -1.10819489e-01  3.12173236e-02 -5.63588627e-02 -8.27269256e-03
  2.69710440e-02 -8.19715410e-02  1.38163283e-01  2.86686625e-02
 -3.57746854e-02 -6.13858290e-02  3.72949727e-02 -4.30513034e-03
 -2.17311010e-02  4.43897322e-02 -2.73786653e-02 -5.55318445e-02
  5.00835441e-02 -1.93948764e-02  8.64735395e-02 -1.05948225e-02
  1.72933564e-02 -9.14929062e-02 -4.54849489e-02 -6.31415620e-02
 -2.13807486e-02 -8.44188482e-02  1.77105125e-02  2.12934799e-02
  4.61447239e-02  5.15235681e-03  5.72451800e-02  3.09115890e-02
 -1.05981760e-01 -1.19539695e-02  4.26626168e-02  1.19848549e-01
 -6.17487170e-02 -2.99385656e-02 -1.37012545e-02  9.36687812e-02
 -3.16879749e-02  1.16060097e-02 -4.91006821e-02 -5.21412282e-08
 -3.20463963e-02 -1.38211977e-02  3.06428652e-02 -2.71459739e-03
 -2.80590244e-02 -4.72111665e-02 -2.08131839e-02  2.23708022e-02
  4.26961780e-02 -2.71420944e-02  3.35973827e-03  2.84429584e-02
  4.54073288e-02 -6.21108944e-03  6.77445307e-02  1.63421519e-02
  8.94359592e-03  2.76231533e-03 -2.82127857e-02  4.83512171e-02
 -1.32212685e-02 -1.87479220e-02 -2.37677954e-02  2.80203875e-02
 -6.83969725e-03 -5.05428016e-03 -1.94411948e-02  8.59359130e-02
  2.88576796e-03  5.04057184e-02  4.86197555e-03  1.26920402e-01
  5.54130897e-02  1.34397224e-01  1.08287642e-02  5.95569424e-02
 -3.16787623e-02  8.22621677e-03  3.75670306e-02 -1.99841764e-02
 -1.72044635e-02 -8.87413323e-02 -1.09326495e-02  1.31442593e-02
  2.57341769e-02 -1.19487960e-02  3.36513692e-03 -4.77175936e-02
 -1.29820369e-02 -2.92405989e-02 -6.02058209e-02  4.27039266e-02
 -2.07159258e-02  6.56308830e-02 -3.14541198e-02 -8.43512174e-03
  2.43842369e-03 -1.64025351e-01  8.83037224e-03  8.84828269e-02
 -2.61721499e-02 -1.51629851e-03  2.85349730e-02 -3.72709073e-02]"
"var Factory = function () {
    this.createEmployee = function (type) {
        var employee;

        if (type === ""fulltime"") {
            employee = new FullTime();
        } else if (type === ""parttime"") {
            employee = new PartTime();
        } else if (type === ""temporary"") {
            employee = new Temporary();
        } else if (type === ""contractor"") {
            employee = new Contractor();
        }

        employee.type = type;

        employee.say = function () {
            console.log(this.type + "": rate "" + this.hourly + ""/hour"");
        }

        return employee;
    }
}

var FullTime = function () {
    this.hourly = ""$12"";
};

var PartTime = function () {
    this.hourly = ""$11"";
};

var Temporary = function () {
    this.hourly = ""$10"";
};

var Contractor = function () {
    this.hourly = ""$15"";
};

function run() {

    var employees = [];
    var factory = new Factory();

    employees.push(factory.createEmployee(""fulltime""));
    employees.push(factory.createEmployee(""parttime""));
    employees.push(factory.createEmployee(""temporary""));
    employees.push(factory.createEmployee(""contractor""));

    for (var i = 0, len = employees.length; i < len; i++) {
        employees[i].say();
    }
}",Factory Method,JavaScript,dofactory,https://www.dofactory.com/javascript/design-patterns/factory-method,"[-4.48986031e-02  1.05341308e-01  5.31996973e-02  4.23383638e-02
 -4.18200996e-03 -1.59343367e-03  3.16893309e-02  2.20057424e-02
  4.31386121e-02 -5.51703647e-02 -2.58470129e-04 -4.22399938e-02
 -5.82114421e-02 -1.25534339e-02  3.56248543e-02  7.72854779e-03
 -7.18577802e-02 -1.53103815e-02 -6.44075274e-02 -7.16498643e-02
  1.10139623e-01 -5.34251407e-02 -3.97297591e-02  3.08820233e-03
  3.52225713e-02 -1.10898297e-02  4.81778197e-02 -2.43975054e-02
 -1.30829886e-02  2.25088913e-02 -4.65042293e-02 -2.35566702e-02
 -4.77090962e-02 -9.09475610e-03 -5.05848266e-02 -8.34479555e-03
 -7.47383535e-02  2.23096311e-02  1.66390054e-02  9.79103707e-03
 -5.36009297e-02  1.71128903e-02 -3.60346921e-02 -9.01474506e-02
  7.54279569e-02 -5.06290533e-02 -6.23271279e-02  3.89536209e-02
 -6.53912604e-04  1.25424147e-01  5.91714680e-02  1.64486619e-03
  2.23333500e-02 -5.83580649e-03  1.23229502e-02 -1.44895529e-02
 -2.24712212e-02 -7.46592805e-02  1.29200015e-02  2.82807499e-02
  1.21124908e-02 -2.60990467e-02  3.02618500e-02 -3.36960182e-02
  7.38367215e-02 -1.22484386e-01 -5.13730459e-02  3.80869433e-02
 -6.08572774e-02  8.15999433e-02  4.20075580e-02  4.77241985e-02
  4.83061522e-02 -1.49882566e-02 -4.32930216e-02 -6.46777153e-02
  4.76715751e-02 -9.08092503e-03  6.42100647e-02  5.22410609e-02
 -4.92525734e-02 -6.84413314e-02 -3.77882086e-02  2.43286584e-02
  1.40267808e-03  1.84064675e-02  5.29857427e-02  4.55259569e-02
  2.95170266e-02 -8.78236517e-02 -6.82428926e-02  1.12587228e-01
 -2.60221846e-02  2.89284941e-02  3.07589564e-02  5.71028441e-02
 -1.06883394e-02  3.70302126e-02 -1.80342868e-02  7.96186626e-02
 -5.75884655e-02 -2.96819042e-02 -2.89865118e-03 -2.09509898e-02
 -4.42818590e-02 -8.49241689e-02  1.64730847e-02 -1.37822516e-02
 -5.94384484e-02  2.73891799e-02  1.23290727e-02  9.27230418e-02
 -4.46970873e-02  3.31386141e-02  7.62108946e-03 -1.61590837e-02
  1.86513942e-02 -6.73118457e-02  1.42023722e-02  8.99907351e-02
  1.09400310e-01  6.79627135e-02 -1.23180554e-03 -6.29376736e-04
  3.69929932e-02 -5.11185192e-02  6.24951422e-02  4.54979276e-33
  5.18058203e-02 -6.41359296e-03 -4.18859459e-02  5.38555086e-02
  4.43573780e-02  6.79109842e-02 -7.27642421e-03  2.99525857e-02
 -4.45244573e-02 -2.26285285e-03 -3.39313969e-02 -1.83998456e-03
 -1.56904645e-02 -2.66042296e-02 -2.84870788e-02 -6.74662665e-02
  5.33790886e-02  4.98144738e-02  1.10864788e-02 -2.69427728e-02
 -4.18656096e-02 -1.40048377e-02 -2.12500915e-02  5.06779179e-02
 -9.65756923e-03 -4.41802628e-02 -7.08466675e-03  3.64390425e-02
 -1.03891283e-01 -1.54194310e-02  1.15783118e-01 -2.43902719e-03
 -9.66482759e-02  5.36071993e-02  6.33308813e-02  3.10760480e-03
  1.00151179e-02  1.00889653e-02 -6.78355843e-02 -1.72146186e-02
  2.82180514e-02 -1.69396866e-02  7.77156502e-02 -5.75511903e-02
 -4.16967683e-02 -3.84005494e-02  6.15475178e-02  3.32643539e-02
  6.64159097e-03  6.60220385e-02 -6.27496988e-02  4.84051630e-02
  3.77284698e-02 -4.94344160e-02 -1.96327101e-02  5.67750037e-02
 -6.44249003e-03 -4.36357968e-03 -1.79585516e-02 -2.35651284e-02
 -7.77701265e-04 -7.17831790e-05 -2.56469883e-02 -1.00070955e-02
 -7.76767880e-02 -9.77712683e-03  2.51007285e-02  1.75629538e-02
  1.54552117e-01 -4.29232642e-02  9.95643158e-03 -5.44981137e-02
  7.90233463e-02  6.09605853e-03 -1.83602720e-02  3.82613018e-02
 -4.38017808e-02  4.23897728e-02 -8.01380947e-02 -9.20798481e-02
 -1.22560309e-02 -1.03193885e-02 -7.83349946e-03  4.26153019e-02
  1.26526535e-01  1.89258400e-02 -2.95124780e-02  4.12329063e-02
  7.67901242e-02  1.43088520e-01 -9.18687209e-02  1.32254846e-02
  9.01811663e-03 -5.69295101e-02  2.28292719e-02 -4.90664713e-33
 -4.97601554e-02  4.25399579e-02  1.25692179e-02 -2.41407845e-02
  5.50199375e-02 -3.58200744e-02 -2.15362813e-02  1.58819975e-03
 -1.26172872e-02  4.12519388e-02  4.89422120e-02 -3.49871777e-02
 -8.57158192e-03 -2.99757961e-02 -3.05679929e-03  8.18699822e-02
 -3.20735271e-03 -5.57814948e-02  4.24132533e-02 -5.75711541e-02
  2.00731531e-02  5.31306975e-02  1.91265568e-02 -1.83523372e-02
 -5.07335626e-02  4.74747345e-02 -6.85214475e-02  7.46862963e-03
 -3.55164297e-02 -9.07406863e-03 -8.70821550e-02 -4.48417142e-02
 -1.94005575e-02  8.20968524e-02  2.84307748e-02 -1.33034423e-01
  1.82097089e-02  3.88981700e-02  4.60259393e-02  5.37036359e-03
  5.15381712e-03 -1.20145030e-01 -2.43615471e-02 -5.60257509e-02
 -1.90117937e-02 -4.89788316e-02  6.25320449e-02  1.45426197e-02
  1.61958989e-02 -3.71309146e-02  1.28512317e-03 -8.53765085e-02
 -7.34441876e-02  4.61302213e-02 -3.74708846e-02 -8.87292176e-02
  3.55449803e-02 -1.62743703e-01  5.96511252e-02  8.41327012e-02
 -4.07086499e-02 -6.53081164e-02  9.55006108e-02  5.04494160e-02
 -3.52582475e-03 -1.13106355e-01  2.46593915e-02 -8.85365307e-02
  3.20061557e-02  3.04052792e-02 -7.09997118e-02  6.64516613e-02
  4.99914102e-02 -5.17865829e-02 -4.20184210e-02 -4.97597344e-02
 -1.73815750e-02 -6.64338246e-02  3.97638381e-02 -6.30708179e-03
 -1.95693597e-02 -3.75672914e-02  3.23085021e-03 -2.46884394e-02
 -1.61504950e-02  7.94390403e-03  4.75940034e-02  2.77082156e-02
 -2.18628254e-02 -2.31920816e-02 -5.08220517e-04  1.75231639e-02
 -7.04205129e-03  1.88428164e-03 -8.94323662e-02 -4.64405012e-08
 -3.58607098e-02 -1.52094774e-02 -4.36397791e-02 -2.80397926e-02
 -9.33726225e-03 -1.16062373e-01  1.93571094e-02  2.26672981e-02
  3.48919854e-02 -1.16941305e-02  5.85343614e-02  5.92893288e-02
  8.42901841e-02  1.53801660e-03  3.56331989e-02 -6.82676658e-02
 -3.26509811e-02 -1.44823724e-02 -4.54965793e-02  7.53298542e-03
  5.22795580e-02 -2.52395868e-03 -1.14585375e-02  5.76615706e-02
  9.61136594e-02  2.04925537e-02  2.04366632e-02  2.83228811e-02
  9.03553516e-02  1.21021964e-01 -6.23864681e-02  9.32279900e-02
  3.43731157e-02  1.69818047e-02 -2.74906475e-02 -6.94322512e-02
  2.12186854e-02 -3.90736794e-04  2.04043016e-02  8.47342908e-02
  1.26499444e-01  1.47670684e-02 -4.85214479e-02  4.37304005e-03
  1.29129171e-01 -8.46518353e-02 -4.30186763e-02 -6.56408221e-02
  3.36061902e-02 -1.55649649e-03 -2.34750807e-02  1.73292682e-03
  4.19971012e-02 -8.74602124e-02 -8.31514876e-03 -3.73181626e-02
  1.10629825e-02 -4.86615971e-02  2.67873444e-02  3.33343148e-02
  1.35583375e-02 -4.78265435e-02 -9.50380228e-03 -5.52570894e-02]"
"
// input devices

var Gestures = function (output) {
    this.output = output;

    this.tap = function () { this.output.click(); }
    this.swipe = function () { this.output.move(); }
    this.pan = function () { this.output.drag(); }
    this.pinch = function () { this.output.zoom(); }
};

var Mouse = function (output) {
    this.output = output;

    this.click = function () { this.output.click(); }
    this.move = function () { this.output.move(); }
    this.down = function () { this.output.drag(); }
    this.wheel = function () { this.output.zoom(); }
};

// output devices

var Screen = function () {
    this.click = function () { console.log(""Screen select""); }
    this.move = function () { console.log(""Screen move""); }
    this.drag = function () { console.log(""Screen drag""); }
    this.zoom = function () { console.log(""Screen zoom in""); }
};

var Audio = function () {
    this.click = function () { console.log(""Sound oink""); }
    this.move = function () { console.log(""Sound waves""); }
    this.drag = function () { console.log(""Sound screetch""); }
    this.zoom = function () { console.log(""Sound volume up""); }
};

function run() {

    var screen = new Screen();
    var audio = new Audio();

    var hand = new Gestures(screen);
    var mouse = new Mouse(audio);

    hand.tap();
    hand.swipe();
    hand.pinch();

    mouse.click();
    mouse.move();
    mouse.wheel();
}",Bridge,JavaScript,dofactory,https://www.dofactory.com/javascript/design-patterns/bridge,"[-4.49530520e-02 -9.53543410e-02  1.95135083e-02 -3.71193737e-02
  1.11619346e-02 -4.07636631e-04  6.75269812e-02  2.68852711e-02
  5.95268905e-02 -8.49414766e-02  5.10333180e-02  5.50559815e-03
 -1.13899678e-01  6.14112429e-02 -3.88790257e-02  2.95717898e-03
 -6.46126866e-02  3.42983454e-02 -5.28850257e-02 -7.89034739e-03
  1.32623941e-01 -5.58750443e-02  3.33577096e-02 -4.48357165e-02
  5.14458120e-02 -3.99501435e-03  5.23373447e-02 -7.60137141e-02
 -1.17998226e-02 -3.38925198e-02  1.24813933e-02  1.99365001e-02
 -4.92757820e-02 -1.47694424e-02 -1.43616632e-01 -6.42076656e-02
 -8.23932514e-02 -6.49019629e-02 -5.89123182e-02 -6.42310902e-02
 -1.75133552e-02  2.26619933e-02  2.03232933e-02 -7.76375681e-02
  9.11439583e-03 -2.99986973e-02 -5.82010858e-02  6.49585351e-02
  2.67970599e-02  9.15608332e-02 -2.12651864e-02 -3.95848714e-02
  1.54394377e-02  2.10832823e-02 -4.34404761e-02  4.73758318e-02
  2.11361703e-02 -1.57918539e-02  9.61965770e-02 -2.03442685e-02
  8.28957930e-03  1.32995856e-03  6.62212297e-02 -6.96507888e-03
  7.84138963e-02 -7.08732381e-02  3.01911738e-02 -7.34935049e-03
 -9.58093703e-02  7.52932355e-02 -1.34387640e-02 -1.56757627e-02
  5.33946753e-02  8.06158967e-03  2.06973478e-02 -1.40615076e-01
 -3.65726501e-02  4.03735787e-02 -4.21920009e-02  9.38592628e-02
  4.15677428e-02 -7.11963102e-02 -9.90666524e-02  8.24722126e-02
  2.35575810e-02  9.14517120e-02 -5.36738709e-02  8.29558913e-03
 -9.60488338e-04 -7.30011910e-02 -1.13747261e-01  4.05142270e-02
 -8.78763571e-02 -3.54808732e-03 -2.40850411e-02 -2.41334382e-02
 -5.78068607e-02 -3.95505391e-02 -4.29784581e-02  3.32157873e-02
  4.59671579e-03  5.99809736e-02 -1.41591299e-02  2.17991769e-02
 -6.23899847e-02 -5.08233458e-02 -5.20242192e-02 -2.10891291e-02
 -6.14184104e-02  6.07284307e-02  3.59487049e-02  9.76851881e-02
 -5.93316890e-02  2.10140329e-02  3.27741280e-02  8.78151855e-04
 -4.99400422e-02 -4.12509777e-02  6.69010356e-02  4.12376113e-02
  3.49336378e-02  7.63272122e-02 -1.02346405e-01  1.11323260e-02
  9.10611972e-02  5.10393269e-02 -5.44678885e-03  5.55622373e-35
  4.94090207e-02 -2.80523747e-02 -5.26020452e-02 -1.29616549e-02
  2.95618959e-02  1.94657184e-02  8.26296024e-03  9.32215247e-04
 -7.24084601e-02 -5.85456286e-03 -3.89036583e-03  3.48886065e-02
  7.08046257e-02 -6.03221916e-02 -3.34336162e-02 -5.80232218e-02
  7.34042078e-02  5.58126085e-02  2.03817524e-02 -8.78236629e-03
  2.33309399e-02  1.00851217e-02 -4.27648798e-02  2.93559879e-02
  6.73209876e-02  5.85047454e-02 -4.56156395e-02  6.62745237e-02
  7.23590003e-03  4.04580869e-03  2.40905397e-02  3.98273729e-02
 -2.84431595e-03 -3.55475023e-02  9.90836881e-03 -2.22993903e-02
  2.00457009e-03  2.06526984e-02 -4.31020232e-03 -2.61308569e-02
  4.60526645e-02 -4.58288863e-02 -6.76400261e-03 -1.60000343e-02
 -6.71112686e-02 -2.31039114e-02  2.18610670e-02  2.38715652e-02
  2.81272344e-02 -1.73771363e-02 -2.10471544e-02 -4.49926406e-02
  1.83783043e-02 -4.71199490e-02  5.24768829e-02 -4.94527966e-02
 -1.01833241e-02 -7.40522938e-03 -4.54058535e-02 -2.24531833e-02
  2.89042369e-02  6.79478329e-03 -5.00158109e-02 -2.18266156e-02
 -2.27989107e-02  1.37506202e-02 -6.23515667e-03  5.22285774e-02
  6.30012676e-02 -1.03803053e-01 -2.39091702e-02  1.12183308e-02
  9.60391313e-02  5.85828396e-03  1.00933649e-02  2.45407894e-02
 -1.07836194e-01 -1.21325804e-02 -3.45013328e-02 -5.00242338e-02
 -3.52683291e-03 -1.02711981e-02 -3.10857911e-02  1.77344233e-02
  9.00556222e-02 -2.12678611e-02 -5.99825755e-02 -5.20180911e-02
 -1.82368346e-02  7.79853165e-02 -1.64935604e-01  1.11892484e-02
 -1.48690799e-02 -6.95253015e-02 -2.56197620e-02 -2.18068877e-33
 -3.99066024e-02  1.27133667e-01 -1.66741759e-02  3.71250436e-02
 -2.42042486e-02  4.60111909e-02  8.41905102e-02  3.50085385e-02
  1.42616918e-02 -7.64733404e-02 -7.12846816e-02  8.39419477e-03
 -1.48299793e-02  9.17424797e-04 -2.35282648e-02  1.14264868e-01
 -5.58245480e-02 -8.23263451e-03  2.10122727e-02 -2.58814320e-02
  3.95807847e-02  3.92521620e-02  5.30161485e-02  7.71186426e-02
 -7.44066983e-02 -2.65562581e-03  6.97290748e-02  3.53304930e-02
 -2.65490040e-02 -1.73695777e-02 -7.09150452e-03 -3.45709920e-02
 -5.19652404e-02  4.28220406e-02  4.44273651e-02 -8.04995522e-02
  4.00818959e-02  3.66015323e-02  5.78816533e-02 -1.62339248e-02
 -2.85130050e-02 -4.18874882e-02  5.28892130e-02 -5.59554435e-02
  2.93510258e-02  5.49675152e-03  2.03068890e-02  4.71978635e-02
 -6.53335452e-03 -5.05633093e-02  7.08348071e-03 -2.88132392e-02
 -3.41735706e-02 -4.44278494e-02 -2.48737168e-03  2.57840957e-02
  7.25820586e-02 -1.33627594e-01  2.39196122e-02  1.53187485e-02
  3.85987237e-02 -3.72733548e-02 -8.98212753e-03 -4.14799750e-02
  6.30322099e-02  3.27997804e-02  3.56277749e-02  2.75764614e-02
  1.08487524e-01  4.12563868e-02 -8.08858052e-02  3.29041034e-02
  1.56652838e-01 -5.10929301e-02  2.38469206e-02  4.16894723e-03
 -4.02077809e-02 -8.09833854e-02  8.16021338e-02 -4.08173688e-02
  6.84287176e-02 -2.71993615e-02  4.02816013e-02 -4.07299735e-02
  3.60513143e-02  7.34796077e-02 -2.60701450e-03  1.57482140e-02
  6.04749483e-04 -7.73412036e-03 -4.10656519e-02  2.08515441e-03
  7.08446726e-02 -7.49726072e-02  9.20957327e-03 -4.35898748e-08
 -2.14142315e-02  5.90462871e-02 -7.93872587e-03 -6.19401634e-02
 -3.29078361e-02 -1.50712570e-02  2.47959867e-02  3.19815241e-02
  7.83187896e-03 -4.29106727e-02 -5.17534800e-02  2.46772952e-02
  1.02191053e-01  9.58784297e-02  4.52579297e-02 -5.51298435e-04
  3.78218368e-02  5.50798327e-02 -3.79193835e-02 -6.15466945e-02
  4.01102789e-02  1.22584887e-02  5.35952039e-02  2.69976612e-02
  2.65325028e-02 -9.61056650e-02 -6.40978962e-02  5.02887405e-02
  2.61597382e-03 -6.96059363e-03 -9.91104841e-02  4.25691307e-02
 -1.40341073e-02  2.34299041e-02 -1.39184864e-02 -8.23133439e-02
 -5.44475652e-02 -3.18514109e-02  6.88864291e-02  1.14466280e-01
  4.79377508e-02  2.81383637e-02 -2.27435753e-02 -8.59450363e-03
 -2.34152433e-02  2.34085917e-02  4.42107059e-02 -7.63806701e-02
  1.95209533e-02  1.03589445e-01 -4.01716195e-02  4.94175963e-03
 -2.26318534e-03 -5.15989251e-02  7.26759359e-02 -8.54484458e-03
 -6.76861778e-02 -2.49040313e-02 -1.46440808e-02  3.13164108e-02
 -2.62411050e-02  7.17358813e-02 -5.19504286e-02  8.37604795e-03]"
"var Node = function (name) {
    this.children = [];
    this.name = name;
}

Node.prototype = {
    add: function (child) {
        this.children.push(child);
    },

    remove: function (child) {
        var length = this.children.length;
        for (var i = 0; i < length; i++) {
            if (this.children[i] === child) {
                this.children.splice(i, 1);
                return;
            }
        }
    },

    getChild: function (i) {
        return this.children[i];
    },

    hasChildren: function () {
        return this.children.length > 0;
    }
}

// recursively traverse a (sub)tree

function traverse(indent, node) {
    console.log(Array(indent++).join(""--"") + node.name);

    for (var i = 0, len = node.children.length; i < len; i++) {
        traverse(indent, node.getChild(i));
    }
}

function run() {
    var tree = new Node(""root"");
    var left = new Node(""left"")
    var right = new Node(""right"");
    var leftleft = new Node(""leftleft"");
    var leftright = new Node(""leftright"");
    var rightleft = new Node(""rightleft"");
    var rightright = new Node(""rightright"");

    tree.add(left);
    tree.add(right);
    tree.remove(right);  // note: remove
    tree.add(right);

    left.add(leftleft);
    left.add(leftright);

    right.add(rightleft);
    right.add(rightright);

    traverse(1, tree);
}",Composite,JavaScript,dofactory,https://www.dofactory.com/javascript/design-patterns/composite,"[-5.70504069e-02  6.03923900e-03  4.65821773e-02  9.26057529e-03
 -4.58083376e-02 -6.58586174e-02 -3.53222080e-02  6.08781679e-03
  3.44018973e-02  1.01814335e-02  1.29377367e-02  1.89194102e-02
 -7.04132952e-03 -2.07595825e-02  2.57993732e-02  8.52972120e-02
 -1.29247427e-01  9.45057198e-02  2.62322612e-02 -1.02936812e-01
  4.37298678e-02 -7.70699000e-03 -3.86716910e-02 -2.75621773e-03
 -2.14994745e-03  4.97855656e-02 -4.06019613e-02 -1.02185942e-02
 -3.17394058e-03 -5.38500361e-02  4.61231470e-02 -4.45121229e-02
 -5.08849928e-03  6.55548424e-02 -8.07972699e-02  4.41587232e-02
 -5.33773936e-02 -3.07005048e-02  3.85376029e-02  2.73745302e-02
 -3.08552198e-02  6.72740936e-02 -1.05195995e-02 -7.06923753e-02
  5.00738509e-02 -2.90191751e-02 -1.06251784e-01  3.28798615e-03
  2.53694803e-02  4.52395827e-02 -1.87918339e-02 -2.44821198e-02
 -3.79701704e-02  2.74626482e-02 -1.31658651e-02  2.77045723e-02
 -2.80770138e-02 -7.54661486e-02  8.77377689e-02  8.58867392e-02
  8.64485949e-02  1.31953042e-02 -2.88241822e-02 -6.85734972e-02
  2.58421805e-02 -1.38074970e-02  9.15258564e-03  3.83378491e-02
 -6.32732641e-03  8.62452090e-02  3.88108268e-02  6.27551004e-02
  1.13316048e-02  3.41411233e-02 -1.91206038e-02  1.77348219e-02
  4.21279892e-02  4.87612933e-02 -5.46703376e-02 -6.94219675e-03
 -7.77727291e-02  4.70627174e-02 -4.27735009e-04  3.77716986e-03
 -3.70344520e-02  8.95165130e-02 -4.34940904e-02  2.98421551e-02
  1.16073741e-02  3.14004044e-03 -9.68715250e-02 -2.04887204e-02
  4.51889262e-03  1.55674852e-02  2.44699176e-02  2.73620915e-02
  3.01190894e-02 -4.98102568e-02 -8.68380442e-02  4.16122451e-02
 -4.44047190e-02  6.71548769e-03  1.97677761e-02 -9.27288085e-02
 -8.12127367e-02 -9.27961839e-04 -9.87232625e-02 -4.60798293e-02
 -3.71910706e-02 -1.52592268e-02 -2.56745070e-02  2.72721592e-02
 -3.81520726e-02  2.83488445e-02 -7.66445026e-02 -5.83850890e-02
  1.79164833e-03 -7.83560798e-02  8.46038982e-02  8.15799311e-02
  8.41487646e-02  3.90084758e-02 -1.41501473e-02  3.70505564e-02
  5.32596037e-02 -9.90220234e-02 -8.70195255e-02  5.03902433e-33
 -6.18282985e-03 -9.64873098e-03  8.88954252e-02  7.62508288e-02
  5.27083464e-02  1.88876968e-02 -2.22479948e-03  3.31902988e-02
 -1.35139003e-01  1.46676973e-02 -5.04743606e-02 -3.45596261e-02
  1.36970740e-03 -7.39636421e-02  9.63000860e-03 -9.35553014e-02
  7.43960962e-02  2.61377990e-02 -4.15958576e-02 -1.31790340e-03
 -4.25388776e-02  2.06630304e-02 -2.97326059e-03  3.97468507e-02
  5.12336195e-02 -6.83406461e-03  3.03194090e-03  2.90010660e-03
  2.26052571e-03 -1.84993446e-02  7.18441159e-02 -1.99675793e-03
 -8.23279023e-02  3.13403159e-02  3.67194153e-02 -2.15539224e-02
  4.91445102e-02 -3.09228394e-02 -1.25836767e-02 -9.79285408e-03
  6.27737259e-03 -2.31587011e-02  2.52443794e-02  2.79457010e-02
 -2.48154588e-02 -3.46396305e-02 -1.62105430e-02 -2.66603474e-02
  6.83708070e-03  6.17747642e-02 -2.92488262e-02  9.62075964e-02
  4.72131469e-05 -4.00589705e-02 -6.13461845e-02  6.90616593e-02
 -3.72220017e-02  7.17696175e-02 -2.27310583e-02  2.32272279e-02
  7.17850998e-02  1.13201393e-02 -6.36222512e-02  3.69101726e-02
 -6.15225062e-02 -1.02490671e-02 -2.97162272e-02 -2.24780068e-02
  9.83200371e-02 -8.92352015e-02 -5.37309758e-02  1.53163765e-02
  7.10166395e-02 -4.44693081e-02 -4.18269262e-02 -4.96329255e-02
 -8.68070275e-02 -3.36929485e-02 -6.28195480e-02 -9.79819298e-02
 -1.25109419e-01  4.24540900e-02  3.21861580e-02 -5.59906522e-03
  1.17492855e-01 -9.73889157e-02 -4.13687900e-02  2.39139963e-02
 -7.95002095e-03  4.63202409e-02 -4.25232016e-02 -3.42569165e-02
 -1.07298121e-02 -5.78252114e-02  3.61089073e-02 -5.87069246e-33
 -3.37595865e-02 -1.64707042e-02  4.14247960e-02 -6.74355635e-03
 -9.59657226e-03 -1.11224819e-02 -2.07442474e-02 -1.12219611e-02
 -2.98043471e-02  2.76042055e-02 -1.63835532e-03  9.44240093e-02
 -4.03452292e-02 -1.82502009e-02  2.52566691e-02  6.12067059e-02
 -2.36917404e-03 -9.76062194e-03  6.35739118e-02 -2.70992890e-03
  3.80316116e-02  1.00212559e-01  2.15120465e-02  1.62464287e-02
 -2.15846635e-02 -2.69029774e-02  5.23122679e-03  9.80565548e-02
  1.36525780e-02  2.37431359e-02 -1.70122460e-02  1.23235891e-02
  3.02818585e-02  4.26059961e-02  6.39993623e-02 -1.49438113e-01
 -1.31919114e-02  4.85656634e-02  8.56396034e-02  1.44942999e-02
  4.34508137e-02 -7.93996304e-02 -7.57325254e-03 -3.85560617e-02
  8.24788306e-03  2.78332531e-02 -1.76283829e-02  1.30180418e-01
 -2.87716165e-02 -3.67729887e-02 -1.90597232e-02 -6.56466698e-03
 -7.80330002e-02 -5.62258624e-02  6.00831537e-03 -6.72811922e-03
  2.40097102e-03 -2.67159957e-02  1.33786097e-01  6.79111690e-04
 -1.67309139e-02 -6.28332123e-02  2.39658691e-02 -3.38084958e-02
  9.67281982e-02 -6.96078613e-02 -1.04993135e-01 -4.39748242e-02
 -5.84156960e-02 -5.70374122e-03 -5.64500503e-02  7.49159828e-02
 -1.37296598e-02 -9.87079144e-02 -8.55815597e-03 -4.07184884e-02
 -3.85079198e-02 -3.61546464e-02  5.13925403e-03 -1.08514912e-02
 -5.12433462e-02  2.32375655e-02 -4.86443602e-02  3.01526953e-02
  6.37144148e-02 -5.47484048e-02  6.52033538e-02  1.77281126e-02
  3.92667810e-03 -4.38587330e-02  1.99823994e-02  3.00894417e-02
  5.34847900e-02  2.53941223e-04 -2.15957239e-02 -5.15347764e-08
 -4.53382805e-02 -4.86426167e-02 -5.24359867e-02 -2.53127888e-02
  5.02945557e-02 -4.06726226e-02  6.97689131e-02  1.11942671e-01
 -5.18285446e-02 -7.92452469e-02  1.05292238e-02  4.93269004e-02
  6.47042170e-02  3.50665599e-02  8.21141228e-02 -4.72222976e-02
 -2.31619272e-02 -1.09340446e-02 -6.17083767e-03  1.10015236e-01
  1.30874263e-02 -5.32588782e-03 -1.37094054e-02  1.26298487e-01
  4.69189743e-03 -1.12079859e-01  3.03868242e-02 -3.03984322e-02
 -6.86016865e-04  4.04735431e-02 -2.90467944e-02  3.27232480e-02
  4.13324051e-02  1.00053437e-01 -8.58426839e-03 -1.36258947e-02
 -3.46454307e-02  7.63002038e-02  1.63904484e-02  7.59939477e-02
  9.76488516e-02  2.24515959e-03 -2.99704131e-02  5.11698890e-03
 -2.86456989e-03 -4.28201221e-02  1.78987216e-02  2.22990178e-02
  8.86127353e-02 -2.65405737e-02 -6.60150796e-02  2.56250836e-02
 -2.37874892e-02 -1.11557640e-01  2.12951582e-02  2.04958022e-02
  3.43974656e-03  7.41440570e-03  2.57422645e-02  1.42381191e-01
  3.36728655e-02  6.10883497e-02  3.64469960e-02  2.32778508e-02]"
"
var User = function (name) {
    this.name = name;

    this.say = function () {
        console.log(""User: "" + this.name);
    };
}

var DecoratedUser = function (user, street, city) {
    this.user = user;
    this.name = user.name;  // ensures interface stays the same
    this.street = street;
    this.city = city;

    this.say = function () {
        console.log(""Decorated User: "" + this.name + "", "" +
            this.street + "", "" + this.city);
    };
}

function run() {

    var user = new User(""Kelly"");
    user.say();

    var decorated = new DecoratedUser(user, ""Broadway"", ""New York"");
    decorated.say();
}",Decorator,JavaScript,dofactory,https://www.dofactory.com/javascript/design-patterns/decorator,"[-1.03620449e-02  4.62541096e-02  4.43897285e-02  1.32687725e-02
 -8.88741985e-02 -3.81624177e-02  1.11106426e-01 -5.14567234e-02
 -3.14707719e-02 -1.13476925e-01 -1.23512084e-02 -2.31080279e-02
 -5.88549227e-02  5.11875842e-03  8.17481354e-02  4.67188023e-02
 -8.27947073e-03  9.97631252e-03 -1.67337619e-02 -3.76894907e-03
  1.49748787e-01 -7.41258487e-02 -6.23625256e-02  1.26956252e-03
 -4.48262505e-03  5.62770898e-03  3.41311730e-02 -2.17220392e-02
  2.11683139e-02  1.86712388e-02  4.16751653e-02 -8.34635571e-02
 -5.29541001e-02  1.23225618e-02 -1.24447629e-01  1.05002383e-02
 -9.47191790e-02  2.85896938e-02  3.29962932e-02 -2.76027583e-02
 -6.78951666e-02  6.18223846e-03 -1.13559254e-01 -3.60927358e-02
  5.12709878e-02 -2.27665603e-02 -3.18582766e-02  2.91332174e-02
  1.73061453e-02  3.80901084e-03  1.14977742e-02  9.43854544e-03
  4.75897966e-03 -7.02238306e-02  1.21980226e-02  3.66763510e-02
  1.79301370e-02 -2.49552988e-02  1.26288310e-02  9.06118937e-03
 -4.61074598e-02 -1.18235452e-02  5.10832667e-02  7.24903345e-02
  9.75138918e-02 -8.25196430e-02  1.77894998e-03  1.87378488e-02
 -3.57340649e-02 -1.20243430e-03  6.95888475e-02  3.30522545e-02
  1.07233822e-01  7.70227006e-03  2.98096682e-03 -4.13578562e-02
 -7.17652664e-02  2.93700234e-03 -2.18476150e-02  4.85109687e-02
 -1.16744116e-02 -2.67298836e-02 -4.05769609e-02  2.56259888e-02
  4.92015965e-02  1.32897824e-01 -3.44537571e-02 -2.44764462e-02
 -4.94504347e-02 -1.46460235e-02 -6.59918180e-03  6.44695992e-03
  1.02955708e-02  1.61250141e-02 -3.69758494e-02  3.25384014e-03
 -2.12275740e-02 -4.25987020e-02 -4.73415889e-02  8.48870277e-02
 -1.22511700e-01  6.51006121e-03 -2.45238678e-03 -3.65547054e-02
 -1.32135367e-02 -6.94882870e-02 -1.17947590e-02 -5.96093386e-02
 -7.18275160e-02  3.09132729e-02  3.49598750e-02  5.57324998e-02
 -5.94852306e-02  4.19613793e-02 -2.20195781e-02 -5.60152009e-02
  3.25004645e-02 -7.41681382e-02  5.16617112e-02  9.24533084e-02
  1.05668768e-01  3.91543247e-02  2.28596888e-02  1.91095490e-02
  5.17222332e-03 -1.14650419e-02  6.05760030e-02 -4.63220171e-34
  3.45817432e-02  1.19268231e-03 -1.33363344e-02  1.37579232e-01
  3.71591561e-02  1.66442536e-03 -6.48052841e-02  3.56008648e-03
 -1.05636254e-01 -1.47014717e-03  8.17317069e-02 -9.27508692e-04
  5.01687527e-02  1.04433224e-02  9.45054088e-03  2.72991676e-02
  6.81884736e-02 -1.64033659e-02 -3.83053795e-02 -3.41178924e-02
  7.15448475e-03  4.67083529e-02  2.68313149e-03  2.19434649e-02
 -4.93892320e-02 -8.99155065e-03 -3.45228389e-02  9.52197313e-02
 -7.68608879e-03 -4.49017767e-04  1.00352950e-01 -1.29507510e-02
 -3.11637670e-02  1.29333004e-01  1.92637406e-02  3.36365104e-02
  1.54194525e-02 -2.11968627e-02 -6.95662722e-02 -3.40682827e-02
  3.55658270e-02 -4.03129756e-02 -2.92220531e-04  3.25817093e-02
 -4.84482422e-02  7.02595571e-03  4.26694863e-02  5.30946739e-02
 -1.42690819e-02  5.17051630e-02 -3.38260755e-02  1.01461321e-01
 -5.04169613e-02  4.26952988e-02  2.52136844e-03  5.16758375e-02
 -1.45511338e-02 -4.85224053e-02 -2.29819701e-03 -6.27896935e-02
  2.00563278e-02  1.33134648e-02 -3.35569680e-02 -1.99522311e-03
 -4.85438965e-02 -4.24985103e-02  2.70147230e-02  1.14314528e-02
  8.11216086e-02 -2.57545244e-02  2.06753165e-02 -3.99269648e-02
  3.02974712e-02  5.21778464e-02  8.57150555e-03  1.34263048e-02
 -1.12632968e-01  4.60122526e-02 -3.64957303e-02 -8.22971687e-02
 -3.24110463e-02 -4.81619760e-02 -1.01451948e-01  8.26615393e-02
  4.20128964e-02  2.89327540e-02 -1.23093883e-02  1.46049652e-02
  3.11084166e-02  1.17101856e-01 -1.69283114e-02 -8.03413801e-03
 -1.57289803e-02 -4.03450169e-02 -4.71418016e-02 -2.72347494e-33
 -5.60292304e-02  1.32063832e-02 -1.54704042e-02 -1.36920651e-02
 -2.10409835e-02 -2.97939535e-02 -4.04047184e-02  1.87106915e-02
  2.38021254e-03  3.11628263e-02 -3.31353843e-02  4.16520089e-02
  6.70686141e-02  1.51110962e-02  8.44322667e-02  1.09708913e-01
 -2.69945664e-03  1.94488298e-02  1.20014576e-02 -4.80078794e-02
  1.98359657e-02  5.77514693e-02 -8.43529627e-02 -6.93726391e-02
 -7.85186440e-02  3.42140906e-02 -8.90759751e-03  4.08014050e-03
  1.56555716e-02 -2.18411162e-03 -5.15924804e-02 -3.09133641e-02
 -1.33886002e-02  3.43651585e-02  7.19428202e-03 -2.85350811e-02
  4.20521535e-02  3.76594439e-02 -9.76511091e-03 -3.69421206e-03
 -1.31676989e-02 -6.57960474e-02  1.77326321e-04  9.90134431e-04
 -2.27333512e-02 -3.77470702e-02 -1.11080609e-01 -1.29909525e-02
  7.23670274e-02 -1.44073581e-02 -1.83376987e-02 -5.76739125e-02
 -6.15857579e-02 -5.49435019e-02 -5.41304909e-02 -5.27106151e-02
  6.35673925e-02 -1.29749045e-01  9.74583104e-02  1.33299232e-01
  7.43262703e-04 -5.81195764e-02  2.12046783e-02  8.08507204e-02
 -4.77423854e-02 -9.52307433e-02 -3.10072675e-02 -6.32494390e-02
  9.41730887e-02 -2.23506913e-02 -9.28824488e-03  5.13391234e-02
 -2.37893336e-03 -1.14445396e-01 -2.64242776e-02 -3.85725126e-02
  1.38842696e-02 -4.38938141e-02  3.53172198e-02 -1.83229130e-02
  6.74406961e-02 -2.66238842e-02 -6.45192413e-05 -5.32855317e-02
  1.89667735e-02 -7.19493255e-02  3.73361595e-02  5.95986918e-02
 -3.68631110e-02 -1.43440636e-02  3.00695375e-02  1.00095987e-01
 -4.91965786e-02 -4.95702289e-02 -1.10554665e-01 -4.32502638e-08
 -6.19335733e-02 -4.01694188e-03 -9.53867845e-03  3.36918198e-02
 -3.73557694e-02 -2.57699285e-02  2.01905183e-02 -2.77385022e-02
 -3.82596552e-02 -2.26813331e-02  4.55389209e-02  8.78298059e-02
  6.56593964e-02 -1.62023827e-02  6.40865415e-02 -6.07012846e-02
 -6.60583153e-02 -2.11867001e-02 -5.92249222e-02  4.08981219e-02
  2.03440967e-03 -1.57958586e-02 -3.58629189e-02  4.31901105e-02
  6.87783808e-02  3.14056897e-03  2.01223511e-02 -1.39130373e-02
  6.74964278e-04  8.86460766e-02 -7.89175779e-02  1.22491188e-01
  4.86804657e-02  6.24962226e-02 -3.19900513e-02 -4.86892387e-02
 -4.74855788e-02  2.13545770e-03  8.33168328e-02  3.94493118e-02
  1.16300486e-01 -8.41621980e-02 -4.05884981e-02  4.99040708e-02
  1.02207124e-01  3.02808918e-02  2.57151984e-02 -6.51256740e-02
  6.05058894e-02  4.23185751e-02 -3.78650911e-02 -1.02475770e-02
 -4.38597463e-02 -6.21428303e-02 -6.11770675e-02 -6.93938211e-02
  1.02761376e-03  4.26007584e-02  1.79220270e-02 -2.06259582e-02
 -3.67533043e-02  2.39734817e-03  1.07390638e-02  6.00551022e-03]"
"
function Flyweight(make, model, processor) {
    this.make = make;
    this.model = model;
    this.processor = processor;
};

var FlyWeightFactory = (function () {
    var flyweights = {};

    return {

        get: function (make, model, processor) {
            if (!flyweights[make + model]) {
                flyweights[make + model] =
                    new Flyweight(make, model, processor);
            }
            return flyweights[make + model];
        },

        getCount: function () {
            var count = 0;
            for (var f in flyweights) count++;
            return count;
        }
    }
})();

function ComputerCollection() {
    var computers = {};
    var count = 0;

    return {
        add: function (make, model, processor, memory, tag) {
            computers[tag] =
                new Computer(make, model, processor, memory, tag);
            count++;
        },

        get: function (tag) {
            return computers[tag];
        },

        getCount: function () {
            return count;
        }
    };
}

var Computer = function (make, model, processor, memory, tag) {
    this.flyweight = FlyWeightFactory.get(make, model, processor);
    this.memory = memory;
    this.tag = tag;
    this.getMake = function () {
        return this.flyweight.make;
    }
    // ...
}

function run() {
    var computers = new ComputerCollection();

    computers.add(""Dell"", ""Studio XPS"", ""Intel"", ""5G"", ""Y755P"");
    computers.add(""Dell"", ""Studio XPS"", ""Intel"", ""6G"", ""X997T"");
    computers.add(""Dell"", ""Studio XPS"", ""Intel"", ""2G"", ""U8U80"");
    computers.add(""Dell"", ""Studio XPS"", ""Intel"", ""2G"", ""NT777"");
    computers.add(""Dell"", ""Studio XPS"", ""Intel"", ""2G"", ""0J88A"");
    computers.add(""HP"", ""Envy"", ""Intel"", ""4G"", ""CNU883701"");
    computers.add(""HP"", ""Envy"", ""Intel"", ""2G"", ""TXU003283"");

    console.log(""Computers: "" + computers.getCount());
    console.log(""Flyweights: "" + FlyWeightFactory.getCount());
}",Flyweight,JavaScript,dofactory,https://www.dofactory.com/javascript/design-patterns/flyweight,"[ 6.23190962e-03  3.22861187e-02 -4.64824475e-02  6.87673837e-02
 -3.59363258e-02  2.77953390e-02  5.72690554e-02  2.06127968e-02
 -2.82507744e-02 -4.60418463e-02  7.98536018e-02 -6.85823709e-02
  3.79081704e-02 -6.52826205e-02 -4.73618880e-02  1.43263582e-02
 -4.52635661e-02 -4.65185940e-02 -3.22357528e-02 -2.79969033e-02
  9.70373824e-02 -3.80437784e-02 -7.13362941e-04 -1.28754205e-03
  1.62289515e-02  1.08235953e-02 -3.21970060e-02  2.35887039e-02
 -2.27011442e-02 -3.89594249e-02  4.94256988e-03 -3.56059559e-02
 -2.93160025e-02  4.34078053e-02  1.40150040e-02 -4.88865003e-02
 -2.78694760e-02 -2.96691712e-02  3.32337013e-03 -5.33206686e-02
 -3.68543454e-02  4.85213334e-03  4.98217419e-02  1.16734551e-02
  3.91007848e-02  3.64309140e-02 -9.33966935e-02  3.83920372e-02
  8.94825384e-02  6.12201430e-02 -2.89336946e-02 -3.55979614e-02
  8.21100455e-03  1.50718400e-02  6.27355129e-02 -1.70206372e-02
 -1.48039553e-02 -7.52316788e-02 -2.40830630e-02 -4.51734252e-02
  3.02000530e-02 -3.77393477e-02  2.34870892e-02  1.56723689e-02
  2.58828290e-02 -3.55685167e-02 -3.75709124e-02  2.29404923e-02
 -6.25485405e-02  1.76316127e-02  7.16299787e-02  3.87491658e-02
  3.31741828e-03  4.24009375e-02 -4.82061319e-02  3.07663307e-02
 -6.30951077e-02 -7.82680735e-02  5.96080236e-02  6.62030652e-03
 -9.06298459e-02 -6.09981492e-02 -1.12734780e-01  7.11627454e-02
  8.60717893e-02  3.26749543e-03 -1.88856367e-02 -1.12516871e-02
  4.23394656e-03 -2.80837864e-02 -7.11985826e-02  7.59042054e-02
 -2.14169454e-02  6.31861538e-02 -3.31834480e-02  7.93352947e-02
  2.33186129e-02 -9.08255652e-02 -6.29779771e-02  5.61307743e-02
 -1.01803117e-01  2.43866481e-02  1.14353262e-01  4.97320145e-02
 -4.90521304e-02 -1.20085459e-02  2.17165910e-02  1.79458293e-03
 -1.65327210e-02 -3.64927053e-02 -1.75785702e-02  1.04735404e-01
 -2.18778700e-02  2.20844392e-02 -5.08859642e-02 -1.67794153e-02
  5.52085713e-02 -6.14646561e-02  1.35424538e-02  6.07071538e-03
  3.61751243e-02  4.40595224e-02  4.78453375e-02 -1.18095027e-02
  3.66617627e-02 -2.67008599e-02 -1.02682039e-01  1.50023936e-33
 -3.66164278e-03 -5.51055633e-02  2.10802015e-02  5.41689321e-02
  2.83980416e-03 -6.62683025e-02 -6.19790843e-03  3.85634825e-02
 -5.22201285e-02  2.52402164e-02 -6.22360706e-02 -3.00815096e-03
  6.55022636e-02  5.67894953e-04  8.46165344e-02 -6.63980544e-02
  7.86936134e-02  3.41779664e-02  4.04918306e-02 -3.26600559e-02
 -1.11976285e-02 -4.95477095e-02  5.39693274e-02 -5.32330908e-02
  3.15097198e-02  5.93948103e-02 -7.44746327e-02 -8.33769143e-03
 -5.29174507e-02  3.38241756e-02  1.49342358e-01 -1.34727703e-02
 -7.78039321e-02 -9.58970562e-03 -2.28264779e-02 -4.47654873e-02
  2.97790617e-02 -2.47039273e-02  2.25514857e-04 -7.09066959e-03
  4.84038070e-02 -3.19220461e-02  2.49648262e-02 -1.09055944e-01
 -7.63476118e-02  2.15788223e-02  5.07886941e-03 -1.06271182e-03
  1.07421656e-03  4.79515903e-02 -2.99031083e-02  2.17595212e-02
  2.22132131e-02 -2.77599562e-02  8.39455333e-03 -8.47448502e-03
  2.17069462e-02  3.91668119e-02  8.51691738e-02  5.70979007e-02
 -1.65311154e-02  9.48728025e-02 -2.25976687e-02 -2.53023654e-02
  5.34481257e-02 -7.32644112e-04  1.75344814e-02  6.33828994e-03
  1.74542125e-02  2.10623387e-02  4.15254943e-02 -9.07952935e-02
  4.19279225e-02  5.30458335e-03  3.07278689e-02 -9.47995484e-03
 -1.09661013e-01 -1.00728832e-01 -1.26782417e-01 -5.94158284e-02
  9.51416232e-03  3.23147774e-02 -5.50827980e-02  7.57385185e-03
  1.42446496e-02  1.34366881e-02 -4.35831361e-02  7.10744876e-03
  3.46432626e-02  5.31310104e-02 -6.71113580e-02 -2.05528438e-02
  9.35060321e-04 -7.42612779e-02 -1.03740044e-01 -2.30170151e-33
 -1.11459076e-01  8.87123123e-03 -6.12431613e-04  2.06528343e-02
  8.47775787e-02 -5.48009351e-02  3.64842103e-03 -5.42092100e-02
 -3.10421791e-02  2.26384979e-02 -2.79620406e-03 -1.41369952e-02
 -6.20775223e-02 -4.01213951e-03  1.61862254e-01  8.57531130e-02
 -3.48850787e-02 -5.71673699e-02  3.66074964e-02 -5.17362095e-02
  8.57645366e-03  7.49734119e-02 -1.70031302e-02  1.88646130e-02
 -1.00200605e-02  2.89449152e-02 -3.03318016e-02  3.87043692e-02
  2.83806730e-04 -7.10623264e-02  1.54531766e-02 -4.54510283e-03
  1.28309475e-02  1.31542832e-01  6.85057789e-02 -9.97929499e-02
  5.91340326e-02  7.40944967e-02  4.25527059e-02  4.27569635e-02
  4.95112538e-02 -6.80330023e-02 -2.83159018e-02  2.21122541e-02
  3.53656076e-02 -9.18162316e-02  2.26365216e-02  2.11660052e-04
  6.09019250e-02 -5.82473464e-02  4.68609072e-02 -6.90655783e-02
 -8.28792900e-02  3.74015607e-02  1.91388875e-02  3.23775830e-03
  8.54166895e-02 -6.45816401e-02  1.17377236e-01 -1.01887807e-01
 -3.62027213e-02 -1.21411406e-01 -4.80071548e-03  1.28857940e-02
  1.03288237e-02 -2.57637091e-02  7.07067130e-03 -1.98302828e-02
 -3.58490385e-02  3.11727216e-03 -1.18748307e-01  4.63336408e-02
  5.93614690e-02 -5.17135225e-02 -1.01368979e-01 -7.67113082e-03
  5.42716011e-02  5.19261360e-02  6.38748184e-02  6.80708559e-04
  1.33182770e-02 -4.12605517e-02  8.45385045e-02 -3.04064862e-02
  6.41656853e-03 -1.16355289e-02  1.21910907e-02  1.11095076e-02
 -8.63092095e-02  1.30063260e-03 -1.10918246e-02  4.86138090e-02
  4.86293845e-02  2.57341802e-04 -5.06114773e-02 -3.80996461e-08
 -7.54834339e-02 -2.67100763e-02 -4.52473527e-03  3.84208597e-02
  3.01966593e-02 -2.94028204e-02  4.17738482e-02  1.49032660e-02
  1.51317911e-02 -1.21750692e-02  8.50699097e-02 -8.79873041e-05
  8.01734626e-02  6.83748499e-02  5.14441952e-02 -4.18830104e-02
 -1.12438567e-01  7.06151202e-02 -4.11317050e-02  3.00384015e-02
 -2.05367673e-02  4.11942042e-03 -4.76035697e-04  3.03269289e-02
  4.34869193e-02 -7.89127201e-02  1.34423720e-02 -8.95962343e-02
  7.38225803e-02  7.73639381e-02 -3.56332175e-02  8.20753351e-02
  3.81286703e-02 -4.61032102e-03  1.19762523e-02 -1.28464382e-02
  1.06678493e-02  7.45945191e-03  4.46402356e-02  7.26782605e-02
  4.89766188e-02  3.47858332e-02 -6.60965368e-02 -8.83708894e-03
  1.54237136e-01 -2.86177676e-02 -6.77832514e-02 -3.62616181e-02
  3.50870900e-02 -2.14063246e-02 -5.13950586e-02 -2.09148061e-02
  2.85763256e-02 -1.54036358e-02 -6.77370504e-02 -2.20719464e-02
 -3.35710049e-02 -5.37886918e-02  4.77186292e-02  1.95422638e-02
  7.88000524e-02 -3.02562285e-02 -1.60989203e-02 -5.08875679e-03]"
"function GeoCoder() {

    this.getLatLng = function (address) {

        if (address === ""Amsterdam"") {
            return ""52.3700° N, 4.8900° E"";
        } else if (address === ""London"") {
            return ""51.5171° N, 0.1062° W"";
        } else if (address === ""Paris"") {
            return ""48.8742° N, 2.3470° E"";
        } else if (address === ""Berlin"") {
            return ""52.5233° N, 13.4127° E"";
        } else {
            return """";
        }
    };
}

function GeoProxy() {
    var geocoder = new GeoCoder();
    var geocache = {};

    return {
        getLatLng: function (address) {
            if (!geocache[address]) {
                geocache[address] = geocoder.getLatLng(address);
            }
            console.log(address + "": "" + geocache[address]);
            return geocache[address];
        },
        getCount: function () {
            var count = 0;
            for (var code in geocache) { count++; }
            return count;
        }
    };
};

function run() {

    var geo = new GeoProxy();

    // geolocation requests

    geo.getLatLng(""Paris"");
    geo.getLatLng(""London"");
    geo.getLatLng(""London"");
    geo.getLatLng(""London"");
    geo.getLatLng(""London"");
    geo.getLatLng(""Amsterdam"");
    geo.getLatLng(""Amsterdam"");
    geo.getLatLng(""Amsterdam"");
    geo.getLatLng(""Amsterdam"");
    geo.getLatLng(""London"");
    geo.getLatLng(""London"");

    console.log(""\nCache size: "" + geo.getCount());
    
}",Proxy,JavaScript,dofactory,https://www.dofactory.com/javascript/design-patterns/proxy,"[ 2.34028585e-02  1.86241586e-02 -5.35636442e-03 -3.90593074e-02
 -7.69924894e-02 -6.87295198e-02  2.39998344e-02 -1.81926433e-02
 -6.23345328e-03 -5.36845252e-02 -3.24970186e-02 -4.89312001e-02
 -1.35832140e-02 -3.79306115e-02 -1.34489993e-02 -1.26871383e-02
 -8.09371471e-02 -1.41901420e-02 -6.01707026e-02 -4.38168943e-02
  6.93526492e-02 -5.75251542e-02  2.80970130e-02 -2.38133818e-02
 -4.01985366e-03  3.71983019e-03  1.78582303e-03 -1.64301079e-02
 -2.46392600e-02  5.34104630e-02  5.07733822e-02 -6.81399778e-02
 -9.31305885e-02  1.36908162e-02 -1.24286246e-02 -8.41751881e-03
 -8.99279043e-02  2.22749580e-02  4.73196758e-03  2.69047469e-02
 -8.71312320e-02 -2.53267121e-04  1.74369700e-02  7.08196172e-03
  4.12840471e-02 -2.42997278e-02 -1.87505614e-02  9.33896750e-02
  1.93704329e-02 -3.06634735e-02  1.91075951e-02 -4.71781055e-03
 -7.26119876e-02 -3.80828232e-02  5.78626106e-03 -1.95015892e-02
 -3.14447656e-02  6.94542425e-03  5.14188670e-02  4.18065786e-02
  9.77289514e-04 -4.97875363e-02  2.92982045e-03 -6.34249439e-03
  1.90937538e-02 -8.63433406e-02  2.41700816e-03  1.20435134e-02
 -7.06175193e-02  1.48440422e-02 -9.03639290e-03  6.87224269e-02
 -3.66654843e-02  2.92678289e-02  2.38626990e-02 -5.45868045e-03
 -8.12598094e-02 -2.65562013e-02  3.70847210e-02 -2.08991878e-02
  4.99388054e-02 -5.36594726e-02 -3.47109810e-02  1.00090735e-01
  5.13260476e-02  1.91177465e-02  6.85758641e-05  6.20964170e-03
  6.51501417e-02 -6.06985055e-02 -6.07990194e-03  2.65677217e-02
 -6.08022064e-02  8.09433386e-02 -6.37212992e-02  3.93304378e-02
  1.35777099e-02  3.68277133e-02 -6.09141029e-02  8.68410543e-02
  2.07701009e-02 -1.81715898e-02 -8.34819488e-03 -1.43394927e-02
  3.86435054e-02 -3.68870236e-02  3.28744091e-02  5.55738993e-02
  2.44527566e-03  4.30537388e-02 -6.38429299e-02  9.06018838e-02
 -1.15693379e-02 -7.92238489e-03 -8.85641202e-02  2.63874643e-02
  9.28621367e-02 -5.91212325e-02  4.42750528e-02  2.14634202e-02
  6.83525726e-02 -1.02573773e-03 -7.87530765e-02 -5.38841188e-02
 -1.82148758e-02 -3.10219340e-02  1.31363824e-01  6.22287828e-33
  5.34464419e-02 -5.67828193e-02  3.36848833e-02  4.36827242e-02
 -4.51403074e-02  3.49188522e-02 -7.00687710e-03  8.39857385e-02
 -6.88992515e-02 -1.36681432e-02  8.19249451e-03 -4.08221371e-02
  4.70535904e-02 -5.22013009e-02  8.68665799e-03  6.32738844e-02
  7.43326992e-02  4.24674787e-02  4.12360616e-02  2.92071849e-02
 -1.69269275e-02 -6.75876215e-02  1.29967155e-02  3.26248147e-02
  1.04074343e-03  7.62635842e-02 -5.03470525e-02  7.40267783e-02
 -1.25434905e-01 -1.20630180e-02  9.30508971e-02 -2.81399731e-02
 -8.83888826e-02  7.45097175e-02  7.50437751e-02 -9.99340322e-03
  3.44118886e-02  5.21366298e-03 -7.49246478e-02 -3.81753668e-02
 -3.60497385e-02 -3.76191996e-02 -2.74479426e-02 -2.81574447e-02
  5.42390794e-02 -7.39116892e-02 -5.61256707e-02 -2.18895897e-02
  4.97618355e-02  1.12478986e-01  7.21787196e-03  9.86170992e-02
 -8.25490952e-02 -3.39102484e-02  2.12399140e-02  6.14901111e-02
  8.37104768e-03  6.43082662e-03  2.44320482e-02  6.10981062e-02
 -2.64105573e-02  4.05418724e-02 -9.66997165e-03 -2.96094292e-03
  7.03334808e-02 -4.85873595e-02  4.62771719e-03  6.24263752e-03
 -3.08586508e-02 -3.99211831e-02  2.77007986e-02 -3.48966010e-02
  1.80446371e-01  6.41547889e-02 -4.68202233e-02  3.96378636e-02
 -1.01761140e-01  1.69247203e-02 -6.36071935e-02 -9.37600210e-02
 -1.37174642e-03 -2.78710369e-02 -5.42868637e-02  9.98014286e-02
 -3.93756013e-03  4.95612733e-02  2.94650830e-02 -5.78241497e-02
  2.89520361e-02  1.11652404e-01 -7.27805793e-02 -3.96544561e-02
 -4.66550142e-02 -1.33146077e-01 -5.28675914e-02 -7.84441102e-33
 -4.82885838e-02 -1.03533557e-02 -4.21144664e-02 -3.70430760e-02
 -4.91562746e-02 -3.46036926e-02  1.15150571e-01  1.07075069e-02
 -1.53010460e-02  4.07860056e-02 -5.38908993e-04 -3.44181359e-02
  6.71475530e-02  4.62993383e-02  3.99106257e-02  9.72497016e-02
  7.49529526e-03 -3.75293605e-02 -3.08691096e-02  5.34154549e-02
  4.63826507e-02  7.28922710e-02 -4.92777601e-02  6.01007156e-02
 -8.96758214e-02  3.96241248e-03  7.16066314e-03  1.93820987e-02
 -4.59045433e-02 -3.21424031e-03  3.37873250e-02  4.55128886e-02
 -4.05638590e-02  4.79325913e-02  1.69599764e-02 -9.72241014e-02
  5.64836822e-02  8.78738388e-02  4.35974188e-02  6.57400712e-02
  1.64916366e-02 -6.81748912e-02 -6.52372092e-03 -2.64950359e-04
  2.22649463e-02 -1.25140762e-02 -8.89022648e-03  7.22518191e-02
 -1.97983645e-02 -1.73782185e-02  5.25920745e-03 -2.52585374e-02
 -9.15833190e-02  4.65060584e-02  4.13563810e-02  3.68235633e-02
  9.34452377e-03 -8.33939016e-02  5.84270954e-02 -1.21934188e-03
  4.86074155e-03 -8.79488215e-02  2.63445396e-02  4.56523225e-02
  5.50599582e-02 -8.89419615e-02 -7.72095621e-02 -2.32803561e-02
  2.28747390e-02  2.21693944e-02 -5.58031388e-02 -7.33099005e-04
  1.23326397e-02 -7.62076229e-02  1.52283115e-02 -2.39502196e-03
  5.83714284e-02 -2.84119938e-02 -1.86496880e-02  6.50122836e-02
  1.31084463e-02  5.22937961e-02  2.08508074e-02 -7.00190589e-02
  4.70913425e-02  1.96448807e-02 -5.86106442e-02  4.73021381e-02
 -4.86992188e-02 -6.87333792e-02 -2.71073412e-02  5.02916835e-02
 -5.10171168e-02 -7.78500289e-02 -8.14017653e-02 -4.55791707e-08
 -7.51313865e-02 -5.07141929e-03 -3.40667143e-02  1.25393290e-02
 -9.81368944e-02  2.22642142e-02  3.51662971e-02  2.02288691e-04
 -3.23721878e-02 -3.34328972e-02  6.83672801e-02  6.32914826e-02
 -9.66042373e-03  3.56960203e-03 -7.34085031e-03 -1.17149591e-01
 -1.02293855e-02 -5.20004779e-02 -3.04239430e-02  7.33167306e-02
 -3.05652134e-02  4.56542382e-03 -4.97027719e-03 -2.51008593e-03
  6.76354617e-02 -7.41588920e-02  5.67594506e-02  1.47437705e-02
  3.36271934e-02  2.51197852e-02 -3.00995838e-02  4.97144647e-02
  3.81691977e-02 -1.33441975e-02 -4.69424315e-02 -5.46758482e-03
  1.16391387e-02  1.35364924e-02  7.72595825e-03  4.69314083e-02
  9.83573198e-02 -4.70829383e-02 -6.64154589e-02  2.68968325e-02
  7.98089355e-02  1.62013969e-03  6.44667298e-02 -4.41521443e-02
  1.27532452e-01 -6.36278838e-02 -1.03897028e-01 -3.16329449e-02
 -1.91076379e-02 -5.67694418e-02  3.78348492e-02 -3.73905636e-02
 -6.10192530e-02 -4.43326496e-02  3.43502834e-02  1.21473975e-01
 -2.61630770e-02 -7.54146231e-03 -7.95819312e-02 -3.60699296e-02]"
"var Request = function (amount) {
    this.amount = amount;
    console.log(""Requested: $"" + amount + ""\n"");
}

Request.prototype = {
    get: function (bill) {
        var count = Math.floor(this.amount / bill);
        this.amount -= count * bill;
        console.log(""Dispense "" + count + "" $"" + bill + "" bills"");
        return this;
    }
}
function run() {
    var request = new Request(378);

    request.get(100).get(50).get(20).get(10).get(5).get(1);
}",Chain of Responsibility,JavaScript,dofactory,https://www.dofactory.com/javascript/design-patterns/chain-of-responsibility,"[-8.44256133e-02  6.28724471e-02  2.05546878e-02  2.51056999e-02
 -1.12696484e-01 -4.77334373e-02  2.99536530e-02  3.97429802e-02
  1.11808307e-01 -2.91169696e-02 -5.28538674e-02 -1.44747477e-02
 -4.96956781e-02 -3.51810828e-03  6.25089407e-02 -1.43025154e-02
 -7.12439716e-02  1.10197738e-02 -3.19591723e-02  2.03598998e-02
  1.23461768e-01 -2.95533240e-02 -4.29101549e-02 -5.29922405e-03
  1.79373864e-02  3.42276692e-02 -3.12096756e-02 -6.24418035e-02
  7.29876459e-02 -1.13455402e-02  7.50632808e-02 -4.11893651e-02
 -1.86177660e-02 -3.04206386e-02 -4.15878445e-02 -3.95333469e-02
 -7.95216635e-02 -6.16270630e-03  3.74902114e-02  5.14459349e-02
 -8.17230940e-02 -2.62136385e-03 -3.51078399e-02 -3.26131769e-02
  3.77403796e-02 -5.64295286e-03 -8.08794573e-02  6.97760656e-02
  6.39323741e-02  9.14830118e-02  2.98134666e-02  1.72396265e-02
 -7.75344810e-03  6.11936338e-02  3.25871222e-02 -5.74271083e-02
  3.93567048e-02 -7.19638402e-03  4.64896224e-02  1.52416341e-02
 -2.70550195e-02 -3.67884263e-02  2.68418174e-02 -1.90781318e-02
  7.50940293e-02 -6.16947562e-02 -5.14839701e-02  4.12481837e-02
 -8.15661475e-02  7.66962022e-02  5.32675460e-02  7.50196353e-02
  5.65393083e-02 -2.42181402e-02 -4.99721849e-04 -4.93128747e-02
 -7.45207164e-03 -2.94725113e-02 -2.17199903e-02  6.84554353e-02
  4.61731059e-03 -3.88518982e-02 -3.58678885e-02  4.17179316e-02
  2.39252318e-02  7.48242289e-02 -6.90347236e-03  2.08440851e-02
  3.20829861e-02 -1.20861359e-01 -4.65852283e-02  8.69713351e-02
 -5.46767712e-02  3.60240936e-02 -1.62229072e-02  4.49444354e-02
  1.38798831e-02 -8.68888944e-02 -5.24248593e-02  5.85380979e-02
 -8.22098926e-03  4.13260162e-02  4.25921902e-02 -6.06342144e-02
  5.99754676e-02 -4.95893396e-02  2.10490394e-02 -9.58201196e-03
  1.24305040e-02  3.43928821e-02 -7.99332000e-03  2.40179393e-02
 -1.14987893e-02  5.82774840e-02 -5.77943958e-02 -3.26777436e-02
  5.53746484e-02 -8.73688534e-02  1.06603794e-01  5.32140210e-02
  1.43658027e-01  5.89630194e-02  2.52744295e-02 -4.20509093e-02
  7.31176883e-03 -2.78686378e-02  4.89775576e-02  1.00410599e-33
 -3.87939438e-02 -7.60549903e-02  1.33031672e-02  2.87906677e-02
  4.79549989e-02  6.91772671e-03 -5.22289053e-03  1.07383914e-01
 -6.92230016e-02 -2.06145570e-02  1.57765243e-02  4.58994769e-02
  3.54094133e-02  1.23182815e-02 -2.30028667e-02 -4.89097275e-02
  7.75759146e-02  1.20797763e-02  4.61964384e-02  2.13226094e-03
 -1.24422507e-02 -4.32196520e-02  6.30959198e-02  6.91782683e-02
  2.81753074e-02  3.35717946e-02 -4.04778980e-02  7.69745111e-02
 -5.38956001e-02 -2.23987103e-02  1.33096159e-01  1.86729303e-03
 -9.21211690e-02  2.10156068e-02  2.66901553e-02  2.84801219e-02
  7.01560453e-02  4.26543280e-02 -3.44387554e-02 -6.51255324e-02
 -2.18906030e-02 -3.86141762e-02 -8.84166732e-03  6.94889762e-03
 -1.36780843e-01  1.20951619e-03  7.13813081e-02 -4.80137542e-02
  2.50097588e-02  4.35059890e-02 -8.65866691e-02  5.24240285e-02
 -1.84572805e-02 -3.06784827e-02 -2.55632102e-02 -7.34449849e-02
 -6.50008768e-02 -5.28500788e-02 -2.90645193e-02 -6.21099845e-02
  2.57973112e-02 -1.90375894e-02  1.10392431e-02  1.23878382e-02
 -7.07324147e-02 -9.19785909e-03 -8.65521841e-03  3.34325917e-02
  1.01523213e-01  3.48929837e-02 -5.86427003e-02 -2.72233970e-02
  2.17104219e-02  1.80523321e-02 -6.94696745e-03 -1.49711603e-02
 -3.09583396e-02  6.46564597e-03 -2.30544768e-02 -1.93524379e-02
 -8.76677874e-03 -4.85197641e-02  5.77016361e-02  1.03042156e-01
  1.26150101e-01  1.30975455e-01 -3.86543050e-02  1.49232447e-02
  8.78564641e-02  3.50693353e-02 -4.17288691e-02 -6.13011345e-02
 -2.03178134e-02 -6.86500967e-02 -3.71792242e-02 -2.20562413e-33
 -9.46916416e-02  8.69815275e-02 -6.03154860e-02  7.91353285e-02
 -1.27768908e-02  7.15911901e-03 -1.82272065e-02 -1.54788559e-02
  4.22893688e-02  1.08502075e-01 -1.60301775e-02  6.29455671e-02
 -6.10488206e-02 -1.17275855e-02  5.34359142e-02  2.98173986e-02
 -5.32673486e-02 -2.56488062e-02  9.41290632e-02 -6.50844350e-02
 -2.22127177e-02  3.41712832e-02 -2.82005202e-02 -4.37862165e-02
 -8.22150558e-02  7.05255270e-02 -5.08641712e-02 -4.51870896e-02
  9.25809797e-03  9.31287091e-03 -5.48043586e-02 -8.77715126e-02
  3.76274996e-02  3.34219821e-02  7.09414203e-03 -7.98837766e-02
  4.07360196e-02  9.66496766e-02  3.73604521e-02 -2.41013244e-02
 -2.19743652e-03 -1.28257588e-01  6.50384054e-02 -5.81753626e-03
  1.48169007e-02 -1.02792032e-01  4.75888178e-02  1.37241306e-02
  3.67273875e-02 -4.52953614e-02  2.51579657e-02 -4.69508283e-02
 -9.74562094e-02  5.34553193e-02 -1.03497110e-01  2.24093460e-02
  2.88201757e-02 -4.08999324e-02  8.32827985e-02  6.14626147e-02
 -4.72346023e-02 -2.02265773e-02 -2.49237064e-02 -1.37698920e-02
 -1.14775393e-02 -1.58509407e-02 -2.72705182e-02 -7.07791001e-02
  2.74453945e-02 -1.93954799e-02 -8.01541284e-02  4.73642573e-02
  1.01054497e-01 -2.63232477e-02 -1.64903942e-02 -8.63851514e-03
 -4.56849597e-02 -5.35280220e-02  6.37557283e-02  4.40255217e-02
  1.81405731e-02 -1.98693108e-02  1.52077563e-02 -5.39996512e-02
 -1.82085931e-02 -5.25668934e-02 -1.16818594e-02 -1.52639579e-03
 -7.47884437e-02 -2.70307623e-03  3.20498622e-03  6.28105402e-02
 -3.08179595e-02  3.42455134e-02 -3.53036709e-02 -4.09070076e-08
 -2.05864385e-02  6.87395397e-04  9.80699318e-04 -4.00189459e-02
  2.17487197e-03 -4.17688191e-02  2.43343730e-02  3.01914364e-02
 -5.04685231e-02 -5.27105443e-02  2.60502230e-02  4.24944423e-02
  8.24062675e-02 -2.62049790e-02 -5.68156913e-02 -1.32801390e-04
 -3.67525406e-03 -4.33075428e-02 -3.20097022e-02 -5.39849186e-03
  1.81330610e-02 -1.37802344e-02  2.74920762e-02 -2.94284038e-02
  5.17601557e-02  1.31189986e-03  5.85039929e-02  1.12406701e-01
 -9.61502735e-03 -9.60971694e-03 -3.28297280e-02  1.32711694e-01
 -3.39008612e-03  2.72740908e-02 -2.34281532e-02 -5.05868345e-04
 -6.74974248e-02  5.49025787e-03  4.43174690e-02  2.59808414e-02
  5.38984835e-02 -6.77428693e-02 -7.03204200e-02  1.85776372e-02
  6.25476167e-02  1.50562692e-02 -5.81257716e-02 -7.89239034e-02
  1.17028188e-02 -6.82661980e-02  7.42854225e-03  1.89033523e-02
  2.80893985e-02 -1.01054823e-02 -2.47078836e-02 -2.63801515e-02
 -2.64927018e-02 -1.08387463e-01  1.65628677e-03  4.27138731e-02
  7.17925727e-02 -1.11231152e-02 -8.33250489e-03 -2.32747011e-02]"
"var Context = function (input) {
    this.input = input;
    this.output = 0;
}

Context.prototype = {
    startsWith: function (str) {
        return this.input.substr(0, str.length) === str;
    }
}

var Expression = function (name, one, four, five, nine, multiplier) {
    this.name = name;
    this.one = one;
    this.four = four;
    this.five = five;
    this.nine = nine;
    this.multiplier = multiplier;
}

Expression.prototype = {
    interpret: function (context) {
        if (context.input.length == 0) {
            return;
        }
        else if (context.startsWith(this.nine)) {
            context.output += (9 * this.multiplier);
            context.input = context.input.substr(2);
        }
        else if (context.startsWith(this.four)) {
            context.output += (4 * this.multiplier);
            context.input = context.input.substr(2);
        }
        else if (context.startsWith(this.five)) {
            context.output += (5 * this.multiplier);
            context.input = context.input.substr(1);
        }
        while (context.startsWith(this.one)) {
            context.output += (1 * this.multiplier);
            context.input = context.input.substr(1);
        }
    }
}

function run() {
    var roman = ""MCMXXVIII""
    var context = new Context(roman);
    var tree = [];

    tree.push(new Expression(""thousand"", ""M"", "" "", "" "", "" "", 1000));
    tree.push(new Expression(""hundred"", ""C"", ""CD"", ""D"", ""CM"", 100));
    tree.push(new Expression(""ten"", ""X"", ""XL"", ""L"", ""XC"", 10));
    tree.push(new Expression(""one"", ""I"", ""IV"", ""V"", ""IX"", 1));

    for (var i = 0, len = tree.length; i < len; i++) {
        tree[i].interpret(context);
    }

    console.log(roman + "" = "" + context.output);
}",Interpreter,JavaScript,dofactory,https://www.dofactory.com/javascript/design-patterns/interpreter,"[ 4.12199907e-02  7.12031573e-02  4.15827818e-02 -2.47681048e-03
 -1.28157604e-02 -3.42801549e-02  2.39408240e-02  4.11778092e-02
  3.51282544e-02 -3.94072942e-02 -3.43614332e-02 -7.62608424e-02
 -7.20192865e-03 -3.87637615e-02 -1.63658876e-02 -5.79043524e-03
 -1.75164104e-01  1.53740287e-01 -4.19904068e-02 -1.02014124e-01
  1.25180155e-01 -1.32602807e-02 -8.40191767e-02 -1.04122935e-02
  1.93145908e-02  1.02720685e-01 -6.85611293e-02 -2.23880000e-02
  5.05824722e-02  6.37989938e-02  1.83052029e-02 -4.32233065e-02
  1.01588346e-01  4.99532074e-02 -6.11641183e-02 -7.68481381e-03
 -1.15690567e-01 -5.52987680e-02  4.99714240e-02  7.79982731e-02
 -2.87906770e-02  8.56437460e-02 -1.13061524e-03 -6.31056875e-02
  9.49601457e-02  3.87639669e-03 -1.08714551e-01  5.48712723e-02
  5.74261369e-03  5.80818690e-02  9.13742278e-03 -3.50467376e-02
 -4.64961417e-02 -5.26479743e-02 -3.66458227e-03  1.24345152e-02
 -1.04614589e-02 -8.98260847e-02  6.25113323e-02  2.24339031e-03
  5.94336260e-03  3.01505979e-02 -1.51879452e-02  3.02352607e-02
  5.96010648e-02  4.00664993e-02 -2.48693973e-02  4.72708680e-02
 -3.10151596e-02  2.89007872e-02 -3.55572393e-03  6.03689477e-02
 -6.35178247e-03  5.25037497e-02 -3.60449404e-02  1.28179239e-02
  4.88244854e-02 -2.53625605e-02  3.85688879e-02  2.65056007e-02
 -1.33750830e-02 -2.90447334e-03 -2.53510792e-02 -3.82622029e-03
  2.88933003e-03  5.55407591e-02  1.09099271e-02  8.25424641e-02
  1.67554971e-02  6.46793395e-02 -1.22827582e-01 -5.02731986e-02
 -4.72875778e-03  6.36936575e-02 -1.38387019e-02  9.09364223e-02
  6.16174862e-02 -6.35121018e-03 -5.87478913e-02  5.98492473e-02
 -7.60931447e-02  9.90026910e-03  3.21287513e-02 -1.01337343e-01
 -1.28514618e-01 -1.90498196e-02 -1.52120301e-02 -5.37703559e-02
 -1.48258163e-02 -3.91323157e-02  2.65400186e-02  6.51200935e-02
 -5.86623065e-02  3.42813097e-02 -1.22371120e-02 -5.49534597e-02
  5.50854839e-02 -9.37897861e-02  6.10309877e-02  6.06938638e-02
  8.58251452e-02 -1.29090268e-02 -7.31365383e-02  2.30832901e-02
  2.82067917e-02 -6.01865426e-02  5.35620283e-03  6.21583413e-34
 -5.35379164e-02 -2.87362710e-02  6.05166107e-02  2.10213736e-02
  3.02992035e-02  5.15036845e-06 -4.65077013e-02 -8.22450034e-03
 -8.95104483e-02  8.86074826e-03 -6.23816475e-02  2.87348758e-02
 -2.32303198e-02 -3.55644412e-02  2.08097845e-02 -4.80562113e-02
  1.07205175e-01  1.51248649e-02 -3.72752137e-02 -1.90971103e-02
 -2.62922999e-02  1.40708629e-02 -1.87450380e-03  7.21932994e-03
  5.25738485e-02 -5.79898153e-03 -5.09463903e-03 -3.06861009e-02
  3.86177388e-04 -1.71877276e-02  3.91790643e-02 -2.05778293e-02
 -6.55218512e-02  1.66865662e-02  9.44031626e-02  1.28219854e-02
  4.83835712e-02 -3.54932941e-04 -6.69805333e-03  1.32456925e-02
 -8.50197449e-02 -2.47188173e-02  7.90172815e-02  3.07721384e-02
 -2.45100018e-02  1.12472326e-02 -2.95429328e-03 -2.77324524e-02
 -3.92333940e-02  4.53722216e-02 -5.48702553e-02  1.26123488e-01
 -1.36975553e-02  2.49083783e-03 -2.41184793e-02  5.73882125e-02
  3.14350165e-02  5.13293110e-02  2.30881968e-03  7.77776018e-02
  3.70952040e-02  4.87534255e-02  2.68021747e-02  5.22112735e-02
  3.96719668e-03  2.20908336e-02 -3.26018743e-02 -6.47887513e-02
  6.13307208e-02 -3.53560559e-02 -1.03681333e-01 -3.43635827e-02
  4.03377973e-02 -4.10935991e-02 -8.79438315e-03  3.96126322e-02
 -5.17117381e-02 -3.25616114e-02 -1.37350395e-01 -9.55203176e-02
 -9.88278911e-02  3.40578109e-02  7.09445551e-02  2.43685655e-02
  1.18747830e-01  4.51361807e-03 -1.57725974e-03  6.82881149e-03
  2.29520462e-02 -2.50159111e-02  2.93813855e-03 -4.01722603e-02
 -1.52472081e-02 -7.22182095e-02  1.78567488e-02 -2.15930561e-33
 -3.92819978e-02  1.27895959e-02  5.06181307e-02 -2.08129529e-02
 -1.47426967e-02 -3.05565018e-02 -7.03100562e-02 -4.67685889e-03
 -4.13263179e-02  3.63161974e-03  1.88515559e-02  4.50855829e-02
 -3.02882530e-02  1.13503672e-02  5.08295596e-02  4.05033678e-02
  3.26217636e-02  5.38605638e-02  1.88492530e-03 -1.60081312e-02
  9.69270319e-02  4.82273139e-02 -5.01582175e-02 -5.15319780e-02
 -6.64627850e-02 -1.44418492e-03  1.62532125e-02 -1.43187074e-02
 -4.12093429e-03 -1.95295680e-02 -1.11514796e-02 -1.92071404e-02
  4.32504304e-02  3.25602181e-02 -9.61475447e-03 -1.01106144e-01
  4.40177955e-02 -3.89122101e-03  5.02313785e-02  5.56181595e-02
  3.46947648e-02 -3.89551595e-02  1.80515777e-02  2.46532587e-03
 -9.44823900e-04 -8.92145559e-03 -2.39314344e-02  7.18495101e-02
  1.95098091e-02 -1.22371893e-02 -3.99285881e-03 -6.53698519e-02
 -9.59486961e-02 -3.38401124e-02 -1.53019698e-02 -6.10604025e-02
  1.20644094e-02 -5.71941733e-02  5.78201264e-02 -2.58884858e-02
 -1.05083518e-01 -6.42063543e-02  3.20502091e-03 -3.60339098e-02
  5.00808395e-02 -3.16497758e-02 -5.46990260e-02 -4.98433113e-02
 -2.78020725e-02 -5.32749370e-02 -8.05339031e-03  1.21363048e-02
 -1.02858253e-01 -1.24378614e-02 -7.29067475e-02 -1.29102208e-02
 -3.60082611e-02 -5.23990095e-02  4.38345671e-02  3.09714228e-02
 -8.47612973e-03  5.39846811e-03 -1.72959939e-02  5.35551980e-02
  5.08153103e-02 -3.12156603e-02  7.29803219e-02  7.05303550e-02
  1.10271396e-02 -5.23633836e-03 -2.10456015e-03  8.38382617e-02
  2.75983401e-02  9.00512282e-03 -3.86558175e-02 -3.95263058e-08
 -1.35617077e-01 -3.39376628e-02 -7.57746026e-02 -1.02859987e-02
  2.92597283e-02  4.04404700e-02  4.61270809e-02  1.23543423e-02
  4.70930804e-03 -4.33979221e-02  6.62354380e-02  2.48366669e-02
  1.27053140e-02 -3.46366130e-02  4.76229787e-02  2.02494785e-02
 -3.54426987e-02  4.97448817e-03 -2.97246967e-03  1.03008278e-01
  7.80178085e-02  1.72922947e-02 -4.66284826e-02  8.73156860e-02
  3.12712267e-02 -1.29981101e-01  6.00702837e-02  6.16745688e-02
  9.61523596e-03  1.15477229e-02 -3.98988351e-02  1.05528086e-01
 -3.89729142e-02  2.13175733e-03 -7.28833377e-02 -1.14864819e-02
 -9.83181037e-03  9.31982230e-03  8.27730969e-02  7.00314790e-02
  9.06732902e-02 -5.99062964e-02 -5.06842285e-02  2.17563957e-02
 -9.73181147e-03  2.71653803e-03  2.85067987e-02  5.40893525e-03
  7.52236396e-02 -7.95223489e-02 -4.02442068e-02  8.53383634e-03
 -1.24246459e-02 -6.52785376e-02 -1.67744122e-02 -8.15256014e-02
 -1.96068622e-02  2.37504281e-02 -9.31625906e-03  1.29139557e-01
  1.13253398e-02 -2.58901715e-02  8.45846161e-03 -1.76657271e-02]"
"var Iterator = function (items) {
    this.index = 0;
    this.items = items;
}

Iterator.prototype = {
    first: function () {
        this.reset();
        return this.next();
    },
    next: function () {
        return this.items[this.index++];
    },
    hasNext: function () {
        return this.index <= this.items.length;
    },
    reset: function () {
        this.index = 0;
    },
    each: function (callback) {
        for (var item = this.first(); this.hasNext(); item = this.next()) {
            callback(item);
        }
    }
}

function run() {

    var items = [""one"", 2, ""circle"", true, ""Applepie""];
    var iter = new Iterator(items);

    // using for loop

    for (var item = iter.first(); iter.hasNext(); item = iter.next()) {
        console.log(item);
    }
    console.log("""");

    // using Iterator's each method

    iter.each(function (item) {
        console.log(item);
    });
}",Iterator,JavaScript,dofactory,https://www.dofactory.com/javascript/design-patterns/iterator,"[-1.58095974e-02  5.45584643e-03  2.44846866e-02  1.55830216e-02
 -2.16295719e-02 -1.88628938e-02  3.28289382e-02  1.64426472e-02
  9.85469222e-02 -9.23552886e-02 -1.37987954e-03  5.48306182e-02
 -4.58762422e-02 -3.16701457e-02  2.13519372e-02  1.00673903e-02
 -6.39187545e-02  2.88096610e-02 -2.63792295e-02 -7.94009790e-02
  8.65943432e-02  4.11814684e-03  1.43788131e-02 -1.08285882e-02
 -4.88581397e-02  1.03709377e-01 -1.78058036e-02 -1.29798755e-01
 -1.17308628e-02 -2.62102652e-02  1.44476052e-02 -1.22382477e-01
 -6.45698383e-02  2.39649098e-02 -3.29558365e-02  1.79144796e-02
 -6.94387704e-02  3.38776894e-02  2.85122450e-02  1.77992657e-02
  1.04877003e-03  3.50502245e-02 -9.49647874e-02 -9.47885662e-02
  5.57932518e-02  1.67893860e-02 -1.15613133e-01 -4.28638197e-02
  1.60301719e-02  4.70169596e-02  4.96667661e-02  1.01227742e-02
 -1.23817818e-02 -4.86287884e-02  3.94491218e-02 -1.51586886e-02
  1.54185537e-02 -5.35401963e-02  9.84664485e-02  5.66996336e-02
  1.06519438e-01 -5.06842732e-02  1.81164686e-02  8.51872284e-03
  9.30014476e-02 -9.47593898e-02  2.54007466e-02  4.17665346e-03
 -4.33969088e-02  9.95363817e-02  3.42833586e-02  5.38972989e-02
  5.25743552e-02  5.93018197e-02  1.95704680e-02  1.63567867e-02
  2.26180479e-02 -2.75213104e-02 -9.87944305e-02  7.45497495e-02
 -6.03370592e-02 -5.18012084e-02  1.92294773e-02 -7.72181433e-03
 -5.72717935e-03  2.99120899e-02 -5.57169355e-02 -5.72456652e-03
 -1.47600714e-02  1.08961053e-02 -9.20931846e-02  2.20773127e-02
 -1.45990076e-02  3.07525285e-02  1.03253322e-02  8.89165979e-03
  5.88796623e-02 -1.71748549e-02 -4.16281037e-02  2.00922154e-02
  3.84841789e-03 -4.90564927e-02  5.76867163e-02 -4.60096672e-02
 -3.63684073e-02 -6.42416626e-02 -4.55174260e-02 -1.19999148e-01
 -9.99188609e-03  1.22216819e-02 -2.44021576e-04  2.55805235e-02
 -3.02990489e-02  7.43656456e-02 -4.04177196e-02 -4.04102318e-02
 -1.25440648e-02 -3.77044715e-02  1.05486006e-01  6.87163174e-02
  1.22952916e-01  4.39048484e-02  6.81922510e-02  2.84721777e-02
 -1.17770834e-02  1.92525499e-02  1.93795599e-02 -5.68177433e-35
 -3.35557899e-03 -1.96387190e-02  6.87842444e-03  1.25719290e-02
 -4.41423478e-03 -2.25055050e-02  3.23625095e-02  4.09585834e-02
 -7.49872699e-02  3.85911204e-02  2.00143885e-02  6.51261359e-02
 -1.66509375e-02 -9.86946281e-03  1.86700001e-02 -6.67063892e-02
  1.18387982e-01 -3.36925685e-02  4.65498585e-03 -6.85828552e-02
 -2.32052859e-02 -5.63873611e-02 -2.00026352e-02  4.13955301e-02
 -7.17721274e-03 -6.69624424e-03  6.46974612e-03  5.67369908e-02
 -9.05506760e-02 -1.51013946e-02  8.69058892e-02  3.20777930e-02
 -5.54059595e-02  3.27361487e-02  4.09355722e-02  2.95027327e-02
  4.60864305e-02  2.75871456e-02 -4.84117456e-02 -6.28572777e-02
  2.37608142e-02 -5.09627350e-02  9.18076653e-03  3.15443352e-02
 -5.11109829e-02 -1.20272841e-02 -3.63519765e-03 -3.39524299e-02
 -4.73661870e-02  4.52368036e-02 -9.07639116e-02  3.77625264e-02
 -3.59466821e-02 -1.84532646e-02  9.16597340e-03 -5.31435804e-03
 -8.83071311e-03 -2.21062843e-02 -2.10102648e-02 -2.33657695e-02
  5.43804318e-02  5.03303390e-03 -3.45506109e-02  4.25140969e-02
 -6.66910559e-02  2.32991073e-02  2.29538679e-02  5.36969677e-03
  7.81751610e-03 -9.07890219e-03 -3.51214968e-02  3.34316748e-03
  8.24026391e-02 -3.47045027e-02  8.58021528e-03 -6.15021586e-03
 -1.22111633e-01 -5.17846495e-02 -8.90147761e-02 -1.34908035e-01
 -4.78195287e-02 -1.32381823e-02 -1.95852946e-02  1.23565935e-03
  5.82843311e-02  2.98126545e-02 -1.44331679e-02  4.77772392e-03
  5.12722135e-02  8.25215802e-02 -6.06517270e-02 -4.28812206e-03
  3.57464738e-02 -1.14185745e-02 -6.47590831e-02 -3.48446170e-33
  8.20255373e-03  1.69690456e-02  3.87278199e-02  5.54680713e-02
  6.17087632e-02 -1.22688955e-03 -2.91360430e-02  4.29914147e-02
 -1.64368823e-02 -5.24211787e-02 -6.19229488e-02  2.57451311e-02
  3.06013077e-02 -2.33242158e-02  5.66492826e-02  1.80414855e-01
 -2.11076811e-02 -1.53639996e-02  5.39662763e-02 -8.92242417e-02
  5.03632240e-02 -6.41445443e-03  3.59799974e-02 -7.59928674e-03
 -1.69344828e-01  4.13509784e-04  3.97518016e-02 -2.79538892e-02
  4.07791473e-02 -4.70869150e-03  4.43158373e-02 -6.52247965e-02
  1.38530001e-01  7.29844645e-02  4.49227802e-02 -4.96347658e-02
  3.17873061e-02  1.48947248e-02  5.23368791e-02  4.70703935e-06
  5.40029109e-02 -9.15329233e-02  1.90031696e-02 -4.54058759e-02
 -1.04969274e-03 -2.86506563e-02 -4.93278727e-02  7.69854113e-02
  1.13563461e-03 -1.71996653e-02  1.04087405e-02 -6.41709715e-02
 -9.75266173e-02  5.13323164e-03 -4.91987392e-02  4.49084379e-02
  3.75733152e-02 -8.15523565e-02  3.81773151e-02  4.35841978e-02
 -1.91487856e-02 -8.68243873e-02  1.16051987e-01  1.78449303e-02
  1.26514053e-02 -5.18527639e-04 -3.53664234e-02 -5.69228977e-02
 -2.66589168e-02  6.90117553e-02 -3.78748663e-02  3.75645496e-02
 -2.41269898e-02 -9.64034051e-02 -2.12665414e-03 -5.26661202e-02
 -4.86539975e-02 -1.20584704e-01  2.93947030e-02 -3.96687575e-02
 -3.28319450e-03  4.14534882e-02  2.32035052e-02 -4.74960878e-02
  5.30153699e-02  1.74933802e-02  7.75996149e-02  5.34250326e-02
 -3.89603153e-02  1.59356352e-02  4.46867272e-02 -3.99303064e-03
  5.88831566e-02  3.19751911e-02 -3.77290212e-02 -5.10210256e-08
 -8.90105963e-02 -8.33673254e-02 -9.15590674e-03  1.57998484e-02
  4.98160534e-03 -6.64580017e-02  3.30475383e-02  5.63672371e-02
 -1.75853837e-02 -1.25662789e-01  2.00422425e-02  3.58782150e-02
  8.64311084e-02  3.29110725e-03  7.06196278e-02 -5.56375012e-02
 -1.15754046e-02 -6.79839868e-03  1.15861353e-02  7.63686150e-02
 -2.71896478e-02 -4.02254611e-03  5.86914085e-02 -7.27235377e-02
  5.32773510e-02  2.34084167e-02 -9.62265022e-03  2.39892062e-02
  2.55443547e-02  1.07737062e-02 -7.69075602e-02  4.45996560e-02
 -2.06832848e-02  6.10305220e-02 -3.20430584e-02 -5.49985021e-02
 -4.77342345e-02 -4.30278964e-02  5.37198298e-02  4.61756401e-02
  6.73010126e-02 -6.94354326e-02 -5.22810668e-02  5.12888767e-02
  1.72194839e-02 -4.03308012e-02 -8.38386342e-02 -5.29589579e-02
  1.50951110e-02  4.32882784e-03 -1.25163838e-01  2.36638766e-02
  1.77349541e-02 -2.83963587e-02  4.58636358e-02 -1.97025575e-02
  2.22274140e-02 -1.21170282e-02 -2.06146780e-02  8.78366679e-02
  1.76715583e-03 -2.58801561e-02 -1.64735764e-02  3.40806283e-02]"
"var Participant = function (name) {
    this.name = name;
    this.chatroom = null;
};

Participant.prototype = {
    send: function (message, to) {
        this.chatroom.send(message, this, to);
    },
    receive: function (message, from) {
        console.log(from.name + "" to "" + this.name + "": "" + message);
    }
};

var Chatroom = function () {
    var participants = {};

    return {

        register: function (participant) {
            participants[participant.name] = participant;
            participant.chatroom = this;
        },

        send: function (message, from, to) {
            if (to) {                      // single message
                to.receive(message, from);
            } else {                       // broadcast message
                for (key in participants) {
                    if (participants[key] !== from) {
                        participants[key].receive(message, from);
                    }
                }
            }
        }
    };
};

function run() {

    var yoko = new Participant(""Yoko"");
    var john = new Participant(""John"");
    var paul = new Participant(""Paul"");
    var ringo = new Participant(""Ringo"");

    var chatroom = new Chatroom();
    chatroom.register(yoko);
    chatroom.register(john);
    chatroom.register(paul);
    chatroom.register(ringo);

    yoko.send(""All you need is love."");
    yoko.send(""I love you John."");
    john.send(""Hey, no need to broadcast"", yoko);
    paul.send(""Ha, I heard that!"");
    ringo.send(""Paul, what do you think?"", paul);
}1",Mediator,JavaScript,dofactory,https://www.dofactory.com/javascript/design-patterns/mediator,"[-1.13590537e-02 -2.47746315e-02  4.37649041e-02 -1.04510318e-02
 -4.64603044e-02  1.22531373e-02  1.08049229e-01  3.12006287e-03
  7.91815072e-02 -4.62967418e-02  2.79552629e-03 -4.30194847e-02
 -1.98469292e-02 -1.40000321e-02  8.42765048e-02  2.03433391e-02
 -2.30818754e-03 -1.69378181e-03 -4.68900055e-02 -3.69557291e-02
  5.65547124e-02 -6.23506792e-02  1.25755267e-02 -2.08634976e-02
 -9.00243130e-03 -7.73804588e-03  2.21559685e-03 -1.84838977e-02
 -2.40123291e-02 -8.34961794e-03  6.94440007e-02 -2.62162220e-02
 -5.05888043e-03  6.56522959e-02 -8.00119266e-02  9.56282839e-02
 -7.67687038e-02 -1.36725372e-02 -4.17329557e-02  7.04376865e-03
 -5.84089719e-02  2.59185191e-02 -5.04658557e-02 -6.92870393e-02
  8.60245749e-02 -3.69039401e-02 -8.76849741e-02  6.54134750e-02
  4.10385877e-02  5.66439852e-02 -3.48425172e-02 -1.99841522e-02
  5.78967389e-03  5.64552136e-02 -6.55338448e-03  2.90625561e-02
 -7.06059784e-02 -3.50121185e-02  7.41217434e-02  2.27683689e-03
 -2.62594712e-03 -2.78034061e-02  1.47689153e-02 -1.49730006e-02
  1.33247655e-02 -8.52663442e-02 -4.63400818e-02  4.28144783e-02
 -2.59686112e-02  1.02802120e-01  3.08345295e-02  7.61289150e-02
  2.68768631e-02  2.78458763e-02 -6.10308424e-02 -4.12874706e-02
 -7.37247318e-02 -6.21965863e-02 -5.84387742e-02  4.19324413e-02
 -2.19251253e-02 -1.03291154e-01 -3.98777798e-02 -2.13733464e-02
  3.11498065e-03  7.48480931e-02 -2.38445811e-02 -1.21912197e-03
 -7.31519759e-02 -7.85400532e-03 -1.49219662e-01  4.47533056e-02
  5.17815643e-04  1.09250538e-01  3.24121863e-02  5.83729446e-02
  8.86802154e-04  9.96427052e-03 -1.47360573e-02  9.46435630e-02
 -3.70068997e-02  2.99104415e-02 -3.95606365e-03 -8.28343481e-02
 -3.09430510e-02 -3.70042622e-02 -4.14714776e-02 -5.95282167e-02
 -4.79521640e-02  6.21127198e-03 -2.63977982e-02  8.69671553e-02
 -2.58292425e-02  5.83034419e-02 -3.04780416e-02 -2.46504112e-03
  6.97203577e-02 -5.08001335e-02  7.02860877e-02  9.21341628e-02
  1.27656847e-01 -1.45537723e-02  3.60806808e-02  7.49685743e-04
 -1.18852453e-02 -2.81872600e-02  3.56696509e-02  1.24778101e-33
  4.06229161e-02  2.47518858e-03 -5.45721576e-02  1.22815989e-01
  4.13193628e-02  3.54937650e-02 -2.31201425e-02  2.63487156e-02
 -1.22948483e-01 -6.79500476e-02 -4.29293215e-02 -2.71781590e-02
  5.46234362e-02 -3.20885070e-02 -7.32987514e-03 -3.86581793e-02
  1.62053760e-02  5.71899265e-02  5.89789599e-02 -3.48263010e-02
 -1.99629702e-02  2.65554003e-02 -7.31395464e-03  8.53996128e-02
  2.14933492e-02  4.13127691e-02  1.96804032e-02 -8.85808002e-03
 -4.62710932e-02 -1.87797956e-02  7.54515976e-02 -9.70459450e-03
 -4.41220738e-02  5.26696406e-02  8.14761072e-02  1.64282173e-02
  4.52504400e-03  6.87423628e-04 -1.01094536e-01 -4.73597795e-02
  5.83514897e-03 -6.29356578e-02 -2.71577686e-02 -2.70827804e-02
 -8.12313110e-02 -2.50275396e-02 -2.42449231e-02  5.00951381e-03
  5.82833439e-02  3.19672674e-02 -3.71230468e-02  2.65745800e-02
  2.24799756e-02 -2.06194166e-02  3.34362946e-02 -7.10047688e-03
 -1.68830678e-02 -1.42532950e-02 -3.34909856e-02 -3.80170420e-02
 -2.29097549e-02  4.66338731e-02 -1.96306631e-02  1.90046784e-02
  4.65194434e-02  1.66641269e-02 -8.64003450e-02 -7.73729458e-02
  1.00654013e-01 -1.28969938e-01  1.10008428e-03 -4.80612144e-02
  2.60919984e-02  1.57903731e-02 -5.25588319e-02  3.25019173e-02
 -1.53302833e-01  1.12866005e-02 -1.00452788e-02 -7.11776465e-02
 -3.45547087e-02 -5.64389571e-04 -8.03793594e-02  7.10053518e-02
  4.07394394e-02  1.30311679e-02 -3.33156288e-02 -5.37992492e-02
 -1.74277797e-02  1.35526836e-01 -5.06871939e-02  4.56820838e-02
 -8.37258995e-03 -3.38399000e-02 -6.94757327e-03 -2.37087145e-33
 -2.20850594e-02  1.00841291e-01 -2.65559852e-02  5.33610061e-02
  7.43610114e-02  3.34813483e-02  3.24151628e-02 -3.70787159e-02
 -3.94524308e-03  3.27185541e-02 -4.56607640e-02 -3.51843275e-02
  5.49038686e-02 -6.48205495e-03  5.32217138e-02  5.00856377e-02
  5.85502433e-03 -2.55575404e-02  2.07703654e-02 -4.71830443e-02
  1.42916320e-02  3.69837917e-02 -4.22625542e-02 -5.11200950e-02
 -4.74428795e-02  1.51007879e-03  2.84887515e-02  3.82816605e-02
 -1.57079473e-02 -4.41209227e-02 -1.35838138e-02  2.29911786e-02
 -1.18707167e-02  2.88370834e-03  6.76126182e-02 -2.44810414e-02
  6.11162968e-02  7.22681507e-02  1.58869755e-02 -2.39280332e-02
  6.59085065e-02 -9.08085704e-02 -5.39458506e-02 -1.91693567e-02
 -1.84605010e-02 -1.99708547e-02 -1.24469791e-02  5.64310886e-02
  1.14209009e-02  2.64845286e-02  2.17790231e-02 -1.20305598e-01
 -5.07189147e-02 -7.60810524e-02 -3.79451178e-02  3.15600121e-03
  3.07712741e-02 -9.75130796e-02  9.76698175e-02  3.86936627e-02
  5.60946576e-03 -1.37093842e-01  9.10157710e-02  2.42706239e-02
  8.73520076e-02 -5.41437864e-02 -6.29427424e-03  2.79239323e-02
  7.24815652e-02  1.51000014e-02 -3.64426598e-02 -2.68278481e-03
  4.47158255e-02 -3.07696890e-02  6.70456216e-02 -3.17983218e-02
 -8.39127898e-02 -5.99808320e-02  1.42793069e-02 -4.56674136e-02
 -1.18510611e-02  2.38062963e-02 -3.22511792e-03 -1.08322287e-02
  9.24054757e-02  2.48872824e-02  8.66030678e-02  5.33620045e-02
 -6.22718856e-02 -1.95492655e-02  4.37061079e-02  9.74166244e-02
  5.96662285e-03 -5.74505962e-02 -5.10226600e-02 -4.48186128e-08
 -9.64568332e-02 -5.37317991e-02 -5.83988614e-02 -1.88407376e-02
 -2.99585517e-02 -6.31084442e-02  3.19062136e-02 -1.67437531e-02
  2.86134053e-02  6.74315169e-03  1.04750348e-02  4.99288067e-02
  9.39490795e-02 -2.07689572e-02  3.47312652e-02 -5.82081340e-02
 -6.72131106e-02 -6.97817048e-03 -5.51942512e-02  2.21073758e-02
  7.55587891e-02  7.70689733e-03 -5.23517504e-02  6.73287511e-02
  3.99936140e-02 -2.23637037e-02  5.67574240e-02  3.07539646e-02
 -6.28585089e-03 -1.92496870e-02 -7.51817301e-02  6.50053397e-02
  3.29514779e-02  1.47961620e-02 -2.86122970e-02 -4.55842242e-02
 -2.64700018e-02 -3.39903980e-02  4.50218283e-02  7.26096630e-02
  1.20522514e-01 -1.27925780e-02 -6.82729781e-02  1.46106444e-03
  6.20294139e-02  4.15032096e-02  8.18267372e-03 -6.95633069e-02
  3.73155847e-02  6.48809001e-02 -7.91151002e-02  5.98536199e-03
 -1.67019907e-02 -8.89805406e-02 -3.09609231e-02 -5.06296428e-03
  6.05289936e-02  1.62050724e-02  4.09270711e-02  2.90135294e-02
  3.55612277e-03  9.15935189e-02 -1.02501191e-01 -1.52525669e-02]"
"var Person = function (name, street, city, state) {
    this.name = name;
    this.street = street;
    this.city = city;
    this.state = state;
}

Person.prototype = {

    hydrate: function () {
        var memento = JSON.stringify(this);
        return memento;
    },

    dehydrate: function (memento) {
        var m = JSON.parse(memento);
        this.name = m.name;
        this.street = m.street;
        this.city = m.city;
        this.state = m.state;
    }
}

var CareTaker = function () {
    this.mementos = {};

    this.add = function (key, memento) {
        this.mementos[key] = memento;
    },

        this.get = function (key) {
            return this.mementos[key];
        }
}

function run() {
    var mike = new Person(""Mike Foley"", ""1112 Main"", ""Dallas"", ""TX"");
    var john = new Person(""John Wang"", ""48th Street"", ""San Jose"", ""CA"");
    var caretaker = new CareTaker();

    // save state

    caretaker.add(1, mike.hydrate());
    caretaker.add(2, john.hydrate());

    // mess up their names

    mike.name = ""King Kong"";
    john.name = ""Superman"";

    // restore original state

    mike.dehydrate(caretaker.get(1));
    john.dehydrate(caretaker.get(2));

    console.log(mike.name);
    console.log(john.name);
}",Memento,JavaScript,dofactory,https://www.dofactory.com/javascript/design-patterns/memento,"[-2.68478435e-03  2.11586058e-02  7.50041530e-02 -1.46340756e-02
 -4.94009443e-02 -1.98910926e-02  4.83789407e-02  3.20083722e-02
  4.73560728e-02 -5.81735224e-02  3.82316270e-04 -5.31155616e-02
 -5.87165654e-02  1.41094886e-02  5.65424263e-02  4.82933857e-02
 -9.67768505e-02  1.91868283e-02 -1.01723097e-01 -7.87841994e-03
  9.32860523e-02 -9.67820510e-02 -4.45824862e-02 -4.65928912e-02
  5.64137893e-03  6.11242689e-02  3.96187454e-02 -1.50542404e-03
 -2.57837307e-02 -8.61449819e-03  3.50544602e-02 -1.13654114e-01
 -9.07544140e-03  7.27239763e-03 -5.55580519e-02  6.81330115e-02
 -9.42685604e-02  1.85424350e-02  3.03206798e-02 -8.65869038e-03
 -8.31392687e-03  5.31244650e-02 -2.28591822e-02 -7.78699219e-02
  8.52201805e-02 -1.41526544e-02 -9.94834006e-02  3.03357001e-02
  5.88049106e-02  3.10932491e-02 -6.08583074e-03  1.79256760e-02
 -2.52110362e-02  9.86212958e-03 -4.73809103e-03  3.82506065e-02
 -4.15577665e-02 -4.22883704e-02 -5.64563042e-03 -2.10323427e-02
  3.20567563e-02 -1.15627302e-02  2.74027940e-02  1.39412587e-03
  7.89973065e-02 -9.86605212e-02  2.73804870e-02  2.19372269e-02
 -1.13429036e-02  6.94096461e-02  5.97486310e-02  6.85694292e-02
  9.01959464e-02 -9.52368788e-03 -5.51548004e-02 -4.39350083e-02
 -3.65820527e-02 -3.76408137e-02 -3.01372632e-02  4.84008081e-02
 -2.45593097e-02 -7.95457214e-02 -2.64380425e-02  2.73283795e-02
 -1.00558242e-02  1.05561003e-01 -4.41555083e-02 -5.10740206e-02
 -4.01215516e-02 -2.12123785e-02 -1.16334096e-01 -2.08997671e-02
  5.24933748e-02  3.57208736e-02  4.14225599e-03  4.71210144e-02
  2.86130570e-02 -1.53736370e-02 -4.85454015e-02  7.60245994e-02
 -7.42321163e-02  1.47859352e-02  7.52522647e-02 -1.98530387e-02
 -1.17719267e-02 -4.54162732e-02 -5.42069338e-02 -4.89775278e-02
 -5.48286922e-02  3.32536362e-02 -5.69008477e-03  1.03653386e-01
 -5.50589859e-02  8.72220993e-02 -7.05486089e-02  6.73786877e-03
  1.08649498e-02 -9.45910066e-02  6.70549273e-02  1.04959175e-01
  1.07107200e-01  2.61339433e-02  3.48314308e-02 -5.68620209e-03
 -3.83598991e-02 -3.24214511e-02  3.70349549e-02 -8.79980409e-35
  4.37910520e-02 -1.52431112e-02 -5.32600889e-03  6.82027563e-02
  5.05344430e-03 -7.27058668e-03 -5.82746118e-02  3.85227390e-02
 -9.73257720e-02 -3.06425728e-02  2.88408482e-03 -1.09953294e-02
  9.97643918e-03 -1.36373732e-02 -4.00134549e-02 -2.77404897e-02
  5.00547364e-02  2.48440113e-02 -1.19785313e-02 -5.67221316e-03
 -1.38698751e-02  6.29665628e-02 -1.95849780e-02 -5.18107414e-03
 -1.59067139e-02  1.13803035e-04  4.32554185e-02  1.12295918e-01
 -5.49443886e-02 -2.10625511e-02  7.57259130e-02 -3.77241010e-03
 -4.68041264e-02  5.48702478e-02  1.02008440e-01  2.71184258e-02
  1.34811793e-02 -3.75429317e-02 -8.12578276e-02 -7.13129863e-02
  2.23313421e-02 -2.51403674e-02 -1.34012662e-02  1.08458558e-02
 -6.30969182e-02 -5.26697226e-02  5.96008413e-02  9.15567670e-03
 -1.27338609e-02  9.52214282e-03 -5.71290925e-02  4.85192984e-02
 -6.75703660e-02 -1.35314474e-02 -4.71702702e-02  1.98876522e-02
  1.98211707e-02 -4.95750308e-02 -5.38182724e-03 -4.17068638e-02
  1.06598092e-02  3.48375961e-02 -1.91783886e-02  5.66239245e-02
 -4.47021471e-03  2.03876067e-02 -1.44812549e-02  3.33587117e-02
  1.34461761e-01 -5.69254905e-02 -3.16394866e-02 -5.35907336e-02
  7.04222769e-02 -9.71734431e-03  3.79145369e-02  4.49715406e-02
 -6.38315305e-02 -1.46676265e-02 -6.96314871e-02 -7.23336712e-02
 -1.75622366e-02 -4.41091089e-03 -8.31502974e-02  1.33440301e-01
  8.12513381e-02  4.39340137e-02 -4.66342680e-02 -2.36892086e-02
  3.79852355e-02  1.45534515e-01 -8.23710710e-02  2.15427321e-03
 -2.55015828e-02 -7.50013664e-02 -3.11405621e-02 -2.19483566e-33
 -4.17983979e-02 -3.64083610e-02  1.88536383e-02  4.73670885e-02
  5.96767105e-02 -3.59800905e-02 -1.52357472e-02 -2.32996605e-02
 -1.00084087e-02  1.13825258e-02 -6.61336407e-02  6.15437748e-04
  6.53994754e-02 -6.64816890e-03  5.03580458e-02  1.25766039e-01
 -9.28156485e-04 -2.95984298e-02  4.22413163e-02 -7.45990500e-02
  4.04276662e-02  4.62655462e-02 -3.13707031e-02  6.96820952e-03
 -9.16206092e-02  1.92734767e-02 -1.44485226e-02 -2.78239809e-02
 -1.25987167e-02  2.62876856e-03 -4.79311831e-02 -2.76392810e-02
 -3.69174220e-03  4.59408052e-02  9.93548334e-03 -7.52593726e-02
  4.31719311e-02  2.64451448e-02 -1.05783120e-02  1.74926911e-02
 -6.04332574e-02 -9.20289755e-02 -3.22247739e-03 -4.55446122e-03
 -1.05467672e-02 -5.62143549e-02  1.03379153e-02  4.03937176e-02
  3.14283557e-02 -2.40057092e-02  1.21320169e-02 -5.60685098e-02
 -1.71791583e-01 -2.26456840e-02 -5.04942462e-02 -3.13368216e-02
  6.08089194e-02 -1.29107565e-01  5.30231670e-02  7.37312287e-02
 -2.73212511e-02 -4.81136441e-02  3.47954854e-02  3.63530517e-02
  3.89803648e-02 -9.19935852e-02 -2.78417263e-02 -4.40249033e-02
  3.76868285e-02 -2.05017310e-02 -7.99456462e-02  2.08645165e-02
  6.14742525e-02 -6.08472154e-02  4.02351320e-02 -6.59086481e-02
 -7.78342485e-02 -5.69157787e-02  9.74181145e-02 -2.41853241e-02
 -2.15140767e-02 -2.21226513e-02 -5.24395751e-03  1.55177424e-02
  4.04946767e-02 -1.67008825e-02  7.50500858e-02  3.16089019e-02
 -5.47337234e-02 -3.32669578e-02  4.41341437e-02  7.40090683e-02
 -5.44797517e-02  6.05511665e-03 -7.08908364e-02 -4.33514167e-08
 -5.59496731e-02 -1.64777652e-04 -4.81545404e-02  2.78650504e-02
 -3.55137102e-02 -8.57627243e-02  3.35106887e-02  4.48791943e-02
  1.36235477e-02 -2.58838907e-02  3.51121835e-02  8.83419439e-02
  4.73954380e-02 -3.89367975e-02  2.43458338e-02 -5.78647070e-02
 -4.38745469e-02  2.56910641e-02 -6.23763315e-02  8.16090330e-02
  2.47496516e-02 -2.46794615e-02 -2.89735459e-02  1.87227037e-02
  7.81807229e-02 -4.39905040e-02  5.56790456e-02  2.19744500e-02
  6.80263154e-03  9.23982486e-02 -4.00037058e-02  8.72979015e-02
  4.58143279e-02  2.47039665e-02  1.15466900e-02 -5.28956763e-02
  4.47863154e-02  2.40211375e-03  4.75081019e-02  9.73520651e-02
  1.54655948e-01 -2.66800672e-02 -6.82190433e-02  7.10281879e-02
  6.94585070e-02  1.35686225e-03  9.88767110e-03 -2.47919429e-02
  7.13522658e-02  1.69251114e-02 -3.50529999e-02 -1.69059318e-02
  1.21891527e-02 -7.39259198e-02 -2.40191966e-02 -2.72994898e-02
  4.13522497e-02  9.39983223e-03  2.33404357e-02  1.80254392e-02
  4.75259647e-02 -1.21760117e-02 -1.18254926e-02 -8.63056257e-03]"
"var TrafficLight = function () {
    var count = 0;
    var currentState = new Red(this);

    this.change = function (state) {
        // limits number of changes
        if (count++ >= 10) return;
        currentState = state;
        currentState.go();
    };

    this.start = function () {
        currentState.go();
    };
}

var Red = function (light) {
    this.light = light;
    this.go = function () {
        console.log(""Red --> for 1 minute"");
        light.change(new Green(light));
    }
};

var Yellow = function (light) {
    this.light = light;

    this.go = function () {
        console.log(""Yellow --> for 10 seconds"");
        light.change(new Red(light));
    }
};

var Green = function (light) {
    this.light = light;

    this.go = function () {
        console.log(""Green --> for 1 minute"");
        light.change(new Yellow(light));
    }
};

function run() {

    var light = new TrafficLight();
    light.start();
}",State,JavaScript,dofactory,https://www.dofactory.com/javascript/design-patterns/state,"[-3.84318084e-02  7.47764204e-03  5.33167981e-02  4.29707691e-02
 -4.46996056e-02  1.20134493e-02  5.20474985e-02  4.29922342e-03
  8.83945972e-02 -3.10723614e-02 -8.20191577e-03 -8.12684093e-03
 -7.42055997e-02  1.74316261e-02  6.10630922e-02  5.11144586e-02
 -6.59614429e-02 -6.34705601e-03 -7.37773404e-02 -3.04998215e-02
  1.15602575e-01 -1.01654947e-01 -2.67338213e-02 -2.33296454e-02
 -4.87304181e-02  2.21624691e-02  2.34943014e-02 -1.01201870e-01
  1.53961284e-02 -4.90312092e-02  1.86304376e-02 -7.76612684e-02
 -6.38209209e-02  2.68215742e-02 -1.32021904e-01 -1.33069539e-02
 -9.04697627e-02 -4.06713188e-02 -2.85490248e-02  1.32887596e-02
 -1.27111701e-02 -1.99578367e-02 -2.15042103e-02 -5.04215658e-02
  6.11722618e-02  1.55650619e-02 -6.98248819e-02  5.16607016e-02
  2.96972669e-03 -2.60860496e-03  6.68995306e-02 -1.77426040e-02
 -2.40775640e-03 -4.23648283e-02  9.28658321e-02  2.14561913e-02
  8.78107920e-03  1.43293506e-02  3.54287550e-02 -3.81816328e-02
  9.98954009e-03 -1.88334621e-02  5.13334014e-02 -1.36082880e-02
  4.30453494e-02  7.64996948e-05 -1.91115716e-03 -2.10681949e-02
 -2.28586141e-02  1.07104562e-01  6.41246932e-03  5.81857413e-02
  1.14573002e-01  6.18917402e-03 -8.28817412e-02 -1.17578909e-01
 -1.73775498e-02  7.17913583e-02 -3.51797938e-02  1.01009738e-02
  8.67758598e-03 -5.92255108e-02 -7.26381689e-02  6.00829534e-02
  8.08959827e-02  6.65534660e-02  1.89085994e-02  8.57816637e-02
  6.25449140e-03 -4.29276787e-02 -7.55710751e-02  9.33209211e-02
  9.01732128e-03  1.09803006e-02 -7.60172307e-02  3.68172601e-02
 -3.70117575e-02 -4.70319390e-02 -1.50461439e-02  2.03115493e-02
  1.67800356e-02 -1.22263636e-02  1.60911530e-02  2.38848221e-03
 -4.26097140e-02 -8.40695351e-02 -2.48632636e-02  6.60470426e-02
 -4.52553369e-02  8.04725364e-02  9.16848034e-02  4.94415648e-02
  4.40859646e-02 -2.33493242e-02 -1.37754800e-02  3.02941725e-02
  1.15069691e-02 -4.31239745e-03  5.19787967e-02  9.81174260e-02
  1.10872082e-01  2.98432168e-02  3.97468364e-04 -2.98042577e-02
  3.07646375e-02 -2.25406289e-02  7.28329122e-02  4.33103684e-34
  1.77412424e-02 -5.67366369e-02 -7.53490180e-02  1.74488612e-02
  6.24308921e-02  3.61802615e-02  3.47768236e-03 -1.69427488e-02
 -1.17623523e-01 -3.95936519e-02  5.08275852e-02  6.94639385e-02
 -2.67603813e-04 -2.61795539e-02  3.72066051e-02 -9.30758268e-02
  1.15284681e-01 -8.74850526e-03  5.76160699e-02 -9.73035991e-02
 -3.30232531e-02 -7.12732747e-02  2.03188453e-02  2.50905976e-02
  4.17060871e-03  3.34717408e-02  1.39822951e-02  6.06355257e-02
 -5.93273006e-02 -4.25440706e-02  1.21063568e-01  7.54696727e-02
 -9.44177508e-02  1.16611697e-01  3.64320688e-02 -1.03646629e-02
  6.00208389e-03  1.94444694e-02 -1.99448727e-02 -3.99496444e-02
 -2.03572586e-02  1.39064966e-02 -6.21409826e-02  4.11253981e-02
 -1.49506738e-03 -1.91204827e-02  9.33424011e-03  3.87564935e-02
 -1.55965928e-02  6.34130016e-02 -1.86270252e-02  5.75421527e-02
 -4.37053181e-02 -6.35540038e-02  2.79336758e-02  7.35135302e-02
 -1.86919272e-02 -1.41369933e-02 -3.85619774e-02 -3.34577672e-02
  8.63673314e-02 -1.44858677e-02  4.93129669e-03  1.69519782e-02
 -2.63673402e-02  4.02516276e-02 -3.21265757e-02  1.74717861e-03
 -1.76387804e-03 -5.54250255e-02 -7.95082655e-03 -3.76175158e-02
  5.26554175e-02 -2.22689789e-02  3.84420459e-03 -2.84889471e-02
 -5.37035652e-02 -1.02087557e-02 -1.19304083e-01 -6.92377239e-02
 -4.64110542e-03 -5.96854314e-02 -8.15262124e-02  7.10067451e-02
  1.05440371e-01 -3.55219766e-02 -5.46333306e-02  5.68900481e-02
 -6.23199306e-02  7.51953721e-02 -3.02779265e-02 -1.32716317e-02
  6.58860207e-02 -5.21544106e-02 -3.43666933e-02 -1.40534400e-33
 -2.92697232e-02  1.41555509e-02 -4.96128872e-02  7.82627985e-02
  5.31202480e-02 -3.46218585e-03 -6.94761472e-03  1.45800002e-02
 -7.20910309e-03  6.53010830e-02  2.66125053e-02  4.82623614e-02
 -4.56550978e-02  7.72045320e-03 -5.61703146e-02  6.99664578e-02
  2.21648943e-02  1.68775748e-02 -1.06994882e-02 -4.95688291e-03
 -2.92454958e-02  5.42344227e-02 -6.55526891e-02  3.09441984e-02
 -9.01173130e-02  1.13629252e-01  3.82694453e-02  4.42601414e-03
 -5.92628978e-02 -2.36804187e-02 -7.56517574e-02 -1.32319005e-02
 -2.92153638e-02  5.98273762e-02  3.08777839e-02 -6.66521639e-02
  8.38292837e-02 -5.99507336e-03 -1.63236149e-02  4.54356000e-02
  6.80980310e-02 -7.18059242e-02  2.57137027e-02 -6.92379400e-02
 -4.64270562e-02  3.31510343e-02 -1.24837905e-02  1.50993532e-02
 -9.51039046e-02 -6.03442602e-02 -4.90634888e-03 -9.03746784e-02
 -2.27753222e-02  3.76314931e-02 -3.07168309e-02 -1.28809102e-02
  5.15944287e-02 -8.23223889e-02  6.96947724e-02  1.15860716e-01
 -9.90647916e-03 -7.60163590e-02  1.81859992e-02  6.02589026e-02
 -2.71145850e-02 -1.35972649e-02 -6.20195530e-02 -4.83824778e-03
  1.14525452e-01  1.84679665e-02  1.54987741e-02  4.32426035e-02
  3.58505882e-02 -8.53859261e-02 -1.76765975e-02 -9.12348405e-02
 -4.70341481e-02 -9.88017991e-02  4.65223845e-03  9.10474360e-03
  3.02645080e-02 -3.55783105e-02  1.37135638e-02 -5.47045916e-02
 -1.83161662e-03  2.02227477e-02 -1.78515594e-02  1.94332767e-02
  6.73250761e-03 -3.41493040e-02 -1.92877147e-02  8.18166435e-02
  7.79789127e-03 -2.16580220e-02 -6.50035143e-02 -3.59320893e-08
 -3.40235606e-02 -3.06742489e-02  1.39805190e-02 -1.02245547e-02
  3.42726745e-02 -3.47401537e-02  2.25460213e-02  1.42286411e-02
 -4.20881584e-02 -5.45415618e-02  5.04392311e-02  4.05822508e-02
  1.42151207e-01  1.42847216e-02 -2.76137609e-04 -2.36141272e-02
 -1.23234810e-02 -3.26291621e-02  5.63177047e-03  5.16729876e-02
 -3.07392441e-02 -1.11135803e-02 -5.54909185e-03  2.60118209e-02
  6.77392781e-02 -1.56762432e-02  6.62264824e-02  6.74139261e-02
  4.71161976e-02  3.15063633e-02 -5.87219857e-02  9.10703465e-02
  4.17559072e-02  3.18055339e-02 -5.03849648e-02 -9.61012691e-02
 -4.50949930e-02  7.57853687e-03  8.89262110e-02  9.13711339e-02
  2.57894006e-02 -2.80996431e-02 -8.89384523e-02  4.25330773e-02
 -1.23431580e-02 -4.31582555e-02 -1.63837168e-02 -1.08460158e-01
  3.19110826e-02  3.56741101e-02 -9.75903869e-03  3.10051236e-02
 -3.02930269e-02 -2.29957104e-02  4.46486706e-03 -2.42661238e-02
  2.93023624e-02 -1.45691475e-02 -6.71538189e-02  6.51394799e-02
  1.25981411e-02  2.82090046e-02 -1.60431229e-02 -6.59155054e-03]"
"var Shipping = function () {
    this.company = """";
};

Shipping.prototype = {
    setStrategy: function (company) {
        this.company = company;
    },

    calculate: function (package) {
        return this.company.calculate(package);
    }
};

var UPS = function () {
    this.calculate = function (package) {
        // calculations...
        return ""$45.95"";
    }
};

var USPS = function () {
    this.calculate = function (package) {
        // calculations...
        return ""$39.40"";
    }
};

var Fedex = function () {
    this.calculate = function (package) {
        // calculations...
        return ""$43.20"";
    }
};

function run() {

    var package = { from: ""76712"", to: ""10012"", weigth: ""lkg"" };

    // the 3 strategies

    var ups = new UPS();
    var usps = new USPS();
    var fedex = new Fedex();

    var shipping = new Shipping();

    shipping.setStrategy(ups);
    console.log(""UPS Strategy: "" + shipping.calculate(package));
    shipping.setStrategy(usps);
    console.log(""USPS Strategy: "" + shipping.calculate(package));
    shipping.setStrategy(fedex);
    console.log(""Fedex Strategy: "" + shipping.calculate(package));
}",Strategy,JavaScript,dofactory,https://www.dofactory.com/javascript/design-patterns/strategy,"[-3.93539518e-02  3.82023826e-02  2.79759709e-02  5.93452854e-03
 -5.05585447e-02  1.57503039e-02  1.74376480e-02  7.96796009e-02
  3.27895246e-02  5.99727733e-04 -2.75922120e-02 -7.84200057e-02
 -6.23976067e-02 -5.66047207e-02  5.12137339e-02  9.45551787e-03
 -7.87454471e-02 -3.52949399e-04 -8.71656835e-02  2.42275428e-02
  7.85923302e-02 -6.91577047e-02 -6.05356123e-04 -7.98048079e-03
  2.47146469e-02  1.57700479e-02 -5.52603677e-02 -1.10714650e-02
 -6.49806857e-02 -7.05661997e-03  4.13363194e-03 -6.46832138e-02
 -2.63189152e-02 -1.50765823e-02 -5.89960851e-02  3.10444683e-02
 -8.26313347e-02 -3.33363414e-02  1.45885628e-02  1.27873672e-02
 -8.69107321e-02  1.04959756e-02 -1.12057030e-02  1.84523698e-03
  1.02492273e-01 -8.14433470e-02 -7.07874224e-02  6.33545592e-02
  6.91255555e-02  6.38046265e-02  7.46299028e-02  1.03045143e-02
 -1.13434689e-02 -2.41247546e-02 -2.09241058e-03  5.63560091e-02
  4.82279100e-02 -3.99105959e-02  1.62441730e-02 -3.81139070e-02
 -5.23866527e-03 -1.96215548e-02  1.80450436e-02  2.07312424e-02
  4.87225130e-02 -1.00961596e-01  8.24774522e-03 -4.95769840e-04
 -8.65665227e-02  6.39987439e-02  2.85520051e-02  6.02343343e-02
  8.05200040e-02  9.69311967e-03 -2.55870465e-02 -7.65878931e-02
  2.85870465e-03  4.10244130e-02  2.83205081e-02  3.75213884e-02
  2.73575727e-02 -8.69522542e-02 -5.83383217e-02  5.46884127e-02
  2.09032297e-02  5.63426614e-02  2.53180433e-02  2.40847506e-02
  1.87780727e-02 -6.14666827e-02 -9.44383666e-02  1.01320464e-02
 -5.55324331e-02  7.90651739e-02 -2.94820685e-02  8.55193287e-02
 -2.24649403e-02 -1.09621715e-02 -3.00968122e-02  7.84313604e-02
 -9.10115149e-03  6.33626804e-02  1.88195929e-02 -3.35745662e-02
 -3.74251418e-02 -7.50633255e-02 -4.29312810e-02 -1.03679160e-02
  8.94207042e-03 -4.28901194e-03 -4.94954474e-02  4.42299359e-02
 -6.38102219e-02  8.27507079e-02 -3.33905965e-02  2.01212298e-02
  7.08697587e-02 -8.88935253e-02  1.03926234e-01  4.11861129e-02
  1.16079293e-01  1.07182823e-01  6.05335198e-02  8.73013213e-03
 -3.31027731e-02 -3.60979401e-02  7.20850751e-02  1.56892795e-34
 -4.72228415e-02 -7.06642270e-02 -1.81330722e-02  4.02749777e-02
  4.19695042e-02 -2.94480217e-03 -4.26737852e-02  4.84706648e-02
 -8.37229118e-02  4.62111197e-02 -9.47559401e-02  6.20731153e-02
  2.60138828e-02  4.41325246e-04 -3.13604139e-02 -2.40911413e-02
  6.21210411e-02  5.03683239e-02  8.58996958e-02 -6.70234412e-02
 -3.68865281e-02 -3.34555469e-02  3.96684790e-03  3.35547179e-02
  2.03965809e-02  4.01780009e-02 -6.33160875e-04  1.08134985e-01
 -8.05353969e-02 -1.72200724e-02  1.02516085e-01 -6.31283522e-02
 -5.48653416e-02  5.65544479e-02 -7.85255153e-03 -9.07695573e-03
 -1.29681155e-02 -3.81214172e-03 -6.43174350e-02 -1.28241461e-02
 -7.29355169e-03 -1.22158024e-02 -1.55201470e-02  4.28367071e-02
 -3.70372050e-02 -3.09125260e-02  1.92258060e-02 -3.05540767e-02
  1.00271091e-01  7.07077328e-03 -7.49932751e-02  4.28451039e-02
  3.38903107e-02 -5.89159392e-02  2.42087059e-02  3.54019776e-02
  4.23630979e-03 -2.67468654e-02 -4.24431190e-02 -1.02025993e-01
 -4.74059908e-03 -1.01177180e-02 -4.05458741e-06  1.62308745e-04
 -2.23110281e-02  4.74654213e-02 -7.49272779e-02 -3.55910584e-02
  3.17201130e-02  2.19398364e-02 -1.68693217e-03 -8.24517570e-03
  1.06585301e-01  9.22940951e-03  9.64419618e-02  2.01642960e-02
 -4.91066463e-02  4.43461118e-03 -5.91470413e-02 -8.19954500e-02
 -2.11009756e-02 -1.64087657e-02 -4.29991782e-02  1.26070768e-01
  1.02181897e-01  5.40487021e-02 -6.52516121e-03  6.12941720e-02
  6.33248836e-02  9.56829339e-02 -9.37049314e-02 -8.23897775e-03
 -2.97097508e-02 -5.59734516e-02  2.48108354e-05 -2.37674323e-33
 -7.50102177e-02  1.10192433e-01 -3.57453525e-02  2.31328215e-02
  7.27691222e-03  8.90481006e-03  5.24687953e-02 -4.90388833e-03
  4.90009189e-02  3.91807593e-02 -5.27172759e-02 -7.17390655e-03
 -4.20816056e-02 -3.41773778e-02  1.87914744e-02  5.89771196e-02
 -4.25186055e-03 -2.99872607e-02  2.54921131e-02 -6.13689758e-02
 -1.54380599e-04  3.72249931e-02 -1.80408079e-02  4.10198048e-03
 -3.04466635e-02  3.55168316e-03 -1.41497534e-02 -2.92198416e-02
 -9.72871259e-02 -5.09111350e-03 -3.42182368e-02 -7.24297538e-02
 -1.74703225e-02  1.15920886e-01 -2.48131249e-02 -9.36630666e-02
  1.94017049e-02  5.56005649e-02  5.61111048e-02  9.20285843e-03
 -4.22916338e-02 -6.26260713e-02 -1.54557184e-03 -2.05497555e-02
  2.27891430e-02 -6.41769543e-02  2.39727348e-02  1.55635606e-02
  7.14760199e-02 -4.95462343e-02 -4.92640547e-02 -4.75678891e-02
 -9.52254906e-02  1.41385840e-02 -6.07832819e-02  6.37279153e-02
  2.34349687e-02 -9.81833115e-02  5.57464771e-02  7.31939003e-02
 -9.73541383e-03 -2.91549694e-02  6.71241134e-02  1.90322194e-02
  1.99421421e-02  3.78259085e-03 -4.94533628e-02 -2.71323379e-02
  7.75957704e-02  3.88776772e-02 -9.60406438e-02  2.73775514e-02
  6.22413866e-02 -6.05211742e-02  1.49185611e-02 -3.17069143e-02
 -3.74522358e-02 -1.72887966e-02  5.77814393e-02  2.27537677e-02
  7.99322277e-02 -1.15555376e-02  9.56561789e-03 -3.04961968e-02
 -2.46059429e-02 -3.43309268e-02  5.20259291e-02  4.26572300e-02
 -2.83827055e-02 -5.33277169e-02  6.32870989e-03  8.19233209e-02
 -4.76154648e-02 -2.51384806e-02 -8.78282636e-02 -4.41144223e-08
 -4.19911183e-02  3.68576422e-02 -2.75828112e-02  1.00986995e-02
 -4.21219729e-02  2.52899136e-02  2.45785043e-02 -6.90479856e-03
 -3.86106186e-02 -1.34086430e-01 -3.64176333e-02  5.88928312e-02
  6.74992427e-03  3.70407887e-02 -4.25298624e-02 -9.65422317e-02
 -1.38727818e-02  6.04383163e-02 -4.93977927e-02  1.63931251e-02
  2.35147923e-02  2.54727900e-02  3.58784348e-02  3.66443619e-02
  6.23172633e-02  1.34146614e-02  9.26830061e-03  5.14814556e-02
  5.74471466e-02  1.01364702e-01 -2.27517821e-02  5.99120781e-02
  5.91255864e-03  4.34342995e-02 -1.41153149e-02 -3.21477354e-02
 -5.03701251e-03  1.77445933e-02  7.71475956e-02  1.36822760e-01
  6.75265715e-02 -4.40579504e-02 -6.83007091e-02  2.97021959e-02
  8.34845528e-02 -5.56954257e-02 -6.70167506e-02 -5.12202531e-02
  5.30781485e-02 -1.33950850e-02  5.25500067e-02 -1.69109739e-02
 -6.35262430e-02 -4.40396555e-02  3.69827934e-02 -1.93902068e-02
 -2.25490630e-02 -1.05888508e-01 -8.34894925e-02  3.85407023e-02
 -5.25120571e-02 -6.96614534e-02 -2.17413306e-02 -7.70388357e-03]"
"var datastore = {
    process: function () {
        this.connect();
        this.select();
        this.disconnect();
        return true;
    }
};

function inherit(proto) {
    var F = function () { };
    F.prototype = proto;
    return new F();
}

function run() {
    var mySql = inherit(datastore);

    // implement template steps

    mySql.connect = function () {
        console.log(""MySQL: connect step"");
    };

    mySql.select = function () {
        console.log(""MySQL: select step"");
    };

    mySql.disconnect = function () {
        console.log(""MySQL: disconnect step"");
    };

    mySql.process();
}",Template Method,JavaScript,dofactory,https://www.dofactory.com/javascript/design-patterns/template-method,"[-7.35106841e-02  1.46482205e-02  2.98338104e-02  2.20946297e-02
 -6.07302040e-02 -3.87234353e-02 -2.58403365e-03  8.39855522e-02
  3.33872736e-02 -1.21439074e-03 -3.01973671e-02  1.42783048e-02
 -4.80189510e-02 -1.31374430e-02  1.20350132e-02  4.02726531e-02
 -1.93878617e-02 -7.96553567e-02 -7.38362141e-04  1.25875641e-02
  2.29357928e-03 -1.07208282e-01  1.18903794e-04 -2.00405940e-02
  4.39076452e-03 -4.71187476e-03  3.36383358e-02  1.79353449e-02
  1.25818215e-02 -4.30217125e-02  1.48123745e-02 -8.54697004e-02
 -1.17888488e-01  3.81007455e-02 -2.41358113e-02  4.76806512e-04
 -3.72848008e-03 -5.01869395e-02 -5.28309941e-02  3.54418647e-03
  4.55747321e-02 -2.12695356e-02 -1.24569468e-01  8.26293137e-03
  7.05607384e-02  2.58086529e-02 -1.36618555e-01  1.23362150e-03
 -4.15181443e-02  2.20405459e-02 -6.19207770e-02  3.06112170e-02
  2.58050244e-02  3.71908173e-02 -1.91666950e-02  7.90770054e-02
  7.31244981e-02 -1.54295731e-02  3.23362239e-02  4.48087901e-02
  4.49105632e-03 -2.39721611e-02  1.56365689e-02  1.01386998e-02
  2.42683589e-02 -3.32457684e-02 -1.01233823e-02  1.80481225e-02
  4.41733859e-02  7.76080266e-02 -1.40492879e-02  3.12512666e-02
 -7.70026073e-03  7.13105649e-02 -2.67825909e-02 -9.07936916e-02
  6.80914288e-03 -4.55556363e-02 -6.37240186e-02  1.28928488e-02
 -2.30259653e-02 -2.15015095e-02 -1.02612928e-01 -3.13913189e-02
  3.95852514e-02  7.69134387e-02  4.73435000e-02 -3.97744924e-02
  2.54752655e-02 -4.06868532e-02 -8.78555477e-02  1.13728317e-02
 -6.04821034e-02 -3.52932364e-02 -4.36329097e-02  1.35173490e-02
  1.20585086e-02 -5.44139966e-02  6.65892214e-02 -1.97573118e-02
 -5.64206345e-03  9.58093815e-03  1.41730811e-02  1.27978949e-02
 -1.33966394e-02 -5.42424135e-02 -3.72015089e-02 -6.72438322e-03
  1.65122561e-02  5.28809242e-02 -7.45680407e-02  7.91607797e-02
  2.38261539e-02  4.21550274e-02 -3.60830352e-02  6.46985024e-02
 -6.21225219e-03 -6.58980832e-02  5.87902069e-02  9.67076719e-02
  1.25847608e-01  6.94439486e-02 -7.77793862e-03  2.20803879e-02
 -2.71227341e-02 -5.72686456e-02 -7.79800629e-03 -3.02213077e-34
  1.57273617e-02 -9.43933129e-02 -4.71441224e-02  9.19907391e-02
  1.08029835e-01  6.54318482e-02 -1.23405540e-02  1.77636594e-02
 -1.04825631e-01  7.29761645e-02 -1.96088087e-02  1.09546592e-04
 -6.60195947e-02 -2.92697232e-02 -4.86271223e-03  4.03429009e-02
  2.99152266e-02  3.50585468e-02  7.82039389e-02 -2.87693292e-02
  2.71625780e-02  1.85839161e-02  1.35928253e-02  7.98794180e-02
  8.68173316e-02  3.24320048e-02 -8.06581378e-02  1.02561057e-01
 -6.57458156e-02 -6.23949245e-03  5.42830937e-02 -6.50268719e-02
 -8.37241560e-02  5.13445064e-02  2.92284656e-02 -2.36530062e-02
  1.19471950e-02 -1.86477341e-02 -8.23871940e-02  6.58997102e-03
  7.94166923e-02 -7.55898803e-02 -7.57076079e-03  5.01993205e-03
 -6.51809052e-02 -2.68128850e-02  5.24772471e-03 -4.74656411e-02
  1.80059467e-02 -7.85316378e-02 -3.15353484e-03 -4.42083087e-03
  6.59996876e-03 -7.13296011e-02  1.13802664e-01  2.00225273e-03
 -6.21595755e-02 -5.18454127e-02 -2.75759622e-02 -1.27321417e-02
 -3.81075591e-03  3.82147729e-02 -5.72407767e-02 -2.56947428e-03
 -5.13246804e-02 -2.06038039e-02 -2.31330618e-02 -5.57868294e-02
  1.01706177e-01 -3.88914943e-02 -1.03926919e-02 -1.17455954e-02
  5.14772683e-02 -3.30362394e-02  5.96827120e-02 -1.64957102e-02
 -1.60125166e-01 -3.20992284e-02  2.47888789e-02 -4.38730866e-02
  4.66057993e-02 -6.32600412e-02 -1.28131688e-01  8.06315541e-02
  5.11866026e-02  1.72172692e-02 -4.56125215e-02  8.92351288e-03
 -4.46369266e-03  9.67628434e-02 -9.30029154e-02  6.69384748e-03
  9.82437581e-02 -4.23673913e-02 -7.45706400e-03 -3.77268190e-33
 -9.34119616e-03  5.38269849e-03  6.18786700e-02  6.70747384e-02
 -8.37471150e-03 -2.14062072e-03  2.88790185e-02  1.14195030e-02
  1.75433438e-02  4.52599078e-02  2.43630428e-02  7.40410434e-03
  1.04303490e-02  3.08345221e-02 -1.72887277e-03  1.06180668e-01
 -4.87145036e-02 -1.19965434e-01 -9.95887257e-03  6.36578538e-03
 -2.75549795e-02  5.20830527e-02  2.61915978e-02  1.52524626e-02
 -5.35168834e-02 -9.34684742e-03 -1.51387928e-02  4.46795858e-02
  8.13753158e-03 -3.70680168e-03 -6.48622438e-02  1.37239899e-02
  1.40375849e-02  5.31400554e-02  6.17313683e-02 -4.83407043e-02
  2.19601076e-02  4.01688367e-02  6.91739726e-04 -7.63249621e-02
 -9.61681549e-03 -1.71849541e-02 -5.07492833e-02 -1.59454085e-02
 -3.80262807e-02  1.98676717e-02  5.97196538e-03  1.86647382e-02
  3.84252891e-02 -7.24225119e-02 -4.56844755e-02 -4.54777703e-02
 -2.11179759e-02 -1.49689522e-03 -4.24291305e-02 -1.11305492e-03
  6.17414601e-02 -1.07530110e-01 -8.94603692e-03  8.29856172e-02
  9.82370004e-02 -9.35627967e-02  4.78079580e-02  8.40393547e-03
  2.39680782e-02 -3.13203260e-02 -4.66179103e-02  5.39392866e-02
  4.28598821e-02 -2.45983768e-02 -6.13619275e-02  2.60058269e-02
  1.00543424e-01 -4.91302907e-02  9.62977558e-02 -4.27703597e-02
 -8.99834782e-02 -6.96049780e-02  1.02251664e-01  1.43564939e-02
  1.90865900e-02 -2.90993005e-02  1.02012865e-02 -1.06849425e-01
  1.70945264e-02 -7.26779550e-02 -2.57794373e-02  4.44026552e-02
 -3.77835482e-02 -2.78264880e-02  5.32766916e-02 -1.86061244e-02
 -8.55191499e-02 -4.99400496e-02 -9.18690022e-03 -4.08364969e-08
 -4.32674261e-03  8.37861933e-03  3.32053825e-02 -8.95395279e-02
  6.52149841e-02 -7.73358196e-02  4.10076370e-03  9.08245742e-02
  3.70067731e-02  2.91223079e-02 -5.80831170e-02  1.29014745e-01
  1.12757444e-01  6.01349771e-02  5.68528771e-02 -7.73946419e-02
  6.37598941e-03 -1.39617464e-02  2.79437210e-02  3.72749791e-02
 -5.45475492e-03  2.21027788e-02 -2.76338141e-02  3.04762609e-02
  3.03208251e-02 -1.26883131e-03  3.15278210e-02  1.22386841e-02
  2.61909124e-02  5.92311621e-02 -5.50454557e-02  5.34658246e-02
  5.69212697e-02  9.06772465e-02  1.27592287e-03 -9.34180804e-03
  1.53745478e-02  1.04573946e-02 -1.32683674e-02  2.92131826e-02
  1.05876938e-01  8.12263601e-03 -8.78091380e-02  1.23632774e-02
 -7.26114661e-02 -1.26966438e-03  2.99880318e-02  3.47877182e-02
  1.15772644e-02  7.42195919e-02 -9.47845913e-03 -4.75166701e-02
 -2.39966847e-02 -9.37120691e-02  2.34255660e-02 -6.03686199e-02
 -2.01970525e-03 -6.41367286e-02 -5.87063245e-02  5.04057249e-03
  3.05431951e-02 -7.43805943e-03  3.64101343e-02 -4.92082126e-02]"
"var Employee = function (name, salary, vacation) {
    var self = this;

    this.accept = function (visitor) {
        visitor.visit(self);
    };

    this.getName = function () {
        return name;
    };

    this.getSalary = function () {
        return salary;
    };

    this.setSalary = function (sal) {
        salary = sal;
    };

    this.getVacation = function () {
        return vacation;
    };

    this.setVacation = function (vac) {
        vacation = vac;
    };
};

var ExtraSalary = function () {
    this.visit = function (emp) {
        emp.setSalary(emp.getSalary() * 1.1);
    };
};

var ExtraVacation = function () {
    this.visit = function (emp) {
        emp.setVacation(emp.getVacation() + 2);
    };
};

function run() {

    var employees = [
        new Employee(""John"", 10000, 10),
        new Employee(""Mary"", 20000, 21),
        new Employee(""Boss"", 250000, 51)
    ];

    var visitorSalary = new ExtraSalary();
    var visitorVacation = new ExtraVacation();

    for (var i = 0, len = employees.length; i < len; i++) {
        var emp = employees[i];

        emp.accept(visitorSalary);
        emp.accept(visitorVacation);
        console.log(emp.getName() + "": $"" + emp.getSalary() +
            "" and "" + emp.getVacation() + "" vacation days"");
    }
}",Visitor,JavaScript,dofactory,https://www.dofactory.com/javascript/design-patterns/visitor,"[-1.71405450e-02  9.45583135e-02  2.37832796e-02  1.30846454e-02
 -6.20989241e-02  5.97627368e-03  6.24885187e-02  3.44489329e-02
  5.75555861e-02 -8.15751031e-02  2.45472081e-02 -6.66874871e-02
 -3.94853950e-02 -5.55631667e-02  2.79290285e-02 -6.30444661e-03
 -6.33364320e-02  2.79356316e-02 -2.45029535e-02 -4.08731550e-02
  5.97780384e-02 -3.41977850e-02 -7.58092180e-02 -6.52598590e-02
  8.07171129e-03 -2.58381516e-02 -2.04976206e-03 -9.91120283e-03
 -2.05618255e-02 -1.14474772e-02  3.06630675e-02 -7.94325843e-02
 -5.04305847e-02 -3.53710959e-03 -2.45130416e-02 -1.17024696e-02
 -1.00027703e-01 -7.11049605e-03 -3.17697078e-02  5.03400080e-02
 -8.88110101e-02  1.60807371e-02  3.96886207e-02 -9.12900269e-02
  8.44339058e-02 -6.19674660e-02 -8.61598998e-02  5.56915291e-02
  5.11380769e-02  7.70102665e-02  3.87325659e-02 -1.25388065e-02
  1.40891811e-02 -5.74961910e-03  4.17600805e-03 -7.41994521e-03
 -2.92369761e-02 -8.21934864e-02 -1.61772631e-02 -2.18212488e-03
 -2.52915770e-02 -5.17302975e-02  4.77804840e-02 -3.60396691e-03
  1.57561637e-02 -1.24602653e-01 -7.03821052e-03  1.75982174e-02
 -2.64917389e-02  4.60693091e-02 -8.21008813e-03  3.96448150e-02
  1.66040175e-02  9.09767114e-03 -4.88692820e-02 -3.52312364e-02
 -7.87077099e-02  7.18651293e-03  4.95733209e-02 -1.70023255e-02
  6.85503893e-03 -3.85473408e-02 -5.05715646e-02  4.82404865e-02
  3.99129763e-02  3.24547254e-02  1.21125951e-03  1.67070255e-02
  2.48914082e-02 -7.84767419e-02 -3.97303849e-02  8.25903267e-02
 -7.17219189e-02  3.81372683e-02 -5.22263674e-03  5.53420670e-02
 -2.31168363e-02  8.27911496e-03 -3.55103463e-02  9.86119509e-02
 -3.85540873e-02  4.02786098e-02  2.13711243e-02  2.69037280e-02
 -4.63565663e-02 -8.24199840e-02  4.65011187e-02 -1.49024809e-02
 -4.92955409e-02 -2.83506457e-02 -5.03761247e-02  1.19583860e-01
 -3.69091369e-02  2.93606543e-03 -4.58888337e-03 -4.02080920e-03
  3.93405892e-02 -7.70627856e-02  5.45416027e-02  5.77739030e-02
  1.21012650e-01  4.74297628e-02 -4.11825255e-02 -3.13627720e-03
 -2.95655057e-02 -8.36583525e-02  8.02561864e-02  3.67840468e-33
  1.64300017e-02 -1.21816052e-02  4.82879626e-03  4.44531962e-02
  3.26807201e-02  5.85251041e-02 -2.04380620e-02  4.09209616e-02
 -5.78411147e-02 -6.28012512e-03 -3.97665799e-02 -2.25801468e-02
  8.51690695e-02 -3.67023498e-02 -6.77812174e-02 -1.11198425e-02
  7.44573474e-02  6.13716729e-02  6.15863949e-02 -3.15586403e-02
  4.02381420e-02 -3.94553319e-02  5.49843796e-02  8.38601962e-02
  9.31701250e-03  2.39202511e-02 -1.24995643e-03  5.63183427e-02
 -1.06911451e-01 -1.37899583e-02  1.65288970e-01  2.83257551e-02
 -4.76261750e-02  3.03856693e-02  8.46380070e-02 -3.94400349e-03
  2.73395665e-02 -4.44801431e-03 -1.69878192e-02 -2.05643028e-02
  4.94396489e-04 -3.18789706e-02  8.14871192e-02 -3.67190619e-03
 -6.55231103e-02 -1.82076767e-02  8.17393214e-02  3.21654640e-02
  1.69528592e-02  7.97707811e-02 -7.27236345e-02  1.21088261e-02
 -4.51572612e-02 -6.20848574e-02 -2.66867578e-02  4.52238545e-02
 -1.77052915e-02  3.27427872e-02 -6.05126955e-02 -5.62087186e-02
  1.56068178e-02  2.58918572e-02 -8.06717947e-03 -2.50333324e-02
  3.36575299e-03  4.90202243e-03 -3.07990275e-02 -4.15623374e-02
  1.25114828e-01 -2.88871005e-02  1.12448982e-03 -1.85887795e-02
  9.44929197e-02 -7.21889315e-03  1.14563704e-02  4.00713012e-02
 -6.48421422e-02 -1.46075792e-03 -3.30206826e-02 -7.81157464e-02
 -1.55864106e-02 -2.05724686e-02 -3.69323604e-02  4.24948111e-02
  1.11607507e-01  2.51633562e-02 -1.21664964e-02  3.95834036e-02
  6.79257661e-02  9.82570797e-02 -4.33730148e-02  1.62677150e-02
  2.34405082e-02 -2.30899118e-02  4.77189291e-03 -3.84573667e-33
 -1.96199175e-02  5.84197342e-02 -3.89318354e-02 -3.18542346e-02
  3.90004069e-02 -5.51344175e-03  2.67372243e-02 -5.52389026e-03
 -3.25876176e-02  4.63811383e-02 -2.77081765e-02 -8.98286162e-05
  5.09403320e-03 -1.62337106e-02  5.82209565e-02  8.62455145e-02
  2.80450620e-02 -8.41767564e-02  3.58890719e-03  6.02443283e-03
  3.48560512e-03  1.11438021e-01  3.14540230e-03  9.16625466e-03
 -2.94531267e-02  6.94884583e-02 -3.52982245e-02 -3.30294669e-02
 -4.37980779e-02 -1.73701104e-02 -7.90792182e-02 -3.42375152e-02
 -5.48576787e-02  8.92923772e-02  4.06499319e-02 -1.66524976e-01
  7.06920400e-02  5.17667048e-02  1.96457319e-02  3.82628143e-02
  3.02805826e-02 -7.04175606e-02  1.34374537e-02 -3.44406180e-02
  4.15015966e-02 -5.47916889e-02 -1.53837614e-02  8.19046646e-02
  5.08552743e-03 -5.72993346e-02 -4.39469852e-02 -1.06587462e-01
 -1.35531366e-01  2.61983592e-02 -1.45499781e-02 -2.27428153e-02
  3.93728241e-02 -1.19472705e-01  7.41800070e-02  4.58166227e-02
 -4.42046076e-02 -9.47753713e-02  6.80195615e-02  4.84262593e-02
  2.12450009e-02 -6.57621548e-02  6.76846248e-04 -3.25832367e-02
  5.13466671e-02 -8.16399790e-03 -1.09532468e-01  2.07226351e-02
  7.02479705e-02 -1.12017468e-01 -3.27966642e-03 -2.12570969e-02
 -7.38344062e-03 -1.07991539e-01  5.51941134e-02  2.88730264e-02
 -4.86697182e-02 -1.23246331e-02  3.32042426e-02 -2.50691157e-02
  6.60031149e-03 -3.21413651e-02 -1.97548373e-03  2.83667669e-02
 -6.65865513e-03 -5.42496145e-02 -2.63286978e-02 -6.51806686e-03
  1.19941272e-02 -3.43182660e-03 -7.67317638e-02 -4.54916602e-08
 -5.36189936e-02  1.71897076e-02  2.72064973e-02 -4.07547271e-03
  9.42534581e-03 -1.42506152e-01  2.69524623e-02  3.96224149e-02
  8.51464865e-04 -3.25090066e-02  4.63504046e-02  4.95120026e-02
  1.10945627e-01  9.25737247e-03  5.88434935e-02 -4.13745567e-02
 -9.88992862e-03  9.94116813e-03 -4.70462479e-02  1.49487648e-02
  1.09620029e-02 -2.57738885e-02  1.04325823e-02  3.07617188e-02
  1.18937843e-01 -1.96972750e-02 -1.47927913e-03 -2.29073362e-03
  9.01938230e-02  5.69461919e-02 -3.86919715e-02  6.56517968e-02
  6.45704791e-02  1.73837773e-03 -3.92443314e-02 -5.28650656e-02
  2.00656448e-02 -4.06299606e-02  5.62327467e-02  6.22133687e-02
  1.29512578e-01  1.11828682e-04  1.48110753e-02  3.89410183e-02
  8.23151693e-02 -1.34142069e-02  3.66352573e-02 -6.77388608e-02
  3.88112515e-02 -1.18683865e-02 -4.50879000e-02 -4.39397916e-02
  2.95301769e-02 -7.92803317e-02 -4.99785542e-02 -7.44938850e-02
  1.84749756e-02 -6.53239191e-02  2.28843093e-02  5.67567274e-02
 -2.37501226e-02 -2.22008210e-02 -2.99614239e-02 -5.10494150e-02]"
